FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 17 BE LJMP  _Keypad_GPIO_ISR   (0145)     ljmp _Keypad_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0E 32 LJMP  _ADCINC_ADConversion_ISR(0149)     ljmp	_ADCINC_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 07 FD LJMP  _TempBuf_ISR       (0153)     ljmp	_TempBuf_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 06 AB LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 AC LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 07 FE LJMP  _PWM8_ISR          (0165)     ljmp	_PWM8_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [currentView+64],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [currentView+65],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 06 34 LCALL 0x0634             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 05    MOV   A,0x5              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 1F    MOV   X,0x1F             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 A2    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 A2    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 A2    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 A1    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F A2    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 A2 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A A1    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 A1    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F A2    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 A2 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A A1    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 1D A5 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
052F: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_rtc_Bank1
                                        (0019) export LoadConfigTBL_rtc_Bank0
                                        (0020) export LoadConfigTBL_rtc_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_rtc_Bank0:
                                        (0023) ;  Instance name ADCINC, User Module ADCINC
                                        (0024) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0025) 	db		88h, 90h		;ADCINC_AtoDcr0(ASC12CR0)
                                        (0026) 	db		89h, 00h		;ADCINC_AtoDcr1(ASC12CR1)
                                        (0027) 	db		8ah, 60h		;ADCINC_AtoDcr2(ASC12CR2)
                                        (0028) 	db		8bh, f0h		;ADCINC_AtoDcr3(ASC12CR3)
                                        (0029) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0030) 	db		23h, 00h		;ADCINC_PWMcr0(DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADCINC_PWMdr1(DBB00DR1)
                                        (0032) 	db		22h, 01h		;ADCINC_PWMdr2(DBB00DR2)
                                        (0033) ;  Instance name I2Cm, User Module I2Cm
                                        (0034) ;  Instance name LCD, User Module LCD
                                        (0035) ;  Instance name PGA, User Module PGA
                                        (0036) ;       Instance name PGA, Block Name GAIN(ACB02)
                                        (0037) 	db		79h, d6h		;PGA_GAIN_CR0(ACB02CR0)
                                        (0038) 	db		7ah, 21h		;PGA_GAIN_CR1(ACB02CR1)
                                        (0039) 	db		7bh, 20h		;PGA_GAIN_CR2(ACB02CR2)
                                        (0040) 	db		78h, 00h		;PGA_GAIN_CR3(ACB02CR3)
                                        (0041) ;  Instance name PWM8, User Module PWM8
                                        (0042) ;       Instance name PWM8, Block Name PWM8(DBB10)
                                        (0043) 	db		33h, 00h		;PWM8_CONTROL_REG(DBB10CR0)
                                        (0044) 	db		31h, 06h		;PWM8_PERIOD_REG(DBB10DR1)
                                        (0045) 	db		32h, 03h		;PWM8_COMPARE_REG(DBB10DR2)
                                        (0046) ;  Instance name TempBuf, User Module DigBuf
                                        (0047) ;       Instance name TempBuf, Block Name DigBuf(DBB01)
                                        (0048) 	db		27h, 03h		;TempBuf_CONTROL_REG(DBB01CR0)
                                        (0049) 	db		25h, 00h		;TempBuf_DATA_1_REG(DBB01DR1)
                                        (0050) 	db		26h, 00h		;TempBuf_DATA_2_REG(DBB01DR2)
                                        (0051) ;  Instance name UART, User Module UART
                                        (0052) ;       Instance name UART, Block Name RX(DCB03)
                                        (0053) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0054) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0055) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0056) ;       Instance name UART, Block Name TX(DCB02)
                                        (0057) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0058) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0059) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0060) ;  Global Register values Bank 0
                                        (0061) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0062) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0063) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0064) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0065) 	db		e6h, 04h		; DecimatorControl_0 register (DEC_CR0)
                                        (0066) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0067) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0068) 	db		b0h, 10h		; Row_0_InputMux register (RDI0RI)
                                        (0069) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0070) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0071) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0072) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0073) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0074) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0075) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0076) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0077) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0078) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0079) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0080) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0081) 	db		beh, 01h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0082) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0083) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0084) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0085) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0086) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0087) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0088) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0089) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0090) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0091) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0092) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0093) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0094) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0095) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0096) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0097) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0098) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0099) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0100) 	db		ffh
                                        (0101) LoadConfigTBL_rtc_Bank1:
                                        (0102) ;  Instance name ADCINC, User Module ADCINC
                                        (0103) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0104) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0105) 	db		20h, 31h		;ADCINC_PWMfn(DBB00FN)
                                        (0106) 	db		21h, 16h		;ADCINC_PWMsl(DBB00IN)
                                        (0107) 	db		22h, 40h		;ADCINC_PWMos(DBB00OU)
                                        (0108) ;  Instance name I2Cm, User Module I2Cm
                                        (0109) ;  Instance name LCD, User Module LCD
                                        (0110) ;  Instance name PGA, User Module PGA
                                        (0111) ;       Instance name PGA, Block Name GAIN(ACB02)
                                        (0112) ;  Instance name PWM8, User Module PWM8
                                        (0113) ;       Instance name PWM8, Block Name PWM8(DBB10)
                                        (0114) 	db		30h, 21h		;PWM8_FUNC_REG(DBB10FN)
                                        (0115) 	db		31h, 17h		;PWM8_INPUT_REG(DBB10IN)
                                        (0116) 	db		32h, 46h		;PWM8_OUTPUT_REG(DBB10OU)
                                        (0117) ;  Instance name TempBuf, User Module DigBuf
                                        (0118) ;       Instance name TempBuf, Block Name DigBuf(DBB01)
                                        (0119) 	db		24h, 22h		;TempBuf_FUNC_REG(DBB01FN)
                                        (0120) 	db		25h, 67h		;TempBuf_INPUT_REG(DBB01IN)
                                        (0121) 	db		26h, 45h		;TempBuf_OUTPUT_REG(DBB01OU)
                                        (0122) ;  Instance name UART, User Module UART
                                        (0123) ;       Instance name UART, Block Name RX(DCB03)
                                        (0124) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0125) 	db		2dh, e1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0126) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0127) ;       Instance name UART, Block Name TX(DCB02)
                                        (0128) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0129) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0130) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0131) ;  Global Register values Bank 1
                                        (0132) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0133) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0134) 	db		60h, 10h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0135) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0136) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0137) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0138) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0139) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0140) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0141) 	db		d3h, 80h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0142) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0143) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0144) 	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0145) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0146) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0147) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0148) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0149) 	db		e7h, 48h		; Type2Decimator_Control register (DEC_CR2)
                                        (0150) 	db		ffh
                                        (0151) AREA psoc_config(rom, rel)
                                        (0152) LoadConfigTBL_rtc_Ordered:
                                        (0153) ;  Ordered Global Register values
                                        (0154) 	M8C_SetBank0
0531: 62 00 00 MOV   REG[0x0],0x0       (0155) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0534: 71 10    OR    F,0x10             
                                        (0156) 	M8C_SetBank1
0536: 62 00 04 MOV   REG[0x0],0x4       (0157) 	mov	reg[00h], 04h		; Port_0_DriveMode_0 register (PRT0DM0)
0539: 62 01 FB MOV   REG[0x1],0xFB      (0158) 	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
053C: 70 EF    AND   F,0xEF             
                                        (0159) 	M8C_SetBank0
053E: 62 03 B8 MOV   REG[0x3],0xB8      (0160) 	mov	reg[03h], b8h		; Port_0_DriveMode_2 register (PRT0DM2)
0541: 62 02 44 MOV   REG[0x2],0x44      (0161) 	mov	reg[02h], 44h		; Port_0_GlobalSelect register (PRT0GS)
0544: 71 10    OR    F,0x10             
                                        (0162) 	M8C_SetBank1
0546: 62 02 00 MOV   REG[0x2],0x0       (0163) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0549: 62 03 00 MOV   REG[0x3],0x0       (0164) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
054C: 70 EF    AND   F,0xEF             
                                        (0165) 	M8C_SetBank0
054E: 62 01 00 MOV   REG[0x1],0x0       (0166) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0551: 62 04 00 MOV   REG[0x4],0x0       (0167) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0554: 71 10    OR    F,0x10             
                                        (0168) 	M8C_SetBank1
0556: 62 04 00 MOV   REG[0x4],0x0       (0169) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0559: 62 05 FF MOV   REG[0x5],0xFF      (0170) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
055C: 70 EF    AND   F,0xEF             
                                        (0171) 	M8C_SetBank0
055E: 62 07 FF MOV   REG[0x7],0xFF      (0172) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0561: 62 06 00 MOV   REG[0x6],0x0       (0173) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0564: 71 10    OR    F,0x10             
                                        (0174) 	M8C_SetBank1
0566: 62 06 00 MOV   REG[0x6],0x0       (0175) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0569: 62 07 00 MOV   REG[0x7],0x0       (0176) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
056C: 70 EF    AND   F,0xEF             
                                        (0177) 	M8C_SetBank0
056E: 62 05 00 MOV   REG[0x5],0x0       (0178) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0571: 62 08 00 MOV   REG[0x8],0x0       (0179) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0574: 71 10    OR    F,0x10             
                                        (0180) 	M8C_SetBank1
0576: 62 08 FF MOV   REG[0x8],0xFF      (0181) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0579: 62 09 00 MOV   REG[0x9],0x0       (0182) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
057C: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
057E: 62 0B 00 MOV   REG[0xB],0x0       (0184) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0581: 62 0A 80 MOV   REG[0xA],0x80      (0185) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0584: 71 10    OR    F,0x10             
                                        (0186) 	M8C_SetBank1
0586: 62 0A 00 MOV   REG[0xA],0x0       (0187) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0589: 62 0B 00 MOV   REG[0xB],0x0       (0188) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
058C: 70 EF    AND   F,0xEF             
                                        (0189) 	M8C_SetBank0
058E: 62 09 00 MOV   REG[0x9],0x0       (0190) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0591: 62 0C 00 MOV   REG[0xC],0x0       (0191) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0594: 71 10    OR    F,0x10             
                                        (0192) 	M8C_SetBank1
0596: 62 0C 00 MOV   REG[0xC],0x0       (0193) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0599: 62 0D 00 MOV   REG[0xD],0x0       (0194) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
059C: 70 EF    AND   F,0xEF             
                                        (0195) 	M8C_SetBank0
059E: 62 0F 00 MOV   REG[0xF],0x0       (0196) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
05A1: 62 0E 00 MOV   REG[0xE],0x0       (0197) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
05A4: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
05A6: 62 0E 00 MOV   REG[0xE],0x0       (0199) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
05A9: 62 0F 00 MOV   REG[0xF],0x0       (0200) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
05AC: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
05AE: 62 0D 00 MOV   REG[0xD],0x0       (0202) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
05B1: 62 10 00 MOV   REG[0x10],0x0      (0203) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
05B4: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
05B6: 62 10 00 MOV   REG[0x10],0x0      (0205) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
05B9: 62 11 00 MOV   REG[0x11],0x0      (0206) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
05BC: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
05BE: 62 13 00 MOV   REG[0x13],0x0      (0208) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
05C1: 62 12 00 MOV   REG[0x12],0x0      (0209) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
05C4: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
05C6: 62 12 00 MOV   REG[0x12],0x0      (0211) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
05C9: 62 13 00 MOV   REG[0x13],0x0      (0212) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
05CC: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
05CE: 62 11 00 MOV   REG[0x11],0x0      (0214) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
05D1: 62 14 00 MOV   REG[0x14],0x0      (0215) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
05D4: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
05D6: 62 14 00 MOV   REG[0x14],0x0      (0217) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
05D9: 62 15 00 MOV   REG[0x15],0x0      (0218) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
05DC: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
05DE: 62 17 00 MOV   REG[0x17],0x0      (0220) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
05E1: 62 16 00 MOV   REG[0x16],0x0      (0221) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
05E4: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
05E6: 62 16 00 MOV   REG[0x16],0x0      (0223) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
05E9: 62 17 00 MOV   REG[0x17],0x0      (0224) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
05EC: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
05EE: 62 15 00 MOV   REG[0x15],0x0      (0226) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
05F1: 62 18 00 MOV   REG[0x18],0x0      (0227) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
05F4: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
05F6: 62 18 00 MOV   REG[0x18],0x0      (0229) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
05F9: 62 19 00 MOV   REG[0x19],0x0      (0230) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
05FC: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
05FE: 62 1B 00 MOV   REG[0x1B],0x0      (0232) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0601: 62 1A 00 MOV   REG[0x1A],0x0      (0233) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0604: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
0606: 62 1A 00 MOV   REG[0x1A],0x0      (0235) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0609: 62 1B 00 MOV   REG[0x1B],0x0      (0236) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
060C: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
060E: 62 19 00 MOV   REG[0x19],0x0      (0238) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0611: 62 1C 00 MOV   REG[0x1C],0x0      (0239) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0614: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
0616: 62 1C 00 MOV   REG[0x1C],0x0      (0241) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0619: 62 1D 00 MOV   REG[0x1D],0x0      (0242) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
061C: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
061E: 62 1F 00 MOV   REG[0x1F],0x0      (0244) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0621: 62 1E 00 MOV   REG[0x1E],0x0      (0245) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0624: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
0626: 62 1E 00 MOV   REG[0x1E],0x0      (0247) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0629: 62 1F 00 MOV   REG[0x1F],0x0      (0248) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
062C: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
062E: 62 1D 00 MOV   REG[0x1D],0x0      (0250) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0631: 70 EF    AND   F,0xEF             
                                        (0251) 	M8C_SetBank0
0633: 7F       RET                      (0252) 	ret
                                        (0253) 
                                        (0254) 
                                        (0255) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_rtc
                                        (0026) export _LoadConfig_rtc
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_0_DriveMode_2_SHADE
                                        (0034) export _Port_0_DriveMode_2_SHADE
                                        (0035) export Port_2_Data_SHADE
                                        (0036) export _Port_2_Data_SHADE
                                        (0037) export Port_2_DriveMode_0_SHADE
                                        (0038) export _Port_2_DriveMode_0_SHADE
                                        (0039) export Port_2_DriveMode_1_SHADE
                                        (0040) export _Port_2_DriveMode_1_SHADE
                                        (0041) 
                                        (0042) 
                                        (0043) export NO_SHADOW
                                        (0044) export _NO_SHADOW
                                        (0045) 
                                        (0046) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0047) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0048) 
                                        (0049) AREA psoc_config(rom, rel)
                                        (0050) 
                                        (0051) ;---------------------------------------------------------------------------
                                        (0052) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0053) ;                  parameters handled by boot code, like CPU speed). This
                                        (0054) ;                  function can be called from user code, but typically it
                                        (0055) ;                  is only called from boot.
                                        (0056) ;
                                        (0057) ;       INPUTS: None.
                                        (0058) ;      RETURNS: Nothing.
                                        (0059) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0060) ;               In the large memory model currently only the page
                                        (0061) ;               pointer registers listed below are modified.  This does
                                        (0062) ;               not guarantee that in future implementations of this
                                        (0063) ;               function other page pointer registers will not be
                                        (0064) ;               modified.
                                        (0065) ;          
                                        (0066) ;               Page Pointer Registers Modified: 
                                        (0067) ;               CUR_PP
                                        (0068) ;
                                        (0069) _LoadConfigInit:
                                        (0070)  LoadConfigInit:
                                        (0071)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0072)     
0634: 55 00 00 MOV   [previousSecond|elapsedSeconds],0x0(0073) 	mov		[Port_0_Data_SHADE], 0h
0637: 55 02 04 MOV   [previousSecond|elapsedSeconds+2],0x4(0074) 	mov		[Port_0_DriveMode_0_SHADE], 4h
063A: 55 03 FB MOV   [previousSecond|elapsedSeconds+3],0xFB(0075) 	mov		[Port_0_DriveMode_1_SHADE], fbh
063D: 55 04 B8 MOV   [previousSecond|elapsedSeconds+4],0xB8(0076) 	mov		[Port_0_DriveMode_2_SHADE], b8h
0640: 55 01 00 MOV   [previousSecond|elapsedSeconds+1],0x0(0077) 	mov		[Port_2_Data_SHADE], 0h
0643: 55 05 FF MOV   [previousSecond|elapsedSeconds+5],0xFF(0078) 	mov		[Port_2_DriveMode_0_SHADE], ffh
0646: 55 06 00 MOV   [previousSecond|elapsedSeconds+6],0x0(0079) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0080) 
0649: 7C 06 50 LCALL 0x0650             (0081) 	lcall	LoadConfig_rtc
064C: 7C 05 2F LCALL 0x052F             (0082) 	lcall	LoadConfigTBL_rtc_Ordered
                                        (0083) 
                                        (0084) 
                                        (0085)     RAM_EPILOGUE RAM_USE_CLASS_4
064F: 7F       RET                      (0086)     ret
                                        (0087) 
                                        (0088) ;---------------------------------------------------------------------------
                                        (0089) ; Load Configuration rtc
                                        (0090) ;
                                        (0091) ;    Load configuration registers for rtc.
                                        (0092) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0093) ;
                                        (0094) ;       INPUTS: None.
                                        (0095) ;      RETURNS: Nothing.
                                        (0096) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0097) ;               modified as may the Page Pointer registers!
                                        (0098) ;               In the large memory model currently only the page
                                        (0099) ;               pointer registers listed below are modified.  This does
                                        (0100) ;               not guarantee that in future implementations of this
                                        (0101) ;               function other page pointer registers will not be
                                        (0102) ;               modified.
                                        (0103) ;          
                                        (0104) ;               Page Pointer Registers Modified: 
                                        (0105) ;               CUR_PP
                                        (0106) ;
                                        (0107) _LoadConfig_rtc:
                                        (0108)  LoadConfig_rtc:
                                        (0109)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0110) 
0650: 10       PUSH  X                  (0111) 	push	x
0651: 70 EF    AND   F,0xEF             
                                        (0112)     M8C_SetBank0                    ; Force bank 0
0653: 50 00    MOV   A,0x0              (0113)     mov     a, 0                    ; Specify bank 0
0655: 67       ASR   A                  (0114)     asr     a                       ; Store in carry flag
                                        (0115)                                     ; Load bank 0 table:
0656: 50 02    MOV   A,0x2              (0116)     mov     A, >LoadConfigTBL_rtc_Bank0
0658: 57 EA    MOV   X,0xEA             (0117)     mov     X, <LoadConfigTBL_rtc_Bank0
065A: 7C 06 6B LCALL 0x066B             (0118)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0119) 
065D: 50 01    MOV   A,0x1              (0120)     mov     a, 1                    ; Specify bank 1
065F: 67       ASR   A                  (0121)     asr     a                       ; Store in carry flag
                                        (0122)                                     ; Load bank 1 table:
0660: 50 03    MOV   A,0x3              (0123)     mov     A, >LoadConfigTBL_rtc_Bank1
0662: 57 67    MOV   X,0x67             (0124)     mov     X, <LoadConfigTBL_rtc_Bank1
0664: 7C 06 6B LCALL 0x066B             (0125)     lcall   LoadConfig              ; Load the bank 1 values
0667: 70 EF    AND   F,0xEF             
                                        (0126) 
                                        (0127)     M8C_SetBank0                    ; Force return to bank 0
0669: 20       POP   X                  (0128) 	pop		x
                                        (0129) 
                                        (0130)     RAM_EPILOGUE RAM_USE_CLASS_4
066A: 7F       RET                      (0131)     ret
                                        (0132) 
                                        (0133) 
                                        (0134) 
                                        (0135) 
                                        (0136) ;---------------------------------------------------------------------------
                                        (0137) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0138) ;              pairs. Terminate on address=0xFF.
                                        (0139) ;
                                        (0140) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0141) ;           Flag Register Carry bit encodes the Register Bank
                                        (0142) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0143) ;
                                        (0144) ;  RETURNS: nothing.
                                        (0145) ;
                                        (0146) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0147) ;                X-3 Temporary store for register address
                                        (0148) ;                X-2 LSB of config table address
                                        (0149) ;                X-1 MSB of config table address
                                        (0150) ;
                                        (0151) LoadConfig:
                                        (0152)     RAM_PROLOGUE RAM_USE_CLASS_2
066B: 38 02    ADD   SP,0x2             (0153)     add     SP, 2                   ; Set up local vars
066D: 10       PUSH  X                  (0154)     push    X                       ; Save config table address on stack
066E: 08       PUSH  A                  (0155)     push    A
066F: 4F       MOV   X,SP               (0156)     mov     X, SP
0670: 56 FC 00 MOV   [X-4],0x0          (0157)     mov     [X-4], 0                ; Set default Destination to Bank 0
0673: D0 04    JNC   0x0678             (0158)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0675: 56 FC 01 MOV   [X-4],0x1          (0159)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0160) .BankSelectSaved:
0678: 18       POP   A                  (0161)     pop     A
0679: 20       POP   X                  (0162)     pop     X
067A: 70 EF    AND   F,0xEF             
067C: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0163) 
                                        (0164) LoadConfigLp:
                                        (0165)     M8C_SetBank0                    ; Switch to bank 0
                                        (0166)     M8C_ClearWDT                    ; Clear the watchdog for long inits
067F: 10       PUSH  X                  (0167)     push    X                       ; Preserve the config table address
0680: 08       PUSH  A                  (0168)     push    A
0681: 28       ROMX                     (0169)     romx                            ; Load register address from table
0682: 39 FF    CMP   A,0xFF             (0170)     cmp     A, END_CONFIG_TABLE     ; End of table?
0684: A0 1F    JZ    0x06A4             (0171)     jz      EndLoadConfig           ;   Yes, go wrap it up
0686: 4F       MOV   X,SP               (0172)     mov     X, SP                   ;
0687: 48 FC 01 TST   [X-4],0x1          (0173)     tst     [X-4], 1                ; Loading IO Bank 1?
068A: A0 03    JZ    0x068E             (0174)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
068C: 71 10    OR    F,0x10             
                                        (0175)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0176) .IOBankNowSet:
068E: 54 FD    MOV   [X-3],A            (0177)     mov     [X-3], A                ; Stash the register address
0690: 18       POP   A                  (0178)     pop     A                       ; Retrieve the table address
0691: 20       POP   X                  (0179)     pop     X
0692: 75       INC   X                  (0180)     inc     X                       ; Advance to the data byte
0693: 09 00    ADC   A,0x0              (0181)     adc     A, 0
0695: 10       PUSH  X                  (0182)     push    X                       ; Save the config table address again
0696: 08       PUSH  A                  (0183)     push    A
0697: 28       ROMX                     (0184)     romx                            ; load config data from the table
0698: 4F       MOV   X,SP               (0185)     mov     X, SP                   ; retrieve the register address
0699: 59 FD    MOV   X,[X-3]            (0186)     mov     X, [X-3]
069B: 61 00    MOV   REG[X+0x0],A       (0187)     mov     reg[X], A               ; Configure the register
069D: 18       POP   A                  (0188)     pop     A                       ; retrieve the table address
069E: 20       POP   X                  (0189)     pop     X
069F: 75       INC   X                  (0190)     inc     X                       ; advance to next table entry
06A0: 09 00    ADC   A,0x0              (0191)     adc     A, 0
06A2: 8F D7    JMP   0x067A             (0192)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0193) EndLoadConfig:
06A4: 38 FC    ADD   SP,0xFC            (0194)     add     SP, -4
06A6: 70 3F    AND   F,0x3F             
06A8: 71 C0    OR    F,0xC0             
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_2
06AA: 7F       RET                      (0196)     ret
                                        (0197) 
                                        (0198) AREA InterruptRAM(ram, rel)
                                        (0199) 
                                        (0200) NO_SHADOW:
                                        (0201) _NO_SHADOW:
                                        (0202) ; write only register shadows
                                        (0203) _Port_0_Data_SHADE:
                                        (0204) Port_0_Data_SHADE:	BLK	1
                                        (0205) _Port_2_Data_SHADE:
                                        (0206) Port_2_Data_SHADE:	BLK	1
                                        (0207) _Port_0_DriveMode_0_SHADE:
                                        (0208) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0209) _Port_0_DriveMode_1_SHADE:
                                        (0210) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0211) _Port_0_DriveMode_2_SHADE:
                                        (0212) Port_0_DriveMode_2_SHADE:	BLK	1
                                        (0213) _Port_2_DriveMode_0_SHADE:
                                        (0214) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0215) _Port_2_DriveMode_1_SHADE:
                                        (0216) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0217) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
06AB: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
06AC: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
06AD: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
06B0: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
06B3: 7F       RET                      (0182)    ret
06B4: 41 E1 FB AND   REG[0xE1],0xFB     
06B7: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
06BA: 7F       RET                      (0214)    ret
06BB: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
06BD: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
06BF: A0 07    JZ    0x06C7             (0249)    jz    .SetModeRegEmpty
06C1: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
06C4: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
06C6: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
06C7: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
06CA: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
06CC: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
06CD: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
06CF: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
06D1: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
06D3: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
06D4: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
06D7: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
06DA: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
06DB: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
06DD: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
06DE: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
06E0: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
06E1: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
06E3: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
06E4: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
06E6: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
06E7: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
06E9: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
06EB: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
06ED: A0 06    JZ    0x06F4             (0492)    jz   .SetTxCmpMode
                                        (0493) 
06EF: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
06F2: 80 04    JMP   0x06F7             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
06F4: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
06F7: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
06F9: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
06FA: 08       PUSH  A                  (0536)    push A
06FB: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
06FD: A0 06    JZ    0x0704             (0538)    jz   .DisRxInt
06FF: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0702: 80 04    JMP   0x0707             (0541)    jmp  .CheckTxInt
0704: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0707: 18       POP   A                  (0547)    pop  A
0708: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
070A: A0 06    JZ    0x0711             (0549)    jz   .DisTxInt
070C: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
070F: 80 04    JMP   0x0714             (0552)    jmp  .End_IntCntl
0711: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0714: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0725: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0726: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0727: 67       ASR   A                  (0603)    asr   A
0728: 67       ASR   A                  (0604)    asr   A
0729: 67       ASR   A                  (0605)    asr   A
072A: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
072C: FF E7    INDEX 0x0715             (0607)    index UART_HEX_STR                  ; Get Hex value
072E: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0730: 18       POP   A                  (0609)    pop   A                             ; Restore value
0731: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0733: FF E0    INDEX 0x0715             (0611)    index UART_HEX_STR                  ; Get Hex value
0735: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0737: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0738: 4B       SWAP  A,X                (0645)    swap  A,X
0739: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
073B: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
073C: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
073E: 7F       RET                      (0650)    ret
073F: 49 2B 10 TST   REG[0x2B],0x10     
0742: AF FC    JZ    _UART_PutChar      
0744: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0746: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0747: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
074A: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
074C: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
074E: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
074F: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0751: 08       PUSH  A                  (0756)    push A
0752: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0754: B0 04    JNZ   0x0759             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0756: 18       POP   A                  (0759)    pop  A
0757: 80 0B    JMP   0x0763             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0759: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
075B: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
075C: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
075D: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
075F: B0 03    JNZ   0x0763             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0761: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0762: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0763: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0765: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0766: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0768: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
076A: 08       PUSH  A                  (0819)    push A
076B: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
076D: B0 07    JNZ   0x0775             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
076F: 18       POP   A                  (0822)    pop  A
0770: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0772: 4B       SWAP  A,X                (0824)    swap A,X
0773: 80 07    JMP   0x077B             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0775: 18       POP   A                  (0828)    pop  A
0776: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0778: 4B       SWAP  A,X                (0830)    swap A,X
0779: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
077B: 7F       RET                      (0836)    ret
077C: 70 BF    AND   F,0xBF             
077E: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0780: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0782: A0 06    JZ    0x0789             (0872)    jz    End_PutString                           ; Check for end of string
0784: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0786: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0787: 8F F8    JMP   0x0780             (0875)    jmp   .PutStringLoop                          ; Get next character
0789: 70 3F    AND   F,0x3F             
078B: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
078D: 7F       RET                      (0879)    ret
078E: 70 BF    AND   F,0xBF             
0790: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0793: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0794: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0796: A0 1A    JZ    0x07B1             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0798: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
079A: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
079C: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
079E: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
07A0: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
07A2: 49 2B 10 TST   REG[0x2B],0x10     
07A5: AF FC    JZ    0x07A2             
07A7: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
07A9: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
07AA: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
07AD: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
07AF: 8F E4    JMP   0x0794             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
07B1: 70 3F    AND   F,0x3F             
07B3: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
07B5: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
07B6: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
07B7: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
07BA: B0 06    JNZ   0x07C1             (0980)    jnz   .CW_WRITEIT
07BC: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
07BF: A0 1D    JZ    0x07DD             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
07C1: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
07C2: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
07C4: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
07C6: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
07C7: 49 2B 10 TST   REG[0x2B],0x10     
07CA: AF FC    JZ    0x07C7             
07CC: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
07CE: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
07CF: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
07D2: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
07D5: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
07D8: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
07DB: 8F DB    JMP   0x07B7             (0995)    jmp   .CW_Loop
07DD: 70 3F    AND   F,0x3F             
07DF: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
07E1: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
07E2: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
07E3: 10       PUSH  X                  (1030)    push  X
07E4: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
07E5: A0 0B    JZ    0x07F1             (1032)    jz    .End_CPutString
07E7: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
07E9: 20       POP   X                  (1034)    pop   X
07EA: 18       POP   A                  (1035)    pop   A
07EB: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
07EC: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
07EE: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
07EF: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
07F1: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
07F3: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
07F4: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
07F6: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
07F8: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
07FA: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
07FC: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\tempbufint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TempBufINT.asm
                                        (0004) ;;   Version: 1.3, Updated on 2013/5/19 at 10:43:26
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigBuf Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) 
                                        (0016) ;-----------------------------------------------
                                        (0017) ;  Global Symbols
                                        (0018) ;-----------------------------------------------
                                        (0019) export  _TempBuf_ISR
                                        (0020) 
                                        (0021) 
                                        (0022) AREA InterruptRAM (RAM,REL,CON)
                                        (0023) 
                                        (0024) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0025) ;---------------------------------------------------
                                        (0026) ; Insert your custom declarations below this banner
                                        (0027) ;---------------------------------------------------
                                        (0028) 
                                        (0029) ;------------------------
                                        (0030) ; Includes
                                        (0031) ;------------------------
                                        (0032) 
                                        (0033) 	
                                        (0034) ;------------------------
                                        (0035) ;  Constant Definitions
                                        (0036) ;------------------------
                                        (0037) 
                                        (0038) 
                                        (0039) ;------------------------
                                        (0040) ; Variable Allocation
                                        (0041) ;------------------------
                                        (0042) 
                                        (0043) 
                                        (0044) ;---------------------------------------------------
                                        (0045) ; Insert your custom declarations above this banner
                                        (0046) ;---------------------------------------------------
                                        (0047) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: _TempBuf_ISR
                                        (0054) ;
                                        (0055) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0056) ;
                                        (0057) ;-----------------------------------------------------------------------------
                                        (0058) ;
                                        (0059) 
                                        (0060) _TempBuf_ISR:
                                        (0061) 
                                        (0062)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0063)    ;---------------------------------------------------
                                        (0064)    ; Insert your custom assembly code below this banner
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ;   NOTE: interrupt service routines must preserve
                                        (0067)    ;   the values of the A and X CPU registers.
                                        (0068)    
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
07FD: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file TempBufINT.asm
FILE: lib\pwm8int.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07FE: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8INT.asm
FILE: lib\pwm8.asm                      (0001) ;;*****************************************************************************
07FF: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_EnableInt
                                        (0030) export _PWM8_EnableInt
                                        (0031) export  PWM8_DisableInt
                                        (0032) export _PWM8_DisableInt
                                        (0033) export  PWM8_Start
                                        (0034) export _PWM8_Start
                                        (0035) export  PWM8_Stop
                                        (0036) export _PWM8_Stop
                                        (0037) export  PWM8_WritePeriod
                                        (0038) export _PWM8_WritePeriod
                                        (0039) export  PWM8_WritePulseWidth
                                        (0040) export _PWM8_WritePulseWidth
                                        (0041) export  PWM8_bReadPulseWidth
                                        (0042) export _PWM8_bReadPulseWidth
                                        (0043) export  PWM8_bReadCounter
                                        (0044) export _PWM8_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA rtc_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_EnableInt:
                                        (0091) _PWM8_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0802: 7F       RET                      (0095)    ret
0803: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_DisableInt:
                                        (0119) _PWM8_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0806: 7F       RET                      (0123)    ret
0807: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_Start:
                                        (0148) _PWM8_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
080A: 7F       RET                      (0152)    ret
080B: 41 33 FE AND   REG[0x33],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_Stop:
                                        (0176) _PWM8_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
080E: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_WritePeriod:
                                        (0206) _PWM8_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
080F: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[PWM8_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0811: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_WritePulseWidth:
                                        (0233) _PWM8_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0812: 60 32    MOV   REG[0x32],A        (0235)    mov   reg[PWM8_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0814: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_bReadPulseWidth:
                                        (0260) _PWM8_bReadPulseWidth:
                                        (0261)  bPWM8_ReadPulseWidth:                           ; this name deprecated
                                        (0262) _bPWM8_ReadPulseWidth:                           ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0815: 5D 32    MOV   A,REG[0x32]        (0264)    mov   A, reg[PWM8_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0817: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_bReadCounter:
                                        (0293) _PWM8_bReadCounter:
                                        (0294)  bPWM8_ReadCounter:                              ; this name deprecated
                                        (0295) _bPWM8_ReadCounter:                              ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0818: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0819: 5D 32    MOV   A,REG[0x32]        (0304)    mov   A, reg[PWM8_COMPARE_REG]                ; Save the Compare register on the stack
081B: 08       PUSH  A                  (0305)    push  A                                       ;
081C: 41 33 FE AND   REG[0x33],0xFE     
081F: 71 10    OR    F,0x10             
                                        (0306)    PWM8_Stop_M                                   ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0821: 5D 31    MOV   A,REG[0x31]        (0308)    mov   A, reg[PWM8_INPUT_REG]                  ; save the clock input setting
0823: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0824: 62 31 00 MOV   REG[0x31],0x0      (0311)    mov   reg[PWM8_INPUT_REG], INPUT_REG_NULL
0827: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0829: 5D 30    MOV   A,REG[0x30]        (0314)    mov   A, reg[PWM8_COUNTER_REG]                ; DR2 <- DR0
082B: 5D 32    MOV   A,REG[0x32]        (0315)    mov   A, reg[PWM8_COMPARE_REG]                ; Stash the Count on the stack
082D: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
082E: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0830: 60 32    MOV   REG[0x32],A        (0318)    mov   reg[PWM8_COMPARE_REG], A
0832: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0834: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0836: 60 31    MOV   REG[0x31],A        (0321)    mov   reg[PWM8_INPUT_REG], A                  ;
0838: 70 EF    AND   F,0xEF             
083A: 43 33 01 OR    REG[0x33],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_Start_M                                  ;   then re-enable the PWM.
083D: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
083E: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0840: 70 3F    AND   F,0x3F             
0842: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0844: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0845: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0847: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0848: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0849: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
084B: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
084D: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
084F: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
0851: 18       POP   A                  (0124)    pop  A
0852: 70 3F    AND   F,0x3F             
0854: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0856: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0857: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0859: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
085A: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
085B: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
085D: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
085F: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0862: B0 0E    JNZ   0x0871             (0164)    jnz  .SETHIGHGAIN
0864: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
0867: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0869: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
086B: 18       POP   A                  (0168)    pop  A
086C: 70 3F    AND   F,0x3F             
086E: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0870: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0871: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0874: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0876: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
0878: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
087B: 18       POP   A                  (0177)    pop  A
087C: 70 3F    AND   F,0x3F             
087E: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0880: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0881: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0884: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0885: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0886: 10       PUSH  X                  (0209)     push  X
0887: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0888: B0 04    JNZ   0x088D             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
088A: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
088B: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
088C: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
088D: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
088F: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0890: 18       POP   A                  (0220)     pop   A
0891: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0892: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0894: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0895: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
08A7: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
08A8: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
08A9: 67       ASR   A                  (0262)     asr   A
08AA: 67       ASR   A                  (0263)     asr   A
08AB: 67       ASR   A                  (0264)     asr   A
08AC: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
08AE: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
08B0: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
08B2: 18       POP   A                  (0268)     pop   A                            ; Restore value
08B3: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
08B5: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
08B7: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
08B9: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
08BA: 4B       SWAP  A,X                (0305)     swap  A,X
08BB: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
08BD: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
08BE: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
08C0: 7F       RET                      (0310)     ret
08C1: 70 BF    AND   F,0xBF             
08C3: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
08C5: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
08C7: A0 06    JZ    0x08CE             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
08C9: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
08CB: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
08CC: 8F F8    JMP   0x08C5             (0351)     jmp   .Loop_PrString               ; Go get next character
08CE: 70 3F    AND   F,0x3F             
08D0: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
08D2: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
08D3: 90 65    CALL  0x093A             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
08D5: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
08D6: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
08D7: 67       ASR   A                  (0390)     asr   A
08D8: 67       ASR   A                  (0391)     asr   A
08D9: 67       ASR   A                  (0392)     asr   A
08DA: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
08DC: 90 3B    CALL  0x0919             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
08DE: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
08DF: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
08E1: 40       NOP                      (0397)     nop
08E2: 40       NOP                      (0398)     nop
08E3: 40       NOP                      (0399)     nop
08E4: 90 33    CALL  0x0919             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
08E6: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
08E7: 90 51    CALL  0x093A             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
08E9: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
08EA: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
08EB: 67       ASR   A                  (0436)     asr   A
08EC: 67       ASR   A                  (0437)     asr   A
08ED: 67       ASR   A                  (0438)     asr   A
08EE: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
08F0: 90 09    CALL  0x08FB             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
08F2: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
08F3: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
08F5: 40       NOP                      (0443)     nop
08F6: 40       NOP                      (0444)     nop
08F7: 40       NOP                      (0445)     nop
08F8: 90 01    CALL  0x08FB             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
08FA: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
08FB: 08       PUSH  A                  (0477)     push  A
08FC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
08FF: 26 01 80 AND   [previousSecond|elapsedSeconds+1],0x80(0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0902: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0480)     mov   A,[Port_2_Data_SHADE]
0904: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0906: 18       POP   A                  (0483)     pop   A
0907: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0909: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
090B: 2A 01    OR    A,[previousSecond|elapsedSeconds+1](0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
090D: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
090F: 53 01    MOV   [previousSecond|elapsedSeconds+1],A(0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0911: 40       NOP                      (0489)     nop
0912: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0914: 53 01    MOV   [previousSecond|elapsedSeconds+1],A(0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0916: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0918: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0919: 08       PUSH  A                  (0523)     push  A
091A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
091D: 26 01 80 AND   [previousSecond|elapsedSeconds+1],0x80(0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0920: 2E 01 20 OR    [previousSecond|elapsedSeconds+1],0x20(0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0923: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0527)     mov   A,[Port_2_Data_SHADE]
0925: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0927: 18       POP   A                  (0530)     pop   A
0928: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
092A: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
092C: 2A 01    OR    A,[previousSecond|elapsedSeconds+1](0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
092E: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0930: 53 01    MOV   [previousSecond|elapsedSeconds+1],A(0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0932: 40       NOP                      (0536)     NOP
0933: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0935: 53 01    MOV   [previousSecond|elapsedSeconds+1],A(0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0937: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0939: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
093A: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
093B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
093E: 26 01 80 AND   [previousSecond|elapsedSeconds+1],0x80(0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0941: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0574)     mov   A,[Port_2_Data_SHADE]
0943: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0945: 26 05 F0 AND   [previousSecond|elapsedSeconds+5],0xF0(0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0948: 51 05    MOV   A,[previousSecond|elapsedSeconds+5](0578)     mov   A,[Port_2_DriveMode_0_SHADE]
094A: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
094C: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
094E: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0950: 2E 01 40 OR    [previousSecond|elapsedSeconds+1],0x40(0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0953: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0584)     mov   A,[Port_2_Data_SHADE]
0955: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0957: 40       NOP                      (0586)     NOP
                                        (0587) 
0958: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0959: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
095B: 2E 01 50 OR    [previousSecond|elapsedSeconds+1],0x50(0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
095E: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0593)     mov   A,[Port_2_Data_SHADE]
0960: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0962: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0963: 40       NOP                      (0597)     nop
0964: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0966: 08       PUSH  A                  (0610)     push  A
0967: 26 01 C0 AND   [previousSecond|elapsedSeconds+1],0xC0(0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
096A: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0612)     mov   A,[Port_2_Data_SHADE]
096C: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
096E: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
096F: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0970: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0971: 2E 01 50 OR    [previousSecond|elapsedSeconds+1],0x50(0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0974: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0620)     mov   A,[Port_2_Data_SHADE]
0976: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0978: 40       NOP                      (0623)     nop
0979: 40       NOP                      (0624)     nop
                                        (0625) 
097A: 26 01 C0 AND   [previousSecond|elapsedSeconds+1],0xC0(0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
097D: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0627)     mov   A,[Port_2_Data_SHADE]
097F: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0981: 18       POP   A                  (0630)     pop   A
0982: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0984: A0 04    JZ    0x0989             (0633)     jz    .UNLOCK
0986: 79       DEC   X                  (0634)     dec   X
0987: BF D3    JNZ   0x095B             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0989: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
098A: 2E 05 7F OR    [previousSecond|elapsedSeconds+5],0x7F(0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
098D: 51 05    MOV   A,[previousSecond|elapsedSeconds+5](0640)     mov   A,[Port_2_DriveMode_0_SHADE]
098F: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0991: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0993: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0995: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0996: 7F       RET                      (0646)     ret
0997: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
099A: 26 05 80 AND   [previousSecond|elapsedSeconds+5],0x80(0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
099D: 2E 05 7F OR    [previousSecond|elapsedSeconds+5],0x7F(0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
09A0: 26 06 80 AND   [previousSecond|elapsedSeconds+6],0x80(0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
09A3: 51 05    MOV   A,[previousSecond|elapsedSeconds+5](0689)     mov   A,[Port_2_DriveMode_0_SHADE]
09A5: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
09A7: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
09A9: 51 06    MOV   A,[previousSecond|elapsedSeconds+6](0692)     mov   A,[Port_2_DriveMode_1_SHADE]
09AB: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
09AD: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
09AF: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
09B1: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
09B3: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
09B5: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
09B7: 50 03    MOV   A,0x3              (0701)     mov   A,03h
09B9: 9F 40    CALL  0x08FB             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
09BB: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
09BD: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
09BF: 50 03    MOV   A,0x3              (0707)     mov   A,03h
09C1: 9F 38    CALL  0x08FB             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
09C3: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
09C5: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
09C7: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
09C9: 50 03    MOV   A,0x3              (0714)     mov   A,03h
09CB: 9F 2E    CALL  0x08FB             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
09CD: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09CF: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
09D1: 50 02    MOV   A,0x2              (0720)     mov   A,02h
09D3: 9F 26    CALL  0x08FB             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
09D5: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09D7: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
09D9: 50 08    MOV   A,0x8              (0726)     mov   A,08h
09DB: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
09DD: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09DF: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
09E1: 50 01    MOV   A,0x1              (0731)     mov   A,01h
09E3: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
09E5: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09E7: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
09E9: 50 06    MOV   A,0x6              (0736)     mov   A,06h
09EB: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
09ED: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
09EF: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
09F1: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
09F3: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
09F5: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
09F7: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
09F9: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
09FB: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
09FD: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
09FF: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0A01: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A03: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0A05: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0A0A: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0A0C: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0A0D: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0A0F: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0A10: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0A12: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0A13: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0A15: 70 3F    AND   F,0x3F             
0A17: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0A19: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0A1A: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0A1C: 78       DEC   A                  (0828)     dec   A
0A1D: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0A1F: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0A28: 08       PUSH  A                  (0871)     push  A
0A29: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0A2B: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0A2D: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0A2F: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0A31: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0A33: D0 06    JNC   0x0A3A             (0877)     jnc   .Delay50u_End
0A35: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0A37: 78       DEC   A                  (0880)     dec   A                              ; [4]
0A38: BF FE    JNZ   0x0A37             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0A3A: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0A3B: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0A3C: 4F       MOV   X,SP               (1015)     mov   X, SP
0A3D: 10       PUSH  X                  (1016)     push  X
0A3E: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0A40: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
0A42: 70 3F    AND   F,0x3F             
0A44: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0A46: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0A48: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0A49: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0A4C: B0 05    JNZ   0x0A52             (1026)     jnz   .LCD_CHECK1
0A4E: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0A50: 80 11    JMP   0x0A62             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0A52: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0A55: D0 07    JNC   0x0A5D             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0A57: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0A59: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0A5B: 80 06    JMP   0x0A62             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0A5D: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0A5F: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0A62: 9E 6F    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0A64: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0A66: BF E2    JNZ   0x0A49             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
0A68: 70 3F    AND   F,0x3F             
0A6A: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0A6C: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0A6D: 4F       MOV   X,SP               (1168)     mov   X, SP
0A6E: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0A70: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0A72: 08       PUSH  A                  (1172)     push  A
0A73: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0A75: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0A77: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
0A79: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0A7C: B0 05    JNZ   0x0A82             (1177)     jnz   .VBG_NZ_SEG
0A7E: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0A80: 80 13    JMP   0x0A94             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0A82: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0A85: D0 09    JNC   0x0A8F             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0A87: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0A89: 78       DEC   A                  (1185)     dec   A
0A8A: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0A8D: 80 06    JMP   0x0A94             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0A8F: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0A92: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0A94: 9E 3D    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0A96: 18       POP   A                  (1195)     pop   A
0A97: 78       DEC   A                  (1196)     dec   A
0A98: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0A9A: BF D7    JNZ   0x0A72             (1198)     jnz   .VBG_LOOP
0A9C: 70 3F    AND   F,0x3F             
0A9E: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0AA0: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0AA1: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0AA2: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0AA3: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0AA4: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0AA6: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0AA8: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0AAB: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0AAE: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0AB0: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0AB2: D0 05    JNC   0x0AB8             (1251)     jnc   .VBG_SOLID
0AB4: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0AB6: 80 03    JMP   0x0ABA             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0AB8: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0ABA: 9E 17    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
0ABC: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0ABE: BF EF    JNZ   0x0AAE             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0AC0: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0AC2: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0AC5: BF E5    JNZ   0x0AAB             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0AC7: 18       POP   A                  (1264)     pop  A
0AC8: 18       POP   A                  (1265)     pop  A
0AC9: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0ACB: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
0ACD: 70 3F    AND   F,0x3F             
0ACF: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0AD1: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0AE0: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0AE1: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0AE3: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0AE5: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0AE7: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0AE9: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0AEC: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0AEF: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0AF1: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0AF4: B0 05    JNZ   0x0AFA             (1332)     jnz   .BG_OTHER
0AF6: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0AF8: 80 03    JMP   0x0AFC             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0AFA: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0AFC: 9D D5    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1338)     call  LCD_WriteData
0AFE: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0B00: BF EE    JNZ   0x0AEF             (1340)     jnz   .BG_Loop2
0B02: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0B04: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0B07: BF E4    JNZ   0x0AEC             (1343)     jnz   .BG_Loop1
                                        (1344) 
0B09: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0B0B: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0B0D: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
0B0F: 70 3F    AND   F,0x3F             
0B11: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0B13: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0B14: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2Cm.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2Cm.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2Cm_Start
                                        (0031) export  _I2Cm_Start
                                        (0032) export   I2Cm_Stop
                                        (0033) export  _I2Cm_Stop
                                        (0034) export   I2Cm_fSendRepeatStart
                                        (0035) export  _I2Cm_fSendRepeatStart
                                        (0036) export   I2Cm_fSendStart
                                        (0037) export  _I2Cm_fSendStart
                                        (0038) export   I2Cm_SendStop
                                        (0039) export  _I2Cm_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2Cm_fReadBytes
                                        (0042) export  _I2Cm_bWriteBytes
                                        (0043) export  _I2Cm_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2Cm_fWrite
                                        (0046) export  _I2Cm_fWrite
                                        (0047) 
                                        (0048) export   I2Cm_bRead
                                        (0049) export  _I2Cm_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2Cm_fReadBytes
                                        (0054) export   I2Cm_bWriteBytes
                                        (0055) export   I2Cm_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2Cm_bStatus
                                        (0064) export _I2Cm_bStatus
                                        (0065) export  I2Cm_bData
                                        (0066) export _I2Cm_bData
                                        (0067) export  I2Cm_bAddr
                                        (0068) export _I2Cm_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area rtc_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2Cm_bStatus:
                                        (0076)  I2Cm_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2Cm_bData:
                                        (0078)  I2Cm_bData:                           blk   1  ; Data transfered
                                        (0079) _I2Cm_bXferCnt:
                                        (0080)  I2Cm_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2Cm_bAddr:                                     ; Bytes
                                        (0082)  I2Cm_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2Cm_bit_count:
                                        (0084)  I2Cm_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2Cm_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2Cm_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2Cm_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2Cm_Start:
                                        (0121) _I2Cm_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_0_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
0B17: 2E 03 03 OR    [previousSecond|elapsedSeconds+3],0x3(0125)     or   [Port_0_DriveMode_1_SHADE],I2Cm_SDA_pin|I2Cm_SCL_pin
0B1A: 26 02 FC AND   [previousSecond|elapsedSeconds+2],0xFC(0126)     and  [Port_0_DriveMode_0_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
                                        (0127) 
                                        (0128) IF(I2Cm_DriveMode2)            
0B1D: 26 04 FC AND   [previousSecond|elapsedSeconds+4],0xFC(0129)     and  [Port_0_DriveMode_2_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0B20: 51 04    MOV   A,[previousSecond|elapsedSeconds+4](0130)     mov  A,[Port_0_DriveMode_2_SHADE]
0B22: 60 03    MOV   REG[0x3],A         (0131)     mov  reg[I2Cm_I2CPRTDM2],A
0B24: 71 10    OR    F,0x10             
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 	M8C_SetBank1
0B26: 51 03    MOV   A,[previousSecond|elapsedSeconds+3](0135)     mov  A,[Port_0_DriveMode_1_SHADE]
0B28: 60 01    MOV   REG[0x1],A         (0136)     mov  reg[I2Cm_I2CPRTDM1],A
0B2A: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0137)     mov  A,[Port_0_DriveMode_0_SHADE]
0B2C: 60 00    MOV   REG[0x0],A         (0138)     mov  reg[I2Cm_I2CPRTDM0],A
0B2E: 70 EF    AND   F,0xEF             
                                        (0139)     M8C_SetBank0
                                        (0140)                                                      ; Set both pins, low so that only the port
                                        (0141)                                                      ; mode has to be changed from a 0 to a 1
0B30: 26 00 FC AND   [previousSecond|elapsedSeconds],0xFC(0142)     and  [Port_0_Data_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0B33: 51 00    MOV   A,[previousSecond|elapsedSeconds](0143)     mov  A,[Port_0_Data_SHADE]
0B35: 60 00    MOV   REG[0x0],A         (0144)     mov  reg[I2Cm_I2CPRTDR],A
                                        (0145)     RAM_EPILOGUE RAM_USE_CLASS_4
0B37: 7F       RET                      (0146)     ret
                                        (0147) .ENDSECTION
                                        (0148) 
                                        (0149) .SECTION
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;  FUNCTION NAME: I2Cm_Stop
                                        (0152) ;
                                        (0153) ;  DESCRIPTION:
                                        (0154) ;    This function performs no operation and is used for future
                                        (0155) ;    module compatibility.
                                        (0156) ;
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;
                                        (0159) ;  ARGUMENTS: none
                                        (0160) ;
                                        (0161) ;  RETURNS: none
                                        (0162) ;
                                        (0163) ;  SIDE EFFECTS:
                                        (0164) ;    The A and X registers may be modified by this or future implementations
                                        (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0168) ;    functions.
                                        (0169) ;          
                                        (0170)  I2Cm_Stop:
                                        (0171) _I2Cm_Stop:
                                        (0172)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0173)     RAM_EPILOGUE RAM_USE_CLASS_1
0B38: 7F       RET                      (0174)     ret
0B39: 70 BF    AND   F,0xBF             
0B3B: 62 D3 07 MOV   REG[0xD3],0x7      
0B3E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;
                                        (0185) ;  ARGUMENTS:
                                        (0186) ;  [SP-3]=> Address of slave
                                        (0187) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0188) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0189) ;  [SP-6]=> Count of bytes to read.
                                        (0190) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0191) ;           to determine if:
                                        (0192) ;             0x01 => Use RepeatStart instead of Start
                                        (0193) ;             0x02 => Don't send Stop
                                        (0194) ;
                                        (0195) ;  RETURNS:
                                        (0196) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0197) ;
                                        (0198) ;  SIDE EFFECTS:
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;          
                                        (0205) ;    Currently only the page pointer registers listed below are modified: 
                                        (0206) ;          CUR_PP
                                        (0207) ;		   IDX_PP
                                        (0208) ;
                                        (0209) SlaveAdr:     equ  -3
                                        (0210) RxArrayLSB:   equ  -4
                                        (0211) RxArrayMSB:   equ  -5
                                        (0212) RxByteCount:  equ  -6
                                        (0213) RxMode:       equ  -7
                                        (0214) 
                                        (0215) _I2Cm_fReadBytes:
                                        (0216)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0217)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0218)     RAM_SETPAGE_IDX2STK
                                        (0219)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B41: 4F       MOV   X,SP               (0220)     mov   X, SP
                                        (0221)     
0B42: 52 FD    MOV   A,[X-3]            (0222)     mov   A, [X+SlaveAdr]
0B44: 64       ASL   A                  (0223)     asl   A                                                ; Shift address to the left to make
                                        (0224)                                                            ; a complete byte with the R/W bit.
0B45: 29 01    OR    A,0x1              (0225)     or    A,0x01                                           ; OR the address with the Read bit.
0B47: 55 AF 00 MOV   [menu+4],0x0       (0226)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
0B4A: 48 F9 01 TST   [X-7],0x1          (0227)     tst   [x+RxMode],I2Cm_RepStart
0B4D: B0 05    JNZ   0x0B53             (0228)     jnz   DoRestartRx
0B4F: 91 3B    CALL  0x0C8C             (0229)     call  I2C_DoStart                                      ; Send a start and address.
0B51: 80 03    JMP   0x0B55             (0230)     jmp   CheckRxAck
                                        (0231) DoRestartRx:
0B53: 91 01    CALL  0x0C56             (0232)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
0B55: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0233) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0234)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B58: 47 AF 01 TST   [menu+4],0x1       (0235)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B5B: A0 2A    JZ    0x0B86             (0236)     jz    End_RD_Loop
                                        (0237)                                                            ; Send ACK until last byte
0B5D: 2E AF 10 OR    [menu+4],0x10      (0238)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0239) RD_Loop:                                                   ; Loop through bytes
0B60: 10       PUSH  X                  (0240)     push  x                                                ; Save X for later
0B61: 7B FA    DEC   [X-6]              (0241)     dec   [x+RxByteCount]                                  ; Decrement data counter
0B63: B0 04    JNZ   0x0B68             (0242)     jnz   I2C_READ
0B65: 26 AF EF AND   [menu+4],0xEF      (0243)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0244) I2C_READ:
0B68: 91 F7    CALL  0x0D61             (0245)     call  I2Cm_read                                        ; Read a byte
0B6A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0246)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B6D: 20       POP   X                  (0247)     pop   x                                                ; Restore x
0B6E: 10       PUSH  X                  (0248)     push  x
0B6F: 52 FC    MOV   A,[X-4]            (0249)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
0B71: 08       PUSH  A                  (0250)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0251) IF SYSTEM_LARGE_MEMORY_MODEL
0B72: 52 FB    MOV   A,[X-5]            (0252)     mov   A,[x+RxArrayMSB]
0B74: 60 D3    MOV   REG[0xD3],A        
                                        (0253)     RAM_SETPAGE_IDX A
                                        (0254) ENDIF
0B76: 20       POP   X                  (0255)     pop   x                                                ; restores the index pointer pushed a few lines above
0B77: 51 B0    MOV   A,[menu+5]         (0256)     mov   a,[I2Cm_bData]                                   ; Save data in data array
0B79: 54 00    MOV   [X+0],A            (0257)     mov   [x],a                                            ; Put read data in array
0B7B: 20       POP   X                  (0258)     pop   x                                                ; Restore the original pointer (for the subrtn params)
0B7C: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0259)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
0B7F: 77 FC    INC   [X-4]              (0260)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
0B81: 48 FA FF TST   [X-6],0xFF         (0261)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
0B84: BF DB    JNZ   0x0B60             (0262)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0263) End_RD_Loop:                                               ; Endloop
0B86: 48 F9 02 TST   [X-7],0x2          (0264)     tst   [x+RxMode],I2Cm_NoStop
0B89: B0 03    JNZ   0x0B8D             (0265)     jnz   SkipRxStop
0B8B: 92 6F    CALL  _I2Cm_SendStop     (0266)     call  I2Cm_SendStop
0B8D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0267) SkipRxStop:
                                        (0268)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B90: 50 00    MOV   A,0x0              (0269)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0B92: 47 AF 01 TST   [menu+4],0x1       (0270)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
0B95: A0 03    JZ    0x0B99             (0271)     jz    End_ReadBytes
0B97: 50 01    MOV   A,0x1              (0272)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
0B99: 70 3F    AND   F,0x3F             
0B9B: 71 C0    OR    F,0xC0             
                                        (0273) End_ReadBytes:
                                        (0274)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0275)     RAM_EPILOGUE RAM_USE_CLASS_4
0B9D: 7F       RET                      (0276)     ret
0B9E: 70 BF    AND   F,0xBF             
0BA0: 62 D3 07 MOV   REG[0xD3],0x7      
0BA3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      A => Address of slave
                                        (0290) ;      X => Pointer to other arguments.
                                        (0291) ;    [x] => LSB of Array address to put data in.
                                        (0292) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0293) ;  [X-2] => Count of bytes to read.
                                        (0294) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0295) ;           to determine if:
                                        (0296) ;             0x01 => Use RepeatStart instead of Start
                                        (0297) ;             0x02 => Don't send Stop
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309) RxArray_X:      equ   0
                                        (0310) RxByteCount_X:  equ  -2
                                        (0311) RxMode_X:       equ  -3
                                        (0312) 
                                        (0313)  I2Cm_fReadBytes:		                 
                                        (0314)     asl   A                                            ; Shift address to the left to make
                                        (0315)                                                        ; a complete byte with the R/W bit.
                                        (0316)     or    A,0x01                                       ; OR the address with the Read bit.
                                        (0317)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
                                        (0318)     tst   [x+RxMode_X],I2Cm_RepStart
                                        (0319)     jnz   DoRestartRxSmm
                                        (0320)     call  I2C_DoStart                                      ; Send a start and address.
                                        (0321)     jmp   CheckRxAckSmm
                                        (0322) DoRestartRxSmm:
                                        (0323)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0324) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (0325)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0326)     jz    End_RD_LoopSmm
                                        (0327)                                                            ; Send ACK until last byte
                                        (0328)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0329) RD_LoopSmm:                                                   ; Loop through bytes
                                        (0330)     push  x                                                ; Save X for later
                                        (0331)     dec   [x+RxByteCount_X]                                ; Decrement data counter
                                        (0332)     jnz   I2C_READSmm
                                        (0333)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0334) I2C_READSmm:
                                        (0335)     call  I2Cm_read                                        ; Read a byte
                                        (0336)     pop   x                                                ; Restore x
                                        (0337)     push  x                                                ; Store x
                                        (0338)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
                                        (0339)     mov   a,[I2Cm_bData]                                   ; Save data in data array
                                        (0340)     mov   [x+RxArray_X],a                                  ; Put read data in array
                                        (0341)     pop   x                                                ; Restore the original pointer
                                        (0342)     inc   [x+RxArray_X]                                    ; Advance data pointer
                                        (0343)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
                                        (0344)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0345) End_RD_LoopSmm:                                            ; Endloop
                                        (0346)     tst   [x+RxMode_X],I2Cm_NoStop
                                        (0347)     jnz   SkipRxStopSmm
                                        (0348)     call  I2Cm_SendStop
                                        (0349) SkipRxStopSmm:
                                        (0350)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
                                        (0351)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
                                        (0352)     jz    End_ReadBytesSmm
                                        (0353)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0354) End_ReadBytesSmm:
                                        (0355)     ret
                                        (0356) .ENDSECTION
                                        (0357) ENDIF
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    Write multiple data bits to slave device.
                                        (0365) ;
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;
                                        (0368) ;  ARGUMENTS:
                                        (0369) ; [SP-3] => Address of slave
                                        (0370) ; [SP-4] => LSB of Array address to put data in.
                                        (0371) ; [SP-5] => MSB of Array address to put data in.
                                        (0372) ; [SP-6] => Count of bytes to write.
                                        (0373) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0374) ;           to determine if:
                                        (0375) ;              0x01 => Use RePeatStart instead of Start
                                        (0376) ;              0x02 => Don't send Stop
                                        (0377) ;
                                        (0378) ;
                                        (0379) ;  RETURNS:
                                        (0380) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0381) ;
                                        (0382) ;  SIDE EFFECTS:
                                        (0383) ;    The A and X registers may be modified by this or future implementations
                                        (0384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0387) ;    functions.
                                        (0388) ;          
                                        (0389) ;    Currently only the page pointer registers listed below are modified: 
                                        (0390) ;          CUR_PP
                                        (0391) ;		   IDX_PP
                                        (0392) ;
                                        (0393) TxSlaveAdr:   equ  -3
                                        (0394) TxArrayLSB:   equ  -4
                                        (0395) TxArrayMSB:   equ  -5
                                        (0396) TxByteCount:  equ  -6
                                        (0397) TxMode:       equ  -7
                                        (0398) 
                                        (0399) _I2Cm_bWriteBytes:
                                        (0400)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0401)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0402)     RAM_SETPAGE_IDX2STK
                                        (0403)     RAM_SETPAGE_CUR >I2Cm_bStatus
0BA6: 4F       MOV   X,SP               (0404)     mov   X, SP
                                        (0405)     
0BA7: 52 FD    MOV   A,[X-3]            (0406)     mov   A,[x+TxSlaveAdr]
0BA9: 64       ASL   A                  (0407)     asl   A                                           ; Shift address to the left to make
                                        (0408)                                                       ; a complete byte with the R/W bit.
                                        (0409)                                                       ; The ASL takes care of clearing bit 0.
0BAA: 55 AF 00 MOV   [menu+4],0x0       (0410)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0411) 
                                        (0412) 
0BAD: 48 F9 01 TST   [X-7],0x1          (0413)     tst   [x+TxMode],I2Cm_RepStart
0BB0: B0 05    JNZ   0x0BB6             (0414)     jnz   DoRestartTx
0BB2: 90 D8    CALL  0x0C8C             (0415)     call  I2C_DoStart                                 ; Send a start and address.
0BB4: 80 03    JMP   0x0BB8             (0416)     jmp   DoTxAck
                                        (0417) DoRestartTx:
0BB6: 90 9E    CALL  0x0C56             (0418)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0BB8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0419) DoTxAck:
                                        (0420)     RAM_SETPAGE_CUR >I2Cm_bStatus
0BBB: 55 B1 00 MOV   [menu+6],0x0       (0421)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
0BBE: 47 AF 01 TST   [menu+4],0x1       (0422)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
0BC1: A0 27    JZ    0x0BE9             (0423)     jz    End_WR_Loop
0BC3: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0424) WR_Loop:                                              ; Loop through bytes
                                        (0425)     RAM_SETPAGE_IDX2STK
0BC6: 10       PUSH  X                  (0426)     push  x                                           ; Save X for later
0BC7: 52 FC    MOV   A,[X-4]            (0427)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
0BC9: 08       PUSH  A                  (0428) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0429) IF SYSTEM_LARGE_MEMORY_MODEL
0BCA: 52 FB    MOV   A,[X-5]            (0430)     mov   a,[x+TxArrayMSB]
0BCC: 60 D3    MOV   REG[0xD3],A        
                                        (0431)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0432) ENDIF
0BCE: 20       POP   X                  (0433)     pop   x                                           ; this recovers the address previously stoed on teh stack
0BCF: 52 00    MOV   A,[X+0]            (0434)     mov   a,[x]                                       ; Get data pointer to by X
0BD1: 53 B0    MOV   [menu+5],A         (0435)     mov   [I2Cm_bData],a                              ; Save data in temp location
0BD3: 90 ED    CALL  0x0CC2             (0436)     call  I2Cm_write                                  ; Write the data
0BD5: 62 D0 00 MOV   REG[0xD0],0x0      
0BD8: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0437) 	RAM_SETPAGE_CUR >I2Cm_bStatus
                                        (0438)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
0BDB: 20       POP   X                  (0439)     pop   x
0BDC: 47 AF 01 TST   [menu+4],0x1       (0440)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0BDF: A0 0E    JZ    0x0BEE             (0441)     jz    DoWBstop                                    ; Stop transfer if NAKed
0BE1: 76 B1    INC   [menu+6]           (0442)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0BE3: 77 FC    INC   [X-4]              (0443)     inc   [x+TxArrayLSB]                              ; Advance pointer
0BE5: 7B FA    DEC   [X-6]              (0444)     dec   [x+TxByteCount]                             ; Decrement byte counter
0BE7: BF DB    JNZ   0x0BC3             (0445)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0446) End_WR_Loop:                                          ; Endloop
0BE9: 48 F9 02 TST   [X-7],0x2          (0447)     tst   [x+TxMode],I2Cm_NoStop
0BEC: B0 03    JNZ   0x0BF0             (0448)     jnz   SkipTxStop
                                        (0449) DoWBstop:
0BEE: 92 0C    CALL  _I2Cm_SendStop     (0450)     call  I2Cm_SendStop
0BF0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0451) SkipTxStop:
                                        (0452) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0BF3: 51 B1    MOV   A,[menu+6]         (0453)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
0BF5: 70 3F    AND   F,0x3F             
0BF7: 71 C0    OR    F,0xC0             
                                        (0454) End_WriteBytes:
                                        (0455)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0456)     RAM_EPILOGUE RAM_USE_CLASS_4
0BF9: 7F       RET                      (0457)     ret
0BFA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0458) .ENDSECTION
                                        (0459) 
                                        (0460) 
                                        (0461) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;    Write multiple data bits to slave device.
                                        (0468) ;
                                        (0469) ;-----------------------------------------------------------------------------
                                        (0470) ;
                                        (0471) ;  ARGUMENTS:
                                        (0472) ;     A => Address of slave
                                        (0473) ;     X => Pointer to other arguments.
                                        (0474) ;   [x] => LSB of Array address to put data in.
                                        (0475) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0476) ; [X-2] => Count of bytes to write.
                                        (0477) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0478) ;          to determine if:
                                        (0479) ;              0x01 => Use RePeatStart instead of Start
                                        (0480) ;              0x02 => Don't send Stop
                                        (0481) ;
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) TxArray_X:      equ   0
                                        (0494) TxByteCount_X:  equ  -2
                                        (0495) TxMode_X:       equ  -3
                                        (0496) 
                                        (0497)  I2Cm_bWriteBytes:						       
                                        (0498)     asl   A                                           ; Shift address to the left to make
                                        (0499)                                                       ; a complete byte with the R/W bit.
                                        (0500)                                                       ; The ASL takes care of clearing bit 0.
                                        (0501)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0502) 
                                        (0503) 
                                        (0504)     tst   [x+TxMode_X],I2Cm_RepStart
                                        (0505)     jnz   DoRestartTxSmm
                                        (0506)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0507)     jmp   DoTxAckSmm
                                        (0508) DoRestartTxSmm:
                                        (0509)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0510) DoTxAckSmm:
                                        (0511)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
                                        (0512)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
                                        (0513)     jz    End_WR_LoopSmm
                                        (0514) WR_LoopSmm:                                              ; Loop through bytes
                                        (0515)     push  x                                           ; Save X for later
                                        (0516)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
                                        (0517)     mov   a,[x]                                       ; Get data pointer to by X
                                        (0518)     mov   [I2Cm_bData],a                              ; Save data in temp location
                                        (0519)     call  I2Cm_write                                  ; Write the data
                                        (0520)     pop   x
                                        (0521)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0522)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
                                        (0523)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
                                        (0524)     inc   [x+TxArray_X]                                 ; Advance pointer
                                        (0525)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
                                        (0526)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0527) End_WR_LoopSmm:                                          ; Endloop
                                        (0528)     tst   [x+TxMode_X],I2Cm_NoStop
                                        (0529)     jnz   SkipTxStopSmm
                                        (0530) DoWBstopSmm:
                                        (0531)     call  I2Cm_SendStop
                                        (0532) SkipTxStopSmm:
                                        (0533)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0534) End_WriteBytesSmm:
                                        (0535)     ret
                                        (0536) .ENDSECTION
                                        (0537) ENDIF
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;    Write multiple data bits to slave device from ROM
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547) ;
                                        (0548) ;  ARGUMENTS:
                                        (0549) ;   [SP-3] => Address of slave
                                        (0550) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0551) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0552) ;   [SP-6] => Count of bytes to write.
                                        (0553) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0554) ;            to determine if:
                                        (0555) ;               0x01 => Use RepeatStart instead of Start
                                        (0556) ;               0x02 => Don't send Stop
                                        (0557) ;
                                        (0558) ;  RETURNS:
                                        (0559) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0560) ;
                                        (0561) ;  SIDE EFFECTS:
                                        (0562) ;    The A and X registers may be modified by this or future implementations
                                        (0563) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0564) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0565) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0566) ;    functions.
                                        (0567) ;          
                                        (0568) ;    Currently only the page pointer registers listed below are modified: 
                                        (0569) ;          CUR_PP
                                        (0570) ;
                                        (0571) TxCSlaveAdr:   equ  -3
                                        (0572) TxCArrayLSB:   equ  -4
                                        (0573) TxCArrayMSB:   equ  -5
                                        (0574) TxCByteCount:  equ  -6
                                        (0575) TxCMode:       equ  -7
                                        (0576) 
                                        (0577) _I2Cm_bWriteCBytes:
                                        (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0579)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0580)     RAM_SETPAGE_CUR >I2Cm_bStatus
0BFD: 4F       MOV   X,SP               (0581)     mov   X, SP
                                        (0582) 
0BFE: 52 FD    MOV   A,[X-3]            (0583)     mov   A,[x+TxCSlaveAdr]
0C00: 64       ASL   A                  (0584)     asl   A                                           ; Shift address to the left to make
                                        (0585)                                                       ; a complete byte with the R/W bit.
                                        (0586)                                                       ; The ASL takes care of clearing bit 0.
0C01: 55 AF 00 MOV   [menu+4],0x0       (0587)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0588) 
                                        (0589) 
0C04: 48 F9 01 TST   [X-7],0x1          (0590)     tst   [x+TxCMode],I2Cm_RepStart                   ; Check if a Start or RepeatStart
0C07: B0 05    JNZ   0x0C0D             (0591)     jnz   DoCRestartTx                                ; should executed.
0C09: 90 81    CALL  0x0C8C             (0592)     call  I2C_DoStart                                 ; Send a start and address.
0C0B: 80 03    JMP   0x0C0F             (0593)     jmp   DoCTxAck
                                        (0594) DoCRestartTx:
0C0D: 90 47    CALL  0x0C56             (0595)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0C0F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0596) 
                                        (0597) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0598) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0C12: 55 B1 00 MOV   [menu+6],0x0       (0599)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
0C15: 47 AF 01 TST   [menu+4],0x1       (0600)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0C18: A0 20    JZ    0x0C39             (0601)     jz    End_WRC_Loop
                                        (0602) WRC_Loop:                                             ; Loop through bytes
0C1A: 10       PUSH  X                  (0603)     push  x                                           ; Save X for later
                                        (0604) 
0C1B: 52 FB    MOV   A,[X-5]            (0605)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
0C1D: 59 FC    MOV   X,[X-4]            (0606)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
0C1F: 28       ROMX                     (0607)     romx                                              ; Put ROM Data in a
0C20: 53 B0    MOV   [menu+5],A         (0608)     mov   [I2Cm_bData],a                              ; Save data in temp location
0C22: 90 9E    CALL  0x0CC2             (0609)     call  I2Cm_write                                  ; Write the data
0C24: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0610)     RAM_SETPAGE_CUR >I2Cm_bStatus
0C27: 20       POP   X                  (0611)     pop   x
0C28: 47 AF 01 TST   [menu+4],0x1       (0612)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0C2B: A0 12    JZ    0x0C3E             (0613)     jz    DoWCBstop                                    ; Stop transfer if NAKed
0C2D: 76 B1    INC   [menu+6]           (0614)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0C2F: 77 FC    INC   [X-4]              (0615)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
0C31: D0 03    JNC   0x0C35             (0616)     jnc   DecBCnt
0C33: 77 FB    INC   [X-5]              (0617)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0618) 
                                        (0619) DecBCnt:
0C35: 7B FA    DEC   [X-6]              (0620)     dec   [x+TxCByteCount]                            ; Decrement byte counter
0C37: BF E2    JNZ   0x0C1A             (0621)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0622) End_WRC_Loop:                                         ; Endloop
0C39: 48 F9 02 TST   [X-7],0x2          (0623)     tst   [x+TxCMode],I2Cm_NoStop
0C3C: B0 03    JNZ   0x0C40             (0624)     jnz   SkipTxCStop
                                        (0625) DoWCBstop:
0C3E: 91 BC    CALL  _I2Cm_SendStop     (0626)     call  I2Cm_SendStop
0C40: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0627) SkipTxCStop:
                                        (0628)     RAM_SETPAGE_CUR >I2Cm_bStatus
0C43: 51 B1    MOV   A,[menu+6]         (0629)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
0C45: 70 3F    AND   F,0x3F             
0C47: 71 C0    OR    F,0xC0             
                                        (0630) End_WriteCBytes:
                                        (0631)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
0C49: 7F       RET                      (0633)     ret
                                        (0634) .ENDSECTION
                                        (0635) 
                                        (0636) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0637) .SECTION
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0640) ;
                                        (0641) ;  DESCRIPTION:
                                        (0642) ;    Write multiple data bits to slave device from ROM
                                        (0643) ;
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;      A => Address of slave
                                        (0648) ;      X => Pointer to other arguments.
                                        (0649) ;     [x] => LSB of ROM Array address to put data in.
                                        (0650) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0651) ;   [X-2] => Count of bytes to write.
                                        (0652) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0653) ;            to determine if:
                                        (0654) ;               0x01 => Use RepeatStart instead of Start
                                        (0655) ;               0x02 => Don't send Stop
                                        (0656) ;
                                        (0657) ;  RETURNS:
                                        (0658) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0659) ;
                                        (0660) ;  SIDE EFFECTS:
                                        (0661) ;    The A and X registers may be modified by this or future implementations
                                        (0662) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0663) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0664) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0665) ;    functions.
                                        (0666) ;          
                                        (0667) TxCArrayLSB_x:   equ   0
                                        (0668) TxCArrayMSB_x:   equ  -1
                                        (0669) TxCByteCount_x:  equ  -2
                                        (0670) TxCMode_x:       equ  -3
                                        (0671) 
                                        (0672)  I2Cm_bWriteCBytes:					        
                                        (0673)     asl   A                                           ; Shift address to the left to make
                                        (0674)                                                       ; a complete byte with the R/W bit.
                                        (0675)                                                       ; The ASL takes care of clearing bit 0.
                                        (0676)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0677) 
                                        (0678) 
                                        (0679)     tst   [x+TxCMode_x],I2Cm_RepStart                 ; Check if a Start or RepeatStart
                                        (0680)     jnz   DoCRestartTxSmm                                ; should executed.
                                        (0681)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0682)     jmp   DoCTxAckSmm
                                        (0683) DoCRestartTxSmm:
                                        (0684)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0685) 
                                        (0686) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
                                        (0687)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
                                        (0688)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0689)     jz    End_WRC_LoopSmm
                                        (0690) WRC_LoopSmm:                                             ; Loop through bytes
                                        (0691)     push  x                                           ; Save X for later
                                        (0692) 
                                        (0693)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
                                        (0694)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
                                        (0695)     romx                                              ; Put ROM Data in a
                                        (0696)     mov   [I2Cm_bData],a                              ; Save data in temp location
                                        (0697)     call  I2Cm_write                                  ; Write the data
                                        (0698)     pop   x
                                        (0699)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0700)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
                                        (0701)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
                                        (0702)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
                                        (0703)     jnc   DecBCntSmm
                                        (0704)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0705) 
                                        (0706) DecBCntSmm:
                                        (0707)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
                                        (0708)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0709) End_WRC_LoopSmm:                                         ; Endloop
                                        (0710)     tst   [x+TxCMode_x],I2Cm_NoStop
                                        (0711)     jnz   SkipTxCStopSmm
                                        (0712) DoWCBstopSmm:
                                        (0713)     call  I2Cm_SendStop
                                        (0714) SkipTxCStopSmm:
                                        (0715)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0716) End_WriteCBytesSmm:
                                        (0717)     ret
                                        (0718) .ENDSECTION
                                        (0719) ENDIF
                                        (0720) 
                                        (0721) .SECTION
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;  FUNCTION NAME: I2Cm_fSendRepeatStart
                                        (0724) ;
                                        (0725) ;  DESCRIPTION:
                                        (0726) ;    Send repeated start condition and send slave address.
                                        (0727) ;
                                        (0728) ;-----------------------------------------------------------------------------
                                        (0729) ;
                                        (0730) ;  ARGUMENTS:
                                        (0731) ;    I2Cm_bAddr - Contains the slave address and transfer direction.
                                        (0732) ;
                                        (0733) ;  RETURNS:
                                        (0734) ;    I2Cm_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0735) ;
                                        (0736) ;  SIDE EFFECTS:
                                        (0737) ;    The A and X registers may be modified by this or future implementations
                                        (0738) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0739) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0740) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0741) ;    functions.
                                        (0742) ;          
                                        (0743) ;    Currently only the page pointer registers listed below are modified: 
                                        (0744) ;          CUR_PP
                                        (0745) ;
                                        (0746) ;  THEORY of OPERATION or PROCEDURE:
                                        (0747) ;    Prepare to send start by setting SCl and SDA high.
                                        (0748) ;    must be followed directly by I2Cm_start.
                                        (0749) ;
                                        (0750)  I2Cm_fSendRepeatStart:
                                        (0751) _I2Cm_fSendRepeatStart:
                                        (0752)     RAM_PROLOGUE RAM_USE_CLASS_4
0C4A: 64       ASL   A                  (0753)     asl   a                                                ; Shift address to the left
0C4B: 79       DEC   X                  (0754)     dec   x                                                ; If zero, C flag will be set
0C4C: D0 04    JNC   0x0C51             (0755)     jnc   .setRead                                ; Do a write if zero
0C4E: 90 06    CALL  0x0C56             (0756)     call  I2C_DoRepeatStart
                                        (0757)     RAM_EPILOGUE RAM_USE_CLASS_4
0C50: 7F       RET                      (0758)     ret
                                        (0759) .setRead:
0C51: 29 01    OR    A,0x1              (0760)     or    a,0x01                                           ; Set Read flag
0C53: 90 01    CALL  0x0C56             (0761)     call  I2C_DoRepeatStart
                                        (0762)     RAM_EPILOGUE RAM_USE_CLASS_4
0C55: 7F       RET                      (0763)     ret  
0C56: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0764) 
                                        (0765) I2C_DoRepeatStart:
                                        (0766)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0767)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
0C59: 08       PUSH  A                  (0768)     push  a
0C5A: 71 10    OR    F,0x10             
                                        (0769)     M8C_SetBank1
0C5C: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(0770)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin          ; Assert SCL low
0C5F: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(0771)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0C62: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0772)     mov   A,[Port_0_DriveMode_0_SHADE]
0C64: 60 00    MOV   REG[0x0],A         (0773)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0774) 
                                        (0775)                                                            ; Delay 3/4 period
0C66: 50 0C    MOV   A,0xC              (0776)     mov   A,I2Cm_delay3qtr
0C68: 91 C4    CALL  0x0E2E             (0777)     call  I2Cm_delay
                                        (0778)                                                            ; Release SCL high
0C6A: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(0779)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C6D: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0780)     mov   A,[Port_0_DriveMode_0_SHADE]
0C6F: 60 00    MOV   REG[0x0],A         (0781)     mov   reg[I2Cm_I2CPRTDM0],A
0C71: 70 EF    AND   F,0xEF             
                                        (0782) 
                                        (0783)     M8C_SetBank0
                                        (0784) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0785)                                                            ; states adde by slave
0C73: 49 00 02 TST   REG[0x0],0x2       (0786)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0C76: AF FC    JZ    0x0C73             (0787)     jz    clockstretch1
                                        (0788) 
0C78: 50 0C    MOV   A,0xC              (0789)     mov   A,I2Cm_delay3qtr                                 ; Delay 1/2 period
0C7A: 91 B2    CALL  0x0E2E             (0790)     call  I2Cm_delay
0C7C: 18       POP   A                  (0791)     pop   a
0C7D: 90 0D    CALL  0x0C8C             (0792)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0793)     RAM_EPILOGUE RAM_USE_CLASS_4
0C7F: 7F       RET                      (0794)     ret
                                        (0795) .ENDSECTION
                                        (0796) 
                                        (0797) .SECTION
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;  FUNCTION NAME: I2Cm_fSendStart
                                        (0800) ;
                                        (0801) ;  DESCRIPTION:
                                        (0802) ;    Generates start condition and sends slave address.
                                        (0803) ;
                                        (0804) ;-----------------------------------------------------------------------------
                                        (0805) ;
                                        (0806) ;  ARGUMENTS:
                                        (0807) ;    A => Contains the slave address.
                                        (0808) ;
                                        (0809) ;  RETURNS:
                                        (0810) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0811) ;
                                        (0812) ;  SIDE EFFECTS:
                                        (0813) ;    The A and X registers may be modified by this or future implementations
                                        (0814) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0815) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0816) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0817) ;    functions.
                                        (0818) ;          
                                        (0819) ;    Currently only the page pointer registers listed below are modified: 
                                        (0820) ;          CUR_PP
                                        (0821) ;
                                        (0822) ;  THEORY of OPERATION or PROCEDURE:
                                        (0823) ;   Send start by setting SDA low while SCL is high. Set
                                        (0824) ;   SCL low in preparation to send address. Must be followed
                                        (0825) ;   by I2Cm_write.
                                        (0826) ;
                                        (0827)  I2Cm_fSendStart:
                                        (0828) _I2Cm_fSendStart:
                                        (0829)     RAM_PROLOGUE RAM_USE_CLASS_4
0C80: 64       ASL   A                  (0830)     asl   a                                                     ; Shift address to the left
0C81: 79       DEC   X                  (0831)     dec   x                                                     ; If zero, C flag will be set
0C82: D0 04    JNC   0x0C87             (0832)     jnc   .SetRead
0C84: 90 06    CALL  0x0C8C             (0833)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0834)     RAM_EPILOGUE RAM_USE_CLASS_4
0C86: 7F       RET                      (0835)     ret
                                        (0836) .SetRead:
0C87: 29 01    OR    A,0x1              (0837)     or    a,0x01                                                ; Set Read flag
0C89: 90 01    CALL  0x0C8C             (0838)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0C8B: 7F       RET                      (0840)     ret
0C8C: 62 D0 00 MOV   REG[0xD0],0x0      
0C8F: 71 10    OR    F,0x10             
                                        (0841) 
                                        (0842) I2C_DoStart:
                                        (0843)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0844)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0845)     M8C_SetBank1
0C91: 08       PUSH  A                  (0846)     push  A                                                     ; Save the slave address
0C92: 2E 02 01 OR    [previousSecond|elapsedSeconds+2],0x1(0847)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin               ; Assert SDA low
0C95: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0848)     mov   A,[Port_0_DriveMode_0_SHADE]
0C97: 60 00    MOV   REG[0x0],A         (0849)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0850) 
0C99: 50 05    MOV   A,0x5              (0851)     mov   A,I2Cm_delayhalf                                      ; Delay 1/2 period
0C9B: 91 91    CALL  0x0E2E             (0852)     call  I2Cm_delay
0C9D: 18       POP   A                  (0853)     pop   A                                                     ; Restore slave address to A
0C9E: 70 EF    AND   F,0xEF             
0CA0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0854)     M8C_SetBank0
                                        (0855)     RAM_SETPAGE_CUR >I2Cm_bData
0CA3: 53 B0    MOV   [menu+5],A         (0856)     mov   [I2Cm_bData],A
0CA5: 62 D0 00 MOV   REG[0xD0],0x0      
0CA8: 71 10    OR    F,0x10             
                                        (0857) 
                                        (0858)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0859)     M8C_SetBank1
0CAA: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(0860)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin               ; Set SCL low
0CAD: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0861)     mov   A,[Port_0_DriveMode_0_SHADE]
0CAF: 60 00    MOV   REG[0x0],A         (0862)     mov   reg[I2Cm_I2CPRTDM0],A
0CB1: 70 EF    AND   F,0xEF             
                                        (0863)     M8C_SetBank0
                                        (0864) 
0CB3: 50 02    MOV   A,0x2              (0865)     mov   A,I2Cm_delayqtr                                       ; Delay 1/4 period
0CB5: 91 77    CALL  0x0E2E             (0866)     call  I2Cm_delay
0CB7: 90 09    CALL  0x0CC2             (0867)     call   I2Cm_write                                           ; Write the byte.
                                        (0868)     RAM_EPILOGUE RAM_USE_CLASS_4
0CB9: 7F       RET                      (0869)     ret
0CBA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0870) .ENDSECTION
                                        (0871) 
                                        (0872) .SECTION
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;  FUNCTION NAME: I2Cm_fWrite
                                        (0875) ;
                                        (0876) ;  DESCRIPTION:
                                        (0877) ;    Writes a byte to the I2C master bus.
                                        (0878) ;
                                        (0879) ;-----------------------------------------------------------------------------
                                        (0880) ;
                                        (0881) ;  ARGUMENTS:
                                        (0882) ;    A contains Data to be written to I2C slave.
                                        (0883) ;
                                        (0884) ;  RETURNS:
                                        (0885) ;    1 If ACKed, else 0
                                        (0886) ;
                                        (0887) ;  SIDE EFFECTS:
                                        (0888) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0889) ;
                                        (0890) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0891) ;
                                        (0892) ;  FUNCTION NAME: I2Cm_write
                                        (0893) ;
                                        (0894) ;  DESCRIPTION:
                                        (0895) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0896) ;
                                        (0897) ;  ARGUMENTS:
                                        (0898) ;    Reg A contains slave address.
                                        (0899) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Send data byte to slave. Must be followed by I2Cm_get_ack.
                                        (0915) ;
                                        (0916) I2Cm_fWrite:
                                        (0917) _I2Cm_fWrite:
                                        (0918)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0919)     RAM_SETPAGE_CUR >I2Cm_bData
0CBD: 53 B0    MOV   [menu+5],A         (0920)     mov   [I2Cm_bData],A                                   ; Put data in bData
0CBF: 90 01    CALL  0x0CC2             (0921)     call  I2Cm_write
                                        (0922)     RAM_EPILOGUE RAM_USE_CLASS_4
0CC1: 7F       RET                      (0923)     ret
0CC2: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0924) 
                                        (0925) I2Cm_write:
                                        (0926) _I2Cm_write:
                                        (0927)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0928)     RAM_SETPAGE_CUR >I2Cm_bit_count
                                        (0929)     
0CC5: 55 B2 08 MOV   [menu+7],0x8       (0930)     mov   [I2Cm_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0931) writenextbit:
0CC8: 7A B2    DEC   [menu+7]           (0932)     dec   [I2Cm_bit_count]
0CCA: 62 D0 00 MOV   REG[0xD0],0x0      
0CCD: 71 10    OR    F,0x10             
                                        (0933) 
                                        (0934)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0935)                                                            ; Assert SCL low
                                        (0936)     M8C_SetBank1
0CCF: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(0937)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0CD2: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0938)     mov   A,[Port_0_DriveMode_0_SHADE]
0CD4: 60 00    MOV   REG[0x0],A         (0939)     mov   reg[I2Cm_I2CPRTDM0],A
0CD6: 70 EF    AND   F,0xEF             
0CD8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0940)     M8C_SetBank0
                                        (0941) 
                                        (0942)     RAM_SETPAGE_CUR >I2Cm_bit_count
0CDB: 6B B0    RLC   [menu+5]           (0943)     rlc   [I2Cm_bData]
0CDD: 62 D0 00 MOV   REG[0xD0],0x0      
0CE0: 71 10    OR    F,0x10             
                                        (0944)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0945)     M8C_SetBank1
0CE2: C0 0A    JC    0x0CED             (0946)     jc    write_bit                                        ; Assert SDA low for data 0    
0CE4: 2E 02 01 OR    [previousSecond|elapsedSeconds+2],0x1(0947)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0CE7: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0948)     mov   A,[Port_0_DriveMode_0_SHADE]
0CE9: 60 00    MOV   REG[0x0],A         (0949)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0950) 
0CEB: 80 08    JMP   0x0CF4             (0951)     jmp   writestartclock
                                        (0952) write_bit:                                                 ; Release SDA high for data 1
0CED: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(0953)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin      
0CF0: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0954)     mov   A,[Port_0_DriveMode_0_SHADE]
0CF2: 60 00    MOV   REG[0x0],A         (0955)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0956) 
                                        (0957) writestartclock:
0CF4: 50 05    MOV   A,0x5              (0958)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0CF6: 91 36    CALL  0x0E2E             (0959)     call  I2Cm_delay
                                        (0960)                                                            ; Release SCL High
0CF8: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(0961)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0CFB: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0962)     mov   A,[Port_0_DriveMode_0_SHADE]
0CFD: 60 00    MOV   REG[0x0],A         (0963)     mov   reg[I2Cm_I2CPRTDM0],A
0CFF: 70 EF    AND   F,0xEF             
                                        (0964) 
                                        (0965)     M8C_SetBank0
                                        (0966) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0967)                                                            ; are added by slave.
0D01: 49 00 02 TST   REG[0x0],0x2       (0968)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D04: AF FC    JZ    0x0D01             (0969)     jz    clockstretch2
                                        (0970)                                                            ; Delay for 1/2 period
0D06: 50 05    MOV   A,0x5              (0971)     mov   A,I2Cm_delayhalf
0D08: 91 24    CALL  0x0E2E             (0972)     call  I2Cm_delay
0D0A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0973) 
                                        (0974)     RAM_SETPAGE_CUR >I2Cm_bit_count
0D0D: 3C B2 00 CMP   [menu+7],0x0       (0975)     cmp   [I2Cm_bit_count],0
0D10: BF B7    JNZ   0x0CC8             (0976)     jnz   writenextbit
0D12: 90 01    CALL  0x0D15             (0977)     call  I2Cm_get_ack                
                                        (0978) 
                                        (0979)     RAM_EPILOGUE RAM_USE_CLASS_4
0D14: 7F       RET                      (0980)     ret
0D15: 62 D0 00 MOV   REG[0xD0],0x0      
0D18: 71 10    OR    F,0x10             
                                        (0981) .ENDSECTION
                                        (0982) 
                                        (0983) .SECTION
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;  FUNCTION NAME: I2Cm_get_ack
                                        (0986) ;
                                        (0987) ;  DESCRIPTION:
                                        (0988) ;    Get slave acknowledge response. Used only by I2Cm_write.
                                        (0989) ;
                                        (0990) ;-----------------------------------------------------------------------------
                                        (0991) ;
                                        (0992) ;  ARGUMENTS:
                                        (0993) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0994) ;
                                        (0995) ;  RETURNS:
                                        (0996) ;    Sets flag in I2Cm_bStatus if ACKed by Slave.
                                        (0997) ;
                                        (0998) ;  SIDE EFFECTS:
                                        (0999) ;    The A and X registers may be modified by this or future implementations
                                        (1000) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1001) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1002) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1003) ;    functions.
                                        (1004) ;          
                                        (1005) ;    Currently only the page pointer registers listed below are modified: 
                                        (1006) ;          CUR_PP
                                        (1007) ;
                                        (1008) I2Cm_get_ack:
                                        (1009) _I2Cm_get_ack:
                                        (1010)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1011)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1012)     M8C_SetBank1
0D1A: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(1013)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0D1D: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1014)     mov   A,[Port_0_DriveMode_0_SHADE]
0D1F: 60 00    MOV   REG[0x0],A         (1015)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1016)                                                            ; Release SDA high so slave may ACK
0D21: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(1017)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0D24: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1018)     mov   A,[Port_0_DriveMode_0_SHADE]
0D26: 60 00    MOV   REG[0x0],A         (1019)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1020)                                                            ; Delay 3/4 period
0D28: 50 0C    MOV   A,0xC              (1021)     mov   A,I2Cm_delay3qtr
0D2A: 91 02    CALL  0x0E2E             (1022)     call  I2Cm_delay
                                        (1023)                                                            ; Release SCL high
0D2C: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(1024)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0D2F: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1025)     mov   A,[Port_0_DriveMode_0_SHADE]
0D31: 60 00    MOV   REG[0x0],A         (1026)     mov   reg[I2Cm_I2CPRTDM0],A
0D33: 70 EF    AND   F,0xEF             
                                        (1027) 
                                        (1028)     M8C_SetBank0
                                        (1029) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1030)                                                            ; are added my slave.
0D35: 49 00 02 TST   REG[0x0],0x2       (1031)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D38: AF FC    JZ    0x0D35             (1032)     jz    clockstretch3
0D3A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1033)     
                                        (1034)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1035)                                                        ; Clear ACK bit
0D3D: 26 AF FE AND   [menu+4],0xFE      (1036)     and   [I2Cm_bStatus],~I2Cm_SLAVE_ACKed
0D40: 49 00 01 TST   REG[0x0],0x1       (1037)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0D43: B0 04    JNZ   0x0D48             (1038)     jnz    getack2                                         ; If ACKed, set flag
0D45: 2E AF 01 OR    [menu+4],0x1       (1039)     or    [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (1040) 
                                        (1041) getack2:
0D48: 50 05    MOV   A,0x5              (1042)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0D4A: 90 E2    CALL  0x0E2E             (1043)     call  I2Cm_delay
                                        (1044) 
0D4C: 51 AF    MOV   A,[menu+4]         (1045)     mov   A,[I2Cm_bStatus]                                 ; Get result and put it in A
0D4E: 21 01    AND   A,0x1              (1046)     and   A,I2Cm_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1047)     RAM_EPILOGUE RAM_USE_CLASS_4
0D50: 7F       RET                      (1048)     ret
0D51: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1049) .ENDSECTION
                                        (1050) 
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: I2Cm_bRead
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;    Reads 1 data byte from the I2C master bus.
                                        (1057) ;
                                        (1058) ;-----------------------------------------------------------------------------
                                        (1059) ;
                                        (1060) ;  ARGUMENTS:
                                        (1061) ;    Reg A Contains the Slave Address.
                                        (1062) ;    I2Cm_bStatus - Set for no ack to be followed by stop.
                                        (1063) ;    Clear for ack to indicate more data to follow.
                                        (1064) ;
                                        (1065) ;  RETURNS:
                                        (1066) ;    I2Cm_bData - Contains received data.
                                        (1067) ;
                                        (1068) ;  SIDE EFFECTS:
                                        (1069) ;    The A and X registers may be modified by this or future implementations
                                        (1070) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1071) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1072) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1073) ;    functions.
                                        (1074) ;          
                                        (1075) ;    Currently only the page pointer registers listed below are modified: 
                                        (1076) ;          CUR_PP
                                        (1077) ;
                                        (1078) ;    Must be followed by I2Cm_put_ack.
                                        (1079) ;
                                        (1080) I2Cm_bRead:
                                        (1081) _I2Cm_bRead:
                                        (1082)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1083)     RAM_SETPAGE_CUR >I2Cm_bStatus
0D54: 55 AF 00 MOV   [menu+4],0x0       (1084)     mov   [I2Cm_bStatus],0x00                              ; Clear ACK flag
0D57: 21 FF    AND   A,0xFF             (1085)     and   A,0xFF                                           ; Is Ack flag set"
0D59: A0 07    JZ    0x0D61             (1086)     jz    I2Cm_read                                        ; Don't ACK
0D5B: 2E AF 10 OR    [menu+4],0x10      (1087)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Set ACK flag
0D5E: 90 01    CALL  0x0D61             (1088)     call  I2Cm_read
                                        (1089)     RAM_EPILOGUE RAM_USE_CLASS_4
0D60: 7F       RET                      (1090)     ret
0D61: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1091) 
                                        (1092) I2Cm_read:
                                        (1093) _I2Cm_read:
                                        (1094)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1095)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0D64: 55 B2 08 MOV   [menu+7],0x8       (1096)     mov   [I2Cm_bit_count],8                               ; Count and prepare bits to read
                                        (1097) readnextbit:
0D67: 7A B2    DEC   [menu+7]           (1098)     dec   [I2Cm_bit_count]
0D69: 6B B0    RLC   [menu+5]           (1099)     rlc   [I2Cm_bData]
0D6B: 62 D0 00 MOV   REG[0xD0],0x0      
0D6E: 71 10    OR    F,0x10             
                                        (1100)     
                                        (1101)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1102)     M8C_SetBank1                                           ; Asser SCL low
0D70: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(1103)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0D73: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1104)     mov   A,[Port_0_DriveMode_0_SHADE]
0D75: 60 00    MOV   REG[0x0],A         (1105)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1106)                                                            ; Delay 1/2 period
0D77: 50 05    MOV   A,0x5              (1107)     mov   A,I2Cm_delayhalf
0D79: 90 B3    CALL  0x0E2E             (1108)     call  I2Cm_delay
                                        (1109)                                                            ; Release SCL high
0D7B: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(1110)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0D7E: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1111)     mov   A,[Port_0_DriveMode_0_SHADE]
0D80: 60 00    MOV   REG[0x0],A         (1112)     mov   reg[I2Cm_I2CPRTDM0],A
0D82: 70 EF    AND   F,0xEF             
0D84: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1113) 
                                        (1114)     M8C_SetBank0
                                        (1115)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1116) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1117)                                                            ; addes wait states.
                                        (1118) 
0D87: 49 00 02 TST   REG[0x0],0x2       (1119)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D8A: AF FC    JZ    0x0D87             (1120)     jz    clockstretch4
                                        (1121)                                                            ; Delay 1/4 period
0D8C: 50 02    MOV   A,0x2              (1122)     mov   A,I2Cm_delayqtr
0D8E: 90 9E    CALL  0x0E2E             (1123)     call  I2Cm_delay
                                        (1124) 
0D90: 26 B0 FE AND   [menu+5],0xFE      (1125)     and   [I2Cm_bData],~01h                                ; Record bit received
0D93: 49 00 01 TST   REG[0x0],0x1       (1126)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0D96: A0 04    JZ    0x0D9B             (1127)     jz    readnobit
0D98: 2E B0 01 OR    [menu+5],0x1       (1128)     or    [I2Cm_bData],01h
                                        (1129) readnobit:
0D9B: 3C B2 00 CMP   [menu+7],0x0       (1130)     cmp   [I2Cm_bit_count],0
0D9E: BF C8    JNZ   0x0D67             (1131)     jnz   readnextbit                                      ; Check for byte complete
                                        (1132) 
0DA0: 90 01    CALL  0x0DA3             (1133)     call   I2Cm_put_ack                
                                        (1134)     RAM_EPILOGUE RAM_USE_CLASS_4
0DA2: 7F       RET                      (1135)     ret
0DA3: 62 D0 00 MOV   REG[0xD0],0x0      
0DA6: 71 10    OR    F,0x10             
                                        (1136) .ENDSECTION
                                        (1137)                                                          
                                        (1138) .SECTION
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;  FUNCTION NAME: I2Cm_put_ack
                                        (1141) ;
                                        (1142) ;  DESCRIPTION:
                                        (1143) ;    Send acknowledge to slave. Used only by I2Cm_read
                                        (1144) ;
                                        (1145) ;-----------------------------------------------------------------------------
                                        (1146) ;
                                        (1147) ;  ARGUMENTS:
                                        (1148) ;    I2Cm_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1149) ;    to indicate more data to follow.
                                        (1150) ;
                                        (1151) ;  RETURNS:
                                        (1152) ;    I2Cm_bData - Contains received data.
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS:
                                        (1155) ;    The A and X registers may be modified by this or future implementations
                                        (1156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1159) ;    functions.
                                        (1160) ;          
                                        (1161) ;    Currently only the page pointer registers listed below are modified: 
                                        (1162) ;          CUR_PP
                                        (1163) ;
                                        (1164) ;    Send ack if more data will follow.
                                        (1165) ;
                                        (1166) I2Cm_put_ack:
                                        (1167) _I2Cm_put_ack:
                                        (1168)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1169)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1170)     M8C_SetBank1                                           ; Assert SCL low
0DA8: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(1171)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0DAB: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1172)     mov   A,[Port_0_DriveMode_0_SHADE]
0DAD: 60 00    MOV   REG[0x0],A         (1173)     mov   reg[I2Cm_I2CPRTDM0],A
0DAF: 70 EF    AND   F,0xEF             
0DB1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1174)     M8C_SetBank0
                                        (1175) 
                                        (1176)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1177)                                                        ; Check if ack is to be transmitted
0DB4: 47 AF 10 TST   [menu+4],0x10      (1178)     tst   [I2Cm_bStatus],I2Cm_SEND_ACK
0DB7: 62 D0 00 MOV   REG[0xD0],0x0      
0DBA: 71 10    OR    F,0x10             
                                        (1179) 
                                        (1180)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1181)     M8C_SetBank1
                                        (1182) 
0DBC: A0 0A    JZ    0x0DC7             (1183)     jz    noputack
                                        (1184)                                                            ; Assert SDA low
0DBE: 2E 02 01 OR    [previousSecond|elapsedSeconds+2],0x1(1185)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0DC1: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1186)     mov   A,[Port_0_DriveMode_0_SHADE]
0DC3: 60 00    MOV   REG[0x0],A         (1187)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1188) 
0DC5: 80 08    JMP   0x0DCE             (1189)     jmp   putack1
                                        (1190) noputack:                                                  ; Release SDA high
0DC7: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(1191)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0DCA: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1192)     mov   A,[Port_0_DriveMode_0_SHADE]
0DCC: 60 00    MOV   REG[0x0],A         (1193)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1194) 
                                        (1195) putack1:
0DCE: 50 02    MOV   A,0x2              (1196)     mov   A,I2Cm_delayqtr                                  ; Delay 1/4 period
0DD0: 90 5C    CALL  0x0E2E             (1197)     call  I2Cm_delay
                                        (1198)                                                            ; Release SCL high
0DD2: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(1199)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0DD5: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1200)     mov   A,[Port_0_DriveMode_0_SHADE]
0DD7: 60 00    MOV   REG[0x0],A         (1201)     mov   reg[I2Cm_I2CPRTDM0],A
0DD9: 70 EF    AND   F,0xEF             
                                        (1202) 
                                        (1203)     M8C_SetBank0
                                        (1204) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1205)                                                            ; adds wait states.
0DDB: 49 00 02 TST   REG[0x0],0x2       (1206)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0DDE: AF FC    JZ    0x0DDB             (1207)     jz    clockstretch5
                                        (1208)                                                            ; delay for the high half of the clock.
0DE0: 50 05    MOV   A,0x5              (1209)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0DE2: 90 4A    CALL  0x0E2E             (1210)     call  I2Cm_delay
0DE4: 71 10    OR    F,0x10             
                                        (1211) 
                                        (1212)     M8C_SetBank1                                           ; Assert SCL low
0DE6: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(1213)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0DE9: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1214)     mov   A,[Port_0_DriveMode_0_SHADE]
0DEB: 60 00    MOV   REG[0x0],A         (1215)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1216)                                                            ; If there is another read pending
                                        (1217)                                                            ; must release SDA for slave
0DED: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(1218)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0DF0: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1219)     mov   A,[Port_0_DriveMode_0_SHADE]
0DF2: 60 00    MOV   REG[0x0],A         (1220)     mov   reg[I2Cm_I2CPRTDM0],A
0DF4: 70 EF    AND   F,0xEF             
0DF6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1221)     M8C_SetBank0
                                        (1222) 
                                        (1223)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0DF9: 51 B0    MOV   A,[menu+5]         (1224)     mov   A, [I2Cm_bData]
                                        (1225)     RAM_EPILOGUE RAM_USE_CLASS_4
0DFB: 7F       RET                      (1226)     ret
0DFC: 62 D0 00 MOV   REG[0xD0],0x0      
0DFF: 71 10    OR    F,0x10             
                                        (1227) .ENDSECTION
                                        (1228) 
                                        (1229) .SECTION
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;  FUNCTION NAME: I2Cm_SendStop
                                        (1232) ;
                                        (1233) ;  DESCRIPTION:
                                        (1234) ;    Assert stop condition.
                                        (1235) ;
                                        (1236) ;-----------------------------------------------------------------------------
                                        (1237) ;
                                        (1238) ;  ARGUMENTS: none
                                        (1239) ;
                                        (1240) ;  RETURNS: none
                                        (1241) ;
                                        (1242) ;  SIDE EFFECTS:
                                        (1243) ;    The A and X registers may be modified by this or future implementations
                                        (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1247) ;    functions.
                                        (1248) ;          
                                        (1249) ;    Currently only the page pointer registers listed below are modified: 
                                        (1250) ;          CUR_PP
                                        (1251) ;
                                        (1252) ;  THEORY of OPERATION or PROCEDURE:
                                        (1253) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1254) ;
                                        (1255)  I2Cm_SendStop:
                                        (1256) _I2Cm_SendStop:
                                        (1257)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1258)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1259)     M8C_SetBank1                                           ; Assert ACK and SDA low
0E01: 2E 02 03 OR    [previousSecond|elapsedSeconds+2],0x3(1260)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin|I2Cm_SDA_pin
0E04: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1261)     mov   A,[Port_0_DriveMode_0_SHADE]
0E06: 60 00    MOV   REG[0x0],A         (1262)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1263) 
0E08: 50 0C    MOV   A,0xC              (1264)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0E0A: 90 22    CALL  0x0E2E             (1265)     call  I2Cm_delay
                                        (1266)                                                            ; Release SCL high
0E0C: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(1267)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0E0F: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1268)     mov   A,[Port_0_DriveMode_0_SHADE]
0E11: 60 00    MOV   REG[0x0],A         (1269)     mov   reg[I2Cm_I2CPRTDM0],A
0E13: 70 EF    AND   F,0xEF             
                                        (1270) 
                                        (1271)     M8C_SetBank0
                                        (1272) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1273)                                                            ; has added wait states.
0E15: 49 00 02 TST   REG[0x0],0x2       (1274)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0E18: AF FC    JZ    0x0E15             (1275)     jz    clockstretch6
0E1A: 71 10    OR    F,0x10             
                                        (1276)     M8C_SetBank1
                                        (1277) 
0E1C: 50 0C    MOV   A,0xC              (1278)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0E1E: 90 0E    CALL  0x0E2E             (1279)     call  I2Cm_delay
                                        (1280) 
                                        (1281)                                                            ; Release SDA high
0E20: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(1282)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0E23: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1283)     mov   A,[Port_0_DriveMode_0_SHADE]
0E25: 60 00    MOV   REG[0x0],A         (1284)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1285) 
0E27: 50 05    MOV   A,0x5              (1286)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0E29: 90 03    CALL  0x0E2E             (1287)     call  I2Cm_delay
0E2B: 70 EF    AND   F,0xEF             
                                        (1288)     M8C_SetBank0
                                        (1289)     
                                        (1290)     RAM_EPILOGUE RAM_USE_CLASS_4
0E2D: 7F       RET                      (1291)     ret
                                        (1292) .ENDSECTION
                                        (1293) 
                                        (1294) .SECTION
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;  FUNCTION NAME: I2Cm_delay
                                        (1297) ;
                                        (1298) ;  DESCRIPTION:
                                        (1299) ;    Create delays for I2Cm routines.
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) ;
                                        (1303) ;  ARGUMENTS: none
                                        (1304) ;
                                        (1305) ;  RETURNS: none
                                        (1306) ;
                                        (1307) ;  SIDE EFFECTS:
                                        (1308) ;    The A and X registers may be modified by this or future implementations
                                        (1309) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1310) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1312) ;    functions.
                                        (1313) ;          
                                        (1314) I2Cm_delay:                                      ; 11 cycles for call. 32 total.
                                        (1315) I2Cmdelay1:                                      ; Delay 1/4 period at 100 kHz
0E2E: 78       DEC   A                  (1316)      dec  A                                      ; 4 cycles
0E2F: BF FE    JNZ   0x0E2E             (1317)      jnz  I2Cmdelay1                             ; 5 cycles for jump, 4 no jump.     
0E31: 7F       RET                      (1318)      ret                                         ; 8 cycles
                                        (1319)   
                                        (1320) .ENDSECTION
                                        (1321) 
                                        (1322) 
                                        (1323) 
                                        (1324) ; End of File I2Cm.asm
                                        (1325) 
                                        (1326) 
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
0E32: 7A 0C    DEC   [previousSecond|elapsedSeconds+12](0093)     dec  [ADCINC_bState]
                                        (0094) if1:
0E34: C0 02    JC    0x0E37             (0095)     jc endif1 ; no underflow
0E36: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
0E37: 3C 0D 00 CMP   [previousSecond|elapsedSeconds+13],0x0(0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
0E3A: B0 12    JNZ   0x0E4D             (0100)     jnz endif2  ;leaving reset mode
0E3C: 08       PUSH  A                  (0101)     push A                            ;read decimator
0E3D: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
0E3F: 53 0A    MOV   [previousSecond|elapsedSeconds+10],A(0103)     mov  [iTemp + LowByte],A
0E41: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
0E43: 53 09    MOV   [previousSecond|elapsedSeconds+9],A(0105)     mov  [iTemp + HighByte], A
0E45: 18       POP   A                  (0106)     pop A
0E46: 55 0D 01 MOV   [previousSecond|elapsedSeconds+13],0x1(0107)     mov [ADCINC_fMode],1
0E49: 55 0C 0F MOV   [previousSecond|elapsedSeconds+12],0xF(0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
0E4C: 7E       RETI                     (0109)     reti
0E4D: 43 8A 20 OR    REG[0x8A],0x20     
0E50: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
0E53: 08       PUSH  A                  (0113)     push A
0E54: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
0E56: 12 0A    SUB   A,[previousSecond|elapsedSeconds+10](0115)     sub  A,[iTemp + LowByte]
0E58: 53 0A    MOV   [previousSecond|elapsedSeconds+10],A(0116)     mov  [iTemp +LowByte],A
0E5A: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0E5C: 1A 09    SBB   A,[previousSecond|elapsedSeconds+9](0118)     sbb  A,[iTemp + HighByte]
                                        (0119) 
                                        (0120)        ;check for overflow
                                        (0121) IF     ADCINC_8_OR_MORE_BITS
0E5E: 39 04    CMP   A,0x4              (0122)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0123) if3: 
0E60: B0 05    JNZ   0x0E66             (0124)     jnz endif3 ;overflow
0E62: 78       DEC   A                  (0125)     dec A
0E63: 55 0A FF MOV   [previousSecond|elapsedSeconds+10],0xFF(0126)     mov [iTemp + LowByte],ffh
                                        (0127) endif3:
                                        (0128) ELSE
                                        (0129)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0130) if4: 
                                        (0131)     jnz endif4 ;overflow
                                        (0132)     dec [iTemp + LowByte]
                                        (0133) endif4:
                                        (0134) ENDIF
                                        (0135) IF ADCINC_SIGNED_DATA
                                        (0136) IF ADCINC_9_OR_MORE_BITS
                                        (0137)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0138) ELSE
                                        (0139)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0140)     sbb A,0
                                        (0141) ENDIF
                                        (0142) ENDIF
0E66: 5F 08 0A MOV   [previousSecond|elapsedSeconds+8],[previousSecond|elapsedSeconds+10](0143)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
0E69: 53 07    MOV   [previousSecond|elapsedSeconds+7],A(0144)     mov  [ADCINC_iResult + HighByte],A
0E6B: 55 0B 01 MOV   [previousSecond|elapsedSeconds+11],0x1(0145)     mov  [ADCINC_fStatus],1
                                        (0146) ConversionReady:
                                        (0147)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0148)     ;---------------------------------------------------
                                        (0149)     ; Insert your custom code below this banner
                                        (0150)     ;---------------------------------------------------
                                        (0151)     ;  Sample data is now in iResult
                                        (0152)     ;
                                        (0153)     ;  NOTE: This interrupt service routine has already
                                        (0154)     ;  preserved the values of the A CPU register. If
                                        (0155)     ;  you need to use the X register you must preserve
                                        (0156)     ;  its value and restore it before the return from
                                        (0157)     ;  interrupt.
                                        (0158)     ;---------------------------------------------------
                                        (0159)     ; Insert your custom code above this banner
                                        (0160)     ;---------------------------------------------------
                                        (0161)     ;@PSoC_UserCode_END@ (Do not change this line.)
0E6E: 18       POP   A                  (0162)     pop A
0E6F: 3C 0E 00 CMP   [previousSecond|elapsedSeconds+14],0x0(0163)     cmp [ADCINC_bNumSamples],0
                                        (0164) if5: 
0E72: B0 0E    JNZ   0x0E81             (0165)     jnz endif5 ; Number of samples is zero
0E74: 55 0D 00 MOV   [previousSecond|elapsedSeconds+13],0x0(0166)     mov [ADCINC_fMode],0
0E77: 55 0C 00 MOV   [previousSecond|elapsedSeconds+12],0x0(0167)     mov [ADCINC_bState],0
0E7A: 41 8B EF AND   REG[0x8B],0xEF     
0E7D: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0168)     ADCINC_ENABLE_INTEGRATOR_M
0E80: 7E       RETI                     (0169)     reti       
                                        (0170) endif5:
0E81: 7A 0E    DEC   [previousSecond|elapsedSeconds+14](0171)     dec [ADCINC_bNumSamples]
                                        (0172) if6:
0E83: A0 0E    JZ    0x0E92             (0173)     jz endif6  ; count not zero
0E85: 55 0D 00 MOV   [previousSecond|elapsedSeconds+13],0x0(0174)     mov [ADCINC_fMode],0
0E88: 55 0C 00 MOV   [previousSecond|elapsedSeconds+12],0x0(0175)     mov [ADCINC_bState],0
0E8B: 41 8B EF AND   REG[0x8B],0xEF     
0E8E: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0176)     ADCINC_ENABLE_INTEGRATOR_M
0E91: 7E       RETI                     (0177)     reti       
0E92: 71 10    OR    F,0x10             
                                        (0178) endif6:
                                        (0179)     ;All samples done
                                        (0180)     M8C_SetBank1
0E94: 41 E7 3F AND   REG[0xE7],0x3F     (0181)     and reg[E7h], 3Fh            ; if we are in 29xxx or 24x94   
0E97: 43 E7 80 OR    REG[0xE7],0x80     (0182)     or  reg[E7h], 80h            ; then set to incremental Mode
0E9A: 70 EF    AND   F,0xEF             
0E9C: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0183)     M8C_SetBank0
                                        (0184)     ADCINC_STOPADC_M
0E9F: 7E       RETI                     (0185)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.
                                        (0093) ;
                                        (0094)  ADCINC_Start:
                                        (0095) _ADCINC_Start:
                                        (0096)    RAM_PROLOGUE RAM_USE_CLASS_1
0EA0: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
0EA2: 43 8A 20 OR    REG[0x8A],0x20     
0EA5: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
0EA8: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
0EAB: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0EAE: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0118) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0119) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0120) ;    functions.
                                        (0121) ;
                                        (0122)  ADCINC_SetPower:
                                        (0123) _ADCINC_SetPower:
                                        (0124)    RAM_PROLOGUE RAM_USE_CLASS_2
0EAF: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
0EB0: 21 03    AND   A,0x3              (0126)    and  A,03h                                    ; Ensure value is legal
0EB2: 08       PUSH  A                  (0127)    push A
0EB3: 5D 8B    MOV   A,REG[0x8B]        (0128)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
0EB5: 21 FC    AND   A,0xFC             (0129)    and  A,~03h                                   ;   clear power bits to zero
0EB7: 2B 00    OR    A,[X+0]            (0130)    or   A,[ X ]                                  ;   establish new value
0EB9: 60 8B    MOV   REG[0x8B],A        (0131)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
0EBB: 18       POP   A                  (0132)    pop  A
0EBC: 70 3F    AND   F,0x3F             
0EBE: 71 C0    OR    F,0xC0             
                                        (0133)    RAM_EPILOGUE RAM_USE_CLASS_2
0EC0: 7F       RET                      (0134)    ret
0EC1: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0135) .ENDSECTION
                                        (0136) 
                                        (0137) .SECTION
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;  FUNCTION NAME: ADCINC_Stop
                                        (0140) ;
                                        (0141) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0142) ;                 and turns off PWM
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;
                                        (0145) ;  ARGUMENTS:     None.
                                        (0146) ;  RETURNS:       Nothing.
                                        (0147) ;  SIDE EFFECTS:
                                        (0148) ;    The A and X registers may be modified by this or future implementations
                                        (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0152) ;    functions.
                                        (0153) ;
                                        (0154)  ADCINC_Stop:
                                        (0155) _ADCINC_Stop:
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0157)    ADCINC_STOPADC_M
0EC4: 41 8B FC AND   REG[0x8B],0xFC     (0158)    and  reg[ADCINC_AtoDcr3], ~03h
0EC7: 41 23 FE AND   REG[0x23],0xFE     (0159)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0ECA: 7F       RET                      (0161)    ret
0ECB: 62 D0 00 MOV   REG[0xD0],0x0      
0ECE: 41 8B EF AND   REG[0x8B],0xEF     
0ED1: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) 
                                        (0165) .SECTION
                                        (0166) ;-----------------------------------------------------------------------------
                                        (0167) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0168) ;
                                        (0169) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    A register contain number of samples
                                        (0173) ;  RETURNS:      Nothing.
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;          
                                        (0181) ;    Currently only the page pointer registers listed below are modified: 
                                        (0182) ;          CUR_PP
                                        (0183) ;
                                        (0184)  ADCINC_GetSamples:
                                        (0185) _ADCINC_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0188)    ADCINC_ENABLE_INTEGRATOR_M
0ED4: 55 0D 00 MOV   [previousSecond|elapsedSeconds+13],0x0(0189)    mov [ADCINC_fMode],0
0ED7: 55 0C 00 MOV   [previousSecond|elapsedSeconds+12],0x0(0190)    mov [ADCINC_bState],0
0EDA: 53 0E    MOV   [previousSecond|elapsedSeconds+14],A(0191)    mov [ADCINC_bNumSamples],A
0EDC: 5D 22    MOV   A,REG[0x22]        (0192)    mov A, reg[ADCINC_PWMdr2]
0EDE: B0 04    JNZ   0x0EE3             (0193)    jnz  .SkipPulseWrite
0EE0: 62 22 01 MOV   REG[0x22],0x1      (0194)    mov reg[ADCINC_PWMdr2], 1
0EE3: 71 10    OR    F,0x10             
                                        (0195) .SkipPulseWrite:
                                        (0196) 
                                        (0197)    M8C_SetBank1
0EE5: 41 E7 3F AND   REG[0xE7],0x3F     (0198)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0EE8: 43 E7 40 OR    REG[0xE7],0x40     (0199)    or  reg[E7h], 40h             ; then set to incremental Mode
0EEB: 70 EF    AND   F,0xEF             
0EED: 62 DB FE MOV   REG[0xDB],0xFE     
0EF0: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0200)    M8C_SetBank0
                                        (0201) 
                                        (0202)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0203)    RAM_EPILOGUE RAM_USE_CLASS_4 
0EF3: 7F       RET                      (0204)    ret
0EF4: 71 10    OR    F,0x10             
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) 
                                        (0208) .SECTION
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0211) ;
                                        (0212) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0213) ;               is disabled but the PWM output is still active.
                                        (0214) ;               Integrator is reset
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS:    None.
                                        (0218) ;  RETURNS:      Nothing.
                                        (0219) ;  SIDE EFFECTS:
                                        (0220) ;    The A and X registers may be modified by this or future implementations
                                        (0221) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0222) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0223) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0224) ;    functions.
                                        (0225) ;
                                        (0226)  ADCINC_StopADC:
                                        (0227) _ADCINC_StopADC:
                                        (0228)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0229)    M8C_SetBank1
0EF6: 41 E7 3F AND   REG[0xE7],0x3F     (0230)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0EF9: 43 E7 80 OR    REG[0xE7],0x80     (0231)    or  reg[E7h], 80h             ; then set to incremental Mode
0EFC: 70 EF    AND   F,0xEF             
0EFE: 41 E1 FE AND   REG[0xE1],0xFE     
0F01: 43 8A 20 OR    REG[0x8A],0x20     
0F04: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0232)    M8C_SetBank0
                                        (0233)    ADCINC_STOPADC_M
                                        (0234)    ADCINC_RESET_INTEGRATOR_M
                                        (0235)    RAM_EPILOGUE RAM_USE_CLASS_1 
0F07: 7F       RET                      (0236)    ret
0F08: 62 D0 00 MOV   REG[0xD0],0x0      
0F0B: 51 0B    MOV   A,[previousSecond|elapsedSeconds+11]
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0243) ;
                                        (0244) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  ARGUMENTS:    None.
                                        (0247) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0248) ;  SIDE EFFECTS:
                                        (0249) ;    The A and X registers may be modified by this or future implementations
                                        (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0253) ;    functions.
                                        (0254) ;          
                                        (0255) ;    Currently only the page pointer registers listed below are modified: 
                                        (0256) ;          CUR_PP
                                        (0257) ;
                                        (0258)  ADCINC_fIsDataAvailable:
                                        (0259) _ADCINC_fIsDataAvailable:
                                        (0260)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0261)    ADCINC_fIsDataAvailable_M   
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
0F0D: 7F       RET                      (0263)    ret
0F0E: 62 D0 00 MOV   REG[0xD0],0x0      
0F11: 55 0B 00 MOV   [previousSecond|elapsedSeconds+11],0x0
0F14: 58 07    MOV   X,[previousSecond|elapsedSeconds+7]
0F16: 51 08    MOV   A,[previousSecond|elapsedSeconds+8]
0F18: 3C 0B 00 CMP   [previousSecond|elapsedSeconds+11],0x0
0F1B: BF F5    JNZ   0x0F11             
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0270) ;                  ADCINC_wClearFlagGetData
                                        (0271) ;
                                        (0272) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0273) ;                  Flag is checked after trandfer to insure valid data.
                                        (0274) ;                  available. Also clears the DATA_READY flag. 
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  ARGUMENTS:    None.
                                        (0277) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;          
                                        (0285) ;    Currently only the page pointer registers listed below are modified: 
                                        (0286) ;          CUR_PP
                                        (0287) ;
                                        (0288)  ADCINC_iClearFlagGetData:
                                        (0289) _ADCINC_iClearFlagGetData:
                                        (0290)  ADCINC_wClearFlagGetData:
                                        (0291) _ADCINC_wClearFlagGetData:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0293)    ADCINC_iClearFlagGetData_M   
                                        (0294)    RAM_EPILOGUE RAM_USE_CLASS_4
0F1D: 7F       RET                      (0295)    ret
0F1E: 62 D0 00 MOV   REG[0xD0],0x0      
0F21: 55 0B 00 MOV   [previousSecond|elapsedSeconds+11],0x0
0F24: 51 08    MOV   A,[previousSecond|elapsedSeconds+8]
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) 
                                        (0299) .SECTION
                                        (0300) ;-----------------------------------------------------------------------------
                                        (0301) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0302) ;                  ADCINC_bClearFlagGetData
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315) ;    Currently only the page pointer registers listed below are modified: 
                                        (0316) ;          CUR_PP
                                        (0317) ;
                                        (0318)  ADCINC_cClearFlagGetData:
                                        (0319) _ADCINC_cClearFlagGetData:
                                        (0320)  ADCINC_bClearFlagGetData:
                                        (0321) _ADCINC_bClearFlagGetData:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0323)    ADCINC_bClearFlagGetData_M     
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0F26: 7F       RET                      (0325)    ret
0F27: 62 D0 00 MOV   REG[0xD0],0x0      
0F2A: 58 07    MOV   X,[previousSecond|elapsedSeconds+7]
0F2C: 51 08    MOV   A,[previousSecond|elapsedSeconds+8]
                                        (0326) .ENDSECTION
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0330) ;				   ADCINC_wGetData
                                        (0331) ;
                                        (0332) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0333) ;                   available.
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;  ARGUMENTS:    None.
                                        (0336) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0337) ;  SIDE EFFECTS:
                                        (0338) ;    The A and X registers may be modified by this or future implementations
                                        (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0342) ;    functions.
                                        (0343) ;          
                                        (0344) ;    Currently only the page pointer registers listed below are modified: 
                                        (0345) ;          CUR_PP
                                        (0346) ;
                                        (0347)  ADCINC_iGetData:
                                        (0348) _ADCINC_iGetData:
                                        (0349)  ADCINC_wGetData:
                                        (0350) _ADCINC_wGetData:
                                        (0351)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0352)    ADCINC_wGetData_M          
                                        (0353)    RAM_EPILOGUE RAM_USE_CLASS_4
0F2E: 7F       RET                      (0354)    ret
0F2F: 62 D0 00 MOV   REG[0xD0],0x0      
0F32: 51 08    MOV   A,[previousSecond|elapsedSeconds+8]
                                        (0355) .ENDSECTION
                                        (0356) .SECTION
                                        (0357) ;-----------------------------------------------------------------------------
                                        (0358) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0359) ;                  ADCINC_cGetData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0362) ;                   available.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  ARGUMENTS:    None.
                                        (0365) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0366) ;  SIDE EFFECTS:
                                        (0367) ;    The A and X registers may be modified by this or future implementations
                                        (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0371) ;    functions.
                                        (0372) ;          
                                        (0373) ;    Currently only the page pointer registers listed below are modified: 
                                        (0374) ;          CUR_PP
                                        (0375) ;
                                        (0376)  ADCINC_bGetData:
                                        (0377) _ADCINC_bGetData:
                                        (0378)  ADCINC_cGetData:
                                        (0379) _ADCINC_cGetData:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0381)    ADCINC_cGetData_M        
                                        (0382)    RAM_EPILOGUE RAM_USE_CLASS_4
0F34: 7F       RET                      (0383)    ret
0F35: 62 D0 00 MOV   REG[0xD0],0x0      
0F38: 51 0B    MOV   A,[previousSecond|elapsedSeconds+11]
0F3A: 55 0B 00 MOV   [previousSecond|elapsedSeconds+11],0x0
                                        (0384) .ENDSECTION
                                        (0385) 
                                        (0386) 
                                        (0387) .SECTION
                                        (0388) ;-----------------------------------------------------------------------------
                                        (0389) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0390) ;
                                        (0391) ;  DESCRIPTION: Clears the data ready flag.
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  ARGUMENTS:    None.
                                        (0394) ;  RETURNS:      Nothing.
                                        (0395) ;  SIDE EFFECTS: 
                                        (0396) ;    The DATA_READY flag is cleared.
                                        (0397) ;    
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;          
                                        (0404) ;    Currently only the page pointer registers listed below are modified: 
                                        (0405) ;          CUR_PP
                                        (0406) ;
                                        (0407)  ADCINC_fClearFlag:
                                        (0408) _ADCINC_fClearFlag:
                                        (0409)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0410)    ADCINC_fClearFlag_M    
                                        (0411)    RAM_EPILOGUE RAM_USE_CLASS_4
0F3D: 7F       RET                      (0412)    ret
0F3E: 60 22    MOV   REG[0x22],A        
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;
                                        (0424) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0425) ;  RETURNS:   Nothing
                                        (0426) ;  SIDE EFFECTS:
                                        (0427) ;    The A and X registers may be modified by this or future implementations
                                        (0428) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0429) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0430) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0431) ;    functions.
                                        (0432) ;
                                        (0433)  ADCINC_WritePulseWidth:
                                        (0434) _ADCINC_WritePulseWidth:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0436)    ADCINC_WritePulseWidth_M  
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
0F40: 7F       RET                      (0438)    ret
                                        (0439) .ENDSECTION
                                        (0440) 
                                        (0441) ; End of File ADCINC.asm
FILE: C:\Users\Rod\Desktop\RTC\RTC\bcdutil.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "BcdUtil.h"
(0004) 
(0005) void bcdToDec(BYTE bcd10, BYTE bcd, BYTE *dec)
(0006) {
__UserModules_end|_bcdToDec|__text_start|_bcdToDec:
  dec                  --> X-7
  bcd                  --> X-5
  bcd10                --> X-4
    0F41: 10       PUSH  X
    0F42: 4F       MOV   X,SP
(0007) 	*dec = (bcd10 & 0xf) * 10 + (bcd & 0xf);
    0F43: 62 D0 00 MOV   REG[0xD0],0x0
    0F46: 52 FB    MOV   A,[X-5]
    0F48: 21 0F    AND   A,0xF
    0F4A: 53 A2    MOV   [__r0],A
    0F4C: 52 FC    MOV   A,[X-4]
    0F4E: 21 0F    AND   A,0xF
    0F50: 60 E8    MOV   REG[0xE8],A
    0F52: 62 E9 0A MOV   REG[0xE9],0xA
    0F55: 40       NOP   
    0F56: 5D EB    MOV   A,REG[0xEB]
    0F58: 02 A2    ADD   A,[__r0]
    0F5A: 53 A2    MOV   [__r0],A
    0F5C: 52 FA    MOV   A,[X-6]
    0F5E: 53 9F    MOV   [__r3],A
    0F60: 52 F9    MOV   A,[X-7]
    0F62: 60 D5    MOV   REG[0xD5],A
    0F64: 51 A2    MOV   A,[__r0]
    0F66: 3F 9F    MVI   [__r3],A
    0F68: 20       POP   X
    0F69: 7F       RET   
(0008) }
(0009) 
(0010) void decToBcd(BYTE *bcd10, BYTE *bcd, BYTE dec)
(0011) {
_decToBcd:
  dec                  --> X-8
  bcd                  --> X-7
  bcd10                --> X-5
    0F6A: 10       PUSH  X
    0F6B: 4F       MOV   X,SP
(0012) 	*bcd10 = dec/10;
    0F6C: 62 D0 00 MOV   REG[0xD0],0x0
    0F6F: 50 0A    MOV   A,0xA
    0F71: 08       PUSH  A
    0F72: 52 F8    MOV   A,[X-8]
    0F74: 08       PUSH  A
    0F75: 7C 34 89 LCALL 0x3489
    0F78: 18       POP   A
    0F79: 53 A2    MOV   [__r0],A
    0F7B: 38 FF    ADD   SP,0xFF
    0F7D: 52 FC    MOV   A,[X-4]
    0F7F: 53 9F    MOV   [__r3],A
    0F81: 52 FB    MOV   A,[X-5]
    0F83: 60 D5    MOV   REG[0xD5],A
    0F85: 51 A2    MOV   A,[__r0]
    0F87: 3F 9F    MVI   [__r3],A
(0013) 	*bcd = dec - (*bcd10 * 10);
    0F89: 52 FC    MOV   A,[X-4]
    0F8B: 53 A1    MOV   [__r1],A
    0F8D: 52 FB    MOV   A,[X-5]
    0F8F: 60 D4    MOV   REG[0xD4],A
    0F91: 3E A1    MVI   A,[__r1]
    0F93: 60 E8    MOV   REG[0xE8],A
    0F95: 62 E9 0A MOV   REG[0xE9],0xA
    0F98: 40       NOP   
    0F99: 5D EB    MOV   A,REG[0xEB]
    0F9B: 53 A2    MOV   [__r0],A
    0F9D: 52 F8    MOV   A,[X-8]
    0F9F: 12 A2    SUB   A,[__r0]
    0FA1: 53 A2    MOV   [__r0],A
    0FA3: 52 FA    MOV   A,[X-6]
    0FA5: 53 9F    MOV   [__r3],A
    0FA7: 52 F9    MOV   A,[X-7]
    0FA9: 60 D5    MOV   REG[0xD5],A
    0FAB: 51 A2    MOV   A,[__r0]
    0FAD: 3F 9F    MVI   [__r3],A
    0FAF: 20       POP   X
    0FB0: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\configview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "configView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void ConfigView_Start(void)
(0014) {
_ConfigView_Start:
    0FB1: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void ConfigView_Callback(void)
(0019) {
_ConfigView_Callback:
  conf                 --> X+0
    0FB2: 10       PUSH  X
    0FB3: 4F       MOV   X,SP
    0FB4: 38 0B    ADD   SP,0xB
(0020) 	Config conf;
(0021) 	Persist_LoadConfig(&conf);
    0FB6: 62 D0 00 MOV   REG[0xD0],0x0
    0FB9: 50 07    MOV   A,0x7
    0FBB: 08       PUSH  A
    0FBC: 10       PUSH  X
    0FBD: 7C 23 65 LCALL _Persist_LoadConfig
    0FC0: 38 FE    ADD   SP,0xFE
(0022) 
(0023) 	currentView = CONFIG;
    0FC2: 62 D0 00 MOV   REG[0xD0],0x0
    0FC5: 55 B8 04 MOV   [currentView],0x4
(0024) 	Menu_Clear();
    0FC8: 7C 21 CF LCALL _Menu_Clear
(0025) 	LCD_Position(0, 0);
    0FCB: 10       PUSH  X
    0FCC: 50 00    MOV   A,0x0
    0FCE: 57 00    MOV   X,0x0
    0FD0: 7C 0A 0A LCALL _LCD_Position
    0FD3: 20       POP   X
(0026) 	if(conf.flags.registerEnabled)
    0FD4: 52 00    MOV   A,[X+0]
    0FD6: 62 D0 00 MOV   REG[0xD0],0x0
    0FD9: 67       ASR   A
    0FDA: 67       ASR   A
    0FDB: 67       ASR   A
    0FDC: 67       ASR   A
    0FDD: 67       ASR   A
    0FDE: 67       ASR   A
    0FDF: 67       ASR   A
    0FE0: 21 01    AND   A,0x1
    0FE2: 53 A2    MOV   [__r0],A
    0FE4: 26 A2 01 AND   [__r0],0x1
    0FE7: A0 0F    JZ    0x0FF7
(0027) 	{
(0028) 		LCD_PrCString("Registrar: Si");
    0FE9: 10       PUSH  X
    0FEA: 50 01    MOV   A,0x1
    0FEC: 08       PUSH  A
    0FED: 50 CA    MOV   A,0xCA
    0FEF: 5C       MOV   X,A
    0FF0: 18       POP   A
    0FF1: 7C 08 85 LCALL _LCD_PrCString
    0FF4: 20       POP   X
(0029) 	}
    0FF5: 80 0D    JMP   0x1003
(0030) 	else
(0031) 	{
(0032) 		LCD_PrCString("Registrar: No");
    0FF7: 10       PUSH  X
    0FF8: 50 01    MOV   A,0x1
    0FFA: 08       PUSH  A
    0FFB: 50 BC    MOV   A,0xBC
    0FFD: 5C       MOV   X,A
    0FFE: 18       POP   A
    0FFF: 7C 08 85 LCALL _LCD_PrCString
    1002: 20       POP   X
(0033) 
(0034) 	}
(0035) 	LCD_Position(1,0);
    1003: 10       PUSH  X
    1004: 57 00    MOV   X,0x0
    1006: 50 01    MOV   A,0x1
    1008: 7C 0A 0A LCALL _LCD_Position
    100B: 20       POP   X
(0036) 	if(conf.flags.alarmEnabled)
    100C: 52 00    MOV   A,[X+0]
    100E: 62 D0 00 MOV   REG[0xD0],0x0
    1011: 67       ASR   A
    1012: 67       ASR   A
    1013: 67       ASR   A
    1014: 67       ASR   A
    1015: 67       ASR   A
    1016: 67       ASR   A
    1017: 21 03    AND   A,0x3
    1019: 53 A2    MOV   [__r0],A
    101B: 26 A2 01 AND   [__r0],0x1
    101E: A0 0F    JZ    0x102E
(0037) 	{
(0038) 		LCD_PrCString("Alarma:    Si");
    1020: 10       PUSH  X
    1021: 50 01    MOV   A,0x1
    1023: 08       PUSH  A
    1024: 50 AE    MOV   A,0xAE
    1026: 5C       MOV   X,A
    1027: 18       POP   A
    1028: 7C 08 85 LCALL _LCD_PrCString
    102B: 20       POP   X
(0039) 	}
    102C: 80 0D    JMP   0x103A
(0040) 	else
(0041) 	{
(0042) 		LCD_PrCString("Alarma:    No");
    102E: 10       PUSH  X
    102F: 50 01    MOV   A,0x1
    1031: 08       PUSH  A
    1032: 50 A0    MOV   A,0xA0
    1034: 5C       MOV   X,A
    1035: 18       POP   A
    1036: 7C 08 85 LCALL _LCD_PrCString
    1039: 20       POP   X
(0043) 	}
    103A: 38 F5    ADD   SP,0xF5
    103C: 20       POP   X
    103D: 7F       RET   
(0044) }
(0045) 
(0046) void ConfigView_Update(void)
(0047) {
_ConfigView_Update:
  conf                 --> X+0
    103E: 10       PUSH  X
    103F: 4F       MOV   X,SP
    1040: 38 11    ADD   SP,0x11
(0048) 	if(Keypad_IsKeyStored())
    1042: 7C 17 9D LCALL _Keypad_IsKeyStored
    1045: 62 D0 00 MOV   REG[0xD0],0x0
    1048: 39 00    CMP   A,0x0
    104A: A1 5D    JZ    0x11A8
(0049) 	{
(0050) 		Config conf;
(0051) 		Persist_LoadConfig(&conf);
    104C: 50 07    MOV   A,0x7
    104E: 08       PUSH  A
    104F: 10       PUSH  X
    1050: 7C 23 65 LCALL _Persist_LoadConfig
    1053: 38 FE    ADD   SP,0xFE
    1055: 62 D0 00 MOV   REG[0xD0],0x0
(0052) 
(0053) 		switch(Keypad_GetKey())
    1058: 7C 17 B5 LCALL _Keypad_GetKey
    105B: 62 D0 00 MOV   REG[0xD0],0x0
    105E: 54 0C    MOV   [X+12],A
    1060: 56 0B 00 MOV   [X+11],0x0
    1063: 52 0C    MOV   A,[X+12]
    1065: 11 48    SUB   A,0x48
    1067: 53 95    MOV   [__rY],A
    1069: 52 0B    MOV   A,[X+11]
    106B: 31 80    XOR   A,0x80
    106D: 19 80    SBB   A,0x80
    106F: 2A 95    OR    A,[__rY]
    1071: A0 6E    JZ    0x10E0
    1073: D0 0D    JNC   0x1081
    1075: 3D 0B 00 CMP   [X+11],0x0
    1078: B0 06    JNZ   0x107F
    107A: 3D 0C 11 CMP   [X+12],0x11
    107D: A0 B3    JZ    0x1131
    107F: 80 B6    JMP   0x1136
    1081: 3D 0B 00 CMP   [X+11],0x0
    1084: B0 06    JNZ   0x108B
    1086: 3D 0C 88 CMP   [X+12],0x88
    1089: A0 03    JZ    0x108D
    108B: 80 AA    JMP   0x1136
(0054) 		{
(0055) 			case 0x88:
(0056) 				// "1"
(0057) 				conf.flags.registerEnabled = !conf.flags.registerEnabled;
    108D: 52 00    MOV   A,[X+0]
    108F: 62 D0 00 MOV   REG[0xD0],0x0
    1092: 67       ASR   A
    1093: 67       ASR   A
    1094: 67       ASR   A
    1095: 67       ASR   A
    1096: 67       ASR   A
    1097: 67       ASR   A
    1098: 67       ASR   A
    1099: 21 01    AND   A,0x1
    109B: 53 A2    MOV   [__r0],A
    109D: 26 A2 01 AND   [__r0],0x1
    10A0: B0 09    JNZ   0x10AA
    10A2: 56 0E 01 MOV   [X+14],0x1
    10A5: 56 0D 00 MOV   [X+13],0x0
    10A8: 80 07    JMP   0x10B0
    10AA: 56 0E 00 MOV   [X+14],0x0
    10AD: 56 0D 00 MOV   [X+13],0x0
    10B0: 62 D0 00 MOV   REG[0xD0],0x0
    10B3: 52 0E    MOV   A,[X+14]
    10B5: 53 A2    MOV   [__r0],A
    10B7: 26 A2 01 AND   [__r0],0x1
    10BA: 51 A2    MOV   A,[__r0]
    10BC: 64       ASL   A
    10BD: 64       ASL   A
    10BE: 64       ASL   A
    10BF: 64       ASL   A
    10C0: 64       ASL   A
    10C1: 64       ASL   A
    10C2: 64       ASL   A
    10C3: 53 A2    MOV   [__r0],A
    10C5: 26 A2 80 AND   [__r0],0x80
    10C8: 52 00    MOV   A,[X+0]
    10CA: 21 7F    AND   A,0x7F
    10CC: 2A A2    OR    A,[__r0]
    10CE: 54 00    MOV   [X+0],A
(0058) 				Persist_SaveConfig(&conf);
    10D0: 50 07    MOV   A,0x7
    10D2: 08       PUSH  A
    10D3: 10       PUSH  X
    10D4: 7C 23 3F LCALL _Persist_SaveConfig
    10D7: 38 FE    ADD   SP,0xFE
    10D9: 62 D0 00 MOV   REG[0xD0],0x0
    10DC: 53 A2    MOV   [__r0],A
(0059) 				break;
    10DE: 80 57    JMP   0x1136
(0060) 			case 0x48:
(0061) 				// "4"
(0062) 				conf.flags.alarmEnabled = !conf.flags.alarmEnabled;
    10E0: 52 00    MOV   A,[X+0]
    10E2: 62 D0 00 MOV   REG[0xD0],0x0
    10E5: 67       ASR   A
    10E6: 67       ASR   A
    10E7: 67       ASR   A
    10E8: 67       ASR   A
    10E9: 67       ASR   A
    10EA: 67       ASR   A
    10EB: 21 03    AND   A,0x3
    10ED: 53 A2    MOV   [__r0],A
    10EF: 26 A2 01 AND   [__r0],0x1
    10F2: B0 09    JNZ   0x10FC
    10F4: 56 10 01 MOV   [X+16],0x1
    10F7: 56 0F 00 MOV   [X+15],0x0
    10FA: 80 07    JMP   0x1102
    10FC: 56 10 00 MOV   [X+16],0x0
    10FF: 56 0F 00 MOV   [X+15],0x0
    1102: 62 D0 00 MOV   REG[0xD0],0x0
    1105: 52 10    MOV   A,[X+16]
    1107: 53 A2    MOV   [__r0],A
    1109: 26 A2 01 AND   [__r0],0x1
    110C: 51 A2    MOV   A,[__r0]
    110E: 64       ASL   A
    110F: 64       ASL   A
    1110: 64       ASL   A
    1111: 64       ASL   A
    1112: 64       ASL   A
    1113: 64       ASL   A
    1114: 53 A2    MOV   [__r0],A
    1116: 26 A2 40 AND   [__r0],0x40
    1119: 52 00    MOV   A,[X+0]
    111B: 21 BF    AND   A,0xBF
    111D: 2A A2    OR    A,[__r0]
    111F: 54 00    MOV   [X+0],A
(0063) 				Persist_SaveConfig(&conf);
    1121: 50 07    MOV   A,0x7
    1123: 08       PUSH  A
    1124: 10       PUSH  X
    1125: 7C 23 3F LCALL _Persist_SaveConfig
    1128: 38 FE    ADD   SP,0xFE
    112A: 62 D0 00 MOV   REG[0xD0],0x0
    112D: 53 A2    MOV   [__r0],A
(0064) 				break;
    112F: 80 06    JMP   0x1136
(0065) 			case 0x11:
(0066) 				// "D"
(0067) 				MainView_Callback();
    1131: 7C 1E E5 LCALL _MainView_Callback
(0068) 				return;
    1134: 80 73    JMP   0x11A8
(0069) 				break;
(0070) 		}
(0071) 
(0072) 		Menu_Clear();
    1136: 7C 21 CF LCALL _Menu_Clear
(0073) 		LCD_Position(0, 0);
    1139: 10       PUSH  X
    113A: 50 00    MOV   A,0x0
    113C: 57 00    MOV   X,0x0
    113E: 7C 0A 0A LCALL _LCD_Position
    1141: 20       POP   X
(0074) 		if(conf.flags.registerEnabled)
    1142: 52 00    MOV   A,[X+0]
    1144: 62 D0 00 MOV   REG[0xD0],0x0
    1147: 67       ASR   A
    1148: 67       ASR   A
    1149: 67       ASR   A
    114A: 67       ASR   A
    114B: 67       ASR   A
    114C: 67       ASR   A
    114D: 67       ASR   A
    114E: 21 01    AND   A,0x1
    1150: 53 A2    MOV   [__r0],A
    1152: 26 A2 01 AND   [__r0],0x1
    1155: A0 0F    JZ    0x1165
(0075) 		{
(0076) 			LCD_PrCString("Registrar: Si");
    1157: 10       PUSH  X
    1158: 50 01    MOV   A,0x1
    115A: 08       PUSH  A
    115B: 50 CA    MOV   A,0xCA
    115D: 5C       MOV   X,A
    115E: 18       POP   A
    115F: 7C 08 85 LCALL _LCD_PrCString
    1162: 20       POP   X
(0077) 		}
    1163: 80 0D    JMP   0x1171
(0078) 		else
(0079) 		{
(0080) 			LCD_PrCString("Registrar: No");
    1165: 10       PUSH  X
    1166: 50 01    MOV   A,0x1
    1168: 08       PUSH  A
    1169: 50 BC    MOV   A,0xBC
    116B: 5C       MOV   X,A
    116C: 18       POP   A
    116D: 7C 08 85 LCALL _LCD_PrCString
    1170: 20       POP   X
(0081) 
(0082) 		}
(0083) 		LCD_Position(1,0);
    1171: 10       PUSH  X
    1172: 57 00    MOV   X,0x0
    1174: 50 01    MOV   A,0x1
    1176: 7C 0A 0A LCALL _LCD_Position
    1179: 20       POP   X
(0084) 		if(conf.flags.alarmEnabled)
    117A: 52 00    MOV   A,[X+0]
    117C: 62 D0 00 MOV   REG[0xD0],0x0
    117F: 67       ASR   A
    1180: 67       ASR   A
    1181: 67       ASR   A
    1182: 67       ASR   A
    1183: 67       ASR   A
    1184: 67       ASR   A
    1185: 21 03    AND   A,0x3
    1187: 53 A2    MOV   [__r0],A
    1189: 26 A2 01 AND   [__r0],0x1
    118C: A0 0F    JZ    0x119C
(0085) 		{
(0086) 			LCD_PrCString("Alarma:    Si");
    118E: 10       PUSH  X
    118F: 50 01    MOV   A,0x1
    1191: 08       PUSH  A
    1192: 50 AE    MOV   A,0xAE
    1194: 5C       MOV   X,A
    1195: 18       POP   A
    1196: 7C 08 85 LCALL _LCD_PrCString
    1199: 20       POP   X
(0087) 		}
    119A: 80 0D    JMP   0x11A8
(0088) 		else
(0089) 		{
(0090) 			LCD_PrCString("Alarma:    No");
    119C: 10       PUSH  X
    119D: 50 01    MOV   A,0x1
    119F: 08       PUSH  A
    11A0: 50 A0    MOV   A,0xA0
    11A2: 5C       MOV   X,A
    11A3: 18       POP   A
    11A4: 7C 08 85 LCALL _LCD_PrCString
    11A7: 20       POP   X
(0091) 		}
(0092) 	}
    11A8: 38 EF    ADD   SP,0xEF
    11AA: 20       POP   X
    11AB: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\datetimeview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "dateTimeView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "Time.h"
(0007) #include "Rtc.h"
(0008) #include "viewManager.h"
(0009) #include "Keypad.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void DateTimeView_Start(void)
(0014) {
_DateTimeView_Start:
    11AC: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void DateTimeView_Callback(void)
(0019) {
(0020) 	currentView = DATETIME_CONFIG;
_DateTimeView_Callback:
    11AD: 62 D0 00 MOV   REG[0xD0],0x0
    11B0: 55 B8 01 MOV   [currentView],0x1
(0021) 	Menu_Clear();
    11B3: 7C 21 CF LCALL _Menu_Clear
(0022) 	LCD_Position(0, 0);
    11B6: 10       PUSH  X
    11B7: 50 00    MOV   A,0x0
    11B9: 57 00    MOV   X,0x0
    11BB: 7C 0A 0A LCALL _LCD_Position
(0023) 	LCD_PrCString("00/00/00");
    11BE: 50 01    MOV   A,0x1
    11C0: 08       PUSH  A
    11C1: 50 E1    MOV   A,0xE1
    11C3: 5C       MOV   X,A
    11C4: 18       POP   A
    11C5: 7C 08 85 LCALL _LCD_PrCString
(0024) 	LCD_Position(1,0);
    11C8: 57 00    MOV   X,0x0
    11CA: 50 01    MOV   A,0x1
    11CC: 7C 0A 0A LCALL _LCD_Position
(0025) 	LCD_PrCString("00:00:00");
    11CF: 50 01    MOV   A,0x1
    11D1: 08       PUSH  A
    11D2: 50 D8    MOV   A,0xD8
    11D4: 5C       MOV   X,A
    11D5: 18       POP   A
    11D6: 7C 08 85 LCALL _LCD_PrCString
    11D9: 20       POP   X
    11DA: 7F       RET   
(0026) }
(0027) 
(0028) void DateTimeView_Update(void)
(0029) {
_DateTimeView_Update:
    11DB: 10       PUSH  X
    11DC: 4F       MOV   X,SP
    11DD: 38 02    ADD   SP,0x2
(0030) 	if(Keypad_IsKeyStored())
    11DF: 7C 17 9D LCALL _Keypad_IsKeyStored
    11E2: 62 D0 00 MOV   REG[0xD0],0x0
    11E5: 39 00    CMP   A,0x0
    11E7: A1 32    JZ    0x131A
(0031) 	{
(0032) 		switch(Keypad_GetKey())
    11E9: 7C 17 B5 LCALL _Keypad_GetKey
    11EC: 62 D0 00 MOV   REG[0xD0],0x0
    11EF: 54 01    MOV   [X+1],A
    11F1: 56 00 00 MOV   [X+0],0x0
    11F4: 3D 00 00 CMP   [X+0],0x0
    11F7: B0 06    JNZ   0x11FE
    11F9: 3D 01 42 CMP   [X+1],0x42
    11FC: A0 DE    JZ    0x12DB
    11FE: 52 01    MOV   A,[X+1]
    1200: 11 44    SUB   A,0x44
    1202: 62 D0 00 MOV   REG[0xD0],0x0
    1205: 53 95    MOV   [__rY],A
    1207: 52 00    MOV   A,[X+0]
    1209: 31 80    XOR   A,0x80
    120B: 19 80    SBB   A,0x80
    120D: 2A 95    OR    A,[__rY]
    120F: A0 C1    JZ    0x12D1
    1211: D0 56    JNC   0x1268
    1213: 3D 00 00 CMP   [X+0],0x0
    1216: B0 06    JNZ   0x121D
    1218: 3D 01 22 CMP   [X+1],0x22
    121B: A0 DD    JZ    0x12F9
    121D: 52 01    MOV   A,[X+1]
    121F: 11 24    SUB   A,0x24
    1221: 62 D0 00 MOV   REG[0xD0],0x0
    1224: 53 95    MOV   [__rY],A
    1226: 52 00    MOV   A,[X+0]
    1228: 31 80    XOR   A,0x80
    122A: 19 80    SBB   A,0x80
    122C: 2A 95    OR    A,[__rY]
    122E: A0 C0    JZ    0x12EF
    1230: D0 2B    JNC   0x125C
    1232: 3D 00 00 CMP   [X+0],0x0
    1235: B0 06    JNZ   0x123C
    1237: 3D 01 11 CMP   [X+1],0x11
    123A: A0 C8    JZ    0x1303
    123C: 3D 00 00 CMP   [X+0],0x0
    123F: B0 06    JNZ   0x1246
    1241: 3D 01 12 CMP   [X+1],0x12
    1244: A0 CD    JZ    0x1312
    1246: 3D 00 00 CMP   [X+0],0x0
    1249: B0 06    JNZ   0x1250
    124B: 3D 01 14 CMP   [X+1],0x14
    124E: A0 50    JZ    0x129F
    1250: 3D 00 00 CMP   [X+0],0x0
    1253: B0 06    JNZ   0x125A
    1255: 3D 01 18 CMP   [X+1],0x18
    1258: A0 AF    JZ    0x1308
    125A: 80 BF    JMP   0x131A
    125C: 3D 00 00 CMP   [X+0],0x0
    125F: B0 06    JNZ   0x1266
    1261: 3D 01 28 CMP   [X+1],0x28
    1264: A0 80    JZ    0x12E5
    1266: 80 B3    JMP   0x131A
    1268: 3D 00 00 CMP   [X+0],0x0
    126B: B0 06    JNZ   0x1272
    126D: 3D 01 82 CMP   [X+1],0x82
    1270: A0 4C    JZ    0x12BD
    1272: 52 01    MOV   A,[X+1]
    1274: 11 84    SUB   A,0x84
    1276: 62 D0 00 MOV   REG[0xD0],0x0
    1279: 53 95    MOV   [__rY],A
    127B: 52 00    MOV   A,[X+0]
    127D: 31 80    XOR   A,0x80
    127F: 19 80    SBB   A,0x80
    1281: 2A 95    OR    A,[__rY]
    1283: A0 2F    JZ    0x12B3
    1285: D0 0D    JNC   0x1293
    1287: 3D 00 00 CMP   [X+0],0x0
    128A: B0 06    JNZ   0x1291
    128C: 3D 01 48 CMP   [X+1],0x48
    128F: A0 37    JZ    0x12C7
    1291: 80 88    JMP   0x131A
    1293: 3D 00 00 CMP   [X+0],0x0
    1296: B0 06    JNZ   0x129D
    1298: 3D 01 88 CMP   [X+1],0x88
    129B: A0 0D    JZ    0x12A9
    129D: 80 7C    JMP   0x131A
(0033) 		{
(0034) 			case 0x14:
(0035) 					// "0"
(0036) 					Time_Adj_Mi(TIME_DOWN);
    129F: 50 00    MOV   A,0x0
    12A1: 08       PUSH  A
    12A2: 7C 2D 7C LCALL _Time_Adj_Mi
    12A5: 38 FF    ADD   SP,0xFF
(0037) 					break;
    12A7: 80 72    JMP   0x131A
(0038) 				case 0x88:
(0039) 					// "1"
(0040) 					Time_Adj_D(TIME_UP);
    12A9: 50 01    MOV   A,0x1
    12AB: 08       PUSH  A
    12AC: 7C 30 34 LCALL _Time_Adj_D
    12AF: 38 FF    ADD   SP,0xFF
(0041) 					break;
    12B1: 80 68    JMP   0x131A
(0042) 				case 0x84:
(0043) 					// "2"
(0044) 					Time_Adj_Mo(TIME_UP);
    12B3: 50 01    MOV   A,0x1
    12B5: 08       PUSH  A
    12B6: 7C 31 A1 LCALL _Time_Adj_Mo
    12B9: 38 FF    ADD   SP,0xFF
(0045) 					break;
    12BB: 80 5E    JMP   0x131A
(0046) 				case 0x82:
(0047) 					// "3"
(0048) 					Time_Adj_Y(TIME_UP);
    12BD: 50 01    MOV   A,0x1
    12BF: 08       PUSH  A
    12C0: 7C 33 0F LCALL _Time_Adj_Y
    12C3: 38 FF    ADD   SP,0xFF
(0049) 					break;
    12C5: 80 54    JMP   0x131A
(0050) 				case 0x48:
(0051) 					// "4"
(0052) 					Time_Adj_D(TIME_DOWN);
    12C7: 50 00    MOV   A,0x0
    12C9: 08       PUSH  A
    12CA: 7C 30 34 LCALL _Time_Adj_D
    12CD: 38 FF    ADD   SP,0xFF
(0053) 					break;
    12CF: 80 4A    JMP   0x131A
(0054) 				case 0x44:
(0055) 					// "5"
(0056) 					Time_Adj_Mo(TIME_DOWN);
    12D1: 50 00    MOV   A,0x0
    12D3: 08       PUSH  A
    12D4: 7C 31 A1 LCALL _Time_Adj_Mo
    12D7: 38 FF    ADD   SP,0xFF
(0057) 					break;
    12D9: 80 40    JMP   0x131A
(0058) 				case 0x42:
(0059) 					// "6"
(0060) 					Time_Adj_Y(TIME_DOWN);
    12DB: 50 00    MOV   A,0x0
    12DD: 08       PUSH  A
    12DE: 7C 33 0F LCALL _Time_Adj_Y
    12E1: 38 FF    ADD   SP,0xFF
(0061) 					break;
    12E3: 80 36    JMP   0x131A
(0062) 				case 0x28:
(0063) 					// "7"
(0064) 					Time_Adj_H(TIME_UP);
    12E5: 50 01    MOV   A,0x1
    12E7: 08       PUSH  A
    12E8: 7C 2E 3A LCALL _Time_Adj_H
    12EB: 38 FF    ADD   SP,0xFF
(0065) 					break;
    12ED: 80 2C    JMP   0x131A
(0066) 				case 0x24:
(0067) 					// "8"
(0068) 					Time_Adj_Mi(TIME_UP);
    12EF: 50 01    MOV   A,0x1
    12F1: 08       PUSH  A
    12F2: 7C 2D 7C LCALL _Time_Adj_Mi
    12F5: 38 FF    ADD   SP,0xFF
(0069) 					break;
    12F7: 80 22    JMP   0x131A
(0070) 				case 0x22:
(0071) 					// "9"
(0072) 					Time_Adj_S(TIME_UP);
    12F9: 50 01    MOV   A,0x1
    12FB: 08       PUSH  A
    12FC: 7C 2C BE LCALL _Time_Adj_S
    12FF: 38 FF    ADD   SP,0xFF
(0073) 					break;
    1301: 80 18    JMP   0x131A
(0074) 				case 0x11:
(0075) 					// "D"
(0076) 					MainView_Callback();
    1303: 7C 1E E5 LCALL _MainView_Callback
(0077) 					return;
    1306: 80 75    JMP   0x137C
(0078) 					break;
(0079) 				case 0x18:
(0080) 					// "*"
(0081) 					Time_Adj_H(TIME_DOWN);
    1308: 50 00    MOV   A,0x0
    130A: 08       PUSH  A
    130B: 7C 2E 3A LCALL _Time_Adj_H
    130E: 38 FF    ADD   SP,0xFF
(0082) 					break;
    1310: 80 09    JMP   0x131A
(0083) 				case 0x12:
(0084) 					// "#"
(0085) 					Time_Adj_S(TIME_DOWN);
    1312: 50 00    MOV   A,0x0
    1314: 08       PUSH  A
    1315: 7C 2C BE LCALL _Time_Adj_S
    1318: 38 FF    ADD   SP,0xFF
(0086) 					break;
(0087) 		}
(0088) 	}
(0089) 
(0090) 	Rtc_ReadFromRtc();
    131A: 7C 26 7C LCALL _Rtc_ReadFromRtc
    131D: 62 D0 00 MOV   REG[0xD0],0x0
(0091) 	
(0092) 	LCD_Position(0, 0);
    1320: 10       PUSH  X
    1321: 50 00    MOV   A,0x0
    1323: 57 00    MOV   X,0x0
    1325: 7C 0A 0A LCALL _LCD_Position
(0093) 	LCD_PrHexByte(datetime._04h.byte);
    1328: 62 D0 00 MOV   REG[0xD0],0x0
    132B: 51 A7    MOV   A,[datetime+4]
    132D: 7C 08 A7 LCALL _LCD_PrHexByte
(0094) 	LCD_Position(0, 3);
    1330: 57 03    MOV   X,0x3
    1332: 50 00    MOV   A,0x0
    1334: 7C 0A 0A LCALL _LCD_Position
(0095) 	LCD_PrHexByte(datetime._05h.byte);
    1337: 62 D0 00 MOV   REG[0xD0],0x0
    133A: 51 A8    MOV   A,[datetime+5]
    133C: 7C 08 A7 LCALL _LCD_PrHexByte
(0096) 	LCD_Position(0, 6);
    133F: 57 06    MOV   X,0x6
    1341: 50 00    MOV   A,0x0
    1343: 7C 0A 0A LCALL _LCD_Position
(0097) 	LCD_PrHexByte(datetime._06h.byte);
    1346: 62 D0 00 MOV   REG[0xD0],0x0
    1349: 51 A9    MOV   A,[datetime+6]
    134B: 7C 08 A7 LCALL _LCD_PrHexByte
(0098) 
(0099) 	LCD_Position(1, 0);
    134E: 57 00    MOV   X,0x0
    1350: 50 01    MOV   A,0x1
    1352: 7C 0A 0A LCALL _LCD_Position
(0100) 	/*if(is12h)
(0101) 	{
(0102) 		LCD_PrHexByte(datetime._02h.bits_ampm.hours | (datetime._02h.bits_ampm.hours10 << 4));
(0103) 	}
(0104) 	else
(0105) 	{*/
(0106) 		LCD_PrHexByte(datetime._02h.byte);
    1355: 62 D0 00 MOV   REG[0xD0],0x0
    1358: 51 A5    MOV   A,[datetime+2]
    135A: 7C 08 A7 LCALL _LCD_PrHexByte
(0107) 	//}
(0108) 	LCD_Position(1, 3);
    135D: 57 03    MOV   X,0x3
    135F: 50 01    MOV   A,0x1
    1361: 7C 0A 0A LCALL _LCD_Position
(0109) 	LCD_PrHexByte(datetime._01h.byte);
    1364: 62 D0 00 MOV   REG[0xD0],0x0
    1367: 51 A4    MOV   A,[datetime+1]
    1369: 7C 08 A7 LCALL _LCD_PrHexByte
(0110) 	LCD_Position(1, 6);
    136C: 57 06    MOV   X,0x6
    136E: 50 01    MOV   A,0x1
    1370: 7C 0A 0A LCALL _LCD_Position
(0111) 	LCD_PrHexByte(datetime._00h.byte);
    1373: 62 D0 00 MOV   REG[0xD0],0x0
    1376: 51 A3    MOV   A,[datetime]
    1378: 7C 08 A7 LCALL _LCD_PrHexByte
    137B: 20       POP   X
    137C: 38 FE    ADD   SP,0xFE
    137E: 20       POP   X
    137F: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\dateutil.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "dateUtil.h"
(0004) 
(0005) BOOL isLeapYear(unsigned short year)
(0006) {
_isLeapYear:
  year                 --> X-5
    1380: 10       PUSH  X
    1381: 4F       MOV   X,SP
    1382: 38 02    ADD   SP,0x2
(0007) 	return (!(year%4) && (year%100) || !(year%400));
    1384: 62 D0 00 MOV   REG[0xD0],0x0
    1387: 52 FC    MOV   A,[X-4]
    1389: 21 03    AND   A,0x3
    138B: 53 A1    MOV   [__r1],A
    138D: 52 FB    MOV   A,[X-5]
    138F: 21 00    AND   A,0x0
    1391: 39 00    CMP   A,0x0
    1393: B0 27    JNZ   0x13BB
    1395: 3C A1 00 CMP   [__r1],0x0
    1398: B0 22    JNZ   0x13BB
    139A: 62 D0 00 MOV   REG[0xD0],0x0
    139D: 50 00    MOV   A,0x0
    139F: 08       PUSH  A
    13A0: 50 64    MOV   A,0x64
    13A2: 08       PUSH  A
    13A3: 52 FB    MOV   A,[X-5]
    13A5: 08       PUSH  A
    13A6: 52 FC    MOV   A,[X-4]
    13A8: 08       PUSH  A
    13A9: 7C 34 7E LCALL 0x347E
    13AC: 38 FE    ADD   SP,0xFE
    13AE: 18       POP   A
    13AF: 53 A1    MOV   [__r1],A
    13B1: 18       POP   A
    13B2: 39 00    CMP   A,0x0
    13B4: B0 27    JNZ   0x13DC
    13B6: 3C A1 00 CMP   [__r1],0x0
    13B9: B0 22    JNZ   0x13DC
    13BB: 62 D0 00 MOV   REG[0xD0],0x0
    13BE: 50 01    MOV   A,0x1
    13C0: 08       PUSH  A
    13C1: 50 90    MOV   A,0x90
    13C3: 08       PUSH  A
    13C4: 52 FB    MOV   A,[X-5]
    13C6: 08       PUSH  A
    13C7: 52 FC    MOV   A,[X-4]
    13C9: 08       PUSH  A
    13CA: 7C 34 7E LCALL 0x347E
    13CD: 38 FE    ADD   SP,0xFE
    13CF: 18       POP   A
    13D0: 53 A1    MOV   [__r1],A
    13D2: 18       POP   A
    13D3: 39 00    CMP   A,0x0
    13D5: B0 0E    JNZ   0x13E4
    13D7: 3C A1 00 CMP   [__r1],0x0
    13DA: B0 09    JNZ   0x13E4
    13DC: 56 01 01 MOV   [X+1],0x1
    13DF: 56 00 00 MOV   [X+0],0x0
    13E2: 80 07    JMP   0x13EA
    13E4: 56 01 00 MOV   [X+1],0x0
    13E7: 56 00 00 MOV   [X+0],0x0
    13EA: 62 D0 00 MOV   REG[0xD0],0x0
    13ED: 52 01    MOV   A,[X+1]
    13EF: 38 FE    ADD   SP,0xFE
    13F1: 20       POP   X
    13F2: 7F       RET   
(0008) }
(0009) 
(0010) BOOL isValidDate(BYTE day, BYTE month, BYTE year)
(0011) {
_isValidDate:
  monthLen             --> X+2
  fullYear             --> X+0
  year                 --> X-6
  month                --> X-5
  day                  --> X-4
    13F3: 10       PUSH  X
    13F4: 4F       MOV   X,SP
    13F5: 38 0E    ADD   SP,0xE
(0012) 	unsigned short fullYear = 2000 + year;
    13F7: 62 D0 00 MOV   REG[0xD0],0x0
    13FA: 52 FA    MOV   A,[X-6]
    13FC: 53 A1    MOV   [__r1],A
    13FE: 55 A2 00 MOV   [__r0],0x0
    1401: 06 A1 D0 ADD   [__r1],0xD0
    1404: 0E A2 07 ADC   [__r0],0x7
    1407: 51 A1    MOV   A,[__r1]
    1409: 54 01    MOV   [X+1],A
    140B: 51 A2    MOV   A,[__r0]
    140D: 54 00    MOV   [X+0],A
(0013) 	BYTE monthLen[]={31,28,31,30,31,30,31,31,30,31,30,31};
    140F: 55 A1 EA MOV   [__r1],0xEA
    1412: 55 A2 01 MOV   [__r0],0x1
    1415: 5A 9F    MOV   [__r3],X
    1417: 06 9F 02 ADD   [__r3],0x2
    141A: 62 D5 07 MOV   REG[0xD5],0x7
    141D: 10       PUSH  X
    141E: 55 96 00 MOV   [__rX],0x0
    1421: 51 A2    MOV   A,[__r0]
    1423: 58 A1    MOV   X,[__r1]
    1425: 08       PUSH  A
    1426: 28       ROMX  
    1427: 62 D0 00 MOV   REG[0xD0],0x0
    142A: 3F 9F    MVI   [__r3],A
    142C: 18       POP   A
    142D: 75       INC   X
    142E: 09 00    ADC   A,0x0
    1430: 76 96    INC   [__rX]
    1432: 3C 96 0C CMP   [__rX],0xC
    1435: BF EF    JNZ   0x1425
    1437: 20       POP   X
(0014) 	
(0015) 	if(year > 99) return FALSE;
    1438: 50 63    MOV   A,0x63
    143A: 3B FA    CMP   A,[X-6]
    143C: D0 08    JNC   0x1445
    143E: 62 D0 00 MOV   REG[0xD0],0x0
    1441: 50 00    MOV   A,0x0
    1443: 80 63    JMP   0x14A7
(0016) 
(0017) 	if (!fullYear || !month || !day || month>12)
    1445: 3D 00 00 CMP   [X+0],0x0
    1448: B0 06    JNZ   0x144F
    144A: 3D 01 00 CMP   [X+1],0x0
    144D: A0 11    JZ    0x145F
    144F: 3D FB 00 CMP   [X-5],0x0
    1452: A0 0C    JZ    0x145F
    1454: 3D FC 00 CMP   [X-4],0x0
    1457: A0 07    JZ    0x145F
    1459: 50 0C    MOV   A,0xC
    145B: 3B FB    CMP   A,[X-5]
    145D: D0 08    JNC   0x1466
(0018) 		return FALSE;
    145F: 62 D0 00 MOV   REG[0xD0],0x0
    1462: 50 00    MOV   A,0x0
    1464: 80 42    JMP   0x14A7
(0019) 	if (isLeapYear(fullYear) && month==2)
    1466: 52 00    MOV   A,[X+0]
    1468: 08       PUSH  A
    1469: 52 01    MOV   A,[X+1]
    146B: 08       PUSH  A
    146C: 9F 12    CALL  _isLeapYear
    146E: 38 FE    ADD   SP,0xFE
    1470: 62 D0 00 MOV   REG[0xD0],0x0
    1473: 39 00    CMP   A,0x0
    1475: A0 08    JZ    0x147E
    1477: 3D FB 02 CMP   [X-5],0x2
    147A: B0 03    JNZ   0x147E
(0020) 		monthLen[1]++;
    147C: 77 03    INC   [X+3]
(0021) 	if (day > monthLen[month-1])
    147E: 62 D0 00 MOV   REG[0xD0],0x0
    1481: 55 A2 07 MOV   [__r0],0x7
    1484: 5A A1    MOV   [__r1],X
    1486: 06 A1 01 ADD   [__r1],0x1
    1489: 52 FB    MOV   A,[X-5]
    148B: 02 A1    ADD   A,[__r1]
    148D: 53 A1    MOV   [__r1],A
    148F: 50 00    MOV   A,0x0
    1491: 0A A2    ADC   A,[__r0]
    1493: 60 D4    MOV   REG[0xD4],A
    1495: 3E A1    MVI   A,[__r1]
    1497: 3B FC    CMP   A,[X-4]
    1499: D0 08    JNC   0x14A2
(0022) 		return FALSE;
    149B: 62 D0 00 MOV   REG[0xD0],0x0
    149E: 50 00    MOV   A,0x0
    14A0: 80 06    JMP   0x14A7
(0023) 	return TRUE;
    14A2: 62 D0 00 MOV   REG[0xD0],0x0
    14A5: 50 01    MOV   A,0x1
    14A7: 38 F2    ADD   SP,0xF2
    14A9: 20       POP   X
    14AA: 7F       RET   
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
14AB: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
14AC: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
14AE: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
14B0: 78       DEC   A                  (0062)     dec   A
14B1: BF FC    JNZ   0x14AE             (0063)     jnz   DELAY50US
                                        (0064) 
14B3: 18       POP   A                  (0065) 	pop A
14B4: 78       DEC   A                  (0066) 	dec   A
14B5: BF F5    JNZ   _Delay10msTimes    (0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
14B7: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
14B8: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
14BA: 78       DEC   A                  (0104) 	dec A
14BB: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
14BD: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
14C6: 08       PUSH  A                  (0149)     push  A
14C7: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
14C9: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
14CB: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
14CD: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
14CF: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
14D1: D0 06    JNC   0x14D8             (0155)     jnc   Delay50u_End
14D3: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
14D5: 78       DEC   A                  (0158)     dec   A                            ; [4]
14D6: BF FE    JNZ   0x14D5             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
14D8: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
14D9: 7F       RET                      (0163)     ret
FILE: C:\Users\Rod\Desktop\RTC\RTC\deletview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "DeletView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void DeletView_Start(void)
(0014) {
_DeletView_Start:
    14DA: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void DeletView_Callback(void)
(0019) {	
(0020) 	currentView = DELET;
_DeletView_Callback:
    14DB: 62 D0 00 MOV   REG[0xD0],0x0
    14DE: 55 B8 06 MOV   [currentView],0x6
(0021) 	Menu_Clear();
    14E1: 7C 21 CF LCALL _Menu_Clear
(0022) 	Persist_Clear();
    14E4: 7C 21 FC LCALL _Persist_Clear
(0023) 	LCD_Position(0, 0);
    14E7: 10       PUSH  X
    14E8: 50 00    MOV   A,0x0
    14EA: 57 00    MOV   X,0x0
    14EC: 7C 0A 0A LCALL _LCD_Position
(0024) 	LCD_PrCString("Datos Borrados!");
    14EF: 50 01    MOV   A,0x1
    14F1: 08       PUSH  A
    14F2: 50 F6    MOV   A,0xF6
    14F4: 5C       MOV   X,A
    14F5: 18       POP   A
    14F6: 7C 08 85 LCALL _LCD_PrCString
    14F9: 20       POP   X
    14FA: 7F       RET   
(0025) }
(0026) 
(0027) void DeletView_Update(void)
(0028) {	
_DeletView_Update:
    14FB: 10       PUSH  X
    14FC: 4F       MOV   X,SP
    14FD: 38 02    ADD   SP,0x2
(0029) 	if(Keypad_IsKeyStored())
    14FF: 7C 17 9D LCALL _Keypad_IsKeyStored
    1502: 62 D0 00 MOV   REG[0xD0],0x0
    1505: 39 00    CMP   A,0x0
    1507: A0 1B    JZ    0x1523
(0030) 	{
(0031) 		switch(Keypad_GetKey())
    1509: 7C 17 B5 LCALL _Keypad_GetKey
    150C: 62 D0 00 MOV   REG[0xD0],0x0
    150F: 54 01    MOV   [X+1],A
    1511: 56 00 00 MOV   [X+0],0x0
    1514: 3D 00 00 CMP   [X+0],0x0
    1517: B0 06    JNZ   0x151E
    1519: 3D 01 11 CMP   [X+1],0x11
    151C: A0 03    JZ    0x1520
    151E: 80 04    JMP   0x1523
(0032) 		{
(0033) 			case 0x11:
(0034) 				// "B"
(0035) 				MainView_Callback();
    1520: 7C 1E E5 LCALL _MainView_Callback
(0036) 				return;
(0037) 				break;
(0038) 		}
(0039) 	}
    1523: 38 FE    ADD   SP,0xFE
    1525: 20       POP   X
    1526: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\eeprom.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "EEPROM.h"
(0004) #include "delay.h"
(0005) 
(0006) extern BYTE data;
(0007) void EEPROM_Start(void)
(0008) {
(0009) 	I2Cm_Start();
_EEPROM_Start:
    1527: 10       PUSH  X
    1528: 7C 0B 14 LCALL _I2Cm_Start
    152B: 20       POP   X
    152C: 7F       RET   
(0010) }
(0011) void EEPROM_Stop(void)
(0012) {
(0013) 	I2Cm_Stop();
_EEPROM_Stop:
    152D: 10       PUSH  X
    152E: 7C 0B 38 LCALL _I2Cm_Stop
    1531: 20       POP   X
    1532: 7F       RET   
(0014) }
(0015) 
(0016) BYTE EEPROM_Write(void* buffer, WORD address, BYTE count)
(0017) {
_EEPROM_Write:
  error                --> X+1
  i                    --> X+0
  count                --> X-8
  address              --> X-7
  buffer               --> X-5
    1533: 10       PUSH  X
    1534: 4F       MOV   X,SP
    1535: 38 02    ADD   SP,0x2
(0018) 	BYTE error = EEPROM_NOERROR;
    1537: 56 01 00 MOV   [X+1],0x0
(0019) 	BYTE i=0;
    153A: 56 00 00 MOV   [X+0],0x0
(0020) 	
(0021) 	if(I2Cm_fSendStart(EEPROM_I2C_ADD, I2Cm_WRITE) != 0)
    153D: 10       PUSH  X
    153E: 57 00    MOV   X,0x0
    1540: 50 50    MOV   A,0x50
    1542: 7C 0C 80 LCALL _I2Cm_fSendStart
    1545: 20       POP   X
    1546: 62 D0 00 MOV   REG[0xD0],0x0
    1549: 39 00    CMP   A,0x0
    154B: A0 5F    JZ    0x15AB
(0022) 	{
(0023) 		if(I2Cm_fWrite(address >> 8) != 0)
    154D: 52 F9    MOV   A,[X-7]
    154F: 10       PUSH  X
    1550: 7C 0C BA LCALL _I2Cm_fWrite
    1553: 20       POP   X
    1554: 62 D0 00 MOV   REG[0xD0],0x0
    1557: 39 00    CMP   A,0x0
    1559: A0 4C    JZ    0x15A6
(0024) 		{
(0025) 			if(I2Cm_fWrite(address & 0xFF) != 0)
    155B: 52 FA    MOV   A,[X-6]
    155D: 10       PUSH  X
    155E: 7C 0C BA LCALL _I2Cm_fWrite
    1561: 20       POP   X
    1562: 62 D0 00 MOV   REG[0xD0],0x0
    1565: 39 00    CMP   A,0x0
    1567: A0 39    JZ    0x15A1
(0026) 			{
(0027) 				for (i=0; i<count; i++)
    1569: 56 00 00 MOV   [X+0],0x0
    156C: 80 2C    JMP   0x1599
(0028) 				{
(0029) 					if(I2Cm_fWrite(*((BYTE*)buffer+i)) == 0)
    156E: 62 D0 00 MOV   REG[0xD0],0x0
    1571: 52 00    MOV   A,[X+0]
    1573: 53 A1    MOV   [__r1],A
    1575: 55 A2 00 MOV   [__r0],0x0
    1578: 52 FC    MOV   A,[X-4]
    157A: 04 A1    ADD   [__r1],A
    157C: 52 FB    MOV   A,[X-5]
    157E: 0C A2    ADC   [__r0],A
    1580: 51 A2    MOV   A,[__r0]
    1582: 60 D4    MOV   REG[0xD4],A
    1584: 3E A1    MVI   A,[__r1]
    1586: 10       PUSH  X
    1587: 7C 0C BA LCALL _I2Cm_fWrite
    158A: 20       POP   X
    158B: 62 D0 00 MOV   REG[0xD0],0x0
    158E: 39 00    CMP   A,0x0
    1590: B0 06    JNZ   0x1597
(0030) 					{	
(0031) 						error= EEPROM_SLAVENOTACKDATA;
    1592: 56 01 02 MOV   [X+1],0x2
(0032) 						break;
    1595: 80 18    JMP   0x15AE
(0033) 					}
(0034) 				}
    1597: 77 00    INC   [X+0]
    1599: 52 00    MOV   A,[X+0]
    159B: 3B F8    CMP   A,[X-8]
    159D: CF D0    JC    0x156E
(0035) 			}
    159F: 80 0E    JMP   0x15AE
(0036) 			else
(0037) 			{
(0038) 				error = EEPROM_SLAVENOTACKADDRESS;
    15A1: 56 01 01 MOV   [X+1],0x1
(0039) 			}
(0040) 		}
    15A4: 80 09    JMP   0x15AE
(0041) 		else
(0042) 		{
(0043) 		error = EEPROM_SLAVENOTACKADDRESS;
    15A6: 56 01 01 MOV   [X+1],0x1
(0044) 		}
(0045) 	}
    15A9: 80 04    JMP   0x15AE
(0046) 	else
(0047) 	{
(0048) 		error = EEPROM_SLAVENOTACKADDRESS;
    15AB: 56 01 01 MOV   [X+1],0x1
(0049) 	}
(0050)     
(0051) 	I2Cm_SendStop();
    15AE: 10       PUSH  X
    15AF: 7C 0D FC LCALL _I2Cm_SendStop
(0052) 	
(0053) 	Delay50uTimes(0x64);
    15B2: 50 64    MOV   A,0x64
    15B4: 7C 14 B8 LCALL _Delay50uTimes
    15B7: 20       POP   X
(0054) 
(0055) 	return error;
    15B8: 52 01    MOV   A,[X+1]
    15BA: 62 D0 00 MOV   REG[0xD0],0x0
    15BD: 38 FE    ADD   SP,0xFE
    15BF: 20       POP   X
    15C0: 7F       RET   
(0056) }
(0057) BYTE EEPROM_Read(void* buffer, WORD address, BYTE count)
(0058) {
_EEPROM_Read:
  error                --> X+1
  i                    --> X+0
  count                --> X-8
  address              --> X-7
  buffer               --> X-5
    15C1: 10       PUSH  X
    15C2: 4F       MOV   X,SP
    15C3: 38 02    ADD   SP,0x2
(0059) 	BYTE error = EEPROM_NOERROR;
    15C5: 56 01 00 MOV   [X+1],0x0
(0060) 	BYTE i=0;
    15C8: 56 00 00 MOV   [X+0],0x0
(0061) 	
(0062) 	if(I2Cm_fSendStart(EEPROM_I2C_ADD, I2Cm_WRITE) != 0)
    15CB: 10       PUSH  X
    15CC: 57 00    MOV   X,0x0
    15CE: 50 50    MOV   A,0x50
    15D0: 7C 0C 80 LCALL _I2Cm_fSendStart
    15D3: 20       POP   X
    15D4: 62 D0 00 MOV   REG[0xD0],0x0
    15D7: 39 00    CMP   A,0x0
    15D9: A0 93    JZ    0x166D
(0063) 	{
(0064) 		if(I2Cm_fWrite(address >> 8) != 0)
    15DB: 52 F9    MOV   A,[X-7]
    15DD: 10       PUSH  X
    15DE: 7C 0C BA LCALL _I2Cm_fWrite
    15E1: 20       POP   X
    15E2: 62 D0 00 MOV   REG[0xD0],0x0
    15E5: 39 00    CMP   A,0x0
    15E7: A0 80    JZ    0x1668
(0065) 		{
(0066) 			if (I2Cm_fWrite(address & 0xFF) != 0)
    15E9: 52 FA    MOV   A,[X-6]
    15EB: 10       PUSH  X
    15EC: 7C 0C BA LCALL _I2Cm_fWrite
    15EF: 20       POP   X
    15F0: 62 D0 00 MOV   REG[0xD0],0x0
    15F3: 39 00    CMP   A,0x0
    15F5: A0 6D    JZ    0x1663
(0067) 			{
(0068) 				if (I2Cm_fSendRepeatStart(EEPROM_I2C_ADD,I2Cm_READ) != 0)
    15F7: 10       PUSH  X
    15F8: 57 01    MOV   X,0x1
    15FA: 50 50    MOV   A,0x50
    15FC: 7C 0C 4A LCALL _I2Cm_fSendRepeatStart
    15FF: 20       POP   X
    1600: 62 D0 00 MOV   REG[0xD0],0x0
    1603: 39 00    CMP   A,0x0
    1605: A0 58    JZ    0x165E
(0069) 				{
(0070) 					count--;
    1607: 7B F8    DEC   [X-8]
(0071) 					for (i=0;i<count;i++)
    1609: 56 00 00 MOV   [X+0],0x0
    160C: 80 26    JMP   0x1633
(0072) 					{
(0073) 						*((BYTE*)buffer+i) =I2Cm_bRead(I2Cm_ACKslave);
    160E: 10       PUSH  X
    160F: 50 01    MOV   A,0x1
    1611: 7C 0D 51 LCALL _I2Cm_bRead
    1614: 20       POP   X
    1615: 62 D0 00 MOV   REG[0xD0],0x0
    1618: 53 A2    MOV   [__r0],A
    161A: 52 00    MOV   A,[X+0]
    161C: 53 9F    MOV   [__r3],A
    161E: 55 A0 00 MOV   [__r2],0x0
    1621: 52 FC    MOV   A,[X-4]
    1623: 04 9F    ADD   [__r3],A
    1625: 52 FB    MOV   A,[X-5]
    1627: 0C A0    ADC   [__r2],A
    1629: 51 A0    MOV   A,[__r2]
    162B: 60 D5    MOV   REG[0xD5],A
    162D: 51 A2    MOV   A,[__r0]
    162F: 3F 9F    MVI   [__r3],A
(0074) 					}
    1631: 77 00    INC   [X+0]
    1633: 52 00    MOV   A,[X+0]
    1635: 3B F8    CMP   A,[X-8]
    1637: CF D6    JC    0x160E
(0075) 					*((BYTE*)buffer+i) =I2Cm_bRead(I2Cm_NAKslave);
    1639: 10       PUSH  X
    163A: 50 00    MOV   A,0x0
    163C: 7C 0D 51 LCALL _I2Cm_bRead
    163F: 20       POP   X
    1640: 62 D0 00 MOV   REG[0xD0],0x0
    1643: 53 A2    MOV   [__r0],A
    1645: 52 00    MOV   A,[X+0]
    1647: 53 9F    MOV   [__r3],A
    1649: 55 A0 00 MOV   [__r2],0x0
    164C: 52 FC    MOV   A,[X-4]
    164E: 04 9F    ADD   [__r3],A
    1650: 52 FB    MOV   A,[X-5]
    1652: 0C A0    ADC   [__r2],A
    1654: 51 A0    MOV   A,[__r2]
    1656: 60 D5    MOV   REG[0xD5],A
    1658: 51 A2    MOV   A,[__r0]
    165A: 3F 9F    MVI   [__r3],A
(0076) 				}
    165C: 80 13    JMP   0x1670
(0077) 				else
(0078) 				{
(0079) 				error = EEPROM_SLAVENOTACKDATA;
    165E: 56 01 02 MOV   [X+1],0x2
(0080) 				}
(0081) 			}
    1661: 80 0E    JMP   0x1670
(0082) 			else
(0083) 			{
(0084) 			error = EEPROM_SLAVENOTACKDATA;
    1663: 56 01 02 MOV   [X+1],0x2
(0085) 			}
(0086) 		}
    1666: 80 09    JMP   0x1670
(0087) 		else
(0088) 		{
(0089) 		error = EEPROM_SLAVENOTACKADDRESS;
    1668: 56 01 01 MOV   [X+1],0x1
(0090) 		}
(0091) 	}
    166B: 80 04    JMP   0x1670
(0092) 	else
(0093) 	{
(0094) 		error = EEPROM_SLAVENOTACKADDRESS;
    166D: 56 01 01 MOV   [X+1],0x1
(0095) 	}
(0096) 	
(0097) 	I2Cm_SendStop();
    1670: 10       PUSH  X
    1671: 7C 0D FC LCALL _I2Cm_SendStop
    1674: 20       POP   X
(0098) 	
(0099) 	return error;
    1675: 52 01    MOV   A,[X+1]
    1677: 62 D0 00 MOV   REG[0xD0],0x0
    167A: 38 FE    ADD   SP,0xFE
    167C: 20       POP   X
    167D: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\keypad.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h" 
(0003) #include "Keypad.h"
(0004) 
(0005) #if KEYPAD_PORT == 0
(0006) 	#define PRTxDM2 PRT0DM2
(0007) 	#define PRTxDM1 PRT0DM1
(0008) 	#define PRTxDM0 PRT0DM0
(0009) 	#define PRTxDR 	PRT0DR
(0010) 	
(0011) 	#define PRTxIC1 PRT0IC1
(0012) 	#define PRTxIC0 PRT0IC0
(0013) 	#define PRTxIE 	PRT0IE
(0014) 		
(0015) #elif KEYPAD_PORT == 1
(0016) 	#define PRTxDM2 PRT1DM2
(0017) 	#define PRTxDM1 PRT1DM1
(0018) 	#define PRTxDM0 PRT1DM0
(0019) 	#define PRTxDR 	PRT1DR
(0020) 	
(0021) 	#define PRTxIC1 PRT1IC1
(0022) 	#define PRTxIC0 PRT1IC0
(0023) 	#define PRTxIE 	PRT1IE
(0024) 		
(0025) #elif KEYPAD_PORT == 2
(0026) 	#define PRTxDM2 PRT2DM2
(0027) 	#define PRTxDM1 PRT2DM1
(0028) 	#define PRTxDM0 PRT2DM0
(0029) 	#define PRTxDR 	PRT2DR
(0030) 	
(0031) 	#define PRTxIC1 PRT2IC1
(0032) 	#define PRTxIC0 PRT2IC0
(0033) 	#define PRTxIE 	PRT2IE
(0034) 		
(0035) #else 
(0036) 	#error "Keypad port is invalid!"
(0037) #endif
(0038) 		
(0039) static BOOL keyStillPressed = FALSE;
(0040) static BYTE keypadMask = 0x0F;
(0041) static BYTE pressedKey = 0x00;
(0042) static BOOL keyPressed = FALSE;
(0043) 
(0044) void Keypad_Start(void)
(0045) {
(0046) 	PRTxDM2 &= ~keypadMask;	// initialize button
_Keypad_Start:
    167E: 62 D0 00 MOV   REG[0xD0],0x0
    1681: 51 B5    MOV   A,[keypad.c:keypadMask]
    1683: 73       CPL   A
    1684: 62 D0 00 MOV   REG[0xD0],0x0
    1687: 53 A2    MOV   [__r0],A
    1689: 5D 07    MOV   A,REG[0x7]
    168B: 22 A2    AND   A,[__r0]
    168D: 60 07    MOV   REG[0x7],A
(0047) 	PRTxDM1 &= ~keypadMask;
    168F: 62 D0 00 MOV   REG[0xD0],0x0
    1692: 51 B5    MOV   A,[keypad.c:keypadMask]
    1694: 73       CPL   A
    1695: 62 D0 00 MOV   REG[0xD0],0x0
    1698: 53 A2    MOV   [__r0],A
    169A: 71 10    OR    F,0x10
    169C: 5D 05    MOV   A,REG[0x5]
    169E: 22 A2    AND   A,[__r0]
    16A0: 60 05    MOV   REG[0x5],A
(0048) 	PRTxDM0 &= ~keypadMask;
    16A2: 70 CF    AND   F,0xCF
    16A4: 62 D0 00 MOV   REG[0xD0],0x0
    16A7: 51 B5    MOV   A,[keypad.c:keypadMask]
    16A9: 73       CPL   A
    16AA: 62 D0 00 MOV   REG[0xD0],0x0
    16AD: 53 A2    MOV   [__r0],A
    16AF: 71 10    OR    F,0x10
    16B1: 5D 04    MOV   A,REG[0x4]
    16B3: 22 A2    AND   A,[__r0]
    16B5: 60 04    MOV   REG[0x4],A
(0049) 	
(0050) 	PRTxDM2 &= keypadMask;	// initialize button
    16B7: 70 CF    AND   F,0xCF
    16B9: 5D 07    MOV   A,REG[0x7]
    16BB: 53 A2    MOV   [__r0],A
    16BD: 62 D0 00 MOV   REG[0xD0],0x0
    16C0: 51 B5    MOV   A,[keypad.c:keypadMask]
    16C2: 62 D0 00 MOV   REG[0xD0],0x0
    16C5: 24 A2    AND   [__r0],A
    16C7: 51 A2    MOV   A,[__r0]
    16C9: 60 07    MOV   REG[0x7],A
(0051) 	PRTxDM1 &= keypadMask;
    16CB: 71 10    OR    F,0x10
    16CD: 5D 05    MOV   A,REG[0x5]
    16CF: 53 A2    MOV   [__r0],A
    16D1: 70 CF    AND   F,0xCF
    16D3: 62 D0 00 MOV   REG[0xD0],0x0
    16D6: 51 B5    MOV   A,[keypad.c:keypadMask]
    16D8: 62 D0 00 MOV   REG[0xD0],0x0
    16DB: 24 A2    AND   [__r0],A
    16DD: 51 A2    MOV   A,[__r0]
    16DF: 71 10    OR    F,0x10
    16E1: 60 05    MOV   REG[0x5],A
(0052) 	PRTxDM0 &= keypadMask;
    16E3: 5D 04    MOV   A,REG[0x4]
    16E5: 53 A2    MOV   [__r0],A
    16E7: 70 CF    AND   F,0xCF
    16E9: 62 D0 00 MOV   REG[0xD0],0x0
    16EC: 51 B5    MOV   A,[keypad.c:keypadMask]
    16EE: 62 D0 00 MOV   REG[0xD0],0x0
    16F1: 24 A2    AND   [__r0],A
    16F3: 51 A2    MOV   A,[__r0]
    16F5: 71 10    OR    F,0x10
    16F7: 60 04    MOV   REG[0x4],A
(0053) 	
(0054) 	PRTxDR = ~keypadMask;	// Setup pull-down resistor
    16F9: 70 CF    AND   F,0xCF
    16FB: 62 D0 00 MOV   REG[0xD0],0x0
    16FE: 51 B5    MOV   A,[keypad.c:keypadMask]
    1700: 73       CPL   A
    1701: 62 D0 00 MOV   REG[0xD0],0x0
    1704: 60 04    MOV   REG[0x4],A
(0055) 	
(0056) 	PRTxIC1 |= keypadMask; // setup interrupt mode
    1706: 71 10    OR    F,0x10
    1708: 5D 07    MOV   A,REG[0x7]
    170A: 53 A2    MOV   [__r0],A
    170C: 70 CF    AND   F,0xCF
    170E: 62 D0 00 MOV   REG[0xD0],0x0
    1711: 51 B5    MOV   A,[keypad.c:keypadMask]
    1713: 62 D0 00 MOV   REG[0xD0],0x0
    1716: 2C A2    OR    [__r0],A
    1718: 51 A2    MOV   A,[__r0]
    171A: 71 10    OR    F,0x10
    171C: 60 07    MOV   REG[0x7],A
(0057) 	PRTxIC0 &= ~keypadMask;
    171E: 70 CF    AND   F,0xCF
    1720: 62 D0 00 MOV   REG[0xD0],0x0
    1723: 51 B5    MOV   A,[keypad.c:keypadMask]
    1725: 73       CPL   A
    1726: 62 D0 00 MOV   REG[0xD0],0x0
    1729: 53 A2    MOV   [__r0],A
    172B: 71 10    OR    F,0x10
    172D: 5D 06    MOV   A,REG[0x6]
    172F: 22 A2    AND   A,[__r0]
    1731: 60 06    MOV   REG[0x6],A
(0058) 	
(0059) 	PRTxIE |= keypadMask; //Enable GPIO port interrupt bits
    1733: 70 CF    AND   F,0xCF
    1735: 5D 05    MOV   A,REG[0x5]
    1737: 53 A2    MOV   [__r0],A
    1739: 62 D0 00 MOV   REG[0xD0],0x0
    173C: 51 B5    MOV   A,[keypad.c:keypadMask]
    173E: 62 D0 00 MOV   REG[0xD0],0x0
    1741: 2C A2    OR    [__r0],A
    1743: 51 A2    MOV   A,[__r0]
    1745: 60 05    MOV   REG[0x5],A
(0060) 	
(0061) 	INT_MSK0 |= INT_MSK0_GPIO; //Enable global GPIO interrupt
    1747: 43 E0 20 OR    REG[0xE0],0x20
    174A: 7F       RET   
(0062) 	
(0063) }
(0064) 
(0065) BOOL KeyPad_Test(void)
(0066) {
_KeyPad_Test:
  cont                 --> X+1
  i                    --> X+0
    174B: 10       PUSH  X
    174C: 4F       MOV   X,SP
    174D: 38 02    ADD   SP,0x2
(0067) 	BYTE i, cont;
(0068) 	cont = 0;
    174F: 56 01 00 MOV   [X+1],0x0
(0069) 	
(0070) 	for (i = 0; i<50 ;i++)
    1752: 56 00 00 MOV   [X+0],0x0
    1755: 80 39    JMP   0x178F
(0071) 	{
(0072) 		if ((PRTxDR & keypadMask) != 0x00)
    1757: 5D 04    MOV   A,REG[0x4]
    1759: 62 D0 00 MOV   REG[0xD0],0x0
    175C: 53 A2    MOV   [__r0],A
    175E: 62 D0 00 MOV   REG[0xD0],0x0
    1761: 51 B5    MOV   A,[keypad.c:keypadMask]
    1763: 62 D0 00 MOV   REG[0xD0],0x0
    1766: 24 A2    AND   [__r0],A
    1768: A0 1B    JZ    0x1784
(0073) 		{
(0074) 			cont ++;
    176A: 77 01    INC   [X+1]
(0075) 			if ( (cont > 20) && !keyStillPressed )
    176C: 50 14    MOV   A,0x14
    176E: 3B 01    CMP   A,[X+1]
    1770: D0 1C    JNC   0x178D
    1772: 62 D0 00 MOV   REG[0xD0],0x0
    1775: 3C B7 00 CMP   [keypad.c:keyStillPressed],0x0
    1778: B0 14    JNZ   0x178D
(0076) 			{
(0077) 				keyStillPressed = TRUE;
    177A: 55 B7 01 MOV   [keypad.c:keyStillPressed],0x1
(0078) 				return TRUE;
    177D: 62 D0 00 MOV   REG[0xD0],0x0
    1780: 50 01    MOV   A,0x1
    1782: 80 16    JMP   0x1799
(0079) 			}
(0080) 		}
(0081) 		else 
(0082) 		{
(0083) 			keyStillPressed = FALSE;
    1784: 62 D0 00 MOV   REG[0xD0],0x0
    1787: 55 B7 00 MOV   [keypad.c:keyStillPressed],0x0
(0084) 			cont = 0;
    178A: 56 01 00 MOV   [X+1],0x0
(0085) 		}
(0086) 	}
    178D: 77 00    INC   [X+0]
    178F: 3D 00 32 CMP   [X+0],0x32
    1792: CF C4    JC    0x1757
(0087) 	return FALSE;
    1794: 62 D0 00 MOV   REG[0xD0],0x0
    1797: 50 00    MOV   A,0x0
    1799: 38 FE    ADD   SP,0xFE
    179B: 20       POP   X
    179C: 7F       RET   
(0088) }
(0089) 
(0090) BOOL Keypad_IsKeyStored(void)
(0091) {
(0092) 	if(keyPressed == TRUE)
_Keypad_IsKeyStored:
    179D: 62 D0 00 MOV   REG[0xD0],0x0
    17A0: 3C B3 01 CMP   [keypad.c:keyPressed],0x1
    17A3: B0 0B    JNZ   0x17AF
(0093) 	{
(0094) 		keyPressed = FALSE;
    17A5: 55 B3 00 MOV   [keypad.c:keyPressed],0x0
(0095) 		return TRUE;
    17A8: 62 D0 00 MOV   REG[0xD0],0x0
    17AB: 50 01    MOV   A,0x1
    17AD: 80 06    JMP   0x17B4
(0096) 	}
(0097) 	else
(0098) 	{
(0099) 		return FALSE;
    17AF: 62 D0 00 MOV   REG[0xD0],0x0
    17B2: 50 00    MOV   A,0x0
    17B4: 7F       RET   
(0100) 	}
(0101) }
(0102) 
(0103) BYTE Keypad_GetKey(void)
(0104) {
(0105) 	return pressedKey;
_Keypad_GetKey:
    17B5: 62 D0 00 MOV   REG[0xD0],0x0
    17B8: 51 B4    MOV   A,[keypad.c:pressedKey]
    17BA: 62 D0 00 MOV   REG[0xD0],0x0
    17BD: 7F       RET   
(0106) }
(0107) 
(0108) #pragma interrupt_handler Keypad_GPIO_ISR
(0109) void Keypad_GPIO_ISR(void)
(0110) {	
_Keypad_GPIO_ISR:
    17BE: 71 C0    OR    F,0xC0
    17C0: 08       PUSH  A
    17C1: 5D D0    MOV   A,REG[0xD0]
    17C3: 08       PUSH  A
    17C4: 5D D3    MOV   A,REG[0xD3]
    17C6: 08       PUSH  A
    17C7: 5D D4    MOV   A,REG[0xD4]
    17C9: 08       PUSH  A
    17CA: 5D D5    MOV   A,REG[0xD5]
    17CC: 08       PUSH  A
    17CD: 62 D0 00 MOV   REG[0xD0],0x0
    17D0: 51 A2    MOV   A,[__r0]
    17D2: 08       PUSH  A
    17D3: 51 A1    MOV   A,[__r1]
    17D5: 08       PUSH  A
    17D6: 51 A0    MOV   A,[__r2]
    17D8: 08       PUSH  A
    17D9: 51 9F    MOV   A,[__r3]
    17DB: 08       PUSH  A
    17DC: 51 9E    MOV   A,[__r4]
    17DE: 08       PUSH  A
    17DF: 51 9D    MOV   A,[__r5]
    17E1: 08       PUSH  A
    17E2: 51 9C    MOV   A,[__r6]
    17E4: 08       PUSH  A
    17E5: 51 9B    MOV   A,[__r7]
    17E7: 08       PUSH  A
    17E8: 51 9A    MOV   A,[__r8]
    17EA: 08       PUSH  A
    17EB: 51 99    MOV   A,[__r9]
    17ED: 08       PUSH  A
    17EE: 51 98    MOV   A,[__r10]
    17F0: 08       PUSH  A
    17F1: 51 97    MOV   A,[__r11]
    17F3: 08       PUSH  A
    17F4: 51 96    MOV   A,[__rX]
    17F6: 08       PUSH  A
    17F7: 51 95    MOV   A,[__rY]
    17F9: 08       PUSH  A
    17FA: 51 94    MOV   A,[__rZ]
    17FC: 08       PUSH  A
(0111) 	if (KeyPad_Test())
    17FD: 9F 4C    CALL  _KeyPad_Test
    17FF: 39 00    CMP   A,0x0
    1801: A0 33    JZ    0x1835
(0112) 	{
(0113) 		//nos aseguramos de solo tomar los 4 bits menos significativos
(0114) 		pressedKey = (PRTxDR & keypadMask);
    1803: 5D 04    MOV   A,REG[0x4]
    1805: 62 D0 00 MOV   REG[0xD0],0x0
    1808: 22 B5    AND   A,[keypad.c:keypadMask]
    180A: 62 D0 00 MOV   REG[0xD0],0x0
    180D: 53 B4    MOV   [keypad.c:pressedKey],A
(0115) 		
(0116) 		//Invierte los puertos 
(0117) 		
(0118) 		PRTxDR = keypadMask;	// Setup pull-down resistor
    180F: 62 D0 00 MOV   REG[0xD0],0x0
    1812: 51 B5    MOV   A,[keypad.c:keypadMask]
    1814: 60 04    MOV   REG[0x4],A
(0119) 		
(0120) 		//tomamos ahora los 4 bits mas significativos y obtenemos el byte completo
(0121) 		pressedKey |= (PRTxDR & ~keypadMask); 
    1816: 51 B5    MOV   A,[keypad.c:keypadMask]
    1818: 73       CPL   A
    1819: 62 D0 00 MOV   REG[0xD0],0x0
    181C: 53 A2    MOV   [__r0],A
    181E: 5D 04    MOV   A,REG[0x4]
    1820: 22 A2    AND   A,[__r0]
    1822: 62 D0 00 MOV   REG[0xD0],0x0
    1825: 2C B4    OR    [keypad.c:pressedKey],A
(0122) 		
(0123) 		//los regresa a la normalidad
(0124) 		
(0125) 		PRTxDR = ~keypadMask;
    1827: 62 D0 00 MOV   REG[0xD0],0x0
    182A: 51 B5    MOV   A,[keypad.c:keypadMask]
    182C: 73       CPL   A
    182D: 60 04    MOV   REG[0x4],A
(0126) 		
(0127) 		keyPressed = TRUE;
    182F: 62 D0 00 MOV   REG[0xD0],0x0
    1832: 55 B3 01 MOV   [keypad.c:keyPressed],0x1
(0128) 	}
    1835: 62 D0 00 MOV   REG[0xD0],0x0
    1838: 18       POP   A
    1839: 53 94    MOV   [__rZ],A
    183B: 18       POP   A
    183C: 53 95    MOV   [__rY],A
    183E: 18       POP   A
    183F: 53 96    MOV   [__rX],A
    1841: 18       POP   A
    1842: 53 97    MOV   [__r11],A
    1844: 18       POP   A
    1845: 53 98    MOV   [__r10],A
    1847: 18       POP   A
    1848: 53 99    MOV   [__r9],A
    184A: 18       POP   A
    184B: 53 9A    MOV   [__r8],A
    184D: 18       POP   A
    184E: 53 9B    MOV   [__r7],A
    1850: 18       POP   A
    1851: 53 9C    MOV   [__r6],A
    1853: 18       POP   A
    1854: 53 9D    MOV   [__r5],A
    1856: 18       POP   A
    1857: 53 9E    MOV   [__r4],A
    1859: 18       POP   A
    185A: 53 9F    MOV   [__r3],A
    185C: 18       POP   A
    185D: 53 A0    MOV   [__r2],A
    185F: 18       POP   A
    1860: 53 A1    MOV   [__r1],A
    1862: 18       POP   A
    1863: 53 A2    MOV   [__r0],A
    1865: 18       POP   A
    1866: 60 D5    MOV   REG[0xD5],A
    1868: 18       POP   A
    1869: 60 D4    MOV   REG[0xD4],A
    186B: 18       POP   A
    186C: 60 D3    MOV   REG[0xD3],A
    186E: 18       POP   A
    186F: 60 D0    MOV   REG[0xD0],A
    1871: 18       POP   A
    1872: 7E       RETI  
FILE: C:\Users\Rod\Desktop\RTC\RTC\ledarray.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "LedArray.h"
(0004) 
(0005) #if LEDS_PORT == 0
(0006) 	#define PRTxDM2 PRT0DM2
(0007) 	#define PRTxDM1 PRT0DM1
(0008) 	#define PRTxDM0 PRT0DM0
(0009) 	#define PRTxDR PRT0DR
(0010) 	
(0011) 	#if LEDS_SHADOWREG == 1
(0012) 		extern BYTE Port_0_Data_SHADE;
(0013) 		#define Port_Data_SHADE Port_0_Data_SHADE
(0014) 	#endif 
(0015) 		
(0016) #elif LEDS_PORT == 1
(0017) 	#define PRTxDM2 PRT1DM2
(0018) 	#define PRTxDM1 PRT1DM1
(0019) 	#define PRTxDM0 PRT1DM0
(0020) 	#define PRTxDR PRT1DR
(0021) 		
(0022) 	#if LEDS_SHADOWREG == 1
(0023) 		extern BYTE Port_1_Data_SHADE;
(0024) 		#define Port_Data_SHADE Port_1_Data_SHADE
(0025) 	#endif 
(0026) 		
(0027) #elif LEDS_PORT == 2
(0028) 	#define PRTxDM2 PRT2DM2
(0029) 	#define PRTxDM1 PRT2DM1
(0030) 	#define PRTxDM0 PRT2DM0
(0031) 	#define PRTxDR PRT2DR
(0032) 		
(0033) 	#if LEDS_SHADOWREG == 1
(0034) 		extern BYTE Port_2_Data_SHADE;
(0035) 		#define Port_Data_SHADE Port_2_Data_SHADE
(0036) 	#endif 
(0037) 		
(0038) #else 
(0039) 	#error "Led port is invalid!"
(0040) #endif
(0041) 
(0042) //inicialize LED driver
(0043) void Leds_Start(void)
(0044) {
(0045) 	PRTxDM2 &= ~LEDS_MASK;	//initialize led
_Leds_Start:
    1873: 41 03 E7 AND   REG[0x3],0xE7
(0046) 	PRTxDM1 &= ~LEDS_MASK;
    1876: 71 10    OR    F,0x10
    1878: 41 01 E7 AND   REG[0x1],0xE7
(0047) 	PRTxDM0 |= LEDS_MASK;
    187B: 43 00 18 OR    REG[0x0],0x18
(0048) 	
(0049) 	#if LEDS_SHADOWREG == 1
(0050) 		Port_Data_SHADE &= ~LEDS_MASK;
    187E: 70 CF    AND   F,0xCF
    1880: 62 D0 00 MOV   REG[0xD0],0x0
    1883: 26 00 E7 AND   [previousSecond|elapsedSeconds],0xE7
(0051) 		PRTxDR = Port_Data_SHADE;	//turn off led
    1886: 51 00    MOV   A,[previousSecond|elapsedSeconds]
    1888: 60 00    MOV   REG[0x0],A
    188A: 7F       RET   
(0052) 	#else 
(0053) 		PRTxDR &= ~LEDS_MASK;
(0054) 	#endif
(0055) }
(0056) 
(0057) //Turn on led
(0058) void Leds_TurnOn(BYTE leds)
(0059) {
_Leds_TurnOn:
  leds                 --> X-4
    188B: 10       PUSH  X
    188C: 4F       MOV   X,SP
(0060) 	leds &= LEDS_MASK;
    188D: 27 FC 18 AND   [X-4],0x18
(0061) 	#if LEDS_SHADOWREG == 1
(0062) 		Port_Data_SHADE |= leds;
    1890: 62 D0 00 MOV   REG[0xD0],0x0
    1893: 52 FC    MOV   A,[X-4]
    1895: 2C 00    OR    [previousSecond|elapsedSeconds],A
(0063) 		PRTxDR = Port_Data_SHADE;	//turn on led
    1897: 51 00    MOV   A,[previousSecond|elapsedSeconds]
    1899: 60 00    MOV   REG[0x0],A
    189B: 20       POP   X
    189C: 7F       RET   
(0064) 	#else 
(0065) 		PRTxDR |= leds;
(0066) 	#endif
(0067) }
(0068) 
(0069) //Turn off led
(0070) void Leds_TurnOff(BYTE leds)
(0071) {
_Leds_TurnOff:
  leds                 --> X-4
    189D: 10       PUSH  X
    189E: 4F       MOV   X,SP
(0072) 	leds &= LEDS_MASK;
    189F: 27 FC 18 AND   [X-4],0x18
(0073) 	#if LEDS_SHADOWREG == 1
(0074) 		Port_Data_SHADE &= ~leds;
    18A2: 52 FC    MOV   A,[X-4]
    18A4: 73       CPL   A
    18A5: 62 D0 00 MOV   REG[0xD0],0x0
    18A8: 24 00    AND   [previousSecond|elapsedSeconds],A
(0075) 		PRTxDR = Port_Data_SHADE;	//turn off led
    18AA: 51 00    MOV   A,[previousSecond|elapsedSeconds]
    18AC: 60 00    MOV   REG[0x0],A
    18AE: 20       POP   X
    18AF: 7F       RET   
(0076) 	#else 
(0077) 		PRTxDR &= ~leds;
(0078) 	#endif
(0079) }
(0080) 
(0081) //Toggle led
(0082) void Leds_Toggle(BYTE leds)
(0083) {
_Leds_Toggle:
  leds                 --> X-4
    18B0: 10       PUSH  X
    18B1: 4F       MOV   X,SP
(0084) 	leds &= LEDS_MASK;
    18B2: 27 FC 18 AND   [X-4],0x18
(0085) 	#if LEDS_SHADOWREG == 1
(0086) 		Port_Data_SHADE ^= leds;
    18B5: 62 D0 00 MOV   REG[0xD0],0x0
    18B8: 51 00    MOV   A,[previousSecond|elapsedSeconds]
    18BA: 33 FC    XOR   A,[X-4]
    18BC: 53 00    MOV   [previousSecond|elapsedSeconds],A
(0087) 		PRTxDR = Port_Data_SHADE;	//turn off led
    18BE: 51 00    MOV   A,[previousSecond|elapsedSeconds]
(0088) 	#else 
(0089) 		PRTxDR ^= leds;
(0090) 	#endif
(0091) }	
FILE: C:\Users\Rod\Desktop\RTC\RTC\levelview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "mainView.h"
(0004) #include "menu.h"
(0005) #include "BcdUtil.h"
(0006) #include "viewManager.h"
(0007) #include "Keypad.h"
(0008) #include "levelView.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void LevelView_Start(void)
(0014) {
_LevelView_Start:
    18C4: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void LevelView_Callback(void)
(0019) {
_LevelView_Callback:
  bcdmin               --> X+14
  bcd10min             --> X+13
  bcdmax               --> X+12
  bcd10max             --> X+11
  conf                 --> X+0
    18C5: 10       PUSH  X
    18C6: 4F       MOV   X,SP
    18C7: 38 0F    ADD   SP,0xF
(0020) 	BYTE bcd10max, bcdmax, bcd10min, bcdmin;
(0021) 	Config conf;
(0022) 	Persist_LoadConfig(&conf);
    18C9: 62 D0 00 MOV   REG[0xD0],0x0
    18CC: 50 07    MOV   A,0x7
    18CE: 08       PUSH  A
    18CF: 10       PUSH  X
    18D0: 7C 23 65 LCALL _Persist_LoadConfig
    18D3: 38 FE    ADD   SP,0xFE
    18D5: 62 D0 00 MOV   REG[0xD0],0x0
(0023) 
(0024) 	decToBcd(&bcd10max, &bcdmax, conf.maxTemp);
    18D8: 52 05    MOV   A,[X+5]
    18DA: 08       PUSH  A
    18DB: 5A A1    MOV   [__r1],X
    18DD: 06 A1 0C ADD   [__r1],0xC
    18E0: 50 07    MOV   A,0x7
    18E2: 08       PUSH  A
    18E3: 51 A1    MOV   A,[__r1]
    18E5: 08       PUSH  A
    18E6: 5A A1    MOV   [__r1],X
    18E8: 06 A1 0B ADD   [__r1],0xB
    18EB: 50 07    MOV   A,0x7
    18ED: 08       PUSH  A
    18EE: 51 A1    MOV   A,[__r1]
    18F0: 08       PUSH  A
    18F1: 7C 0F 6A LCALL _decToBcd
(0025) 	decToBcd(&bcd10min, &bcdmin, conf.minTemp);
    18F4: 52 06    MOV   A,[X+6]
    18F6: 08       PUSH  A
    18F7: 62 D0 00 MOV   REG[0xD0],0x0
    18FA: 5A A1    MOV   [__r1],X
    18FC: 06 A1 0E ADD   [__r1],0xE
    18FF: 50 07    MOV   A,0x7
    1901: 08       PUSH  A
    1902: 51 A1    MOV   A,[__r1]
    1904: 08       PUSH  A
    1905: 5A A1    MOV   [__r1],X
    1907: 06 A1 0D ADD   [__r1],0xD
    190A: 50 07    MOV   A,0x7
    190C: 08       PUSH  A
    190D: 51 A1    MOV   A,[__r1]
    190F: 08       PUSH  A
    1910: 7C 0F 6A LCALL _decToBcd
    1913: 38 F6    ADD   SP,0xF6
(0026) 
(0027) 	currentView = LEVEL_CONFIG;
    1915: 62 D0 00 MOV   REG[0xD0],0x0
    1918: 55 B8 03 MOV   [currentView],0x3
(0028) 	Menu_Clear();
    191B: 7C 21 CF LCALL _Menu_Clear
(0029) 	LCD_Position(0, 0);
    191E: 10       PUSH  X
    191F: 50 00    MOV   A,0x0
    1921: 57 00    MOV   X,0x0
    1923: 7C 0A 0A LCALL _LCD_Position
(0030) 	LCD_PrCString("Max: ");
    1926: 50 02    MOV   A,0x2
    1928: 08       PUSH  A
    1929: 50 0C    MOV   A,0xC
    192B: 5C       MOV   X,A
    192C: 18       POP   A
    192D: 7C 08 85 LCALL _LCD_PrCString
    1930: 20       POP   X
(0031) 	LCD_PrHexByte( (bcd10max << 4)|bcdmax );
    1931: 52 0B    MOV   A,[X+11]
    1933: 62 D0 00 MOV   REG[0xD0],0x0
    1936: 64       ASL   A
    1937: 64       ASL   A
    1938: 64       ASL   A
    1939: 64       ASL   A
    193A: 53 A2    MOV   [__r0],A
    193C: 52 0C    MOV   A,[X+12]
    193E: 2C A2    OR    [__r0],A
    1940: 10       PUSH  X
    1941: 51 A2    MOV   A,[__r0]
    1943: 7C 08 A7 LCALL _LCD_PrHexByte
(0032) 	LCD_Position(1,0);
    1946: 57 00    MOV   X,0x0
    1948: 50 01    MOV   A,0x1
    194A: 7C 0A 0A LCALL _LCD_Position
(0033) 	LCD_PrCString("Min: ");
    194D: 50 02    MOV   A,0x2
    194F: 08       PUSH  A
    1950: 50 06    MOV   A,0x6
    1952: 5C       MOV   X,A
    1953: 18       POP   A
    1954: 7C 08 85 LCALL _LCD_PrCString
    1957: 20       POP   X
(0034) 	LCD_PrHexByte( (bcd10min << 4)|bcdmin );
    1958: 52 0D    MOV   A,[X+13]
    195A: 62 D0 00 MOV   REG[0xD0],0x0
    195D: 64       ASL   A
    195E: 64       ASL   A
    195F: 64       ASL   A
    1960: 64       ASL   A
    1961: 53 A2    MOV   [__r0],A
    1963: 52 0E    MOV   A,[X+14]
    1965: 2C A2    OR    [__r0],A
    1967: 10       PUSH  X
    1968: 51 A2    MOV   A,[__r0]
    196A: 7C 08 A7 LCALL _LCD_PrHexByte
    196D: 20       POP   X
    196E: 38 F1    ADD   SP,0xF1
    1970: 20       POP   X
    1971: 7F       RET   
(0035) }
(0036) 
(0037) void LevelView_Update(void)
(0038) {
_LevelView_Update:
  bcd10min             --> X+14
  bcd10max             --> X+13
  conf                 --> X+2
  bcdmin               --> X+1
  bcdmax               --> X+0
    1972: 10       PUSH  X
    1973: 4F       MOV   X,SP
    1974: 38 11    ADD   SP,0x11
(0039) 	if(Keypad_IsKeyStored())
    1976: 7C 17 9D LCALL _Keypad_IsKeyStored
    1979: 62 D0 00 MOV   REG[0xD0],0x0
    197C: 39 00    CMP   A,0x0
    197E: A1 81    JZ    0x1B00
(0040) 	{
(0041) 		BYTE bcd10max, bcdmax, bcd10min, bcdmin;
(0042) 		Config conf;
(0043) 		Persist_LoadConfig(&conf);
    1980: 5A A1    MOV   [__r1],X
    1982: 06 A1 02 ADD   [__r1],0x2
    1985: 50 07    MOV   A,0x7
    1987: 08       PUSH  A
    1988: 51 A1    MOV   A,[__r1]
    198A: 08       PUSH  A
    198B: 7C 23 65 LCALL _Persist_LoadConfig
    198E: 38 FE    ADD   SP,0xFE
    1990: 62 D0 00 MOV   REG[0xD0],0x0
(0044) 
(0045) 		decToBcd(&bcd10max, &bcdmax, conf.maxTemp);
    1993: 52 07    MOV   A,[X+7]
    1995: 08       PUSH  A
    1996: 50 07    MOV   A,0x7
    1998: 08       PUSH  A
    1999: 10       PUSH  X
    199A: 5A A1    MOV   [__r1],X
    199C: 06 A1 0D ADD   [__r1],0xD
    199F: 08       PUSH  A
    19A0: 51 A1    MOV   A,[__r1]
    19A2: 08       PUSH  A
    19A3: 7C 0F 6A LCALL _decToBcd
(0046) 		decToBcd(&bcd10min, &bcdmin, conf.minTemp);
    19A6: 52 08    MOV   A,[X+8]
    19A8: 08       PUSH  A
    19A9: 62 D0 00 MOV   REG[0xD0],0x0
    19AC: 5A A1    MOV   [__r1],X
    19AE: 06 A1 01 ADD   [__r1],0x1
    19B1: 50 07    MOV   A,0x7
    19B3: 08       PUSH  A
    19B4: 51 A1    MOV   A,[__r1]
    19B6: 08       PUSH  A
    19B7: 5A A1    MOV   [__r1],X
    19B9: 06 A1 0E ADD   [__r1],0xE
    19BC: 50 07    MOV   A,0x7
    19BE: 08       PUSH  A
    19BF: 51 A1    MOV   A,[__r1]
    19C1: 08       PUSH  A
    19C2: 7C 0F 6A LCALL _decToBcd
    19C5: 38 F6    ADD   SP,0xF6
(0047) 
(0048) 		switch(Keypad_GetKey())
    19C7: 7C 17 B5 LCALL _Keypad_GetKey
    19CA: 62 D0 00 MOV   REG[0xD0],0x0
    19CD: 54 10    MOV   [X+16],A
    19CF: 56 0F 00 MOV   [X+15],0x0
    19D2: 52 10    MOV   A,[X+16]
    19D4: 11 28    SUB   A,0x28
    19D6: 53 95    MOV   [__rY],A
    19D8: 52 0F    MOV   A,[X+15]
    19DA: 31 80    XOR   A,0x80
    19DC: 19 80    SBB   A,0x80
    19DE: 2A 95    OR    A,[__rY]
    19E0: A0 88    JZ    0x1A69
    19E2: D0 22    JNC   0x1A05
    19E4: 52 10    MOV   A,[X+16]
    19E6: 11 11    SUB   A,0x11
    19E8: 62 D0 00 MOV   REG[0xD0],0x0
    19EB: 53 95    MOV   [__rY],A
    19ED: 52 0F    MOV   A,[X+15]
    19EF: 31 80    XOR   A,0x80
    19F1: 19 80    SBB   A,0x80
    19F3: C0 BD    JC    0x1AB1
    19F5: 2A 95    OR    A,[__rY]
    19F7: A0 B4    JZ    0x1AAC
    19F9: 3D 0F 00 CMP   [X+15],0x0
    19FC: B0 06    JNZ   0x1A03
    19FE: 3D 10 18 CMP   [X+16],0x18
    1A01: A0 88    JZ    0x1A8A
    1A03: 80 AD    JMP   0x1AB1
    1A05: 52 10    MOV   A,[X+16]
    1A07: 11 48    SUB   A,0x48
    1A09: 62 D0 00 MOV   REG[0xD0],0x0
    1A0C: 53 95    MOV   [__rY],A
    1A0E: 52 0F    MOV   A,[X+15]
    1A10: 31 80    XOR   A,0x80
    1A12: 19 80    SBB   A,0x80
    1A14: C0 9C    JC    0x1AB1
    1A16: 2A 95    OR    A,[__rY]
    1A18: A0 2E    JZ    0x1A47
    1A1A: 3D 0F 00 CMP   [X+15],0x0
    1A1D: B0 06    JNZ   0x1A24
    1A1F: 3D 10 88 CMP   [X+16],0x88
    1A22: A0 03    JZ    0x1A26
    1A24: 80 8C    JMP   0x1AB1
(0049) 		{
(0050) 			case 0x88:
(0051) 				// "1"
(0052) 				if(conf.maxTemp < 99) conf.maxTemp++;
    1A26: 3D 07 63 CMP   [X+7],0x63
    1A29: D0 03    JNC   0x1A2D
    1A2B: 77 07    INC   [X+7]
(0053) 				Persist_SaveConfig(&conf);
    1A2D: 62 D0 00 MOV   REG[0xD0],0x0
    1A30: 5A A1    MOV   [__r1],X
    1A32: 06 A1 02 ADD   [__r1],0x2
    1A35: 50 07    MOV   A,0x7
    1A37: 08       PUSH  A
    1A38: 51 A1    MOV   A,[__r1]
    1A3A: 08       PUSH  A
    1A3B: 7C 23 3F LCALL _Persist_SaveConfig
    1A3E: 38 FE    ADD   SP,0xFE
    1A40: 62 D0 00 MOV   REG[0xD0],0x0
    1A43: 53 A2    MOV   [__r0],A
(0054) 				break;
    1A45: 80 6B    JMP   0x1AB1
(0055) 			case 0x48:
(0056) 				if(conf.maxTemp > 0) conf.maxTemp--;
    1A47: 50 00    MOV   A,0x0
    1A49: 3B 07    CMP   A,[X+7]
    1A4B: D0 03    JNC   0x1A4F
    1A4D: 7B 07    DEC   [X+7]
(0057) 				Persist_SaveConfig(&conf);
    1A4F: 62 D0 00 MOV   REG[0xD0],0x0
    1A52: 5A A1    MOV   [__r1],X
    1A54: 06 A1 02 ADD   [__r1],0x2
    1A57: 50 07    MOV   A,0x7
    1A59: 08       PUSH  A
    1A5A: 51 A1    MOV   A,[__r1]
    1A5C: 08       PUSH  A
    1A5D: 7C 23 3F LCALL _Persist_SaveConfig
    1A60: 38 FE    ADD   SP,0xFE
    1A62: 62 D0 00 MOV   REG[0xD0],0x0
    1A65: 53 A2    MOV   [__r0],A
(0058) 				// "4"
(0059) 				break;
    1A67: 80 49    JMP   0x1AB1
(0060) 			case 0x28:
(0061) 				// "7"
(0062) 				if(conf.maxTemp < 99) conf.minTemp++;
    1A69: 3D 07 63 CMP   [X+7],0x63
    1A6C: D0 03    JNC   0x1A70
    1A6E: 77 08    INC   [X+8]
(0063) 				Persist_SaveConfig(&conf);
    1A70: 62 D0 00 MOV   REG[0xD0],0x0
    1A73: 5A A1    MOV   [__r1],X
    1A75: 06 A1 02 ADD   [__r1],0x2
    1A78: 50 07    MOV   A,0x7
    1A7A: 08       PUSH  A
    1A7B: 51 A1    MOV   A,[__r1]
    1A7D: 08       PUSH  A
    1A7E: 7C 23 3F LCALL _Persist_SaveConfig
    1A81: 38 FE    ADD   SP,0xFE
    1A83: 62 D0 00 MOV   REG[0xD0],0x0
    1A86: 53 A2    MOV   [__r0],A
(0064) 				break;
    1A88: 80 28    JMP   0x1AB1
(0065) 			case 0x18:
(0066) 				// "*"
(0067) 				if(conf.maxTemp > 0) conf.minTemp--;
    1A8A: 50 00    MOV   A,0x0
    1A8C: 3B 07    CMP   A,[X+7]
    1A8E: D0 03    JNC   0x1A92
    1A90: 7B 08    DEC   [X+8]
(0068) 				Persist_SaveConfig(&conf);
    1A92: 62 D0 00 MOV   REG[0xD0],0x0
    1A95: 5A A1    MOV   [__r1],X
    1A97: 06 A1 02 ADD   [__r1],0x2
    1A9A: 50 07    MOV   A,0x7
    1A9C: 08       PUSH  A
    1A9D: 51 A1    MOV   A,[__r1]
    1A9F: 08       PUSH  A
    1AA0: 7C 23 3F LCALL _Persist_SaveConfig
    1AA3: 38 FE    ADD   SP,0xFE
    1AA5: 62 D0 00 MOV   REG[0xD0],0x0
    1AA8: 53 A2    MOV   [__r0],A
(0069) 				break;
    1AAA: 80 06    JMP   0x1AB1
(0070) 			case 0x11:
(0071) 				// "D"
(0072) 				MainView_Callback();
    1AAC: 7C 1E E5 LCALL _MainView_Callback
(0073) 				return;
    1AAF: 80 50    JMP   0x1B00
(0074) 				break;
(0075) 		}
(0076) 
(0077) 		Menu_Clear();
    1AB1: 7C 21 CF LCALL _Menu_Clear
(0078) 		LCD_Position(0, 0);
    1AB4: 10       PUSH  X
    1AB5: 50 00    MOV   A,0x0
    1AB7: 57 00    MOV   X,0x0
    1AB9: 7C 0A 0A LCALL _LCD_Position
(0079) 		LCD_PrCString("Max: ");
    1ABC: 50 02    MOV   A,0x2
    1ABE: 08       PUSH  A
    1ABF: 50 0C    MOV   A,0xC
    1AC1: 5C       MOV   X,A
    1AC2: 18       POP   A
    1AC3: 7C 08 85 LCALL _LCD_PrCString
    1AC6: 20       POP   X
(0080) 		bcdmax = (bcd10max << 4) | bcdmax;
    1AC7: 52 0D    MOV   A,[X+13]
    1AC9: 62 D0 00 MOV   REG[0xD0],0x0
    1ACC: 64       ASL   A
    1ACD: 64       ASL   A
    1ACE: 64       ASL   A
    1ACF: 64       ASL   A
    1AD0: 2B 00    OR    A,[X+0]
    1AD2: 54 00    MOV   [X+0],A
(0081) 		LCD_PrHexByte(bcdmax);
    1AD4: 10       PUSH  X
    1AD5: 52 00    MOV   A,[X+0]
    1AD7: 7C 08 A7 LCALL _LCD_PrHexByte
(0082) 		LCD_Position(1,0);
    1ADA: 57 00    MOV   X,0x0
    1ADC: 50 01    MOV   A,0x1
    1ADE: 7C 0A 0A LCALL _LCD_Position
(0083) 		LCD_PrCString("Min: ");
    1AE1: 50 02    MOV   A,0x2
    1AE3: 08       PUSH  A
    1AE4: 50 06    MOV   A,0x6
    1AE6: 5C       MOV   X,A
    1AE7: 18       POP   A
    1AE8: 7C 08 85 LCALL _LCD_PrCString
    1AEB: 20       POP   X
(0084) 		bcdmin = (bcd10min << 4) | bcdmin;
    1AEC: 52 0E    MOV   A,[X+14]
    1AEE: 62 D0 00 MOV   REG[0xD0],0x0
    1AF1: 64       ASL   A
    1AF2: 64       ASL   A
    1AF3: 64       ASL   A
    1AF4: 64       ASL   A
    1AF5: 2B 01    OR    A,[X+1]
    1AF7: 54 01    MOV   [X+1],A
(0085) 		LCD_PrHexByte(bcdmin);
    1AF9: 10       PUSH  X
    1AFA: 52 01    MOV   A,[X+1]
    1AFC: 7C 08 A7 LCALL _LCD_PrHexByte
    1AFF: 20       POP   X
(0086) 	}
    1B00: 38 EF    ADD   SP,0xEF
(0087) 
(0088) 	
(0089) }FILE: C:\Users\Rod\Desktop\RTC\RTC\logger.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Logger.h"
(0004) #include "TempSensor.h"
(0005) #include "Persist.h"
(0006) #include "Rtc.h"
(0007) #include "BcdUtil.h"
(0008) #include "LedArray.h"
(0009) #include <stdio.h>
(0010) 
(0011) void Logger_Start(void)
(0012) {
_Logger_Start:
    1B04: 7F       RET   
(0013) 	
(0014) }
(0015) 
(0016) void Logger_End(void)
(0017) {
_Logger_End:
    1B05: 7F       RET   
(0018) 	
(0019) }
(0020) 
(0021) void Logger_Loop(void)
(0022) {
_Logger_Loop:
  now                  --> X+30
  currentYear          --> X+29
  currentMonth         --> X+28
  currentDate          --> X+27
  currentMin           --> X+26
  currentHour          --> X+25
  timestampEnd         --> X+23
  timestampStart       --> X+21
  record               --> X+15
  timestampNow         --> X+13
  currentTemp          --> X+12
  currentSecond        --> X+11
  conf                 --> X+0
    1B06: 10       PUSH  X
    1B07: 4F       MOV   X,SP
    1B08: 38 20    ADD   SP,0x20
(0023) 	static BYTE elapsedSeconds, previousSecond;
(0024) 	BYTE currentTemp, currentSecond;
(0025) 	BYTE currentHour, currentMin, currentDate, currentMonth, currentYear;
(0026) 	int timestampNow, timestampStart, timestampEnd;
(0027) 	Time now;
(0028) 	Config conf;
(0029) 	Record record;
(0030) 	
(0031) 	Rtc_ReadFromRtc();
    1B0A: 7C 26 7C LCALL _Rtc_ReadFromRtc
(0032) 	
(0033) 	// Only proceed once in a second
(0034) 	currentSecond = datetime._00h.bits.seconds;
    1B0D: 62 D0 00 MOV   REG[0xD0],0x0
    1B10: 51 A3    MOV   A,[datetime]
    1B12: 21 0F    AND   A,0xF
    1B14: 54 0B    MOV   [X+11],A
(0035) 	if (currentSecond != previousSecond)
    1B16: 62 D0 00 MOV   REG[0xD0],0x0
    1B19: 52 0B    MOV   A,[X+11]
    1B1B: 3A B9    CMP   A,[currentView+1]
    1B1D: A2 78    JZ    0x1D96
(0036) 	{
(0037) 		cprintf("Tick\n");
    1B1F: 50 02    MOV   A,0x2
    1B21: 08       PUSH  A
    1B22: 50 2B    MOV   A,0x2B
    1B24: 08       PUSH  A
    1B25: 7C 3D EE LCALL _cprintf
(0038) 		
(0039) 		previousSecond = currentSecond;
    1B28: 52 0B    MOV   A,[X+11]
    1B2A: 62 D0 00 MOV   REG[0xD0],0x0
    1B2D: 53 B9    MOV   [currentView+1],A
(0040) 		elapsedSeconds++;
    1B2F: 62 D0 00 MOV   REG[0xD0],0x0
    1B32: 76 BA    INC   [currentView+2]
(0041) 		
(0042) 		Persist_LoadConfig(&conf);
    1B34: 62 D0 00 MOV   REG[0xD0],0x0
    1B37: 50 07    MOV   A,0x7
    1B39: 08       PUSH  A
    1B3A: 10       PUSH  X
    1B3B: 7C 23 65 LCALL _Persist_LoadConfig
    1B3E: 38 FC    ADD   SP,0xFC
    1B40: 62 D0 00 MOV   REG[0xD0],0x0
(0043) 		currentTemp = TempSensor_GetTemp();
    1B43: 7C 27 F8 LCALL _TempSensor_GetTemp
    1B46: 62 D0 00 MOV   REG[0xD0],0x0
    1B49: 51 A1    MOV   A,[__r1]
    1B4B: 54 0C    MOV   [X+12],A
(0044) 		
(0045) 		// Get max and min temperatures
(0046) //		if (currentTemp > conf.maxRegisteredTemp)
(0047) //		{
(0048) //			conf.maxRegisteredTemp = currentTemp;
(0049) //			Persist_SaveConfig(&conf);
(0050) //		}
(0051) //		if (currentTemp < conf.minRegisteredTemp)
(0052) //		{
(0053) //			conf.minRegisteredTemp = currentTemp;
(0054) //			Persist_SaveConfig(&conf);
(0055) //		}
(0056) 	
(0057) 		// Once in a minute
(0058) 		if(conf.flags.registerEnabled && elapsedSeconds > 59)
    1B4D: 52 00    MOV   A,[X+0]
    1B4F: 67       ASR   A
    1B50: 67       ASR   A
    1B51: 67       ASR   A
    1B52: 67       ASR   A
    1B53: 67       ASR   A
    1B54: 67       ASR   A
    1B55: 67       ASR   A
    1B56: 21 01    AND   A,0x1
    1B58: 53 A2    MOV   [__r0],A
    1B5A: 26 A2 01 AND   [__r0],0x1
    1B5D: A1 FD    JZ    0x1D5B
    1B5F: 62 D0 00 MOV   REG[0xD0],0x0
    1B62: 50 3B    MOV   A,0x3B
    1B64: 3A BA    CMP   A,[currentView+2]
    1B66: D1 F4    JNC   0x1D5B
(0059) 		{
(0060) 			cprintf("Tock\n");
    1B68: 50 02    MOV   A,0x2
    1B6A: 08       PUSH  A
    1B6B: 50 25    MOV   A,0x25
    1B6D: 08       PUSH  A
    1B6E: 7C 3D EE LCALL _cprintf
(0061) 			
(0062) 			elapsedSeconds = 0;
    1B71: 62 D0 00 MOV   REG[0xD0],0x0
    1B74: 55 BA 00 MOV   [currentView+2],0x0
(0063) 			
(0064) 			bcdToDec((datetime._02h.bits_24hrs.hours10), (datetime._02h.bits_24hrs.hours), &currentHour);
    1B77: 62 D0 00 MOV   REG[0xD0],0x0
    1B7A: 5A A1    MOV   [__r1],X
    1B7C: 06 A1 19 ADD   [__r1],0x19
    1B7F: 50 07    MOV   A,0x7
    1B81: 08       PUSH  A
    1B82: 51 A1    MOV   A,[__r1]
    1B84: 08       PUSH  A
    1B85: 62 D0 00 MOV   REG[0xD0],0x0
    1B88: 51 A5    MOV   A,[datetime+2]
    1B8A: 21 0F    AND   A,0xF
    1B8C: 08       PUSH  A
    1B8D: 51 A5    MOV   A,[datetime+2]
    1B8F: 62 D0 00 MOV   REG[0xD0],0x0
    1B92: 67       ASR   A
    1B93: 67       ASR   A
    1B94: 67       ASR   A
    1B95: 67       ASR   A
    1B96: 21 0F    AND   A,0xF
    1B98: 53 A2    MOV   [__r0],A
    1B9A: 26 A2 03 AND   [__r0],0x3
    1B9D: 51 A2    MOV   A,[__r0]
    1B9F: 08       PUSH  A
    1BA0: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    1BA3: 38 FA    ADD   SP,0xFA
(0065) 			bcdToDec((datetime._01h.bits.minutes10), (datetime._01h.bits.minutes), &currentMin);
    1BA5: 62 D0 00 MOV   REG[0xD0],0x0
    1BA8: 5A A1    MOV   [__r1],X
    1BAA: 06 A1 1A ADD   [__r1],0x1A
    1BAD: 50 07    MOV   A,0x7
    1BAF: 08       PUSH  A
    1BB0: 51 A1    MOV   A,[__r1]
    1BB2: 08       PUSH  A
    1BB3: 62 D0 00 MOV   REG[0xD0],0x0
    1BB6: 51 A4    MOV   A,[datetime+1]
    1BB8: 21 0F    AND   A,0xF
    1BBA: 08       PUSH  A
    1BBB: 51 A4    MOV   A,[datetime+1]
    1BBD: 62 D0 00 MOV   REG[0xD0],0x0
    1BC0: 67       ASR   A
    1BC1: 67       ASR   A
    1BC2: 67       ASR   A
    1BC3: 67       ASR   A
    1BC4: 21 0F    AND   A,0xF
    1BC6: 53 A2    MOV   [__r0],A
    1BC8: 26 A2 07 AND   [__r0],0x7
    1BCB: 51 A2    MOV   A,[__r0]
    1BCD: 08       PUSH  A
    1BCE: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0066) 			bcdToDec((datetime._04h.bits.date10), (datetime._04h.bits.date), &currentDate);
    1BD1: 62 D0 00 MOV   REG[0xD0],0x0
    1BD4: 5A A1    MOV   [__r1],X
    1BD6: 06 A1 1B ADD   [__r1],0x1B
    1BD9: 50 07    MOV   A,0x7
    1BDB: 08       PUSH  A
    1BDC: 51 A1    MOV   A,[__r1]
    1BDE: 08       PUSH  A
    1BDF: 62 D0 00 MOV   REG[0xD0],0x0
    1BE2: 51 A7    MOV   A,[datetime+4]
    1BE4: 21 0F    AND   A,0xF
    1BE6: 08       PUSH  A
    1BE7: 51 A7    MOV   A,[datetime+4]
    1BE9: 62 D0 00 MOV   REG[0xD0],0x0
    1BEC: 67       ASR   A
    1BED: 67       ASR   A
    1BEE: 67       ASR   A
    1BEF: 67       ASR   A
    1BF0: 21 0F    AND   A,0xF
    1BF2: 53 A2    MOV   [__r0],A
    1BF4: 26 A2 03 AND   [__r0],0x3
    1BF7: 51 A2    MOV   A,[__r0]
    1BF9: 08       PUSH  A
    1BFA: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    1BFD: 38 F8    ADD   SP,0xF8
(0067) 			bcdToDec((datetime._05h.bits.month10), (datetime._05h.bits.month), &currentMonth);
    1BFF: 62 D0 00 MOV   REG[0xD0],0x0
    1C02: 5A A1    MOV   [__r1],X
    1C04: 06 A1 1C ADD   [__r1],0x1C
    1C07: 50 07    MOV   A,0x7
    1C09: 08       PUSH  A
    1C0A: 51 A1    MOV   A,[__r1]
    1C0C: 08       PUSH  A
    1C0D: 62 D0 00 MOV   REG[0xD0],0x0
    1C10: 51 A8    MOV   A,[datetime+5]
    1C12: 21 0F    AND   A,0xF
    1C14: 08       PUSH  A
    1C15: 51 A8    MOV   A,[datetime+5]
    1C17: 62 D0 00 MOV   REG[0xD0],0x0
    1C1A: 67       ASR   A
    1C1B: 67       ASR   A
    1C1C: 67       ASR   A
    1C1D: 67       ASR   A
    1C1E: 21 0F    AND   A,0xF
    1C20: 53 A2    MOV   [__r0],A
    1C22: 26 A2 01 AND   [__r0],0x1
    1C25: 51 A2    MOV   A,[__r0]
    1C27: 08       PUSH  A
    1C28: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0068) 			bcdToDec((datetime._06h.bits.year10), (datetime._06h.bits.year), &currentYear);
    1C2B: 62 D0 00 MOV   REG[0xD0],0x0
    1C2E: 5A A1    MOV   [__r1],X
    1C30: 06 A1 1D ADD   [__r1],0x1D
    1C33: 50 07    MOV   A,0x7
    1C35: 08       PUSH  A
    1C36: 51 A1    MOV   A,[__r1]
    1C38: 08       PUSH  A
    1C39: 62 D0 00 MOV   REG[0xD0],0x0
    1C3C: 51 A9    MOV   A,[datetime+6]
    1C3E: 21 0F    AND   A,0xF
    1C40: 08       PUSH  A
    1C41: 51 A9    MOV   A,[datetime+6]
    1C43: 62 D0 00 MOV   REG[0xD0],0x0
    1C46: 67       ASR   A
    1C47: 67       ASR   A
    1C48: 67       ASR   A
    1C49: 67       ASR   A
    1C4A: 21 0F    AND   A,0xF
    1C4C: 53 A2    MOV   [__r0],A
    1C4E: 26 A2 0F AND   [__r0],0xF
    1C51: 51 A2    MOV   A,[__r0]
    1C53: 08       PUSH  A
    1C54: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    1C57: 38 F8    ADD   SP,0xF8
(0069) 			
(0070) 			timestampNow = (int)(currentHour)*60 + currentMin;
    1C59: 62 D0 00 MOV   REG[0xD0],0x0
    1C5C: 52 1A    MOV   A,[X+26]
    1C5E: 53 A1    MOV   [__r1],A
    1C60: 55 A2 00 MOV   [__r0],0x0
    1C63: 52 19    MOV   A,[X+25]
    1C65: 53 9F    MOV   [__r3],A
    1C67: 50 00    MOV   A,0x0
    1C69: 08       PUSH  A
    1C6A: 51 9F    MOV   A,[__r3]
    1C6C: 08       PUSH  A
    1C6D: 50 00    MOV   A,0x0
    1C6F: 08       PUSH  A
    1C70: 50 3C    MOV   A,0x3C
    1C72: 08       PUSH  A
    1C73: 7C 39 BA LCALL 0x39BA
    1C76: 38 FC    ADD   SP,0xFC
    1C78: 51 96    MOV   A,[__rX]
    1C7A: 53 9F    MOV   [__r3],A
    1C7C: 51 95    MOV   A,[__rY]
    1C7E: 53 A0    MOV   [__r2],A
    1C80: 51 9F    MOV   A,[__r3]
    1C82: 02 A1    ADD   A,[__r1]
    1C84: 54 0E    MOV   [X+14],A
    1C86: 51 A0    MOV   A,[__r2]
    1C88: 0A A2    ADC   A,[__r0]
    1C8A: 54 0D    MOV   [X+13],A
(0071) 			timestampStart = (int)(conf.registerStart.hour)*60 + conf.registerStart.min;
    1C8C: 52 02    MOV   A,[X+2]
    1C8E: 53 A1    MOV   [__r1],A
    1C90: 52 01    MOV   A,[X+1]
    1C92: 53 9F    MOV   [__r3],A
    1C94: 50 00    MOV   A,0x0
    1C96: 08       PUSH  A
    1C97: 51 9F    MOV   A,[__r3]
    1C99: 08       PUSH  A
    1C9A: 50 00    MOV   A,0x0
    1C9C: 08       PUSH  A
    1C9D: 50 3C    MOV   A,0x3C
    1C9F: 08       PUSH  A
    1CA0: 7C 39 BA LCALL 0x39BA
    1CA3: 38 FC    ADD   SP,0xFC
    1CA5: 51 96    MOV   A,[__rX]
    1CA7: 53 9F    MOV   [__r3],A
    1CA9: 51 95    MOV   A,[__rY]
    1CAB: 53 A0    MOV   [__r2],A
    1CAD: 51 9F    MOV   A,[__r3]
    1CAF: 02 A1    ADD   A,[__r1]
    1CB1: 54 16    MOV   [X+22],A
    1CB3: 51 A0    MOV   A,[__r2]
    1CB5: 0A A2    ADC   A,[__r0]
    1CB7: 54 15    MOV   [X+21],A
(0072) 			timestampEnd = (int)(conf.registerEnd.hour)*60 + conf.registerEnd.min;
    1CB9: 52 04    MOV   A,[X+4]
    1CBB: 53 A1    MOV   [__r1],A
    1CBD: 52 03    MOV   A,[X+3]
    1CBF: 53 9F    MOV   [__r3],A
    1CC1: 50 00    MOV   A,0x0
    1CC3: 08       PUSH  A
    1CC4: 51 9F    MOV   A,[__r3]
    1CC6: 08       PUSH  A
    1CC7: 50 00    MOV   A,0x0
    1CC9: 08       PUSH  A
    1CCA: 50 3C    MOV   A,0x3C
    1CCC: 08       PUSH  A
    1CCD: 7C 39 BA LCALL 0x39BA
    1CD0: 38 FC    ADD   SP,0xFC
    1CD2: 51 96    MOV   A,[__rX]
    1CD4: 53 9F    MOV   [__r3],A
    1CD6: 51 95    MOV   A,[__rY]
    1CD8: 53 A0    MOV   [__r2],A
    1CDA: 51 9F    MOV   A,[__r3]
    1CDC: 02 A1    ADD   A,[__r1]
    1CDE: 54 18    MOV   [X+24],A
    1CE0: 51 A0    MOV   A,[__r2]
    1CE2: 0A A2    ADC   A,[__r0]
    1CE4: 54 17    MOV   [X+23],A
(0073) 			
(0074) 			cprintf("Tiempos: %d %d %d\n", timestampNow, timestampStart, timestampEnd);
    1CE6: 52 17    MOV   A,[X+23]
    1CE8: 08       PUSH  A
    1CE9: 52 18    MOV   A,[X+24]
    1CEB: 08       PUSH  A
    1CEC: 52 15    MOV   A,[X+21]
    1CEE: 08       PUSH  A
    1CEF: 52 16    MOV   A,[X+22]
    1CF1: 08       PUSH  A
    1CF2: 52 0D    MOV   A,[X+13]
    1CF4: 08       PUSH  A
    1CF5: 52 0E    MOV   A,[X+14]
    1CF7: 08       PUSH  A
    1CF8: 50 02    MOV   A,0x2
    1CFA: 08       PUSH  A
    1CFB: 50 12    MOV   A,0x12
    1CFD: 08       PUSH  A
    1CFE: 7C 3D EE LCALL _cprintf
    1D01: 38 F8    ADD   SP,0xF8
(0075) 			
(0076) 			if(timestampNow >= timestampStart && timestampNow < timestampEnd)
    1D03: 52 0E    MOV   A,[X+14]
    1D05: 13 16    SUB   A,[X+22]
    1D07: 52 15    MOV   A,[X+21]
    1D09: 31 80    XOR   A,0x80
    1D0B: 62 D0 00 MOV   REG[0xD0],0x0
    1D0E: 53 96    MOV   [__rX],A
    1D10: 52 0D    MOV   A,[X+13]
    1D12: 31 80    XOR   A,0x80
    1D14: 1A 96    SBB   A,[__rX]
    1D16: C0 44    JC    0x1D5B
    1D18: 52 0E    MOV   A,[X+14]
    1D1A: 13 18    SUB   A,[X+24]
    1D1C: 52 17    MOV   A,[X+23]
    1D1E: 31 80    XOR   A,0x80
    1D20: 62 D0 00 MOV   REG[0xD0],0x0
    1D23: 53 96    MOV   [__rX],A
    1D25: 52 0D    MOV   A,[X+13]
    1D27: 31 80    XOR   A,0x80
    1D29: 1A 96    SBB   A,[__rX]
    1D2B: D0 2F    JNC   0x1D5B
(0077) 			{
(0078) 				// Log
(0079) 				record.temp = currentTemp;
    1D2D: 52 0C    MOV   A,[X+12]
    1D2F: 54 14    MOV   [X+20],A
(0080) 				record.time.hour = currentHour;
    1D31: 52 19    MOV   A,[X+25]
    1D33: 54 12    MOV   [X+18],A
(0081) 				record.time.min = currentMin;
    1D35: 52 1A    MOV   A,[X+26]
    1D37: 54 13    MOV   [X+19],A
(0082) 				record.date.date = currentDate;
    1D39: 52 1B    MOV   A,[X+27]
    1D3B: 54 0F    MOV   [X+15],A
(0083) 				record.date.month = currentMonth;
    1D3D: 52 1C    MOV   A,[X+28]
    1D3F: 54 10    MOV   [X+16],A
(0084) 				record.date.year = currentYear;
    1D41: 52 1D    MOV   A,[X+29]
    1D43: 54 11    MOV   [X+17],A
(0085) 				Persist_SaveRecord(&record);
    1D45: 62 D0 00 MOV   REG[0xD0],0x0
    1D48: 5A A1    MOV   [__r1],X
    1D4A: 06 A1 0F ADD   [__r1],0xF
    1D4D: 50 07    MOV   A,0x7
    1D4F: 08       PUSH  A
    1D50: 51 A1    MOV   A,[__r1]
    1D52: 08       PUSH  A
    1D53: 7C 22 3C LCALL _Persist_SaveRecord
    1D56: 38 FE    ADD   SP,0xFE
    1D58: 62 D0 00 MOV   REG[0xD0],0x0
(0086) 			}
(0087) 			
(0088) 		}
(0089) 	
(0090) 		if(conf.flags.alarmEnabled)
    1D5B: 52 00    MOV   A,[X+0]
    1D5D: 62 D0 00 MOV   REG[0xD0],0x0
    1D60: 67       ASR   A
    1D61: 67       ASR   A
    1D62: 67       ASR   A
    1D63: 67       ASR   A
    1D64: 67       ASR   A
    1D65: 67       ASR   A
    1D66: 21 03    AND   A,0x3
    1D68: 53 A2    MOV   [__r0],A
    1D6A: 26 A2 01 AND   [__r0],0x1
    1D6D: A0 23    JZ    0x1D91
(0091) 		{
(0092) 			if(currentTemp > conf.maxTemp || currentTemp < conf.minTemp)
    1D6F: 52 05    MOV   A,[X+5]
    1D71: 3B 0C    CMP   A,[X+12]
    1D73: C0 07    JC    0x1D7B
    1D75: 52 0C    MOV   A,[X+12]
    1D77: 3B 06    CMP   A,[X+6]
    1D79: D0 10    JNC   0x1D8A
(0093) 			{
(0094) 				PWM8_Start();
    1D7B: 10       PUSH  X
    1D7C: 7C 08 07 LCALL _PWM8_Start
    1D7F: 20       POP   X
(0095) 				Leds_TurnOn(LEDS_MASK);
    1D80: 50 18    MOV   A,0x18
    1D82: 08       PUSH  A
    1D83: 7C 18 8B LCALL _Leds_TurnOn
    1D86: 38 FF    ADD   SP,0xFF
(0096) 			}
    1D88: 80 0D    JMP   0x1D96
(0097) 			else
(0098) 			{
(0099) 				PWM8_Stop();
    1D8A: 10       PUSH  X
    1D8B: 7C 08 0B LCALL _PWM8_Stop
    1D8E: 20       POP   X
(0100) 			}
(0101) 		}
    1D8F: 80 06    JMP   0x1D96
(0102) 		else 
(0103) 		{
(0104) 			PWM8_Stop();
    1D91: 10       PUSH  X
    1D92: 7C 08 0B LCALL _PWM8_Stop
    1D95: 20       POP   X
(0105) 		}
(0106) 		
(0107) 	}
    1D96: 38 E0    ADD   SP,0xE0
(0108) 	
(0109) 	
(0110) }FILE: C:\Users\Rod\Desktop\RTC\RTC\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "Time.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) #include "viewManager.h"
(0011) #include "MainView.h"
(0012) #include "dateTimeView.h"
(0013) #include "regTimeView.h"
(0014) #include "levelView.h"
(0015) #include "configView.h"
(0016) #include "TempSensor.h"
(0017) #include "TempView.h"
(0018) #include "Logger.h"
(0019) #include <string.h>
(0020) 
(0021) extern CurrentView currentView;
(0022) 
(0023) int putchar(char c)
(0024) {
_putchar:
  c                    --> X-4
    1D9A: 10       PUSH  X
    1D9B: 4F       MOV   X,SP
(0025) 	UART_PutChar(c);
    1D9C: 10       PUSH  X
    1D9D: 52 FC    MOV   A,[X-4]
    1D9F: 7C 07 3F LCALL _UART_PutChar
    1DA2: 20       POP   X
    1DA3: 20       POP   X
    1DA4: 7F       RET   
(0026) }
(0027) 
(0028) void main(void)
(0029) {
_main:
    1DA5: 10       PUSH  X
    1DA6: 4F       MOV   X,SP
    1DA7: 38 02    ADD   SP,0x2
(0030) 	Time_Start();
    1DA9: 7C 2A 92 LCALL _Time_Start
(0031) 	Keypad_Start();
    1DAC: 7C 16 7E LCALL _Keypad_Start
(0032) 	Persist_Start();
    1DAF: 7C 21 F4 LCALL _Persist_Start
(0033) 	LCD_Start();
    1DB2: 10       PUSH  X
    1DB3: 7C 09 97 LCALL _LCD_Start|LCD_Init|_LCD_Init
    1DB6: 20       POP   X
(0034) 	MainView_Start();
    1DB7: 7C 1E 4B LCALL _MainView_Start
(0035) 	DateTimeView_Start();
    1DBA: 7C 11 AC LCALL _DateTimeView_Start
(0036) 	RegTimeView_Start();
    1DBD: 7C 23 8B LCALL _RegTimeView_Start
(0037) 	LevelView_Start();
    1DC0: 7C 18 C4 LCALL _LevelView_Start
(0038) 	ConfigView_Start();
    1DC3: 7C 0F B1 LCALL _ConfigView_Start
(0039) 	TempSensor_Start();
    1DC6: 7C 27 DD LCALL _TempSensor_Start
(0040) 	Logger_Start();
    1DC9: 7C 1B 04 LCALL _Logger_Start
(0041) 
(0042) 	UART_Start(UART_PARITY_NONE);
    1DCC: 10       PUSH  X
    1DCD: 50 00    MOV   A,0x0
    1DCF: 7C 06 CD LCALL _UART_Start
(0043) 	UART_IntCntl(UART_ENABLE_RX_INT);
    1DD2: 50 01    MOV   A,0x1
    1DD4: 7C 06 FA LCALL _UART_IntCntl
    1DD7: 20       POP   X
(0044) 
(0045) 	M8C_EnableGInt;
    1DD8: 71 01    OR    F,0x1
(0046) 
(0047) 	MainView_Callback();
    1DDA: 7C 1E E5 LCALL _MainView_Callback
(0048) 
(0049) 	for(;;)
(0050) 	{
(0051) 		switch(currentView)
    1DDD: 62 D0 00 MOV   REG[0xD0],0x0
    1DE0: 51 B8    MOV   A,[currentView]
    1DE2: 54 01    MOV   [X+1],A
    1DE4: 56 00 00 MOV   [X+0],0x0
    1DE7: 3D 00 00 CMP   [X+0],0x0
    1DEA: B0 06    JNZ   0x1DF1
    1DEC: 3D 01 00 CMP   [X+1],0x0
    1DEF: A0 35    JZ    0x1E25
    1DF1: 3D 00 00 CMP   [X+0],0x0
    1DF4: B0 06    JNZ   0x1DFB
    1DF6: 3D 01 01 CMP   [X+1],0x1
    1DF9: A0 30    JZ    0x1E2A
    1DFB: 3D 00 00 CMP   [X+0],0x0
    1DFE: B0 06    JNZ   0x1E05
    1E00: 3D 01 02 CMP   [X+1],0x2
    1E03: A0 2B    JZ    0x1E2F
    1E05: 3D 00 00 CMP   [X+0],0x0
    1E08: B0 06    JNZ   0x1E0F
    1E0A: 3D 01 03 CMP   [X+1],0x3
    1E0D: A0 26    JZ    0x1E34
    1E0F: 3D 00 00 CMP   [X+0],0x0
    1E12: B0 06    JNZ   0x1E19
    1E14: 3D 01 04 CMP   [X+1],0x4
    1E17: A0 21    JZ    0x1E39
    1E19: 3D 00 00 CMP   [X+0],0x0
    1E1C: B0 06    JNZ   0x1E23
    1E1E: 3D 01 05 CMP   [X+1],0x5
    1E21: A0 1C    JZ    0x1E3E
    1E23: 80 1D    JMP   0x1E41
(0052) 		{
(0053) 			case MAIN:
(0054) 				MainView_Update();
    1E25: 7C 1E F7 LCALL _MainView_Update
(0055) 				break;
    1E28: 80 18    JMP   0x1E41
(0056) 			case DATETIME_CONFIG:
(0057) 				DateTimeView_Update();
    1E2A: 7C 11 DB LCALL _DateTimeView_Update
(0058) 				break;
    1E2D: 80 13    JMP   0x1E41
(0059) 			case REGTIME_CONFIG:
(0060) 				RegTimeView_Update();
    1E2F: 7C 23 96 LCALL _RegTimeView_Update
(0061) 				break;
    1E32: 80 0E    JMP   0x1E41
(0062) 			case LEVEL_CONFIG:
(0063) 				LevelView_Update();
    1E34: 7C 19 72 LCALL _LevelView_Update
(0064) 				break;
    1E37: 80 09    JMP   0x1E41
(0065) 			case CONFIG:
(0066) 				ConfigView_Update();
    1E39: 7C 10 3E LCALL _ConfigView_Update
(0067) 				break;
    1E3C: 80 04    JMP   0x1E41
(0068) 			case TEMP:
(0069) 				TempView_Update();
    1E3E: 7C 2A 19 LCALL _TempView_Update
(0070) 				break;
(0071) 		}
(0072) 		Logger_Loop();
    1E41: 7C 1B 06 LCALL _Logger_Loop
(0073) 	}
    1E44: 8F 98    JMP   0x1DDD
(0074) 
(0075) }
FILE: C:\Users\Rod\Desktop\RTC\RTC\mainview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "mainView.h"
(0004) #include "Menu.h"
(0005) #include "Keypad.h"
(0006) #include "dateTimeView.h"
(0007) #include "viewManager.h"
(0008) #include "regTimeView.h"
(0009) #include "levelView.h"
(0010) #include "configView.h"
(0011) #include "TempView.h"
(0012) #include "DeletView.h"
(0013) #include <string.h>
(0014) 
(0015) extern CurrentView currentView;
(0016) 
(0017) MenuEntry entries[6];
(0018) Menu menu;
(0019) 
(0020) void MainView_Start(void)
(0021) {
(0022) 	Menu_Start();
_MainView_Start:
    1E4B: 7C 1F 6E LCALL _Menu_Start
(0023) 
(0024) 	cstrcpy(entries[0].text, "Ajustar Hora");
    1E4E: 50 02    MOV   A,0x2
    1E50: 08       PUSH  A
    1E51: 50 78    MOV   A,0x78
    1E53: 08       PUSH  A
    1E54: 50 00    MOV   A,0x0
    1E56: 08       PUSH  A
    1E57: 50 0F    MOV   A,0xF
    1E59: 08       PUSH  A
    1E5A: 7C 39 F8 LCALL _cstrcpyLMM
(0025) 	cstrcpy(entries[1].text, "Ajustar Captura");
    1E5D: 50 02    MOV   A,0x2
    1E5F: 08       PUSH  A
    1E60: 50 68    MOV   A,0x68
    1E62: 08       PUSH  A
    1E63: 50 00    MOV   A,0x0
    1E65: 08       PUSH  A
    1E66: 50 21    MOV   A,0x21
    1E68: 08       PUSH  A
    1E69: 7C 39 F8 LCALL _cstrcpyLMM
    1E6C: 38 F8    ADD   SP,0xF8
(0026) 	cstrcpy(entries[2].text, "Ajustar Nivel");
    1E6E: 50 02    MOV   A,0x2
    1E70: 08       PUSH  A
    1E71: 50 5A    MOV   A,0x5A
    1E73: 08       PUSH  A
    1E74: 50 00    MOV   A,0x0
    1E76: 08       PUSH  A
    1E77: 50 33    MOV   A,0x33
    1E79: 08       PUSH  A
    1E7A: 7C 39 F8 LCALL _cstrcpyLMM
(0027) 	cstrcpy(entries[3].text, "Configuracion");
    1E7D: 50 02    MOV   A,0x2
    1E7F: 08       PUSH  A
    1E80: 50 4C    MOV   A,0x4C
    1E82: 08       PUSH  A
    1E83: 50 00    MOV   A,0x0
    1E85: 08       PUSH  A
    1E86: 50 45    MOV   A,0x45
    1E88: 08       PUSH  A
    1E89: 7C 39 F8 LCALL _cstrcpyLMM
    1E8C: 38 F8    ADD   SP,0xF8
(0028) 	cstrcpy(entries[4].text, "Temp Actual");
    1E8E: 50 02    MOV   A,0x2
    1E90: 08       PUSH  A
    1E91: 50 40    MOV   A,0x40
    1E93: 08       PUSH  A
    1E94: 50 00    MOV   A,0x0
    1E96: 08       PUSH  A
    1E97: 50 57    MOV   A,0x57
    1E99: 08       PUSH  A
    1E9A: 7C 39 F8 LCALL _cstrcpyLMM
(0029) 	cstrcpy(entries[5].text, "Borrar Memoria");
    1E9D: 50 02    MOV   A,0x2
    1E9F: 08       PUSH  A
    1EA0: 50 31    MOV   A,0x31
    1EA2: 08       PUSH  A
    1EA3: 50 00    MOV   A,0x0
    1EA5: 08       PUSH  A
    1EA6: 50 69    MOV   A,0x69
    1EA8: 08       PUSH  A
    1EA9: 7C 39 F8 LCALL _cstrcpyLMM
    1EAC: 38 F8    ADD   SP,0xF8
(0030) 
(0031) 	entries[0].callback = &DateTimeView_Callback;
    1EAE: 62 D0 00 MOV   REG[0xD0],0x0
    1EB1: 55 20 2B MOV   [entries+17],0x2B
    1EB4: 55 1F 05 MOV   [entries+16],0x5
(0032) 	entries[1].callback = &RegTimeView_Callback;
    1EB7: 55 32 29 MOV   [entries+35],0x29
    1EBA: 55 31 05 MOV   [entries+34],0x5
(0033) 	entries[2].callback = &LevelView_Callback;
    1EBD: 55 44 27 MOV   [entries+53],0x27
    1EC0: 55 43 05 MOV   [entries+52],0x5
(0034) 	entries[3].callback = &ConfigView_Callback;
    1EC3: 55 56 25 MOV   [entries+71],0x25
    1EC6: 55 55 05 MOV   [entries+70],0x5
(0035) 	entries[4].callback = &TempView_Callback;
    1EC9: 55 68 23 MOV   [entries+89],0x23
    1ECC: 55 67 05 MOV   [entries+88],0x5
(0036) 	entries[5].callback = &DeletView_Callback;
    1ECF: 55 7A 21 MOV   [entries+107],0x21
    1ED2: 55 79 05 MOV   [entries+106],0x5
(0037) 
(0038) 	menu.currentIndex = 0;
    1ED5: 62 D0 00 MOV   REG[0xD0],0x0
    1ED8: 55 AE 00 MOV   [menu+3],0x0
(0039) 	menu.nOptions = 6;
    1EDB: 55 AD 06 MOV   [menu+2],0x6
(0040) 	menu.entries = entries;
    1EDE: 55 AC 0F MOV   [menu+1],0xF
    1EE1: 55 AB 00 MOV   [menu],0x0
    1EE4: 7F       RET   
(0041) }
(0042) 
(0043) void MainView_Callback(void)
(0044) {
(0045) 	currentView = MAIN;
_MainView_Callback:
    1EE5: 62 D0 00 MOV   REG[0xD0],0x0
    1EE8: 55 B8 00 MOV   [currentView],0x0
(0046) 	Menu_Update(&menu);
    1EEB: 50 00    MOV   A,0x0
    1EED: 08       PUSH  A
    1EEE: 50 AB    MOV   A,0xAB
    1EF0: 08       PUSH  A
    1EF1: 7C 1F 70 LCALL _Menu_Update
    1EF4: 38 FE    ADD   SP,0xFE
    1EF6: 7F       RET   
(0047) }
(0048) 
(0049) void MainView_Update(void)
(0050) {
_MainView_Update:
    1EF7: 10       PUSH  X
    1EF8: 4F       MOV   X,SP
    1EF9: 38 02    ADD   SP,0x2
(0051) 	if(Keypad_IsKeyStored())
    1EFB: 7C 17 9D LCALL _Keypad_IsKeyStored
    1EFE: 62 D0 00 MOV   REG[0xD0],0x0
    1F01: 39 00    CMP   A,0x0
    1F03: A0 66    JZ    0x1F6A
(0052) 	{
(0053) 		switch(Keypad_GetKey())
    1F05: 7C 17 B5 LCALL _Keypad_GetKey
    1F08: 62 D0 00 MOV   REG[0xD0],0x0
    1F0B: 54 01    MOV   [X+1],A
    1F0D: 56 00 00 MOV   [X+0],0x0
    1F10: 52 01    MOV   A,[X+1]
    1F12: 11 44    SUB   A,0x44
    1F14: 53 95    MOV   [__rY],A
    1F16: 52 00    MOV   A,[X+0]
    1F18: 31 80    XOR   A,0x80
    1F1A: 19 80    SBB   A,0x80
    1F1C: 2A 95    OR    A,[__rY]
    1F1E: A0 28    JZ    0x1F47
    1F20: D0 0D    JNC   0x1F2E
    1F22: 3D 00 00 CMP   [X+0],0x0
    1F25: B0 06    JNZ   0x1F2C
    1F27: 3D 01 24 CMP   [X+1],0x24
    1F2A: A0 0F    JZ    0x1F3A
    1F2C: 80 32    JMP   0x1F5F
    1F2E: 3D 00 00 CMP   [X+0],0x0
    1F31: B0 06    JNZ   0x1F38
    1F33: 3D 01 84 CMP   [X+1],0x84
    1F36: A0 1D    JZ    0x1F54
    1F38: 80 26    JMP   0x1F5F
(0054) 		{
(0055) 			case 0x24:
(0056) 				// "8"
(0057) 				Menu_Down(&menu);
    1F3A: 50 00    MOV   A,0x0
    1F3C: 08       PUSH  A
    1F3D: 50 AB    MOV   A,0xAB
    1F3F: 08       PUSH  A
    1F40: 7C 20 AB LCALL _Menu_Down
    1F43: 38 FE    ADD   SP,0xFE
(0058) 				break;
    1F45: 80 19    JMP   0x1F5F
(0059) 			case 0x44:
(0060) 				// "5"
(0061) 				Menu_Select(&menu);
    1F47: 50 00    MOV   A,0x0
    1F49: 08       PUSH  A
    1F4A: 50 AB    MOV   A,0xAB
    1F4C: 08       PUSH  A
    1F4D: 7C 20 F9 LCALL _Menu_Select
    1F50: 38 FE    ADD   SP,0xFE
(0062) 				return;
    1F52: 80 17    JMP   0x1F6A
(0063) 				break;
(0064) 			case 0x84:
(0065) 				// "2"
(0066) 				Menu_Up(&menu);
    1F54: 50 00    MOV   A,0x0
    1F56: 08       PUSH  A
    1F57: 50 AB    MOV   A,0xAB
    1F59: 08       PUSH  A
    1F5A: 7C 20 6C LCALL _Menu_Up
    1F5D: 38 FE    ADD   SP,0xFE
(0067) 				break;
(0068) 		}
(0069) 		Menu_Update(&menu);
    1F5F: 50 00    MOV   A,0x0
    1F61: 08       PUSH  A
    1F62: 50 AB    MOV   A,0xAB
    1F64: 08       PUSH  A
    1F65: 7C 1F 70 LCALL _Menu_Update
    1F68: 38 FE    ADD   SP,0xFE
(0070) 	}
    1F6A: 38 FE    ADD   SP,0xFE
    1F6C: 20       POP   X
    1F6D: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\menu.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "menu.h"
(0004) 
(0005) void Menu_Start(void)
(0006) {
_Menu_Start:
    1F6E: 7F       RET   
(0007) 	//LCD_Start();
(0008) }
(0009) 
(0010) void Menu_Stop(void)
(0011) {
_Menu_Stop:
    1F6F: 7F       RET   
(0012) 	//LCD_Stop();
(0013) }
(0014) 
(0015) void Menu_Update(Menu *menu)
(0016) {
_Menu_Update:
  menu                 --> X-5
    1F70: 10       PUSH  X
    1F71: 4F       MOV   X,SP
(0017) 	Menu_Clear();
    1F72: 92 5B    CALL  _Menu_Clear
(0018) 	LCD_Position(0, 0);
    1F74: 10       PUSH  X
    1F75: 50 00    MOV   A,0x0
    1F77: 57 00    MOV   X,0x0
    1F79: 7C 0A 0A LCALL _LCD_Position
(0019) 	LCD_PrCString(">");
    1F7C: 50 02    MOV   A,0x2
    1F7E: 08       PUSH  A
    1F7F: 50 98    MOV   A,0x98
    1F81: 5C       MOV   X,A
    1F82: 18       POP   A
    1F83: 7C 08 85 LCALL _LCD_PrCString
    1F86: 20       POP   X
(0020) 	LCD_PrString(menu->entries[menu->currentIndex].text);
    1F87: 62 D0 00 MOV   REG[0xD0],0x0
    1F8A: 52 FC    MOV   A,[X-4]
    1F8C: 53 A1    MOV   [__r1],A
    1F8E: 52 FB    MOV   A,[X-5]
    1F90: 60 D4    MOV   REG[0xD4],A
    1F92: 3E A1    MVI   A,[__r1]
    1F94: 53 A2    MOV   [__r0],A
    1F96: 3E A1    MVI   A,[__r1]
    1F98: 53 A1    MOV   [__r1],A
    1F9A: 52 FC    MOV   A,[X-4]
    1F9C: 01 03    ADD   A,0x3
    1F9E: 53 9F    MOV   [__r3],A
    1FA0: 52 FB    MOV   A,[X-5]
    1FA2: 09 00    ADC   A,0x0
    1FA4: 60 D4    MOV   REG[0xD4],A
    1FA6: 3E 9F    MVI   A,[__r3]
    1FA8: 53 9F    MOV   [__r3],A
    1FAA: 50 00    MOV   A,0x0
    1FAC: 08       PUSH  A
    1FAD: 51 9F    MOV   A,[__r3]
    1FAF: 08       PUSH  A
    1FB0: 50 00    MOV   A,0x0
    1FB2: 08       PUSH  A
    1FB3: 50 12    MOV   A,0x12
    1FB5: 08       PUSH  A
    1FB6: 7C 39 BA LCALL 0x39BA
    1FB9: 38 FC    ADD   SP,0xFC
    1FBB: 51 96    MOV   A,[__rX]
    1FBD: 53 9F    MOV   [__r3],A
    1FBF: 51 95    MOV   A,[__rY]
    1FC1: 53 A0    MOV   [__r2],A
    1FC3: 51 9F    MOV   A,[__r3]
    1FC5: 02 A1    ADD   A,[__r1]
    1FC7: 53 A1    MOV   [__r1],A
    1FC9: 51 A0    MOV   A,[__r2]
    1FCB: 0A A2    ADC   A,[__r0]
    1FCD: 10       PUSH  X
    1FCE: 08       PUSH  A
    1FCF: 51 A1    MOV   A,[__r1]
    1FD1: 5C       MOV   X,A
    1FD2: 18       POP   A
    1FD3: 7C 08 C1 LCALL _LCD_PrString
(0021) 	LCD_Position(1, 0);
    1FD6: 57 00    MOV   X,0x0
    1FD8: 50 01    MOV   A,0x1
    1FDA: 7C 0A 0A LCALL _LCD_Position
(0022) 	LCD_PrCString(" ");
    1FDD: 50 02    MOV   A,0x2
    1FDF: 08       PUSH  A
    1FE0: 50 96    MOV   A,0x96
    1FE2: 5C       MOV   X,A
    1FE3: 18       POP   A
    1FE4: 7C 08 85 LCALL _LCD_PrCString
    1FE7: 20       POP   X
(0023) 	if(menu->currentIndex < menu->nOptions - 1)
    1FE8: 62 D0 00 MOV   REG[0xD0],0x0
    1FEB: 52 FC    MOV   A,[X-4]
    1FED: 01 02    ADD   A,0x2
    1FEF: 53 A1    MOV   [__r1],A
    1FF1: 52 FB    MOV   A,[X-5]
    1FF3: 09 00    ADC   A,0x0
    1FF5: 60 D4    MOV   REG[0xD4],A
    1FF7: 3E A1    MVI   A,[__r1]
    1FF9: 53 A2    MOV   [__r0],A
    1FFB: 16 A2 01 SUB   [__r0],0x1
    1FFE: 52 FC    MOV   A,[X-4]
    2000: 01 03    ADD   A,0x3
    2002: 53 9F    MOV   [__r3],A
    2004: 52 FB    MOV   A,[X-5]
    2006: 09 00    ADC   A,0x0
    2008: 60 D4    MOV   REG[0xD4],A
    200A: 3E 9F    MVI   A,[__r3]
    200C: 3A A2    CMP   A,[__r0]
    200E: D0 5B    JNC   0x206A
(0024) 	{
(0025) 		LCD_PrString(menu->entries[menu->currentIndex + 1].text);
    2010: 62 D0 00 MOV   REG[0xD0],0x0
    2013: 52 FC    MOV   A,[X-4]
    2015: 53 A1    MOV   [__r1],A
    2017: 52 FB    MOV   A,[X-5]
    2019: 60 D4    MOV   REG[0xD4],A
    201B: 3E A1    MVI   A,[__r1]
    201D: 53 A2    MOV   [__r0],A
    201F: 3E A1    MVI   A,[__r1]
    2021: 53 A1    MOV   [__r1],A
    2023: 52 FC    MOV   A,[X-4]
    2025: 01 03    ADD   A,0x3
    2027: 53 9F    MOV   [__r3],A
    2029: 52 FB    MOV   A,[X-5]
    202B: 09 00    ADC   A,0x0
    202D: 60 D4    MOV   REG[0xD4],A
    202F: 3E 9F    MVI   A,[__r3]
    2031: 53 9F    MOV   [__r3],A
    2033: 50 00    MOV   A,0x0
    2035: 08       PUSH  A
    2036: 51 9F    MOV   A,[__r3]
    2038: 08       PUSH  A
    2039: 50 00    MOV   A,0x0
    203B: 08       PUSH  A
    203C: 50 12    MOV   A,0x12
    203E: 08       PUSH  A
    203F: 7C 39 BA LCALL 0x39BA
    2042: 38 FC    ADD   SP,0xFC
    2044: 51 96    MOV   A,[__rX]
    2046: 53 9F    MOV   [__r3],A
    2048: 51 95    MOV   A,[__rY]
    204A: 53 A0    MOV   [__r2],A
    204C: 51 9F    MOV   A,[__r3]
    204E: 02 A1    ADD   A,[__r1]
    2050: 53 A1    MOV   [__r1],A
    2052: 51 A0    MOV   A,[__r2]
    2054: 0A A2    ADC   A,[__r0]
    2056: 53 A2    MOV   [__r0],A
    2058: 06 A1 12 ADD   [__r1],0x12
    205B: 0E A2 00 ADC   [__r0],0x0
    205E: 10       PUSH  X
    205F: 51 A2    MOV   A,[__r0]
    2061: 08       PUSH  A
    2062: 51 A1    MOV   A,[__r1]
    2064: 5C       MOV   X,A
    2065: 18       POP   A
    2066: 7C 08 C1 LCALL _LCD_PrString
    2069: 20       POP   X
(0026) 	}
    206A: 20       POP   X
    206B: 7F       RET   
(0027) 
(0028) }
(0029) 
(0030) void Menu_Up(Menu *menu)
(0031) {
_Menu_Up:
  menu                 --> X-5
    206C: 10       PUSH  X
    206D: 4F       MOV   X,SP
(0032) 	if(menu->currentIndex > 0)
    206E: 62 D0 00 MOV   REG[0xD0],0x0
    2071: 52 FC    MOV   A,[X-4]
    2073: 01 03    ADD   A,0x3
    2075: 53 A1    MOV   [__r1],A
    2077: 52 FB    MOV   A,[X-5]
    2079: 09 00    ADC   A,0x0
    207B: 60 D4    MOV   REG[0xD4],A
    207D: 3E A1    MVI   A,[__r1]
    207F: 53 A2    MOV   [__r0],A
    2081: 50 00    MOV   A,0x0
    2083: 3A A2    CMP   A,[__r0]
    2085: D0 23    JNC   0x20A9
(0033) 	{
(0034) 		menu->currentIndex--;
    2087: 62 D0 00 MOV   REG[0xD0],0x0
    208A: 52 FC    MOV   A,[X-4]
    208C: 01 03    ADD   A,0x3
    208E: 53 A1    MOV   [__r1],A
    2090: 52 FB    MOV   A,[X-5]
    2092: 09 00    ADC   A,0x0
    2094: 53 A2    MOV   [__r0],A
    2096: 60 D4    MOV   REG[0xD4],A
    2098: 3E A1    MVI   A,[__r1]
    209A: 7A A1    DEC   [__r1]
    209C: 53 A0    MOV   [__r2],A
    209E: 16 A0 01 SUB   [__r2],0x1
    20A1: 51 A2    MOV   A,[__r0]
    20A3: 60 D5    MOV   REG[0xD5],A
    20A5: 51 A0    MOV   A,[__r2]
    20A7: 3F A1    MVI   [__r1],A
(0035) 	}
    20A9: 20       POP   X
    20AA: 7F       RET   
(0036) }
(0037) 
(0038) void Menu_Down(Menu *menu)
(0039) {
_Menu_Down:
  menu                 --> X-5
    20AB: 10       PUSH  X
    20AC: 4F       MOV   X,SP
(0040) 	if(menu->currentIndex < menu->nOptions - 1)
    20AD: 62 D0 00 MOV   REG[0xD0],0x0
    20B0: 52 FC    MOV   A,[X-4]
    20B2: 01 02    ADD   A,0x2
    20B4: 53 A1    MOV   [__r1],A
    20B6: 52 FB    MOV   A,[X-5]
    20B8: 09 00    ADC   A,0x0
    20BA: 60 D4    MOV   REG[0xD4],A
    20BC: 3E A1    MVI   A,[__r1]
    20BE: 53 A2    MOV   [__r0],A
    20C0: 16 A2 01 SUB   [__r0],0x1
    20C3: 52 FC    MOV   A,[X-4]
    20C5: 01 03    ADD   A,0x3
    20C7: 53 9F    MOV   [__r3],A
    20C9: 52 FB    MOV   A,[X-5]
    20CB: 09 00    ADC   A,0x0
    20CD: 60 D4    MOV   REG[0xD4],A
    20CF: 3E 9F    MVI   A,[__r3]
    20D1: 3A A2    CMP   A,[__r0]
    20D3: D0 23    JNC   0x20F7
(0041) 	{
(0042) 		menu->currentIndex++;
    20D5: 62 D0 00 MOV   REG[0xD0],0x0
    20D8: 52 FC    MOV   A,[X-4]
    20DA: 01 03    ADD   A,0x3
    20DC: 53 A1    MOV   [__r1],A
    20DE: 52 FB    MOV   A,[X-5]
    20E0: 09 00    ADC   A,0x0
    20E2: 53 A2    MOV   [__r0],A
    20E4: 60 D4    MOV   REG[0xD4],A
    20E6: 3E A1    MVI   A,[__r1]
    20E8: 7A A1    DEC   [__r1]
    20EA: 53 A0    MOV   [__r2],A
    20EC: 06 A0 01 ADD   [__r2],0x1
    20EF: 51 A2    MOV   A,[__r0]
    20F1: 60 D5    MOV   REG[0xD5],A
    20F3: 51 A0    MOV   A,[__r2]
    20F5: 3F A1    MVI   [__r1],A
(0043) 	}
    20F7: 20       POP   X
    20F8: 7F       RET   
(0044) }
(0045) 
(0046) void Menu_Select(Menu *menu)
(0047) {
_Menu_Select:
  menu                 --> X-5
    20F9: 10       PUSH  X
    20FA: 4F       MOV   X,SP
(0048) 	if(menu->entries[menu->currentIndex].callback != 0)
    20FB: 62 D0 00 MOV   REG[0xD0],0x0
    20FE: 52 FC    MOV   A,[X-4]
    2100: 53 A1    MOV   [__r1],A
    2102: 52 FB    MOV   A,[X-5]
    2104: 60 D4    MOV   REG[0xD4],A
    2106: 3E A1    MVI   A,[__r1]
    2108: 53 A2    MOV   [__r0],A
    210A: 3E A1    MVI   A,[__r1]
    210C: 53 A1    MOV   [__r1],A
    210E: 52 FC    MOV   A,[X-4]
    2110: 01 03    ADD   A,0x3
    2112: 53 9F    MOV   [__r3],A
    2114: 52 FB    MOV   A,[X-5]
    2116: 09 00    ADC   A,0x0
    2118: 60 D4    MOV   REG[0xD4],A
    211A: 3E 9F    MVI   A,[__r3]
    211C: 53 9F    MOV   [__r3],A
    211E: 50 00    MOV   A,0x0
    2120: 08       PUSH  A
    2121: 51 9F    MOV   A,[__r3]
    2123: 08       PUSH  A
    2124: 50 00    MOV   A,0x0
    2126: 08       PUSH  A
    2127: 50 12    MOV   A,0x12
    2129: 08       PUSH  A
    212A: 7C 39 BA LCALL 0x39BA
    212D: 38 FC    ADD   SP,0xFC
    212F: 51 96    MOV   A,[__rX]
    2131: 53 9F    MOV   [__r3],A
    2133: 51 95    MOV   A,[__rY]
    2135: 53 A0    MOV   [__r2],A
    2137: 51 9F    MOV   A,[__r3]
    2139: 02 A1    ADD   A,[__r1]
    213B: 53 A1    MOV   [__r1],A
    213D: 51 A0    MOV   A,[__r2]
    213F: 0A A2    ADC   A,[__r0]
    2141: 53 A2    MOV   [__r0],A
    2143: 06 A1 10 ADD   [__r1],0x10
    2146: 0E A2 00 ADC   [__r0],0x0
    2149: 51 A2    MOV   A,[__r0]
    214B: 60 D4    MOV   REG[0xD4],A
    214D: 3E A1    MVI   A,[__r1]
    214F: 53 A2    MOV   [__r0],A
    2151: 3E A1    MVI   A,[__r1]
    2153: 53 A1    MOV   [__r1],A
    2155: 51 A2    MOV   A,[__r0]
    2157: 10       PUSH  X
    2158: 58 A1    MOV   X,[__r1]
    215A: 08       PUSH  A
    215B: 28       ROMX  
    215C: 53 A2    MOV   [__r0],A
    215E: 18       POP   A
    215F: 75       INC   X
    2160: 09 00    ADC   A,0x0
    2162: 28       ROMX  
    2163: 20       POP   X
    2164: 3C A2 00 CMP   [__r0],0x0
    2167: B0 05    JNZ   0x216D
    2169: 39 00    CMP   A,0x0
    216B: A0 61    JZ    0x21CD
(0049) 	{
(0050) 		menu->entries[menu->currentIndex].callback();
    216D: 62 D0 00 MOV   REG[0xD0],0x0
    2170: 52 FC    MOV   A,[X-4]
    2172: 53 A1    MOV   [__r1],A
    2174: 52 FB    MOV   A,[X-5]
    2176: 60 D4    MOV   REG[0xD4],A
    2178: 3E A1    MVI   A,[__r1]
    217A: 53 A2    MOV   [__r0],A
    217C: 3E A1    MVI   A,[__r1]
    217E: 53 A1    MOV   [__r1],A
    2180: 52 FC    MOV   A,[X-4]
    2182: 01 03    ADD   A,0x3
    2184: 53 9F    MOV   [__r3],A
    2186: 52 FB    MOV   A,[X-5]
    2188: 09 00    ADC   A,0x0
    218A: 60 D4    MOV   REG[0xD4],A
    218C: 3E 9F    MVI   A,[__r3]
    218E: 53 9F    MOV   [__r3],A
    2190: 50 00    MOV   A,0x0
    2192: 08       PUSH  A
    2193: 51 9F    MOV   A,[__r3]
    2195: 08       PUSH  A
    2196: 50 00    MOV   A,0x0
    2198: 08       PUSH  A
    2199: 50 12    MOV   A,0x12
    219B: 08       PUSH  A
    219C: 7C 39 BA LCALL 0x39BA
    219F: 38 FC    ADD   SP,0xFC
    21A1: 51 96    MOV   A,[__rX]
    21A3: 53 9F    MOV   [__r3],A
    21A5: 51 95    MOV   A,[__rY]
    21A7: 53 A0    MOV   [__r2],A
    21A9: 51 9F    MOV   A,[__r3]
    21AB: 02 A1    ADD   A,[__r1]
    21AD: 53 A1    MOV   [__r1],A
    21AF: 51 A0    MOV   A,[__r2]
    21B1: 0A A2    ADC   A,[__r0]
    21B3: 53 A2    MOV   [__r0],A
    21B5: 06 A1 10 ADD   [__r1],0x10
    21B8: 0E A2 00 ADC   [__r0],0x0
    21BB: 51 A2    MOV   A,[__r0]
    21BD: 60 D4    MOV   REG[0xD4],A
    21BF: 3E A1    MVI   A,[__r1]
    21C1: 53 A2    MOV   [__r0],A
    21C3: 3E A1    MVI   A,[__r1]
    21C5: 10       PUSH  X
    21C6: 5C       MOV   X,A
    21C7: 51 A2    MOV   A,[__r0]
    21C9: 7C 3A 25 LCALL __plcall
    21CC: 20       POP   X
(0051) 	}
    21CD: 20       POP   X
    21CE: 7F       RET   
(0052) }
(0053) 
(0054) void Menu_Clear(void)
(0055) {
(0056) 	LCD_Position(0, 0);
_Menu_Clear:
    21CF: 10       PUSH  X
    21D0: 50 00    MOV   A,0x0
    21D2: 57 00    MOV   X,0x0
    21D4: 7C 0A 0A LCALL _LCD_Position
(0057) 	LCD_PrCString("                ");
    21D7: 50 02    MOV   A,0x2
    21D9: 08       PUSH  A
    21DA: 50 85    MOV   A,0x85
    21DC: 5C       MOV   X,A
    21DD: 18       POP   A
    21DE: 7C 08 85 LCALL _LCD_PrCString
(0058) 	LCD_Position(1, 0);
    21E1: 57 00    MOV   X,0x0
    21E3: 50 01    MOV   A,0x1
    21E5: 7C 0A 0A LCALL _LCD_Position
(0059) 	LCD_PrCString("                ");
    21E8: 50 02    MOV   A,0x2
    21EA: 08       PUSH  A
    21EB: 50 85    MOV   A,0x85
    21ED: 5C       MOV   X,A
    21EE: 18       POP   A
    21EF: 7C 08 85 LCALL _LCD_PrCString
    21F2: 20       POP   X
    21F3: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\persist.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "EEPROM.h"
(0004) #include "Persist.h"
(0005) #include <stdio.h>
(0006) 
(0007) void Persist_Start(void)
(0008) {
(0009) 	EEPROM_Start();
_Persist_Start:
    21F4: 7C 15 27 LCALL _EEPROM_Start
    21F7: 7F       RET   
(0010) }
(0011) 
(0012) void Persist_Stop(void)
(0013) {
(0014) 	EEPROM_Stop();
_Persist_Stop:
    21F8: 7C 15 2D LCALL _EEPROM_Stop
    21FB: 7F       RET   
(0015) }
(0016) 
(0017) void Persist_Clear(void)
(0018) {
_Persist_Clear:
  blankConfig          --> X+0
    21FC: 10       PUSH  X
    21FD: 4F       MOV   X,SP
    21FE: 38 0B    ADD   SP,0xB
(0019) 	Config blankConfig;
(0020) 	blankConfig.flags.alarmEnabled = FALSE;
    2200: 62 D0 00 MOV   REG[0xD0],0x0
    2203: 52 00    MOV   A,[X+0]
    2205: 21 BF    AND   A,0xBF
    2207: 54 00    MOV   [X+0],A
(0021) 	blankConfig.flags.registerEnabled = FALSE;
    2209: 52 00    MOV   A,[X+0]
    220B: 21 7F    AND   A,0x7F
    220D: 54 00    MOV   [X+0],A
(0022) 	blankConfig.registerStart.hour = 0;
    220F: 56 01 00 MOV   [X+1],0x0
(0023) 	blankConfig.registerStart.min = 0;
    2212: 56 02 00 MOV   [X+2],0x0
(0024) 	blankConfig.registerEnd.hour = 0;
    2215: 56 03 00 MOV   [X+3],0x0
(0025) 	blankConfig.registerEnd.min = 0;
    2218: 56 04 00 MOV   [X+4],0x0
(0026) 	blankConfig.maxTemp = 0;
    221B: 56 05 00 MOV   [X+5],0x0
(0027) 	blankConfig.minTemp = 0;
    221E: 56 06 00 MOV   [X+6],0x0
(0028) 	blankConfig.maxRegisteredTemp = 0;
    2221: 56 07 00 MOV   [X+7],0x0
(0029) 	blankConfig.minRegisteredTemp = 0;
    2224: 56 08 00 MOV   [X+8],0x0
(0030) 	blankConfig.nRecords = 0;
    2227: 56 0A 00 MOV   [X+10],0x0
    222A: 56 09 00 MOV   [X+9],0x0
(0031) 
(0032) 	Persist_SaveConfig(&blankConfig);
    222D: 50 07    MOV   A,0x7
    222F: 08       PUSH  A
    2230: 10       PUSH  X
    2231: 91 0C    CALL  _Persist_SaveConfig
    2233: 38 FE    ADD   SP,0xFE
    2235: 62 D0 00 MOV   REG[0xD0],0x0
    2238: 38 F5    ADD   SP,0xF5
    223A: 20       POP   X
    223B: 7F       RET   
(0033) }
(0034) 
(0035) // saves new record and increments config.nRecords. returns success or error.
(0036) BOOL Persist_SaveRecord(Record *record)
(0037) {
_Persist_SaveRecord:
  index                --> X+11
  conf                 --> X+0
  record               --> X-5
    223C: 10       PUSH  X
    223D: 4F       MOV   X,SP
    223E: 38 0D    ADD   SP,0xD
(0038) 	unsigned short index;
(0039) 	Config conf;
(0040) 	Persist_LoadConfig(&conf);
    2240: 62 D0 00 MOV   REG[0xD0],0x0
    2243: 50 07    MOV   A,0x7
    2245: 08       PUSH  A
    2246: 10       PUSH  X
    2247: 91 1C    CALL  _Persist_LoadConfig
    2249: 38 FE    ADD   SP,0xFE
    224B: 62 D0 00 MOV   REG[0xD0],0x0
(0041) 	conf.nRecords++;
    224E: 77 0A    INC   [X+10]
    2250: 0F 09 00 ADC   [X+9],0x0
(0042) 
(0043) 	if(conf.nRecords > MAX_RECORDS) return FALSE;
    2253: 50 88    MOV   A,0x88
    2255: 13 0A    SUB   A,[X+10]
    2257: 50 13    MOV   A,0x13
    2259: 1B 09    SBB   A,[X+9]
    225B: D0 08    JNC   0x2264
    225D: 62 D0 00 MOV   REG[0xD0],0x0
    2260: 50 00    MOV   A,0x0
    2262: 80 80    JMP   0x22E3
(0044) 
(0045) 	index = sizeof(Config) + ((conf.nRecords - 1) * sizeof(Record));
    2264: 62 D0 00 MOV   REG[0xD0],0x0
    2267: 52 0A    MOV   A,[X+10]
    2269: 11 01    SUB   A,0x1
    226B: 53 A1    MOV   [__r1],A
    226D: 52 09    MOV   A,[X+9]
    226F: 19 00    SBB   A,0x0
    2271: 08       PUSH  A
    2272: 51 A1    MOV   A,[__r1]
    2274: 08       PUSH  A
    2275: 50 00    MOV   A,0x0
    2277: 08       PUSH  A
    2278: 50 06    MOV   A,0x6
    227A: 08       PUSH  A
    227B: 7C 39 BA LCALL 0x39BA
    227E: 38 FC    ADD   SP,0xFC
    2280: 51 96    MOV   A,[__rX]
    2282: 53 A1    MOV   [__r1],A
    2284: 51 95    MOV   A,[__rY]
    2286: 53 A2    MOV   [__r0],A
    2288: 51 A1    MOV   A,[__r1]
    228A: 01 0B    ADD   A,0xB
    228C: 54 0C    MOV   [X+12],A
    228E: 51 A2    MOV   A,[__r0]
    2290: 09 00    ADC   A,0x0
    2292: 54 0B    MOV   [X+11],A
(0046) 	
(0047) 	cprintf("Record Index: %d\nNrecords: %d\n", index, conf.nRecords);
    2294: 52 09    MOV   A,[X+9]
    2296: 08       PUSH  A
    2297: 52 0A    MOV   A,[X+10]
    2299: 08       PUSH  A
    229A: 52 0B    MOV   A,[X+11]
    229C: 08       PUSH  A
    229D: 52 0C    MOV   A,[X+12]
    229F: 08       PUSH  A
    22A0: 50 02    MOV   A,0x2
    22A2: 08       PUSH  A
    22A3: 50 9A    MOV   A,0x9A
    22A5: 08       PUSH  A
    22A6: 7C 3D EE LCALL _cprintf
(0048) 
(0049) 	if(EEPROM_Write((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
    22A9: 50 06    MOV   A,0x6
    22AB: 08       PUSH  A
    22AC: 52 0B    MOV   A,[X+11]
    22AE: 08       PUSH  A
    22AF: 52 0C    MOV   A,[X+12]
    22B1: 08       PUSH  A
    22B2: 52 FB    MOV   A,[X-5]
    22B4: 08       PUSH  A
    22B5: 52 FC    MOV   A,[X-4]
    22B7: 08       PUSH  A
    22B8: 7C 15 33 LCALL _EEPROM_Write
    22BB: 38 F5    ADD   SP,0xF5
    22BD: 62 D0 00 MOV   REG[0xD0],0x0
    22C0: 39 00    CMP   A,0x0
    22C2: A0 05    JZ    0x22C8
    22C4: 50 00    MOV   A,0x0
    22C6: 80 1C    JMP   0x22E3
(0050) 	if(!Persist_SaveConfig(&conf)) return FALSE;
    22C8: 62 D0 00 MOV   REG[0xD0],0x0
    22CB: 50 07    MOV   A,0x7
    22CD: 08       PUSH  A
    22CE: 10       PUSH  X
    22CF: 90 6E    CALL  _Persist_SaveConfig
    22D1: 38 FE    ADD   SP,0xFE
    22D3: 62 D0 00 MOV   REG[0xD0],0x0
    22D6: 39 00    CMP   A,0x0
    22D8: B0 05    JNZ   0x22DE
    22DA: 50 00    MOV   A,0x0
    22DC: 80 06    JMP   0x22E3
(0051) 
(0052) 	return TRUE;
    22DE: 62 D0 00 MOV   REG[0xD0],0x0
    22E1: 50 01    MOV   A,0x1
    22E3: 38 F3    ADD   SP,0xF3
    22E5: 20       POP   X
    22E6: 7F       RET   
(0053) }
(0054) 
(0055) // Loads record n in record.
(0056) BOOL Persist_LoadRecord(Record *record, BYTE n)
(0057) {
_Persist_LoadRecord:
  index                --> X+0
  n                    --> X-6
  record               --> X-5
    22E7: 10       PUSH  X
    22E8: 4F       MOV   X,SP
    22E9: 38 02    ADD   SP,0x2
(0058) 	unsigned short index = sizeof(Config) + (n * sizeof(Record));
    22EB: 62 D0 00 MOV   REG[0xD0],0x0
    22EE: 52 FA    MOV   A,[X-6]
    22F0: 53 A1    MOV   [__r1],A
    22F2: 50 00    MOV   A,0x0
    22F4: 08       PUSH  A
    22F5: 51 A1    MOV   A,[__r1]
    22F7: 08       PUSH  A
    22F8: 50 00    MOV   A,0x0
    22FA: 08       PUSH  A
    22FB: 50 06    MOV   A,0x6
    22FD: 08       PUSH  A
    22FE: 7C 39 BA LCALL 0x39BA
    2301: 38 FC    ADD   SP,0xFC
    2303: 51 96    MOV   A,[__rX]
    2305: 53 A1    MOV   [__r1],A
    2307: 51 95    MOV   A,[__rY]
    2309: 53 A2    MOV   [__r0],A
    230B: 51 A1    MOV   A,[__r1]
    230D: 01 0B    ADD   A,0xB
    230F: 54 01    MOV   [X+1],A
    2311: 51 A2    MOV   A,[__r0]
    2313: 09 00    ADC   A,0x0
    2315: 54 00    MOV   [X+0],A
(0059) 
(0060) 	if(EEPROM_Read((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
    2317: 50 06    MOV   A,0x6
    2319: 08       PUSH  A
    231A: 52 00    MOV   A,[X+0]
    231C: 08       PUSH  A
    231D: 52 01    MOV   A,[X+1]
    231F: 08       PUSH  A
    2320: 52 FB    MOV   A,[X-5]
    2322: 08       PUSH  A
    2323: 52 FC    MOV   A,[X-4]
    2325: 08       PUSH  A
    2326: 7C 15 C1 LCALL _EEPROM_Read
    2329: 38 FB    ADD   SP,0xFB
    232B: 62 D0 00 MOV   REG[0xD0],0x0
    232E: 39 00    CMP   A,0x0
    2330: A0 05    JZ    0x2336
    2332: 50 00    MOV   A,0x0
    2334: 80 06    JMP   0x233B
(0061) 
(0062) 	return TRUE;
    2336: 62 D0 00 MOV   REG[0xD0],0x0
    2339: 50 01    MOV   A,0x1
    233B: 38 FE    ADD   SP,0xFE
    233D: 20       POP   X
    233E: 7F       RET   
(0063) }
(0064) 
(0065) // Saves config
(0066) BOOL Persist_SaveConfig(Config *config)
(0067) {
_Persist_SaveConfig:
  config               --> X-5
    233F: 10       PUSH  X
    2340: 4F       MOV   X,SP
(0068) 	if(EEPROM_Write((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
    2341: 50 0B    MOV   A,0xB
    2343: 08       PUSH  A
    2344: 50 00    MOV   A,0x0
    2346: 08       PUSH  A
    2347: 08       PUSH  A
    2348: 52 FB    MOV   A,[X-5]
    234A: 08       PUSH  A
    234B: 52 FC    MOV   A,[X-4]
    234D: 08       PUSH  A
    234E: 7C 15 33 LCALL _EEPROM_Write
    2351: 38 FB    ADD   SP,0xFB
    2353: 62 D0 00 MOV   REG[0xD0],0x0
    2356: 39 00    CMP   A,0x0
    2358: A0 05    JZ    0x235E
    235A: 50 00    MOV   A,0x0
    235C: 80 06    JMP   0x2363
(0069) 
(0070) 	return TRUE;
    235E: 62 D0 00 MOV   REG[0xD0],0x0
    2361: 50 01    MOV   A,0x1
    2363: 20       POP   X
    2364: 7F       RET   
(0071) }
(0072) 
(0073) // Loads config.
(0074) BOOL Persist_LoadConfig(Config *config)
(0075) {
_Persist_LoadConfig:
  config               --> X-5
    2365: 10       PUSH  X
    2366: 4F       MOV   X,SP
(0076) 	if(EEPROM_Read((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
    2367: 50 0B    MOV   A,0xB
    2369: 08       PUSH  A
    236A: 50 00    MOV   A,0x0
    236C: 08       PUSH  A
    236D: 08       PUSH  A
    236E: 52 FB    MOV   A,[X-5]
    2370: 08       PUSH  A
    2371: 52 FC    MOV   A,[X-4]
    2373: 08       PUSH  A
    2374: 7C 15 C1 LCALL _EEPROM_Read
    2377: 38 FB    ADD   SP,0xFB
    2379: 62 D0 00 MOV   REG[0xD0],0x0
    237C: 39 00    CMP   A,0x0
    237E: A0 05    JZ    0x2384
    2380: 50 00    MOV   A,0x0
    2382: 80 06    JMP   0x2389
(0077) 
(0078) 	return TRUE;
    2384: 62 D0 00 MOV   REG[0xD0],0x0
    2387: 50 01    MOV   A,0x1
    2389: 20       POP   X
    238A: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\regtimeview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "regTimeView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void RegTimeView_Start(void)
(0014) {
_RegTimeView_Start:
    238B: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void RegTimeView_Callback(void)
(0019) {
(0020) 	currentView = REGTIME_CONFIG;
_RegTimeView_Callback:
    238C: 62 D0 00 MOV   REG[0xD0],0x0
    238F: 55 B8 02 MOV   [currentView],0x2
(0021) 	Menu_Clear();
    2392: 7C 21 CF LCALL _Menu_Clear
    2395: 7F       RET   
(0022) }
(0023) 
(0024) void RegTimeView_Update(void)
(0025) {
_RegTimeView_Update:
  endHour10            --> X+18
  startHour10          --> X+17
  endMin10             --> X+16
  startMin10           --> X+15
  endHour              --> X+14
  startHour            --> X+13
  endMin               --> X+12
  startMin             --> X+11
  conf                 --> X+0
    2396: 10       PUSH  X
    2397: 4F       MOV   X,SP
    2398: 38 15    ADD   SP,0x15
(0026) 	BYTE startMin10, startMin, endMin10, endMin, startHour10, startHour, endHour10, endHour;
(0027) 	Config conf;
(0028) 	Persist_LoadConfig(&conf);
    239A: 62 D0 00 MOV   REG[0xD0],0x0
    239D: 50 07    MOV   A,0x7
    239F: 08       PUSH  A
    23A0: 10       PUSH  X
    23A1: 7C 23 65 LCALL _Persist_LoadConfig
    23A4: 38 FE    ADD   SP,0xFE
    23A6: 62 D0 00 MOV   REG[0xD0],0x0
(0029) 	
(0030) 	if(Keypad_IsKeyStored())
    23A9: 7C 17 9D LCALL _Keypad_IsKeyStored
    23AC: 62 D0 00 MOV   REG[0xD0],0x0
    23AF: 39 00    CMP   A,0x0
    23B1: A1 6C    JZ    0x251E
(0031) 	{
(0032) 		switch(Keypad_GetKey())
    23B3: 7C 17 B5 LCALL _Keypad_GetKey
    23B6: 62 D0 00 MOV   REG[0xD0],0x0
    23B9: 54 14    MOV   [X+20],A
    23BB: 56 13 00 MOV   [X+19],0x0
    23BE: 52 14    MOV   A,[X+20]
    23C0: 11 28    SUB   A,0x28
    23C2: 53 95    MOV   [__rY],A
    23C4: 52 13    MOV   A,[X+19]
    23C6: 31 80    XOR   A,0x80
    23C8: 19 80    SBB   A,0x80
    23CA: 2A 95    OR    A,[__rY]
    23CC: A0 E2    JZ    0x24AF
    23CE: D0 38    JNC   0x2407
    23D0: 52 14    MOV   A,[X+20]
    23D2: 11 18    SUB   A,0x18
    23D4: 62 D0 00 MOV   REG[0xD0],0x0
    23D7: 53 95    MOV   [__rY],A
    23D9: 52 13    MOV   A,[X+19]
    23DB: 31 80    XOR   A,0x80
    23DD: 19 80    SBB   A,0x80
    23DF: 2A 95    OR    A,[__rY]
    23E1: A1 01    JZ    0x24E3
    23E3: D0 17    JNC   0x23FB
    23E5: 3D 13 00 CMP   [X+19],0x0
    23E8: B0 06    JNZ   0x23EF
    23EA: 3D 14 11 CMP   [X+20],0x11
    23ED: A1 2B    JZ    0x2519
    23EF: 3D 13 00 CMP   [X+19],0x0
    23F2: B0 06    JNZ   0x23F9
    23F4: 3D 14 14 CMP   [X+20],0x14
    23F7: A1 06    JZ    0x24FE
    23F9: 81 24    JMP   0x251E
    23FB: 3D 13 00 CMP   [X+19],0x0
    23FE: B0 06    JNZ   0x2405
    2400: 3D 14 24 CMP   [X+20],0x24
    2403: A0 C5    JZ    0x24C9
    2405: 81 18    JMP   0x251E
    2407: 52 14    MOV   A,[X+20]
    2409: 11 48    SUB   A,0x48
    240B: 62 D0 00 MOV   REG[0xD0],0x0
    240E: 53 95    MOV   [__rY],A
    2410: 52 13    MOV   A,[X+19]
    2412: 31 80    XOR   A,0x80
    2414: 19 80    SBB   A,0x80
    2416: 2A 95    OR    A,[__rY]
    2418: A0 60    JZ    0x2479
    241A: D0 0D    JNC   0x2428
    241C: 3D 13 00 CMP   [X+19],0x0
    241F: B0 06    JNZ   0x2426
    2421: 3D 14 44 CMP   [X+20],0x44
    2424: A0 6F    JZ    0x2494
    2426: 80 F7    JMP   0x251E
    2428: 52 14    MOV   A,[X+20]
    242A: 11 84    SUB   A,0x84
    242C: 62 D0 00 MOV   REG[0xD0],0x0
    242F: 53 95    MOV   [__rY],A
    2431: 52 13    MOV   A,[X+19]
    2433: 31 80    XOR   A,0x80
    2435: 19 80    SBB   A,0x80
    2437: C0 E6    JC    0x251E
    2439: 2A 95    OR    A,[__rY]
    243B: A0 27    JZ    0x2463
    243D: 3D 13 00 CMP   [X+19],0x0
    2440: B0 06    JNZ   0x2447
    2442: 3D 14 88 CMP   [X+20],0x88
    2445: A0 03    JZ    0x2449
    2447: 80 D6    JMP   0x251E
(0033) 		{
(0034) 			case 0x88:
(0035) 				// "1"
(0036) 				// start h up
(0037) 				if(conf.registerStart.hour < 23)
    2449: 3D 01 17 CMP   [X+1],0x17
    244C: D0 03    JNC   0x2450
(0038) 				{
(0039) 					conf.registerStart.hour++;
    244E: 77 01    INC   [X+1]
(0040) 				}
(0041) 				Persist_SaveConfig(&conf);
    2450: 62 D0 00 MOV   REG[0xD0],0x0
    2453: 50 07    MOV   A,0x7
    2455: 08       PUSH  A
    2456: 10       PUSH  X
    2457: 7C 23 3F LCALL _Persist_SaveConfig
    245A: 38 FE    ADD   SP,0xFE
    245C: 62 D0 00 MOV   REG[0xD0],0x0
    245F: 53 A2    MOV   [__r0],A
(0042) 				break;
    2461: 80 BC    JMP   0x251E
(0043) 			case 0x84:
(0044) 				// "2"
(0045) 				// start min up
(0046) 				if(conf.registerStart.min < 59)
    2463: 3D 02 3B CMP   [X+2],0x3B
    2466: D0 03    JNC   0x246A
(0047) 				{
(0048) 					conf.registerStart.min++;
    2468: 77 02    INC   [X+2]
(0049) 				}
(0050) 				Persist_SaveConfig(&conf);
    246A: 62 D0 00 MOV   REG[0xD0],0x0
    246D: 50 07    MOV   A,0x7
    246F: 08       PUSH  A
    2470: 10       PUSH  X
    2471: 7C 23 3F LCALL _Persist_SaveConfig
    2474: 38 FE    ADD   SP,0xFE
    2476: 62 D0 00 MOV   REG[0xD0],0x0
(0051) 			case 0x48:
(0052) 				// "4"
(0053) 				// start h down
(0054) 				if(conf.registerStart.hour > 0)
    2479: 50 00    MOV   A,0x0
    247B: 3B 01    CMP   A,[X+1]
    247D: D0 03    JNC   0x2481
(0055) 				{
(0056) 					conf.registerStart.hour--;
    247F: 7B 01    DEC   [X+1]
(0057) 				}
(0058) 				Persist_SaveConfig(&conf);
    2481: 62 D0 00 MOV   REG[0xD0],0x0
    2484: 50 07    MOV   A,0x7
    2486: 08       PUSH  A
    2487: 10       PUSH  X
    2488: 7C 23 3F LCALL _Persist_SaveConfig
    248B: 38 FE    ADD   SP,0xFE
    248D: 62 D0 00 MOV   REG[0xD0],0x0
    2490: 53 A2    MOV   [__r0],A
(0059) 				break;
    2492: 80 8B    JMP   0x251E
(0060) 			case 0x44:
(0061) 				// "5"
(0062) 				// start min down
(0063) 				if(conf.registerStart.min > 0)
    2494: 50 00    MOV   A,0x0
    2496: 3B 02    CMP   A,[X+2]
    2498: D0 03    JNC   0x249C
(0064) 				{
(0065) 					conf.registerStart.min--;
    249A: 7B 02    DEC   [X+2]
(0066) 				}
(0067) 				Persist_SaveConfig(&conf);
    249C: 62 D0 00 MOV   REG[0xD0],0x0
    249F: 50 07    MOV   A,0x7
    24A1: 08       PUSH  A
    24A2: 10       PUSH  X
    24A3: 7C 23 3F LCALL _Persist_SaveConfig
    24A6: 38 FE    ADD   SP,0xFE
    24A8: 62 D0 00 MOV   REG[0xD0],0x0
    24AB: 53 A2    MOV   [__r0],A
(0068) 				break;
    24AD: 80 70    JMP   0x251E
(0069) 			case 0x28:
(0070) 				// "7"
(0071) 				// end h up
(0072) 				if(conf.registerEnd.hour < 23)
    24AF: 3D 03 17 CMP   [X+3],0x17
    24B2: D0 03    JNC   0x24B6
(0073) 				{
(0074) 					conf.registerEnd.hour++;
    24B4: 77 03    INC   [X+3]
(0075) 				}
(0076) 				Persist_SaveConfig(&conf);
    24B6: 62 D0 00 MOV   REG[0xD0],0x0
    24B9: 50 07    MOV   A,0x7
    24BB: 08       PUSH  A
    24BC: 10       PUSH  X
    24BD: 7C 23 3F LCALL _Persist_SaveConfig
    24C0: 38 FE    ADD   SP,0xFE
    24C2: 62 D0 00 MOV   REG[0xD0],0x0
    24C5: 53 A2    MOV   [__r0],A
(0077) 				break;
    24C7: 80 56    JMP   0x251E
(0078) 			case 0x24:
(0079) 				// "8"
(0080) 				// end min up
(0081) 				if(conf.registerEnd.min < 59)
    24C9: 3D 04 3B CMP   [X+4],0x3B
    24CC: D0 03    JNC   0x24D0
(0082) 				{
(0083) 					conf.registerEnd.min++;
    24CE: 77 04    INC   [X+4]
(0084) 				}
(0085) 				Persist_SaveConfig(&conf);
    24D0: 62 D0 00 MOV   REG[0xD0],0x0
    24D3: 50 07    MOV   A,0x7
    24D5: 08       PUSH  A
    24D6: 10       PUSH  X
    24D7: 7C 23 3F LCALL _Persist_SaveConfig
    24DA: 38 FE    ADD   SP,0xFE
    24DC: 62 D0 00 MOV   REG[0xD0],0x0
    24DF: 53 A2    MOV   [__r0],A
(0086) 				break;
    24E1: 80 3C    JMP   0x251E
(0087) 			case 0x18:
(0088) 				// "*"
(0089) 				// end h down
(0090) 				if(conf.registerEnd.hour > 0)
    24E3: 50 00    MOV   A,0x0
    24E5: 3B 03    CMP   A,[X+3]
    24E7: D0 03    JNC   0x24EB
(0091) 				{
(0092) 					conf.registerEnd.hour--;
    24E9: 7B 03    DEC   [X+3]
(0093) 				}
(0094) 				Persist_SaveConfig(&conf);
    24EB: 62 D0 00 MOV   REG[0xD0],0x0
    24EE: 50 07    MOV   A,0x7
    24F0: 08       PUSH  A
    24F1: 10       PUSH  X
    24F2: 7C 23 3F LCALL _Persist_SaveConfig
    24F5: 38 FE    ADD   SP,0xFE
    24F7: 62 D0 00 MOV   REG[0xD0],0x0
    24FA: 53 A2    MOV   [__r0],A
(0095) 				break;
    24FC: 80 21    JMP   0x251E
(0096) 			case 0x14:
(0097) 				// "0"
(0098) 				// end min down
(0099) 				if(conf.registerEnd.min > 0)
    24FE: 50 00    MOV   A,0x0
    2500: 3B 04    CMP   A,[X+4]
    2502: D0 03    JNC   0x2506
(0100) 				{
(0101) 					conf.registerEnd.min--;
    2504: 7B 04    DEC   [X+4]
(0102) 				}
(0103) 				Persist_SaveConfig(&conf);
    2506: 62 D0 00 MOV   REG[0xD0],0x0
    2509: 50 07    MOV   A,0x7
    250B: 08       PUSH  A
    250C: 10       PUSH  X
    250D: 7C 23 3F LCALL _Persist_SaveConfig
    2510: 38 FE    ADD   SP,0xFE
    2512: 62 D0 00 MOV   REG[0xD0],0x0
    2515: 53 A2    MOV   [__r0],A
(0104) 				break;
    2517: 80 06    JMP   0x251E
(0105) 			case 0x11:
(0106) 				// "D"
(0107) 				MainView_Callback();
    2519: 7C 1E E5 LCALL _MainView_Callback
(0108) 				return;
    251C: 81 00    JMP   0x261D
(0109) 				break;
(0110) 		}
(0111) 	}
(0112) 	
(0113) 	decToBcd(&startHour10, &startHour, conf.registerStart.hour);
    251E: 52 01    MOV   A,[X+1]
    2520: 08       PUSH  A
    2521: 62 D0 00 MOV   REG[0xD0],0x0
    2524: 5A A1    MOV   [__r1],X
    2526: 06 A1 0D ADD   [__r1],0xD
    2529: 50 07    MOV   A,0x7
    252B: 08       PUSH  A
    252C: 51 A1    MOV   A,[__r1]
    252E: 08       PUSH  A
    252F: 5A A1    MOV   [__r1],X
    2531: 06 A1 11 ADD   [__r1],0x11
    2534: 50 07    MOV   A,0x7
    2536: 08       PUSH  A
    2537: 51 A1    MOV   A,[__r1]
    2539: 08       PUSH  A
    253A: 7C 0F 6A LCALL _decToBcd
(0114) 	startHour = (startHour10 << 4) | startHour;
    253D: 52 11    MOV   A,[X+17]
    253F: 62 D0 00 MOV   REG[0xD0],0x0
    2542: 64       ASL   A
    2543: 64       ASL   A
    2544: 64       ASL   A
    2545: 64       ASL   A
    2546: 2B 0D    OR    A,[X+13]
    2548: 54 0D    MOV   [X+13],A
(0115) 	decToBcd(&startMin10, &startMin, conf.registerStart.min);
    254A: 52 02    MOV   A,[X+2]
    254C: 08       PUSH  A
    254D: 5A A1    MOV   [__r1],X
    254F: 06 A1 0B ADD   [__r1],0xB
    2552: 50 07    MOV   A,0x7
    2554: 08       PUSH  A
    2555: 51 A1    MOV   A,[__r1]
    2557: 08       PUSH  A
    2558: 5A A1    MOV   [__r1],X
    255A: 06 A1 0F ADD   [__r1],0xF
    255D: 50 07    MOV   A,0x7
    255F: 08       PUSH  A
    2560: 51 A1    MOV   A,[__r1]
    2562: 08       PUSH  A
    2563: 7C 0F 6A LCALL _decToBcd
    2566: 38 F6    ADD   SP,0xF6
(0116) 	startMin = (startMin10 << 4) | startMin;
    2568: 52 0F    MOV   A,[X+15]
    256A: 62 D0 00 MOV   REG[0xD0],0x0
    256D: 64       ASL   A
    256E: 64       ASL   A
    256F: 64       ASL   A
    2570: 64       ASL   A
    2571: 2B 0B    OR    A,[X+11]
    2573: 54 0B    MOV   [X+11],A
(0117) 	
(0118) 	decToBcd(&endHour10, &endHour, conf.registerEnd.hour);
    2575: 52 03    MOV   A,[X+3]
    2577: 08       PUSH  A
    2578: 5A A1    MOV   [__r1],X
    257A: 06 A1 0E ADD   [__r1],0xE
    257D: 50 07    MOV   A,0x7
    257F: 08       PUSH  A
    2580: 51 A1    MOV   A,[__r1]
    2582: 08       PUSH  A
    2583: 5A A1    MOV   [__r1],X
    2585: 06 A1 12 ADD   [__r1],0x12
    2588: 50 07    MOV   A,0x7
    258A: 08       PUSH  A
    258B: 51 A1    MOV   A,[__r1]
    258D: 08       PUSH  A
    258E: 7C 0F 6A LCALL _decToBcd
(0119) 	endHour = (endHour10 << 4) | endHour;
    2591: 52 12    MOV   A,[X+18]
    2593: 62 D0 00 MOV   REG[0xD0],0x0
    2596: 64       ASL   A
    2597: 64       ASL   A
    2598: 64       ASL   A
    2599: 64       ASL   A
    259A: 2B 0E    OR    A,[X+14]
    259C: 54 0E    MOV   [X+14],A
(0120) 	decToBcd(&endMin10, &endMin, conf.registerEnd.min);
    259E: 52 04    MOV   A,[X+4]
    25A0: 08       PUSH  A
    25A1: 5A A1    MOV   [__r1],X
    25A3: 06 A1 0C ADD   [__r1],0xC
    25A6: 50 07    MOV   A,0x7
    25A8: 08       PUSH  A
    25A9: 51 A1    MOV   A,[__r1]
    25AB: 08       PUSH  A
    25AC: 5A A1    MOV   [__r1],X
    25AE: 06 A1 10 ADD   [__r1],0x10
    25B1: 50 07    MOV   A,0x7
    25B3: 08       PUSH  A
    25B4: 51 A1    MOV   A,[__r1]
    25B6: 08       PUSH  A
    25B7: 7C 0F 6A LCALL _decToBcd
    25BA: 38 F6    ADD   SP,0xF6
(0121) 	endMin = (endMin10 << 4) | endMin;
    25BC: 52 10    MOV   A,[X+16]
    25BE: 62 D0 00 MOV   REG[0xD0],0x0
    25C1: 64       ASL   A
    25C2: 64       ASL   A
    25C3: 64       ASL   A
    25C4: 64       ASL   A
    25C5: 2B 0C    OR    A,[X+12]
    25C7: 54 0C    MOV   [X+12],A
(0122) 	
(0123) 	LCD_Position(0, 0);
    25C9: 10       PUSH  X
    25CA: 50 00    MOV   A,0x0
    25CC: 57 00    MOV   X,0x0
    25CE: 7C 0A 0A LCALL _LCD_Position
(0124) 	LCD_PrCString("Inicio: ");
    25D1: 50 02    MOV   A,0x2
    25D3: 08       PUSH  A
    25D4: 50 C4    MOV   A,0xC4
    25D6: 5C       MOV   X,A
    25D7: 18       POP   A
    25D8: 7C 08 85 LCALL _LCD_PrCString
    25DB: 20       POP   X
(0125) 	LCD_PrHexByte(startHour);
    25DC: 10       PUSH  X
    25DD: 52 0D    MOV   A,[X+13]
    25DF: 7C 08 A7 LCALL _LCD_PrHexByte
(0126) 	LCD_PrCString(":");
    25E2: 50 02    MOV   A,0x2
    25E4: 08       PUSH  A
    25E5: 50 C2    MOV   A,0xC2
    25E7: 5C       MOV   X,A
    25E8: 18       POP   A
    25E9: 7C 08 85 LCALL _LCD_PrCString
    25EC: 20       POP   X
(0127) 	LCD_PrHexByte(startMin);
    25ED: 10       PUSH  X
    25EE: 52 0B    MOV   A,[X+11]
    25F0: 7C 08 A7 LCALL _LCD_PrHexByte
(0128) 	LCD_Position(1,0);
    25F3: 57 00    MOV   X,0x0
    25F5: 50 01    MOV   A,0x1
    25F7: 7C 0A 0A LCALL _LCD_Position
(0129) 	LCD_PrCString("Fin:    ");
    25FA: 50 02    MOV   A,0x2
    25FC: 08       PUSH  A
    25FD: 50 B9    MOV   A,0xB9
    25FF: 5C       MOV   X,A
    2600: 18       POP   A
    2601: 7C 08 85 LCALL _LCD_PrCString
    2604: 20       POP   X
(0130) 	LCD_PrHexByte(endHour);
    2605: 10       PUSH  X
    2606: 52 0E    MOV   A,[X+14]
    2608: 7C 08 A7 LCALL _LCD_PrHexByte
(0131) 	LCD_PrCString(":");
    260B: 50 02    MOV   A,0x2
    260D: 08       PUSH  A
    260E: 50 C2    MOV   A,0xC2
    2610: 5C       MOV   X,A
    2611: 18       POP   A
    2612: 7C 08 85 LCALL _LCD_PrCString
    2615: 20       POP   X
(0132) 	LCD_PrHexByte(endMin);
    2616: 10       PUSH  X
    2617: 52 0C    MOV   A,[X+12]
    2619: 7C 08 A7 LCALL _LCD_PrHexByte
    261C: 20       POP   X
    261D: 38 EB    ADD   SP,0xEB
    261F: 20       POP   X
    2620: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\rtc.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Rtc.h"
(0004) 
(0005) typedef union
(0006) {
(0007) 	struct
(0008) 	{
(0009) 		BYTE OUT : 1;
(0010) 		BYTE : 2;
(0011) 		BYTE SQWE : 1;
(0012) 		BYTE : 2;
(0013) 		BYTE RS1 : 1;
(0014) 		BYTE RS0 : 1;
(0015) 	} bits;
(0016) 	BYTE byte;
(0017) 
(0018) } ControlRegister;
(0019) 
(0020) DateTime datetime;
(0021) static ControlRegister cr;
(0022) 
(0023) void Rtc_Start(void)
(0024) {
(0025) 	I2Cm_Start();
_Rtc_Start:
    2621: 10       PUSH  X
    2622: 7C 0B 14 LCALL _I2Cm_Start
    2625: 20       POP   X
(0026) 
(0027) 	// Starts RTC clock
(0028) 	datetime._00h.bits.CH = 0;
    2626: 62 D0 00 MOV   REG[0xD0],0x0
    2629: 51 A3    MOV   A,[datetime]
    262B: 21 7F    AND   A,0x7F
    262D: 53 A3    MOV   [datetime],A
(0029) 	Rtc_WriteToRtc();
    262F: 90 37    CALL  _Rtc_WriteToRtc
    2631: 62 D0 00 MOV   REG[0xD0],0x0
    2634: 7F       RET   
(0030) }
(0031) 
(0032) void Rtc_Stop(void)
(0033) {
(0034) 	// Stops RTC clock
(0035) 	Rtc_ReadFromRtc();
_Rtc_Stop:
    2635: 90 45    CALL  _Rtc_ReadFromRtc
(0036) 	datetime._00h.bits.CH = 1;
    2637: 62 D0 00 MOV   REG[0xD0],0x0
    263A: 51 A3    MOV   A,[datetime]
    263C: 29 80    OR    A,0x80
    263E: 53 A3    MOV   [datetime],A
(0037) 	Rtc_WriteToRtc();
    2640: 90 26    CALL  _Rtc_WriteToRtc
    2642: 62 D0 00 MOV   REG[0xD0],0x0
(0038) 
(0039) 	I2Cm_Stop();
    2645: 10       PUSH  X
    2646: 7C 0B 38 LCALL _I2Cm_Stop
    2649: 20       POP   X
    264A: 7F       RET   
(0040) }
(0041) 
(0042) void Rtc_EnableSqw1Hz(void)
(0043) {
(0044) 	Rtc_GetSqwOutConfig();
_Rtc_EnableSqw1Hz:
    264B: 90 57    CALL  _Rtc_GetSqwOutConfig
(0045) 	cr.bits.SQWE = 1;
    264D: 62 D0 00 MOV   REG[0xD0],0x0
    2650: 51 B6    MOV   A,[rtc.c:cr]
    2652: 29 10    OR    A,0x10
    2654: 53 B6    MOV   [rtc.c:cr],A
(0046) 	cr.bits.RS0 = 0;
    2656: 51 B6    MOV   A,[rtc.c:cr]
    2658: 21 FE    AND   A,0xFE
    265A: 53 B6    MOV   [rtc.c:cr],A
(0047) 	cr.bits.RS1 = 0;
    265C: 51 B6    MOV   A,[rtc.c:cr]
    265E: 21 FD    AND   A,0xFD
    2660: 53 B6    MOV   [rtc.c:cr],A
(0048) 	Rtc_SetSqwOutConfig();
    2662: 90 2C    CALL  _Rtc_SetSqwOutConfig
    2664: 62 D0 00 MOV   REG[0xD0],0x0
    2667: 7F       RET   
(0049) }
(0050) 
(0051) #define RTC_NOERROR 0x00
(0052) #define RTC_SLAVENOTACKADDRESS 0x01
(0053) #define RTC_SLAVENOTACKDATA 0x02
(0054) 
(0055) BYTE Rtc_WriteToRtc(void)
(0056) {
(0057) 	return Rtc_WriteToRam(&datetime, 0x00, 7);
_Rtc_WriteToRtc:
    2668: 50 07    MOV   A,0x7
    266A: 08       PUSH  A
    266B: 50 00    MOV   A,0x0
    266D: 08       PUSH  A
    266E: 50 00    MOV   A,0x0
    2670: 08       PUSH  A
    2671: 50 A3    MOV   A,0xA3
    2673: 08       PUSH  A
    2674: 90 47    CALL  _Rtc_WriteToRam
    2676: 38 FC    ADD   SP,0xFC
    2678: 62 D0 00 MOV   REG[0xD0],0x0
    267B: 7F       RET   
(0058) }
(0059) 
(0060) BYTE Rtc_ReadFromRtc(void)
(0061) {
(0062) 	return Rtc_ReadFromRam(&datetime, 0x00, 7);
_Rtc_ReadFromRtc:
    267C: 50 07    MOV   A,0x7
    267E: 08       PUSH  A
    267F: 50 00    MOV   A,0x0
    2681: 08       PUSH  A
    2682: 50 00    MOV   A,0x0
    2684: 08       PUSH  A
    2685: 50 A3    MOV   A,0xA3
    2687: 08       PUSH  A
    2688: 90 A9    CALL  _Rtc_ReadFromRam
    268A: 38 FC    ADD   SP,0xFC
    268C: 62 D0 00 MOV   REG[0xD0],0x0
    268F: 7F       RET   
(0063) }
(0064) 
(0065) BYTE Rtc_SetSqwOutConfig(void)
(0066) {
(0067) 	return Rtc_WriteToRam(&cr, 0x07, 1);
_Rtc_SetSqwOutConfig:
    2690: 50 01    MOV   A,0x1
    2692: 08       PUSH  A
    2693: 50 07    MOV   A,0x7
    2695: 08       PUSH  A
    2696: 50 00    MOV   A,0x0
    2698: 08       PUSH  A
    2699: 50 B6    MOV   A,0xB6
    269B: 08       PUSH  A
    269C: 90 1F    CALL  _Rtc_WriteToRam
    269E: 38 FC    ADD   SP,0xFC
    26A0: 62 D0 00 MOV   REG[0xD0],0x0
    26A3: 7F       RET   
(0068) }
(0069) 
(0070) BYTE Rtc_GetSqwOutConfig(void)
(0071) {
(0072) 	Rtc_ReadFromRam(&cr, 0x07, 1);
_Rtc_GetSqwOutConfig:
    26A4: 50 01    MOV   A,0x1
    26A6: 08       PUSH  A
    26A7: 50 07    MOV   A,0x7
    26A9: 08       PUSH  A
    26AA: 50 00    MOV   A,0x0
    26AC: 08       PUSH  A
    26AD: 50 B6    MOV   A,0xB6
    26AF: 08       PUSH  A
    26B0: 90 81    CALL  _Rtc_ReadFromRam
    26B2: 38 FC    ADD   SP,0xFC
(0073) 	return cr.byte;
    26B4: 62 D0 00 MOV   REG[0xD0],0x0
    26B7: 51 B6    MOV   A,[rtc.c:cr]
    26B9: 62 D0 00 MOV   REG[0xD0],0x0
    26BC: 7F       RET   
(0074) }
(0075) 
(0076) BYTE Rtc_WriteToRam(void* buffer, BYTE address, BYTE count)
(0077) {
_Rtc_WriteToRam:
  error                --> X+1
  i                    --> X+0
  count                --> X-7
  address              --> X-6
  buffer               --> X-5
    26BD: 10       PUSH  X
    26BE: 4F       MOV   X,SP
    26BF: 38 02    ADD   SP,0x2
(0078) 	BYTE error = RTC_NOERROR;
    26C1: 56 01 00 MOV   [X+1],0x0
(0079) 	BYTE i = 0;
    26C4: 56 00 00 MOV   [X+0],0x0
(0080) 
(0081) 	if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
    26C7: 10       PUSH  X
    26C8: 57 00    MOV   X,0x0
    26CA: 50 68    MOV   A,0x68
    26CC: 7C 0C 80 LCALL _I2Cm_fSendStart
    26CF: 20       POP   X
    26D0: 62 D0 00 MOV   REG[0xD0],0x0
    26D3: 39 00    CMP   A,0x0
    26D5: A0 4C    JZ    0x2722
(0082) 	{
(0083) 		if(I2Cm_fWrite(address) != 0)
    26D7: 10       PUSH  X
    26D8: 52 FA    MOV   A,[X-6]
    26DA: 7C 0C BA LCALL _I2Cm_fWrite
    26DD: 20       POP   X
    26DE: 62 D0 00 MOV   REG[0xD0],0x0
    26E1: 39 00    CMP   A,0x0
    26E3: A0 39    JZ    0x271D
(0084) 		{
(0085) 			for (i = 0; i < count; i++)
    26E5: 56 00 00 MOV   [X+0],0x0
    26E8: 80 2C    JMP   0x2715
(0086) 			{
(0087) 				if(I2Cm_fWrite( *( (BYTE*)buffer+i ) ) == 0)
    26EA: 62 D0 00 MOV   REG[0xD0],0x0
    26ED: 52 00    MOV   A,[X+0]
    26EF: 53 A1    MOV   [__r1],A
    26F1: 55 A2 00 MOV   [__r0],0x0
    26F4: 52 FC    MOV   A,[X-4]
    26F6: 04 A1    ADD   [__r1],A
    26F8: 52 FB    MOV   A,[X-5]
    26FA: 0C A2    ADC   [__r0],A
    26FC: 51 A2    MOV   A,[__r0]
    26FE: 60 D4    MOV   REG[0xD4],A
    2700: 3E A1    MVI   A,[__r1]
    2702: 10       PUSH  X
    2703: 7C 0C BA LCALL _I2Cm_fWrite
    2706: 20       POP   X
    2707: 62 D0 00 MOV   REG[0xD0],0x0
    270A: 39 00    CMP   A,0x0
    270C: B0 06    JNZ   0x2713
(0088) 				{
(0089) 					error = RTC_SLAVENOTACKDATA;
    270E: 56 01 02 MOV   [X+1],0x2
(0090) 					break;
    2711: 80 13    JMP   0x2725
(0091) 				}
(0092) 			}
    2713: 77 00    INC   [X+0]
    2715: 52 00    MOV   A,[X+0]
    2717: 3B F9    CMP   A,[X-7]
    2719: CF D0    JC    0x26EA
(0093) 		}
    271B: 80 09    JMP   0x2725
(0094) 		else
(0095) 		{
(0096) 			error = RTC_SLAVENOTACKDATA;
    271D: 56 01 02 MOV   [X+1],0x2
(0097) 		}
(0098) 	}
    2720: 80 04    JMP   0x2725
(0099) 	else
(0100) 	{
(0101) 		error = RTC_SLAVENOTACKADDRESS;
    2722: 56 01 01 MOV   [X+1],0x1
(0102) 	}
(0103) 
(0104) 	I2Cm_SendStop();
    2725: 10       PUSH  X
    2726: 7C 0D FC LCALL _I2Cm_SendStop
    2729: 20       POP   X
(0105) 
(0106) 	return error;
    272A: 52 01    MOV   A,[X+1]
    272C: 62 D0 00 MOV   REG[0xD0],0x0
    272F: 38 FE    ADD   SP,0xFE
    2731: 20       POP   X
    2732: 7F       RET   
(0107) }
(0108) 
(0109) BYTE Rtc_ReadFromRam(void* buffer, BYTE address, BYTE count)
(0110) {
_Rtc_ReadFromRam:
  error                --> X+1
  i                    --> X+0
  count                --> X-7
  address              --> X-6
  buffer               --> X-5
    2733: 10       PUSH  X
    2734: 4F       MOV   X,SP
    2735: 38 02    ADD   SP,0x2
(0111) 	BYTE error = RTC_NOERROR;
    2737: 56 01 00 MOV   [X+1],0x0
(0112) 	BYTE i = 0;
    273A: 56 00 00 MOV   [X+0],0x0
(0113) 
(0114) 	if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
    273D: 10       PUSH  X
    273E: 57 00    MOV   X,0x0
    2740: 50 68    MOV   A,0x68
    2742: 7C 0C 80 LCALL _I2Cm_fSendStart
    2745: 20       POP   X
    2746: 62 D0 00 MOV   REG[0xD0],0x0
    2749: 39 00    CMP   A,0x0
    274B: A0 80    JZ    0x27CC
(0115) 	{
(0116) 		if(I2Cm_fWrite(address) != 0)
    274D: 10       PUSH  X
    274E: 52 FA    MOV   A,[X-6]
    2750: 7C 0C BA LCALL _I2Cm_fWrite
    2753: 20       POP   X
    2754: 62 D0 00 MOV   REG[0xD0],0x0
    2757: 39 00    CMP   A,0x0
    2759: A0 6D    JZ    0x27C7
(0117) 		{
(0118) 			if(I2Cm_fSendRepeatStart(RTC_I2C_ADDRESS, I2Cm_READ) != 0)
    275B: 10       PUSH  X
    275C: 57 01    MOV   X,0x1
    275E: 50 68    MOV   A,0x68
    2760: 7C 0C 4A LCALL _I2Cm_fSendRepeatStart
    2763: 20       POP   X
    2764: 62 D0 00 MOV   REG[0xD0],0x0
    2767: 39 00    CMP   A,0x0
    2769: A0 58    JZ    0x27C2
(0119) 			{
(0120) 				count--;
    276B: 7B F9    DEC   [X-7]
(0121) 				for (i = 0; i < count; i++)
    276D: 56 00 00 MOV   [X+0],0x0
    2770: 80 26    JMP   0x2797
(0122) 				{
(0123) 					*( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_ACKslave);
    2772: 10       PUSH  X
    2773: 50 01    MOV   A,0x1
    2775: 7C 0D 51 LCALL _I2Cm_bRead
    2778: 20       POP   X
    2779: 62 D0 00 MOV   REG[0xD0],0x0
    277C: 53 A2    MOV   [__r0],A
    277E: 52 00    MOV   A,[X+0]
    2780: 53 9F    MOV   [__r3],A
    2782: 55 A0 00 MOV   [__r2],0x0
    2785: 52 FC    MOV   A,[X-4]
    2787: 04 9F    ADD   [__r3],A
    2789: 52 FB    MOV   A,[X-5]
    278B: 0C A0    ADC   [__r2],A
    278D: 51 A0    MOV   A,[__r2]
    278F: 60 D5    MOV   REG[0xD5],A
    2791: 51 A2    MOV   A,[__r0]
    2793: 3F 9F    MVI   [__r3],A
(0124) 				}
    2795: 77 00    INC   [X+0]
    2797: 52 00    MOV   A,[X+0]
    2799: 3B F9    CMP   A,[X-7]
    279B: CF D6    JC    0x2772
(0125) 
(0126) 				*( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_NAKslave);
    279D: 10       PUSH  X
    279E: 50 00    MOV   A,0x0
    27A0: 7C 0D 51 LCALL _I2Cm_bRead
    27A3: 20       POP   X
    27A4: 62 D0 00 MOV   REG[0xD0],0x0
    27A7: 53 A2    MOV   [__r0],A
    27A9: 52 00    MOV   A,[X+0]
    27AB: 53 9F    MOV   [__r3],A
    27AD: 55 A0 00 MOV   [__r2],0x0
    27B0: 52 FC    MOV   A,[X-4]
    27B2: 04 9F    ADD   [__r3],A
    27B4: 52 FB    MOV   A,[X-5]
    27B6: 0C A0    ADC   [__r2],A
    27B8: 51 A0    MOV   A,[__r2]
    27BA: 60 D5    MOV   REG[0xD5],A
    27BC: 51 A2    MOV   A,[__r0]
    27BE: 3F 9F    MVI   [__r3],A
(0127) 			}
    27C0: 80 0E    JMP   0x27CF
(0128) 			else
(0129) 			{
(0130) 				error = RTC_SLAVENOTACKDATA;
    27C2: 56 01 02 MOV   [X+1],0x2
(0131) 			}
(0132) 		}
    27C5: 80 09    JMP   0x27CF
(0133) 		else
(0134) 		{
(0135) 			error = RTC_SLAVENOTACKDATA;
    27C7: 56 01 02 MOV   [X+1],0x2
(0136) 		}
(0137) 	}
    27CA: 80 04    JMP   0x27CF
(0138) 	else
(0139) 	{
(0140) 		error = RTC_SLAVENOTACKADDRESS;
    27CC: 56 01 01 MOV   [X+1],0x1
(0141) 	}
(0142) 
(0143) 	I2Cm_SendStop();
    27CF: 10       PUSH  X
    27D0: 7C 0D FC LCALL _I2Cm_SendStop
    27D3: 20       POP   X
(0144) 
(0145) 	return error;
    27D4: 52 01    MOV   A,[X+1]
    27D6: 62 D0 00 MOV   REG[0xD0],0x0
    27D9: 38 FE    ADD   SP,0xFE
    27DB: 20       POP   X
    27DC: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\tempsensor.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "TempSensor.h"
(0004) #include <stdio.h>
(0005) 
(0006) 
(0007) void TempSensor_Start(void)
(0008) {
(0009) 	PGA_Start(PGA_HIGHPOWER);
_TempSensor_Start:
    27DD: 10       PUSH  X
    27DE: 50 03    MOV   A,0x3
    27E0: 7C 08 45 LCALL _PGA_Start|PGA_SetPower|PGA_Start|_PGA_SetPower
(0010) 	ADCINC_Start(ADCINC_HIGHPOWER);
    27E3: 50 03    MOV   A,0x3
    27E5: 7C 0E A0 LCALL _ADCINC_Start
(0011) 	ADCINC_GetSamples(0);
    27E8: 50 00    MOV   A,0x0
    27EA: 7C 0E CB LCALL _ADCINC_GetSamples
    27ED: 20       POP   X
    27EE: 7F       RET   
(0012) }
(0013) void TempSensor_Stop(void)
(0014) {
(0015) 	PGA_Stop();
_TempSensor_Stop:
    27EF: 10       PUSH  X
    27F0: 7C 08 81 LCALL _PGA_Stop
(0016) 	ADCINC_Stop();
    27F3: 7C 0E C1 LCALL _ADCINC_Stop
    27F6: 20       POP   X
    27F7: 7F       RET   
(0017) }
(0018) 
(0019) int TempSensor_GetTemp(void)
(0020) {
_TempSensor_GetTemp:
  latemp               --> X+4
  temp                 --> X+0
    27F8: 10       PUSH  X
    27F9: 4F       MOV   X,SP
    27FA: 38 06    ADD   SP,0x6
(0021) 	float temp;
(0022) 	int latemp;
(0023) 	while (ADCINC_fIsDataAvailable() == 0);
    27FC: 10       PUSH  X
    27FD: 7C 0F 08 LCALL _ADCINC_fIsDataAvailable
    2800: 20       POP   X
    2801: 62 D0 00 MOV   REG[0xD0],0x0
    2804: 39 00    CMP   A,0x0
    2806: AF F5    JZ    0x27FC
(0024) 	temp = ADCINC_wClearFlagGetData();
    2808: 10       PUSH  X
    2809: 7C 0F 0E LCALL _ADCINC_iClearFlagGetData|_ADCINC_wClearFlagGetData|ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData
    280C: 62 D0 00 MOV   REG[0xD0],0x0
    280F: 5A A2    MOV   [__r0],X
    2811: 53 A1    MOV   [__r1],A
    2813: 20       POP   X
    2814: 21 01    AND   A,0x1
    2816: 53 9F    MOV   [__r3],A
    2818: 51 A2    MOV   A,[__r0]
    281A: 21 00    AND   A,0x0
    281C: 53 A0    MOV   [__r2],A
    281E: 51 9F    MOV   A,[__r3]
    2820: 53 9B    MOV   [__r7],A
    2822: 51 A0    MOV   A,[__r2]
    2824: 53 9C    MOV   [__r6],A
    2826: 47 9C 80 TST   [__r6],0x80
    2829: A0 09    JZ    0x2833
    282B: 55 9D FF MOV   [__r5],0xFF
    282E: 55 9E FF MOV   [__r4],0xFF
    2831: 80 0A    JMP   0x283C
    2833: 62 D0 00 MOV   REG[0xD0],0x0
    2836: 55 9D 00 MOV   [__r5],0x0
    2839: 55 9E 00 MOV   [__r4],0x0
    283C: 62 D0 00 MOV   REG[0xD0],0x0
    283F: 51 9E    MOV   A,[__r4]
    2841: 08       PUSH  A
    2842: 51 9D    MOV   A,[__r5]
    2844: 08       PUSH  A
    2845: 51 9C    MOV   A,[__r6]
    2847: 08       PUSH  A
    2848: 51 9B    MOV   A,[__r7]
    284A: 08       PUSH  A
    284B: 7C 39 4F LCALL 0x394F
    284E: 18       POP   A
    284F: 53 9B    MOV   [__r7],A
    2851: 18       POP   A
    2852: 53 9C    MOV   [__r6],A
    2854: 18       POP   A
    2855: 53 9D    MOV   [__r5],A
    2857: 18       POP   A
    2858: 53 9E    MOV   [__r4],A
    285A: 70 FB    AND   F,0xFB
    285C: 6E A2    RRC   [__r0]
    285E: 6E A1    RRC   [__r1]
    2860: 51 A1    MOV   A,[__r1]
    2862: 53 9F    MOV   [__r3],A
    2864: 51 A2    MOV   A,[__r0]
    2866: 53 A0    MOV   [__r2],A
    2868: 47 A0 80 TST   [__r2],0x80
    286B: A0 09    JZ    0x2875
    286D: 55 A1 FF MOV   [__r1],0xFF
    2870: 55 A2 FF MOV   [__r0],0xFF
    2873: 80 0A    JMP   0x287E
    2875: 62 D0 00 MOV   REG[0xD0],0x0
    2878: 55 A1 00 MOV   [__r1],0x0
    287B: 55 A2 00 MOV   [__r0],0x0
    287E: 62 D0 00 MOV   REG[0xD0],0x0
    2881: 51 A2    MOV   A,[__r0]
    2883: 08       PUSH  A
    2884: 51 A1    MOV   A,[__r1]
    2886: 08       PUSH  A
    2887: 51 A0    MOV   A,[__r2]
    2889: 08       PUSH  A
    288A: 51 9F    MOV   A,[__r3]
    288C: 08       PUSH  A
    288D: 7C 39 4F LCALL 0x394F
    2890: 18       POP   A
    2891: 53 9F    MOV   [__r3],A
    2893: 18       POP   A
    2894: 53 A0    MOV   [__r2],A
    2896: 18       POP   A
    2897: 53 A1    MOV   [__r1],A
    2899: 18       POP   A
    289A: 08       PUSH  A
    289B: 51 A1    MOV   A,[__r1]
    289D: 08       PUSH  A
    289E: 51 A0    MOV   A,[__r2]
    28A0: 08       PUSH  A
    28A1: 51 9F    MOV   A,[__r3]
    28A3: 08       PUSH  A
    28A4: 50 40    MOV   A,0x40
    28A6: 08       PUSH  A
    28A7: 50 00    MOV   A,0x0
    28A9: 08       PUSH  A
    28AA: 08       PUSH  A
    28AB: 08       PUSH  A
    28AC: 7C 37 95 LCALL 0x3795
    28AF: 18       POP   A
    28B0: 53 9F    MOV   [__r3],A
    28B2: 18       POP   A
    28B3: 53 A0    MOV   [__r2],A
    28B5: 18       POP   A
    28B6: 53 A1    MOV   [__r1],A
    28B8: 18       POP   A
    28B9: 53 A2    MOV   [__r0],A
    28BB: 38 FC    ADD   SP,0xFC
    28BD: 51 9E    MOV   A,[__r4]
    28BF: 08       PUSH  A
    28C0: 51 9D    MOV   A,[__r5]
    28C2: 08       PUSH  A
    28C3: 51 9C    MOV   A,[__r6]
    28C5: 08       PUSH  A
    28C6: 51 9B    MOV   A,[__r7]
    28C8: 08       PUSH  A
    28C9: 51 A2    MOV   A,[__r0]
    28CB: 08       PUSH  A
    28CC: 51 A1    MOV   A,[__r1]
    28CE: 08       PUSH  A
    28CF: 51 A0    MOV   A,[__r2]
    28D1: 08       PUSH  A
    28D2: 51 9F    MOV   A,[__r3]
    28D4: 08       PUSH  A
    28D5: 7C 35 B2 LCALL 0x35B2
    28D8: 18       POP   A
    28D9: 54 03    MOV   [X+3],A
    28DB: 18       POP   A
    28DC: 54 02    MOV   [X+2],A
    28DE: 18       POP   A
    28DF: 54 01    MOV   [X+1],A
    28E1: 18       POP   A
    28E2: 54 00    MOV   [X+0],A
    28E4: 38 FC    ADD   SP,0xFC
(0025) 	latemp = temp;
    28E6: 52 00    MOV   A,[X+0]
    28E8: 08       PUSH  A
    28E9: 52 01    MOV   A,[X+1]
    28EB: 08       PUSH  A
    28EC: 52 02    MOV   A,[X+2]
    28EE: 08       PUSH  A
    28EF: 52 03    MOV   A,[X+3]
    28F1: 08       PUSH  A
    28F2: 7C 34 A1 LCALL 0x34A1
    28F5: 18       POP   A
    28F6: 54 05    MOV   [X+5],A
    28F8: 18       POP   A
    28F9: 54 04    MOV   [X+4],A
    28FB: 38 FE    ADD   SP,0xFE
(0026) 	//cprintf("Raw: %d\n",latemp);
(0027) 	temp = (((temp)*500.0)/1023.0)-264;//270.5;
    28FD: 52 00    MOV   A,[X+0]
    28FF: 08       PUSH  A
    2900: 52 01    MOV   A,[X+1]
    2902: 08       PUSH  A
    2903: 52 02    MOV   A,[X+2]
    2905: 08       PUSH  A
    2906: 52 03    MOV   A,[X+3]
    2908: 08       PUSH  A
    2909: 50 43    MOV   A,0x43
    290B: 08       PUSH  A
    290C: 50 FA    MOV   A,0xFA
    290E: 08       PUSH  A
    290F: 50 00    MOV   A,0x0
    2911: 08       PUSH  A
    2912: 08       PUSH  A
    2913: 7C 37 95 LCALL 0x3795
    2916: 18       POP   A
    2917: 53 9F    MOV   [__r3],A
    2919: 18       POP   A
    291A: 53 A0    MOV   [__r2],A
    291C: 18       POP   A
    291D: 53 A1    MOV   [__r1],A
    291F: 18       POP   A
    2920: 53 A2    MOV   [__r0],A
    2922: 38 FC    ADD   SP,0xFC
    2924: 50 44    MOV   A,0x44
    2926: 08       PUSH  A
    2927: 50 7F    MOV   A,0x7F
    2929: 08       PUSH  A
    292A: 50 C0    MOV   A,0xC0
    292C: 08       PUSH  A
    292D: 50 00    MOV   A,0x0
    292F: 08       PUSH  A
    2930: 51 A2    MOV   A,[__r0]
    2932: 08       PUSH  A
    2933: 51 A1    MOV   A,[__r1]
    2935: 08       PUSH  A
    2936: 51 A0    MOV   A,[__r2]
    2938: 08       PUSH  A
    2939: 51 9F    MOV   A,[__r3]
    293B: 08       PUSH  A
    293C: 7C 36 B2 LCALL 0x36B2
    293F: 18       POP   A
    2940: 53 9F    MOV   [__r3],A
    2942: 18       POP   A
    2943: 53 A0    MOV   [__r2],A
    2945: 18       POP   A
    2946: 53 A1    MOV   [__r1],A
    2948: 18       POP   A
    2949: 53 A2    MOV   [__r0],A
    294B: 38 FC    ADD   SP,0xFC
    294D: 50 43    MOV   A,0x43
    294F: 08       PUSH  A
    2950: 50 84    MOV   A,0x84
    2952: 08       PUSH  A
    2953: 50 00    MOV   A,0x0
    2955: 08       PUSH  A
    2956: 08       PUSH  A
    2957: 51 A2    MOV   A,[__r0]
    2959: 08       PUSH  A
    295A: 51 A1    MOV   A,[__r1]
    295C: 08       PUSH  A
    295D: 51 A0    MOV   A,[__r2]
    295F: 08       PUSH  A
    2960: 51 9F    MOV   A,[__r3]
    2962: 08       PUSH  A
    2963: 7C 38 BF LCALL 0x38BF
    2966: 18       POP   A
    2967: 54 03    MOV   [X+3],A
    2969: 18       POP   A
    296A: 54 02    MOV   [X+2],A
    296C: 18       POP   A
    296D: 54 01    MOV   [X+1],A
    296F: 18       POP   A
    2970: 54 00    MOV   [X+0],A
    2972: 38 FC    ADD   SP,0xFC
(0028) 	latemp = temp;
    2974: 52 00    MOV   A,[X+0]
    2976: 08       PUSH  A
    2977: 52 01    MOV   A,[X+1]
    2979: 08       PUSH  A
    297A: 52 02    MOV   A,[X+2]
    297C: 08       PUSH  A
    297D: 52 03    MOV   A,[X+3]
    297F: 08       PUSH  A
    2980: 7C 34 A1 LCALL 0x34A1
    2983: 18       POP   A
    2984: 54 05    MOV   [X+5],A
    2986: 18       POP   A
    2987: 54 04    MOV   [X+4],A
    2989: 38 FE    ADD   SP,0xFE
(0029) 	//cprintf("Conversion: %d\n",latemp);
(0030) 	
(0031) 	return latemp;
    298B: 52 05    MOV   A,[X+5]
    298D: 53 A1    MOV   [__r1],A
    298F: 52 04    MOV   A,[X+4]
    2991: 53 A2    MOV   [__r0],A
    2993: 38 FA    ADD   SP,0xFA
    2995: 20       POP   X
    2996: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\tempview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "TempView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "TempSensor.h"
(0010) #include "BcdUtil.h"
(0011) #include <stdio.h>
(0012) 
(0013) extern CurrentView currentView;
(0014) 
(0015) void TempView_Start(void)
(0016) {
_TempView_Start:
    2997: 7F       RET   
(0017) 
(0018) }
(0019) 
(0020) void TempView_Callback(void)
(0021) {
_TempView_Callback:
  num                  --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  temp                 --> X+0
    2998: 10       PUSH  X
    2999: 4F       MOV   X,SP
    299A: 38 05    ADD   SP,0x5
(0022) 	int temp;
(0023) 	BYTE bcd10,bcd,num;
(0024) 	
(0025) 	currentView = TEMP;
    299C: 62 D0 00 MOV   REG[0xD0],0x0
    299F: 55 B8 05 MOV   [currentView],0x5
(0026) 	Menu_Clear();
    29A2: 7C 21 CF LCALL _Menu_Clear
(0027) 	LCD_Position(0, 0);
    29A5: 10       PUSH  X
    29A6: 50 00    MOV   A,0x0
    29A8: 57 00    MOV   X,0x0
    29AA: 7C 0A 0A LCALL _LCD_Position
(0028) 	LCD_PrCString("Temp Actual");
    29AD: 50 02    MOV   A,0x2
    29AF: 08       PUSH  A
    29B0: 50 DE    MOV   A,0xDE
    29B2: 5C       MOV   X,A
    29B3: 18       POP   A
    29B4: 7C 08 85 LCALL _LCD_PrCString
    29B7: 20       POP   X
(0029) 		
(0030) 	temp = TempSensor_GetTemp();
    29B8: 7C 27 F8 LCALL _TempSensor_GetTemp
    29BB: 62 D0 00 MOV   REG[0xD0],0x0
    29BE: 51 A1    MOV   A,[__r1]
    29C0: 54 01    MOV   [X+1],A
    29C2: 51 A2    MOV   A,[__r0]
    29C4: 54 00    MOV   [X+0],A
(0031) 	
(0032) 	cprintf("Temperatura: %d\n", temp);
    29C6: 52 00    MOV   A,[X+0]
    29C8: 08       PUSH  A
    29C9: 52 01    MOV   A,[X+1]
    29CB: 08       PUSH  A
    29CC: 50 02    MOV   A,0x2
    29CE: 08       PUSH  A
    29CF: 50 CD    MOV   A,0xCD
    29D1: 08       PUSH  A
    29D2: 7C 3D EE LCALL _cprintf
(0033) 		
(0034) 	decToBcd(&bcd10,&bcd,temp);
    29D5: 62 D0 00 MOV   REG[0xD0],0x0
    29D8: 52 01    MOV   A,[X+1]
    29DA: 08       PUSH  A
    29DB: 5A A1    MOV   [__r1],X
    29DD: 06 A1 03 ADD   [__r1],0x3
    29E0: 50 07    MOV   A,0x7
    29E2: 08       PUSH  A
    29E3: 51 A1    MOV   A,[__r1]
    29E5: 08       PUSH  A
    29E6: 5A A1    MOV   [__r1],X
    29E8: 06 A1 02 ADD   [__r1],0x2
    29EB: 50 07    MOV   A,0x7
    29ED: 08       PUSH  A
    29EE: 51 A1    MOV   A,[__r1]
    29F0: 08       PUSH  A
    29F1: 7C 0F 6A LCALL _decToBcd
    29F4: 38 F7    ADD   SP,0xF7
(0035) 	
(0036) 	//LCD_Position(0,14);
(0037) 	//LCD_PrHexByte(bcd);
(0038) 	LCD_Position(0,13);
    29F6: 10       PUSH  X
    29F7: 57 0D    MOV   X,0xD
    29F9: 50 00    MOV   A,0x0
    29FB: 7C 0A 0A LCALL _LCD_Position
    29FE: 20       POP   X
(0039) 	LCD_PrHexByte((bcd10<<4)|bcd);
    29FF: 52 02    MOV   A,[X+2]
    2A01: 62 D0 00 MOV   REG[0xD0],0x0
    2A04: 64       ASL   A
    2A05: 64       ASL   A
    2A06: 64       ASL   A
    2A07: 64       ASL   A
    2A08: 53 A2    MOV   [__r0],A
    2A0A: 52 03    MOV   A,[X+3]
    2A0C: 2C A2    OR    [__r0],A
    2A0E: 10       PUSH  X
    2A0F: 51 A2    MOV   A,[__r0]
    2A11: 7C 08 A7 LCALL _LCD_PrHexByte
    2A14: 20       POP   X
    2A15: 38 FB    ADD   SP,0xFB
    2A17: 20       POP   X
    2A18: 7F       RET   
(0040) 	//LCD_Position(0,13);
(0041) 	//LCD_PrCString(" ");
(0042) 	
(0043) 	
(0044) 
(0045) 	
(0046) }
(0047) 
(0048) void TempView_Update(void)
(0049) {
_TempView_Update:
  num                  --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  temp                 --> X+0
    2A19: 10       PUSH  X
    2A1A: 4F       MOV   X,SP
    2A1B: 38 07    ADD   SP,0x7
(0050) 	int temp;
(0051) 	BYTE bcd10,bcd,num;
(0052) 	
(0053) 	if(Keypad_IsKeyStored())
    2A1D: 7C 17 9D LCALL _Keypad_IsKeyStored
    2A20: 62 D0 00 MOV   REG[0xD0],0x0
    2A23: 39 00    CMP   A,0x0
    2A25: A0 1D    JZ    0x2A43
(0054) 	{
(0055) 		switch(Keypad_GetKey())
    2A27: 7C 17 B5 LCALL _Keypad_GetKey
    2A2A: 62 D0 00 MOV   REG[0xD0],0x0
    2A2D: 54 06    MOV   [X+6],A
    2A2F: 56 05 00 MOV   [X+5],0x0
    2A32: 3D 05 00 CMP   [X+5],0x0
    2A35: B0 06    JNZ   0x2A3C
    2A37: 3D 06 11 CMP   [X+6],0x11
    2A3A: A0 03    JZ    0x2A3E
    2A3C: 80 06    JMP   0x2A43
(0056) 		{
(0057) 			case 0x11:
(0058) 				// "B"
(0059) 				MainView_Callback();
    2A3E: 7C 1E E5 LCALL _MainView_Callback
(0060) 				return;
    2A41: 80 4C    JMP   0x2A8E
(0061) 				break;
(0062) 		}
(0063) 	}
(0064) 	
(0065) 	temp = TempSensor_GetTemp();
    2A43: 7C 27 F8 LCALL _TempSensor_GetTemp
    2A46: 62 D0 00 MOV   REG[0xD0],0x0
    2A49: 51 A1    MOV   A,[__r1]
    2A4B: 54 01    MOV   [X+1],A
    2A4D: 51 A2    MOV   A,[__r0]
    2A4F: 54 00    MOV   [X+0],A
(0066) 	decToBcd(&bcd10,&bcd,temp);
    2A51: 52 01    MOV   A,[X+1]
    2A53: 08       PUSH  A
    2A54: 5A A1    MOV   [__r1],X
    2A56: 06 A1 03 ADD   [__r1],0x3
    2A59: 50 07    MOV   A,0x7
    2A5B: 08       PUSH  A
    2A5C: 51 A1    MOV   A,[__r1]
    2A5E: 08       PUSH  A
    2A5F: 5A A1    MOV   [__r1],X
    2A61: 06 A1 02 ADD   [__r1],0x2
    2A64: 50 07    MOV   A,0x7
    2A66: 08       PUSH  A
    2A67: 51 A1    MOV   A,[__r1]
    2A69: 08       PUSH  A
    2A6A: 7C 0F 6A LCALL _decToBcd
    2A6D: 38 FB    ADD   SP,0xFB
(0067) 	LCD_Position(0,13);
    2A6F: 10       PUSH  X
    2A70: 57 0D    MOV   X,0xD
    2A72: 50 00    MOV   A,0x0
    2A74: 7C 0A 0A LCALL _LCD_Position
    2A77: 20       POP   X
(0068) 	LCD_PrHexByte((bcd10<<4)|bcd);
    2A78: 52 02    MOV   A,[X+2]
    2A7A: 62 D0 00 MOV   REG[0xD0],0x0
    2A7D: 64       ASL   A
    2A7E: 64       ASL   A
    2A7F: 64       ASL   A
    2A80: 64       ASL   A
    2A81: 53 A2    MOV   [__r0],A
    2A83: 52 03    MOV   A,[X+3]
    2A85: 2C A2    OR    [__r0],A
    2A87: 10       PUSH  X
    2A88: 51 A2    MOV   A,[__r0]
    2A8A: 7C 08 A7 LCALL _LCD_PrHexByte
    2A8D: 20       POP   X
    2A8E: 38 F9    ADD   SP,0xF9
    2A90: 20       POP   X
    2A91: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\time.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Rtc.h"
(0004) #include "Time.h"
(0005) #include "BcdUtil.h"
(0006) #include "dateUtil.h"
(0007) 
(0008) void Time_Start(void)
(0009) {
(0010) 	datetime._00h.byte = 0x00;	// Hora: 00:00:00
_Time_Start:
    2A92: 62 D0 00 MOV   REG[0xD0],0x0
    2A95: 55 A3 00 MOV   [datetime],0x0
(0011) 	datetime._01h.byte = 0x00;	 
    2A98: 55 A4 00 MOV   [datetime+1],0x0
(0012) 	datetime._02h.byte = 0x00;
    2A9B: 55 A5 00 MOV   [datetime+2],0x0
(0013) 	datetime._03h.byte = 0x04;	// Dia: Miércoles
    2A9E: 55 A6 04 MOV   [datetime+3],0x4
(0014) 	datetime._04h.byte = 0x01;	// Fecha: 01/Enero/2014
    2AA1: 55 A7 01 MOV   [datetime+4],0x1
(0015) 	datetime._05h.byte = 0x01;
    2AA4: 55 A8 01 MOV   [datetime+5],0x1
(0016) 	datetime._06h.byte = 0x14;
    2AA7: 55 A9 14 MOV   [datetime+6],0x14
(0017) 	Rtc_Start();
    2AAA: 7C 26 21 LCALL _Rtc_Start
    2AAD: 7F       RET   
(0018) }
(0019) 
(0020) void Time_Stop(void)
(0021) {
(0022) 	Rtc_Stop();
_Time_Stop:
    2AAE: 7C 26 35 LCALL _Rtc_Stop
    2AB1: 7F       RET   
(0023) }
(0024) 
(0025) void Time_Pause(BOOL isPaused)
(0026) {
_Time_Pause:
  isPaused             --> X-4
    2AB2: 10       PUSH  X
    2AB3: 4F       MOV   X,SP
(0027) 	// Starts or Stops RTC clock
(0028) 	Rtc_ReadFromRtc();
    2AB4: 7C 26 7C LCALL _Rtc_ReadFromRtc
    2AB7: 62 D0 00 MOV   REG[0xD0],0x0
(0029) 	datetime._00h.bits.CH = isPaused;
    2ABA: 52 FC    MOV   A,[X-4]
    2ABC: 21 01    AND   A,0x1
    2ABE: 64       ASL   A
    2ABF: 64       ASL   A
    2AC0: 64       ASL   A
    2AC1: 64       ASL   A
    2AC2: 64       ASL   A
    2AC3: 64       ASL   A
    2AC4: 64       ASL   A
    2AC5: 53 A2    MOV   [__r0],A
    2AC7: 26 A2 80 AND   [__r0],0x80
    2ACA: 62 D0 00 MOV   REG[0xD0],0x0
    2ACD: 51 A3    MOV   A,[datetime]
    2ACF: 21 7F    AND   A,0x7F
    2AD1: 62 D0 00 MOV   REG[0xD0],0x0
    2AD4: 2A A2    OR    A,[__r0]
    2AD6: 62 D0 00 MOV   REG[0xD0],0x0
    2AD9: 53 A3    MOV   [datetime],A
(0030) 	Rtc_WriteToRtc();
    2ADB: 7C 26 68 LCALL _Rtc_WriteToRtc
    2ADE: 62 D0 00 MOV   REG[0xD0],0x0
    2AE1: 20       POP   X
    2AE2: 7F       RET   
(0031) }
(0032) 
(0033) void Time_Adj_1224hrs(BOOL h12)
(0034) {
_Time_Adj_1224hrs:
  bcd                  --> X+2
  bcd10                --> X+1
  hours                --> X+0
  h12                  --> X-4
    2AE3: 10       PUSH  X
    2AE4: 4F       MOV   X,SP
    2AE5: 38 03    ADD   SP,0x3
(0035) 	BYTE hours, bcd10, bcd;
(0036) 
(0037) 	Time_Pause(TRUE);
    2AE7: 50 01    MOV   A,0x1
    2AE9: 08       PUSH  A
    2AEA: 9F C6    CALL  _Time_Pause
    2AEC: 38 FF    ADD   SP,0xFF
(0038) 	Rtc_ReadFromRtc();
    2AEE: 7C 26 7C LCALL _Rtc_ReadFromRtc
(0039) 
(0040) 	if(datetime._02h.bits_24hrs._1224hr != h12)
    2AF1: 62 D0 00 MOV   REG[0xD0],0x0
    2AF4: 51 A5    MOV   A,[datetime+2]
    2AF6: 62 D0 00 MOV   REG[0xD0],0x0
    2AF9: 67       ASR   A
    2AFA: 67       ASR   A
    2AFB: 67       ASR   A
    2AFC: 67       ASR   A
    2AFD: 67       ASR   A
    2AFE: 67       ASR   A
    2AFF: 21 03    AND   A,0x3
    2B01: 53 A2    MOV   [__r0],A
    2B03: 26 A2 01 AND   [__r0],0x1
    2B06: 51 A2    MOV   A,[__r0]
    2B08: 3B FC    CMP   A,[X-4]
    2B0A: A1 7F    JZ    0x2C8A
(0041) 	{
(0042) 		if(h12)
    2B0C: 3D FC 00 CMP   [X-4],0x0
    2B0F: A0 B6    JZ    0x2BC6
(0043) 		{
(0044) 			// Convert from 24h to 12h
(0045) 			bcdToDec(datetime._02h.bits_24hrs.hours10, datetime._02h.bits_24hrs.hours, &hours);
    2B11: 50 07    MOV   A,0x7
    2B13: 08       PUSH  A
    2B14: 10       PUSH  X
    2B15: 62 D0 00 MOV   REG[0xD0],0x0
    2B18: 51 A5    MOV   A,[datetime+2]
    2B1A: 21 0F    AND   A,0xF
    2B1C: 08       PUSH  A
    2B1D: 51 A5    MOV   A,[datetime+2]
    2B1F: 62 D0 00 MOV   REG[0xD0],0x0
    2B22: 67       ASR   A
    2B23: 67       ASR   A
    2B24: 67       ASR   A
    2B25: 67       ASR   A
    2B26: 21 0F    AND   A,0xF
    2B28: 53 A2    MOV   [__r0],A
    2B2A: 26 A2 03 AND   [__r0],0x3
    2B2D: 51 A2    MOV   A,[__r0]
    2B2F: 08       PUSH  A
    2B30: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2B33: 38 FC    ADD   SP,0xFC
(0046) 			if(hours >= 12)
    2B35: 3D 00 0C CMP   [X+0],0xC
    2B38: C0 1B    JC    0x2B54
(0047) 			{
(0048) 				datetime._02h.bits_ampm.ampm = 1;
    2B3A: 62 D0 00 MOV   REG[0xD0],0x0
    2B3D: 51 A5    MOV   A,[datetime+2]
    2B3F: 29 20    OR    A,0x20
    2B41: 53 A5    MOV   [datetime+2],A
(0049) 				if(hours > 12) hours -= 12;
    2B43: 50 0C    MOV   A,0xC
    2B45: 3B 00    CMP   A,[X+0]
    2B47: D0 1D    JNC   0x2B65
    2B49: 62 D0 00 MOV   REG[0xD0],0x0
    2B4C: 52 00    MOV   A,[X+0]
    2B4E: 11 0C    SUB   A,0xC
    2B50: 54 00    MOV   [X+0],A
(0050) 			}
    2B52: 80 12    JMP   0x2B65
(0051) 			else
(0052) 			{
(0053) 				datetime._02h.bits_ampm.ampm = 0;
    2B54: 62 D0 00 MOV   REG[0xD0],0x0
    2B57: 51 A5    MOV   A,[datetime+2]
    2B59: 21 DF    AND   A,0xDF
    2B5B: 53 A5    MOV   [datetime+2],A
(0054) 				if(hours == 0) hours = 12;
    2B5D: 3D 00 00 CMP   [X+0],0x0
    2B60: B0 04    JNZ   0x2B65
    2B62: 56 00 0C MOV   [X+0],0xC
(0055) 			}
(0056) 			decToBcd(&bcd10 , &bcd, hours);
    2B65: 52 00    MOV   A,[X+0]
    2B67: 08       PUSH  A
    2B68: 62 D0 00 MOV   REG[0xD0],0x0
    2B6B: 5A A1    MOV   [__r1],X
    2B6D: 06 A1 02 ADD   [__r1],0x2
    2B70: 50 07    MOV   A,0x7
    2B72: 08       PUSH  A
    2B73: 51 A1    MOV   A,[__r1]
    2B75: 08       PUSH  A
    2B76: 5A A1    MOV   [__r1],X
    2B78: 06 A1 01 ADD   [__r1],0x1
    2B7B: 50 07    MOV   A,0x7
    2B7D: 08       PUSH  A
    2B7E: 51 A1    MOV   A,[__r1]
    2B80: 08       PUSH  A
    2B81: 7C 0F 6A LCALL _decToBcd
    2B84: 38 FB    ADD   SP,0xFB
(0057) 			datetime._02h.bits_ampm.hours10 = bcd10;
    2B86: 62 D0 00 MOV   REG[0xD0],0x0
    2B89: 52 01    MOV   A,[X+1]
    2B8B: 21 01    AND   A,0x1
    2B8D: 64       ASL   A
    2B8E: 64       ASL   A
    2B8F: 64       ASL   A
    2B90: 64       ASL   A
    2B91: 53 A2    MOV   [__r0],A
    2B93: 26 A2 10 AND   [__r0],0x10
    2B96: 62 D0 00 MOV   REG[0xD0],0x0
    2B99: 51 A5    MOV   A,[datetime+2]
    2B9B: 21 EF    AND   A,0xEF
    2B9D: 62 D0 00 MOV   REG[0xD0],0x0
    2BA0: 2A A2    OR    A,[__r0]
    2BA2: 62 D0 00 MOV   REG[0xD0],0x0
    2BA5: 53 A5    MOV   [datetime+2],A
(0058) 			datetime._02h.bits_ampm.hours = bcd;
    2BA7: 62 D0 00 MOV   REG[0xD0],0x0
    2BAA: 52 02    MOV   A,[X+2]
    2BAC: 21 0F    AND   A,0xF
    2BAE: 53 A2    MOV   [__r0],A
    2BB0: 26 A2 0F AND   [__r0],0xF
    2BB3: 62 D0 00 MOV   REG[0xD0],0x0
    2BB6: 51 A5    MOV   A,[datetime+2]
    2BB8: 21 F0    AND   A,0xF0
    2BBA: 62 D0 00 MOV   REG[0xD0],0x0
    2BBD: 2A A2    OR    A,[__r0]
    2BBF: 62 D0 00 MOV   REG[0xD0],0x0
    2BC2: 53 A5    MOV   [datetime+2],A
(0059) 		}
    2BC4: 80 C5    JMP   0x2C8A
(0060) 		else
(0061) 		{
(0062) 			// Convert from 12h to 24h
(0063) 			bcdToDec(datetime._02h.bits_ampm.hours10, datetime._02h.bits_ampm.hours, &hours);
    2BC6: 50 07    MOV   A,0x7
    2BC8: 08       PUSH  A
    2BC9: 10       PUSH  X
    2BCA: 62 D0 00 MOV   REG[0xD0],0x0
    2BCD: 51 A5    MOV   A,[datetime+2]
    2BCF: 21 0F    AND   A,0xF
    2BD1: 08       PUSH  A
    2BD2: 51 A5    MOV   A,[datetime+2]
    2BD4: 62 D0 00 MOV   REG[0xD0],0x0
    2BD7: 67       ASR   A
    2BD8: 67       ASR   A
    2BD9: 67       ASR   A
    2BDA: 67       ASR   A
    2BDB: 21 0F    AND   A,0xF
    2BDD: 53 A2    MOV   [__r0],A
    2BDF: 26 A2 01 AND   [__r0],0x1
    2BE2: 51 A2    MOV   A,[__r0]
    2BE4: 08       PUSH  A
    2BE5: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2BE8: 38 FC    ADD   SP,0xFC
(0064) 			if(datetime._02h.bits_ampm.ampm == 1 && hours != 12)
    2BEA: 62 D0 00 MOV   REG[0xD0],0x0
    2BED: 51 A5    MOV   A,[datetime+2]
    2BEF: 62 D0 00 MOV   REG[0xD0],0x0
    2BF2: 67       ASR   A
    2BF3: 67       ASR   A
    2BF4: 67       ASR   A
    2BF5: 67       ASR   A
    2BF6: 67       ASR   A
    2BF7: 21 07    AND   A,0x7
    2BF9: 53 A2    MOV   [__r0],A
    2BFB: 26 A2 01 AND   [__r0],0x1
    2BFE: 3C A2 01 CMP   [__r0],0x1
    2C01: B0 0B    JNZ   0x2C0D
    2C03: 3D 00 0C CMP   [X+0],0xC
    2C06: A0 06    JZ    0x2C0D
(0065) 			{
(0066) 				hours += 12;
    2C08: 07 00 0C ADD   [X+0],0xC
(0067) 			}
    2C0B: 80 1F    JMP   0x2C2B
(0068) 			else if(datetime._02h.bits_ampm.ampm == 0 && hours == 12)
    2C0D: 62 D0 00 MOV   REG[0xD0],0x0
    2C10: 51 A5    MOV   A,[datetime+2]
    2C12: 62 D0 00 MOV   REG[0xD0],0x0
    2C15: 67       ASR   A
    2C16: 67       ASR   A
    2C17: 67       ASR   A
    2C18: 67       ASR   A
    2C19: 67       ASR   A
    2C1A: 21 07    AND   A,0x7
    2C1C: 53 A2    MOV   [__r0],A
    2C1E: 26 A2 01 AND   [__r0],0x1
    2C21: B0 09    JNZ   0x2C2B
    2C23: 3D 00 0C CMP   [X+0],0xC
    2C26: B0 04    JNZ   0x2C2B
(0069) 			{
(0070) 				hours = 0;
    2C28: 56 00 00 MOV   [X+0],0x0
(0071) 			}
(0072) 			decToBcd(&bcd10 , &bcd, hours);
    2C2B: 52 00    MOV   A,[X+0]
    2C2D: 08       PUSH  A
    2C2E: 62 D0 00 MOV   REG[0xD0],0x0
    2C31: 5A A1    MOV   [__r1],X
    2C33: 06 A1 02 ADD   [__r1],0x2
    2C36: 50 07    MOV   A,0x7
    2C38: 08       PUSH  A
    2C39: 51 A1    MOV   A,[__r1]
    2C3B: 08       PUSH  A
    2C3C: 5A A1    MOV   [__r1],X
    2C3E: 06 A1 01 ADD   [__r1],0x1
    2C41: 50 07    MOV   A,0x7
    2C43: 08       PUSH  A
    2C44: 51 A1    MOV   A,[__r1]
    2C46: 08       PUSH  A
    2C47: 7C 0F 6A LCALL _decToBcd
    2C4A: 38 FB    ADD   SP,0xFB
(0073) 			datetime._02h.bits_24hrs.hours10 = bcd10;
    2C4C: 62 D0 00 MOV   REG[0xD0],0x0
    2C4F: 52 01    MOV   A,[X+1]
    2C51: 21 03    AND   A,0x3
    2C53: 64       ASL   A
    2C54: 64       ASL   A
    2C55: 64       ASL   A
    2C56: 64       ASL   A
    2C57: 53 A2    MOV   [__r0],A
    2C59: 26 A2 30 AND   [__r0],0x30
    2C5C: 62 D0 00 MOV   REG[0xD0],0x0
    2C5F: 51 A5    MOV   A,[datetime+2]
    2C61: 21 CF    AND   A,0xCF
    2C63: 62 D0 00 MOV   REG[0xD0],0x0
    2C66: 2A A2    OR    A,[__r0]
    2C68: 62 D0 00 MOV   REG[0xD0],0x0
    2C6B: 53 A5    MOV   [datetime+2],A
(0074) 			datetime._02h.bits_24hrs.hours = bcd;
    2C6D: 62 D0 00 MOV   REG[0xD0],0x0
    2C70: 52 02    MOV   A,[X+2]
    2C72: 21 0F    AND   A,0xF
    2C74: 53 A2    MOV   [__r0],A
    2C76: 26 A2 0F AND   [__r0],0xF
    2C79: 62 D0 00 MOV   REG[0xD0],0x0
    2C7C: 51 A5    MOV   A,[datetime+2]
    2C7E: 21 F0    AND   A,0xF0
    2C80: 62 D0 00 MOV   REG[0xD0],0x0
    2C83: 2A A2    OR    A,[__r0]
    2C85: 62 D0 00 MOV   REG[0xD0],0x0
    2C88: 53 A5    MOV   [datetime+2],A
(0075) 		}
(0076) 	}
(0077) 
(0078) 	datetime._02h.bits_24hrs._1224hr = h12;
    2C8A: 62 D0 00 MOV   REG[0xD0],0x0
    2C8D: 52 FC    MOV   A,[X-4]
    2C8F: 21 01    AND   A,0x1
    2C91: 64       ASL   A
    2C92: 64       ASL   A
    2C93: 64       ASL   A
    2C94: 64       ASL   A
    2C95: 64       ASL   A
    2C96: 64       ASL   A
    2C97: 53 A2    MOV   [__r0],A
    2C99: 26 A2 40 AND   [__r0],0x40
    2C9C: 62 D0 00 MOV   REG[0xD0],0x0
    2C9F: 51 A5    MOV   A,[datetime+2]
    2CA1: 21 BF    AND   A,0xBF
    2CA3: 62 D0 00 MOV   REG[0xD0],0x0
    2CA6: 2A A2    OR    A,[__r0]
    2CA8: 62 D0 00 MOV   REG[0xD0],0x0
    2CAB: 53 A5    MOV   [datetime+2],A
(0079) 
(0080) 	Rtc_WriteToRtc();
    2CAD: 7C 26 68 LCALL _Rtc_WriteToRtc
    2CB0: 62 D0 00 MOV   REG[0xD0],0x0
(0081) 	Time_Pause(FALSE);
    2CB3: 50 00    MOV   A,0x0
    2CB5: 08       PUSH  A
    2CB6: 9D FA    CALL  _Time_Pause
    2CB8: 38 FF    ADD   SP,0xFF
    2CBA: 38 FD    ADD   SP,0xFD
    2CBC: 20       POP   X
    2CBD: 7F       RET   
(0082) }
(0083) 
(0084) void Time_Adj_S(BOOL direction)
(0085) {
_Time_Adj_S:
  bcd                  --> X+2
  bcd10                --> X+1
  seconds              --> X+0
  direction            --> X-4
    2CBE: 10       PUSH  X
    2CBF: 4F       MOV   X,SP
    2CC0: 38 03    ADD   SP,0x3
(0086) 	BYTE seconds, bcd10, bcd;
(0087) 	
(0088) 	Time_Pause(TRUE);
    2CC2: 50 01    MOV   A,0x1
    2CC4: 08       PUSH  A
    2CC5: 9D EB    CALL  _Time_Pause
(0089) 	Rtc_ReadFromRtc();
    2CC7: 7C 26 7C LCALL _Rtc_ReadFromRtc
(0090) 
(0091) 	bcdToDec(datetime._00h.bits.seconds10, datetime._00h.bits.seconds, &seconds);
    2CCA: 50 07    MOV   A,0x7
    2CCC: 08       PUSH  A
    2CCD: 10       PUSH  X
    2CCE: 62 D0 00 MOV   REG[0xD0],0x0
    2CD1: 51 A3    MOV   A,[datetime]
    2CD3: 21 0F    AND   A,0xF
    2CD5: 08       PUSH  A
    2CD6: 51 A3    MOV   A,[datetime]
    2CD8: 62 D0 00 MOV   REG[0xD0],0x0
    2CDB: 67       ASR   A
    2CDC: 67       ASR   A
    2CDD: 67       ASR   A
    2CDE: 67       ASR   A
    2CDF: 21 0F    AND   A,0xF
    2CE1: 53 A2    MOV   [__r0],A
    2CE3: 26 A2 07 AND   [__r0],0x7
    2CE6: 51 A2    MOV   A,[__r0]
    2CE8: 08       PUSH  A
    2CE9: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2CEC: 38 FB    ADD   SP,0xFB
(0092) 
(0093) 	if(direction == TIME_UP)
    2CEE: 3D FC 01 CMP   [X-4],0x1
    2CF1: B0 0F    JNZ   0x2D01
(0094) 	{
(0095) 		if(seconds < 59) seconds++;
    2CF3: 3D 00 3B CMP   [X+0],0x3B
    2CF6: D0 05    JNC   0x2CFC
    2CF8: 77 00    INC   [X+0]
    2CFA: 80 13    JMP   0x2D0E
(0096) 		else seconds = 0;
    2CFC: 56 00 00 MOV   [X+0],0x0
(0097) 	}
    2CFF: 80 0E    JMP   0x2D0E
(0098) 	else
(0099) 	{
(0100) 		if(seconds > 0) seconds--;
    2D01: 50 00    MOV   A,0x0
    2D03: 3B 00    CMP   A,[X+0]
    2D05: D0 05    JNC   0x2D0B
    2D07: 7B 00    DEC   [X+0]
    2D09: 80 04    JMP   0x2D0E
(0101) 		else seconds = 59;
    2D0B: 56 00 3B MOV   [X+0],0x3B
(0102) 	}
(0103) 
(0104) 	decToBcd(&bcd10, &bcd, seconds);
    2D0E: 52 00    MOV   A,[X+0]
    2D10: 08       PUSH  A
    2D11: 62 D0 00 MOV   REG[0xD0],0x0
    2D14: 5A A1    MOV   [__r1],X
    2D16: 06 A1 02 ADD   [__r1],0x2
    2D19: 50 07    MOV   A,0x7
    2D1B: 08       PUSH  A
    2D1C: 51 A1    MOV   A,[__r1]
    2D1E: 08       PUSH  A
    2D1F: 5A A1    MOV   [__r1],X
    2D21: 06 A1 01 ADD   [__r1],0x1
    2D24: 50 07    MOV   A,0x7
    2D26: 08       PUSH  A
    2D27: 51 A1    MOV   A,[__r1]
    2D29: 08       PUSH  A
    2D2A: 7C 0F 6A LCALL _decToBcd
(0105) 
(0106) 	datetime._00h.bits.seconds = bcd;
    2D2D: 62 D0 00 MOV   REG[0xD0],0x0
    2D30: 52 02    MOV   A,[X+2]
    2D32: 21 0F    AND   A,0xF
    2D34: 53 A2    MOV   [__r0],A
    2D36: 26 A2 0F AND   [__r0],0xF
    2D39: 62 D0 00 MOV   REG[0xD0],0x0
    2D3C: 51 A3    MOV   A,[datetime]
    2D3E: 21 F0    AND   A,0xF0
    2D40: 62 D0 00 MOV   REG[0xD0],0x0
    2D43: 2A A2    OR    A,[__r0]
    2D45: 62 D0 00 MOV   REG[0xD0],0x0
    2D48: 53 A3    MOV   [datetime],A
(0107) 	datetime._00h.bits.seconds10 = bcd10;
    2D4A: 62 D0 00 MOV   REG[0xD0],0x0
    2D4D: 52 01    MOV   A,[X+1]
    2D4F: 21 07    AND   A,0x7
    2D51: 64       ASL   A
    2D52: 64       ASL   A
    2D53: 64       ASL   A
    2D54: 64       ASL   A
    2D55: 53 A2    MOV   [__r0],A
    2D57: 26 A2 70 AND   [__r0],0x70
    2D5A: 62 D0 00 MOV   REG[0xD0],0x0
    2D5D: 51 A3    MOV   A,[datetime]
    2D5F: 21 8F    AND   A,0x8F
    2D61: 62 D0 00 MOV   REG[0xD0],0x0
    2D64: 2A A2    OR    A,[__r0]
    2D66: 62 D0 00 MOV   REG[0xD0],0x0
    2D69: 53 A3    MOV   [datetime],A
(0108) 
(0109) 	Rtc_WriteToRtc();
    2D6B: 7C 26 68 LCALL _Rtc_WriteToRtc
    2D6E: 62 D0 00 MOV   REG[0xD0],0x0
(0110) 	Time_Pause(FALSE);
    2D71: 50 00    MOV   A,0x0
    2D73: 08       PUSH  A
    2D74: 9D 3C    CALL  _Time_Pause
    2D76: 38 FA    ADD   SP,0xFA
    2D78: 38 FD    ADD   SP,0xFD
    2D7A: 20       POP   X
    2D7B: 7F       RET   
(0111) }
(0112) 
(0113) void Time_Adj_Mi(BOOL direction)
(0114) {
_Time_Adj_Mi:
  bcd                  --> X+2
  bcd10                --> X+1
  minutes              --> X+0
  direction            --> X-4
    2D7C: 10       PUSH  X
    2D7D: 4F       MOV   X,SP
    2D7E: 38 03    ADD   SP,0x3
(0115) 	BYTE minutes, bcd10, bcd;
(0116) 
(0117) 	Time_Pause(TRUE);
    2D80: 50 01    MOV   A,0x1
    2D82: 08       PUSH  A
    2D83: 9D 2D    CALL  _Time_Pause
(0118) 	Rtc_ReadFromRtc();
    2D85: 7C 26 7C LCALL _Rtc_ReadFromRtc
(0119) 
(0120) 	bcdToDec(datetime._01h.bits.minutes10, datetime._01h.bits.minutes, &minutes);
    2D88: 50 07    MOV   A,0x7
    2D8A: 08       PUSH  A
    2D8B: 10       PUSH  X
    2D8C: 62 D0 00 MOV   REG[0xD0],0x0
    2D8F: 51 A4    MOV   A,[datetime+1]
    2D91: 21 0F    AND   A,0xF
    2D93: 08       PUSH  A
    2D94: 51 A4    MOV   A,[datetime+1]
    2D96: 62 D0 00 MOV   REG[0xD0],0x0
    2D99: 67       ASR   A
    2D9A: 67       ASR   A
    2D9B: 67       ASR   A
    2D9C: 67       ASR   A
    2D9D: 21 0F    AND   A,0xF
    2D9F: 53 A2    MOV   [__r0],A
    2DA1: 26 A2 07 AND   [__r0],0x7
    2DA4: 51 A2    MOV   A,[__r0]
    2DA6: 08       PUSH  A
    2DA7: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2DAA: 38 FB    ADD   SP,0xFB
(0121) 
(0122) 	if(direction == TIME_UP)
    2DAC: 3D FC 01 CMP   [X-4],0x1
    2DAF: B0 0F    JNZ   0x2DBF
(0123) 	{
(0124) 		if(minutes < 59) minutes++;
    2DB1: 3D 00 3B CMP   [X+0],0x3B
    2DB4: D0 05    JNC   0x2DBA
    2DB6: 77 00    INC   [X+0]
    2DB8: 80 13    JMP   0x2DCC
(0125) 		else minutes = 0;
    2DBA: 56 00 00 MOV   [X+0],0x0
(0126) 	}
    2DBD: 80 0E    JMP   0x2DCC
(0127) 	else
(0128) 	{
(0129) 		if(minutes > 0) minutes--;
    2DBF: 50 00    MOV   A,0x0
    2DC1: 3B 00    CMP   A,[X+0]
    2DC3: D0 05    JNC   0x2DC9
    2DC5: 7B 00    DEC   [X+0]
    2DC7: 80 04    JMP   0x2DCC
(0130) 		else minutes = 59;
    2DC9: 56 00 3B MOV   [X+0],0x3B
(0131) 	}
(0132) 
(0133) 	decToBcd(&bcd10, &bcd, minutes);
    2DCC: 52 00    MOV   A,[X+0]
    2DCE: 08       PUSH  A
    2DCF: 62 D0 00 MOV   REG[0xD0],0x0
    2DD2: 5A A1    MOV   [__r1],X
    2DD4: 06 A1 02 ADD   [__r1],0x2
    2DD7: 50 07    MOV   A,0x7
    2DD9: 08       PUSH  A
    2DDA: 51 A1    MOV   A,[__r1]
    2DDC: 08       PUSH  A
    2DDD: 5A A1    MOV   [__r1],X
    2DDF: 06 A1 01 ADD   [__r1],0x1
    2DE2: 50 07    MOV   A,0x7
    2DE4: 08       PUSH  A
    2DE5: 51 A1    MOV   A,[__r1]
    2DE7: 08       PUSH  A
    2DE8: 7C 0F 6A LCALL _decToBcd
(0134) 
(0135) 	datetime._01h.bits.minutes = bcd;
    2DEB: 62 D0 00 MOV   REG[0xD0],0x0
    2DEE: 52 02    MOV   A,[X+2]
    2DF0: 21 0F    AND   A,0xF
    2DF2: 53 A2    MOV   [__r0],A
    2DF4: 26 A2 0F AND   [__r0],0xF
    2DF7: 62 D0 00 MOV   REG[0xD0],0x0
    2DFA: 51 A4    MOV   A,[datetime+1]
    2DFC: 21 F0    AND   A,0xF0
    2DFE: 62 D0 00 MOV   REG[0xD0],0x0
    2E01: 2A A2    OR    A,[__r0]
    2E03: 62 D0 00 MOV   REG[0xD0],0x0
    2E06: 53 A4    MOV   [datetime+1],A
(0136) 	datetime._01h.bits.minutes10 = bcd10;
    2E08: 62 D0 00 MOV   REG[0xD0],0x0
    2E0B: 52 01    MOV   A,[X+1]
    2E0D: 21 07    AND   A,0x7
    2E0F: 64       ASL   A
    2E10: 64       ASL   A
    2E11: 64       ASL   A
    2E12: 64       ASL   A
    2E13: 53 A2    MOV   [__r0],A
    2E15: 26 A2 70 AND   [__r0],0x70
    2E18: 62 D0 00 MOV   REG[0xD0],0x0
    2E1B: 51 A4    MOV   A,[datetime+1]
    2E1D: 21 8F    AND   A,0x8F
    2E1F: 62 D0 00 MOV   REG[0xD0],0x0
    2E22: 2A A2    OR    A,[__r0]
    2E24: 62 D0 00 MOV   REG[0xD0],0x0
    2E27: 53 A4    MOV   [datetime+1],A
(0137) 
(0138) 	Rtc_WriteToRtc();
    2E29: 7C 26 68 LCALL _Rtc_WriteToRtc
    2E2C: 62 D0 00 MOV   REG[0xD0],0x0
(0139) 	Time_Pause(FALSE);
    2E2F: 50 00    MOV   A,0x0
    2E31: 08       PUSH  A
    2E32: 9C 7E    CALL  _Time_Pause
    2E34: 38 FA    ADD   SP,0xFA
    2E36: 38 FD    ADD   SP,0xFD
    2E38: 20       POP   X
    2E39: 7F       RET   
(0140) }
(0141) 
(0142) void Time_Adj_H(BOOL direction)
(0143) {
_Time_Adj_H:
  maxVal               --> X+5
  minVal               --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  h12                  --> X+1
  hours                --> X+0
  direction            --> X-4
    2E3A: 10       PUSH  X
    2E3B: 4F       MOV   X,SP
    2E3C: 38 08    ADD   SP,0x8
(0144) 	BYTE hours, bcd10, bcd, minVal, maxVal;
(0145) 	BOOL h12;
(0146) 
(0147) 	Time_Pause(TRUE);
    2E3E: 50 01    MOV   A,0x1
    2E40: 08       PUSH  A
    2E41: 9C 6F    CALL  _Time_Pause
    2E43: 38 FF    ADD   SP,0xFF
(0148) 	Rtc_ReadFromRtc();
    2E45: 7C 26 7C LCALL _Rtc_ReadFromRtc
(0149) 
(0150) 	h12 = datetime._02h.bits_24hrs._1224hr;
    2E48: 62 D0 00 MOV   REG[0xD0],0x0
    2E4B: 51 A5    MOV   A,[datetime+2]
    2E4D: 62 D0 00 MOV   REG[0xD0],0x0
    2E50: 67       ASR   A
    2E51: 67       ASR   A
    2E52: 67       ASR   A
    2E53: 67       ASR   A
    2E54: 67       ASR   A
    2E55: 67       ASR   A
    2E56: 21 03    AND   A,0x3
    2E58: 53 A2    MOV   [__r0],A
    2E5A: 26 A2 01 AND   [__r0],0x1
    2E5D: 51 A2    MOV   A,[__r0]
    2E5F: 54 01    MOV   [X+1],A
(0151) 
(0152) 	// Check if ampm or 24h
(0153) 	if(h12)
    2E61: 3D 01 00 CMP   [X+1],0x0
    2E64: A0 2D    JZ    0x2E92
(0154) 	{
(0155) 		//12 hrs
(0156) 		bcdToDec(datetime._02h.bits_ampm.hours10, datetime._02h.bits_ampm.hours, &hours);
    2E66: 50 07    MOV   A,0x7
    2E68: 08       PUSH  A
    2E69: 10       PUSH  X
    2E6A: 62 D0 00 MOV   REG[0xD0],0x0
    2E6D: 51 A5    MOV   A,[datetime+2]
    2E6F: 21 0F    AND   A,0xF
    2E71: 08       PUSH  A
    2E72: 51 A5    MOV   A,[datetime+2]
    2E74: 62 D0 00 MOV   REG[0xD0],0x0
    2E77: 67       ASR   A
    2E78: 67       ASR   A
    2E79: 67       ASR   A
    2E7A: 67       ASR   A
    2E7B: 21 0F    AND   A,0xF
    2E7D: 53 A2    MOV   [__r0],A
    2E7F: 26 A2 01 AND   [__r0],0x1
    2E82: 51 A2    MOV   A,[__r0]
    2E84: 08       PUSH  A
    2E85: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2E88: 38 FC    ADD   SP,0xFC
(0157) 		maxVal = 12;
    2E8A: 56 05 0C MOV   [X+5],0xC
(0158) 		minVal = 1;
    2E8D: 56 04 01 MOV   [X+4],0x1
(0159) 	}
    2E90: 80 2B    JMP   0x2EBC
(0160) 	else
(0161) 	{
(0162) 		//24 hrs
(0163) 		bcdToDec(datetime._02h.bits_24hrs.hours10, datetime._02h.bits_24hrs.hours, &hours);
    2E92: 50 07    MOV   A,0x7
    2E94: 08       PUSH  A
    2E95: 10       PUSH  X
    2E96: 62 D0 00 MOV   REG[0xD0],0x0
    2E99: 51 A5    MOV   A,[datetime+2]
    2E9B: 21 0F    AND   A,0xF
    2E9D: 08       PUSH  A
    2E9E: 51 A5    MOV   A,[datetime+2]
    2EA0: 62 D0 00 MOV   REG[0xD0],0x0
    2EA3: 67       ASR   A
    2EA4: 67       ASR   A
    2EA5: 67       ASR   A
    2EA6: 67       ASR   A
    2EA7: 21 0F    AND   A,0xF
    2EA9: 53 A2    MOV   [__r0],A
    2EAB: 26 A2 03 AND   [__r0],0x3
    2EAE: 51 A2    MOV   A,[__r0]
    2EB0: 08       PUSH  A
    2EB1: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2EB4: 38 FC    ADD   SP,0xFC
(0164) 		maxVal = 23;
    2EB6: 56 05 17 MOV   [X+5],0x17
(0165) 		minVal = 0;
    2EB9: 56 04 00 MOV   [X+4],0x0
(0166) 	}
(0167) 
(0168) 
(0169) 	if(direction == TIME_UP)
    2EBC: 3D FC 01 CMP   [X-4],0x1
    2EBF: B0 61    JNZ   0x2F21
(0170) 	{
(0171) 		if(hours < maxVal) hours++;
    2EC1: 52 00    MOV   A,[X+0]
    2EC3: 3B 05    CMP   A,[X+5]
    2EC5: D0 05    JNC   0x2ECB
    2EC7: 77 00    INC   [X+0]
    2EC9: 80 B5    JMP   0x2F7F
(0172) 		else 
(0173) 		{
(0174) 			hours = minVal;
    2ECB: 52 04    MOV   A,[X+4]
    2ECD: 54 00    MOV   [X+0],A
(0175) 			if(h12) datetime._02h.bits_ampm.ampm = !datetime._02h.bits_ampm.ampm;
    2ECF: 3D 01 00 CMP   [X+1],0x0
    2ED2: A0 AC    JZ    0x2F7F
    2ED4: 62 D0 00 MOV   REG[0xD0],0x0
    2ED7: 51 A5    MOV   A,[datetime+2]
    2ED9: 62 D0 00 MOV   REG[0xD0],0x0
    2EDC: 67       ASR   A
    2EDD: 67       ASR   A
    2EDE: 67       ASR   A
    2EDF: 67       ASR   A
    2EE0: 67       ASR   A
    2EE1: 21 07    AND   A,0x7
    2EE3: 53 A2    MOV   [__r0],A
    2EE5: 26 A2 01 AND   [__r0],0x1
    2EE8: B0 09    JNZ   0x2EF2
    2EEA: 56 07 01 MOV   [X+7],0x1
    2EED: 56 06 00 MOV   [X+6],0x0
    2EF0: 80 07    JMP   0x2EF8
    2EF2: 56 07 00 MOV   [X+7],0x0
    2EF5: 56 06 00 MOV   [X+6],0x0
    2EF8: 62 D0 00 MOV   REG[0xD0],0x0
    2EFB: 52 07    MOV   A,[X+7]
    2EFD: 53 A2    MOV   [__r0],A
    2EFF: 26 A2 01 AND   [__r0],0x1
    2F02: 51 A2    MOV   A,[__r0]
    2F04: 64       ASL   A
    2F05: 64       ASL   A
    2F06: 64       ASL   A
    2F07: 64       ASL   A
    2F08: 64       ASL   A
    2F09: 53 A2    MOV   [__r0],A
    2F0B: 26 A2 20 AND   [__r0],0x20
    2F0E: 62 D0 00 MOV   REG[0xD0],0x0
    2F11: 51 A5    MOV   A,[datetime+2]
    2F13: 21 DF    AND   A,0xDF
    2F15: 62 D0 00 MOV   REG[0xD0],0x0
    2F18: 2A A2    OR    A,[__r0]
    2F1A: 62 D0 00 MOV   REG[0xD0],0x0
    2F1D: 53 A5    MOV   [datetime+2],A
(0176) 		}
(0177) 	}
    2F1F: 80 5F    JMP   0x2F7F
(0178) 	else
(0179) 	{
(0180) 		if(hours > minVal) hours--;
    2F21: 52 04    MOV   A,[X+4]
    2F23: 3B 00    CMP   A,[X+0]
    2F25: D0 05    JNC   0x2F2B
    2F27: 7B 00    DEC   [X+0]
    2F29: 80 55    JMP   0x2F7F
(0181) 		else 
(0182) 		{
(0183) 			hours = maxVal;
    2F2B: 52 05    MOV   A,[X+5]
    2F2D: 54 00    MOV   [X+0],A
(0184) 			if(h12) datetime._02h.bits_ampm.ampm = !datetime._02h.bits_ampm.ampm;
    2F2F: 3D 01 00 CMP   [X+1],0x0
    2F32: A0 4C    JZ    0x2F7F
    2F34: 62 D0 00 MOV   REG[0xD0],0x0
    2F37: 51 A5    MOV   A,[datetime+2]
    2F39: 62 D0 00 MOV   REG[0xD0],0x0
    2F3C: 67       ASR   A
    2F3D: 67       ASR   A
    2F3E: 67       ASR   A
    2F3F: 67       ASR   A
    2F40: 67       ASR   A
    2F41: 21 07    AND   A,0x7
    2F43: 53 A2    MOV   [__r0],A
    2F45: 26 A2 01 AND   [__r0],0x1
    2F48: B0 09    JNZ   0x2F52
    2F4A: 56 07 01 MOV   [X+7],0x1
    2F4D: 56 06 00 MOV   [X+6],0x0
    2F50: 80 07    JMP   0x2F58
    2F52: 56 07 00 MOV   [X+7],0x0
    2F55: 56 06 00 MOV   [X+6],0x0
    2F58: 62 D0 00 MOV   REG[0xD0],0x0
    2F5B: 52 07    MOV   A,[X+7]
    2F5D: 53 A2    MOV   [__r0],A
    2F5F: 26 A2 01 AND   [__r0],0x1
    2F62: 51 A2    MOV   A,[__r0]
    2F64: 64       ASL   A
    2F65: 64       ASL   A
    2F66: 64       ASL   A
    2F67: 64       ASL   A
    2F68: 64       ASL   A
    2F69: 53 A2    MOV   [__r0],A
    2F6B: 26 A2 20 AND   [__r0],0x20
    2F6E: 62 D0 00 MOV   REG[0xD0],0x0
    2F71: 51 A5    MOV   A,[datetime+2]
    2F73: 21 DF    AND   A,0xDF
    2F75: 62 D0 00 MOV   REG[0xD0],0x0
    2F78: 2A A2    OR    A,[__r0]
    2F7A: 62 D0 00 MOV   REG[0xD0],0x0
    2F7D: 53 A5    MOV   [datetime+2],A
(0185) 		}
(0186) 	}
(0187) 
(0188) 	decToBcd(&bcd10, &bcd, hours);
    2F7F: 52 00    MOV   A,[X+0]
    2F81: 08       PUSH  A
    2F82: 62 D0 00 MOV   REG[0xD0],0x0
    2F85: 5A A1    MOV   [__r1],X
    2F87: 06 A1 03 ADD   [__r1],0x3
    2F8A: 50 07    MOV   A,0x7
    2F8C: 08       PUSH  A
    2F8D: 51 A1    MOV   A,[__r1]
    2F8F: 08       PUSH  A
    2F90: 5A A1    MOV   [__r1],X
    2F92: 06 A1 02 ADD   [__r1],0x2
    2F95: 50 07    MOV   A,0x7
    2F97: 08       PUSH  A
    2F98: 51 A1    MOV   A,[__r1]
    2F9A: 08       PUSH  A
    2F9B: 7C 0F 6A LCALL _decToBcd
    2F9E: 38 FB    ADD   SP,0xFB
(0189) 
(0190) 	if(h12)
    2FA0: 3D 01 00 CMP   [X+1],0x0
    2FA3: A0 41    JZ    0x2FE5
(0191) 	{
(0192) 		datetime._02h.bits_ampm.hours = bcd;
    2FA5: 62 D0 00 MOV   REG[0xD0],0x0
    2FA8: 52 03    MOV   A,[X+3]
    2FAA: 21 0F    AND   A,0xF
    2FAC: 53 A2    MOV   [__r0],A
    2FAE: 26 A2 0F AND   [__r0],0xF
    2FB1: 62 D0 00 MOV   REG[0xD0],0x0
    2FB4: 51 A5    MOV   A,[datetime+2]
    2FB6: 21 F0    AND   A,0xF0
    2FB8: 62 D0 00 MOV   REG[0xD0],0x0
    2FBB: 2A A2    OR    A,[__r0]
    2FBD: 62 D0 00 MOV   REG[0xD0],0x0
    2FC0: 53 A5    MOV   [datetime+2],A
(0193) 		datetime._02h.bits_ampm.hours10 = bcd10;
    2FC2: 62 D0 00 MOV   REG[0xD0],0x0
    2FC5: 52 02    MOV   A,[X+2]
    2FC7: 21 01    AND   A,0x1
    2FC9: 64       ASL   A
    2FCA: 64       ASL   A
    2FCB: 64       ASL   A
    2FCC: 64       ASL   A
    2FCD: 53 A2    MOV   [__r0],A
    2FCF: 26 A2 10 AND   [__r0],0x10
    2FD2: 62 D0 00 MOV   REG[0xD0],0x0
    2FD5: 51 A5    MOV   A,[datetime+2]
    2FD7: 21 EF    AND   A,0xEF
    2FD9: 62 D0 00 MOV   REG[0xD0],0x0
    2FDC: 2A A2    OR    A,[__r0]
    2FDE: 62 D0 00 MOV   REG[0xD0],0x0
    2FE1: 53 A5    MOV   [datetime+2],A
(0194) 	}
    2FE3: 80 3F    JMP   0x3023
(0195) 	else
(0196) 	{
(0197) 		datetime._02h.bits_24hrs.hours = bcd;
    2FE5: 62 D0 00 MOV   REG[0xD0],0x0
    2FE8: 52 03    MOV   A,[X+3]
    2FEA: 21 0F    AND   A,0xF
    2FEC: 53 A2    MOV   [__r0],A
    2FEE: 26 A2 0F AND   [__r0],0xF
    2FF1: 62 D0 00 MOV   REG[0xD0],0x0
    2FF4: 51 A5    MOV   A,[datetime+2]
    2FF6: 21 F0    AND   A,0xF0
    2FF8: 62 D0 00 MOV   REG[0xD0],0x0
    2FFB: 2A A2    OR    A,[__r0]
    2FFD: 62 D0 00 MOV   REG[0xD0],0x0
    3000: 53 A5    MOV   [datetime+2],A
(0198) 		datetime._02h.bits_24hrs.hours10 = bcd10;
    3002: 62 D0 00 MOV   REG[0xD0],0x0
    3005: 52 02    MOV   A,[X+2]
    3007: 21 03    AND   A,0x3
    3009: 64       ASL   A
    300A: 64       ASL   A
    300B: 64       ASL   A
    300C: 64       ASL   A
    300D: 53 A2    MOV   [__r0],A
    300F: 26 A2 30 AND   [__r0],0x30
    3012: 62 D0 00 MOV   REG[0xD0],0x0
    3015: 51 A5    MOV   A,[datetime+2]
    3017: 21 CF    AND   A,0xCF
    3019: 62 D0 00 MOV   REG[0xD0],0x0
    301C: 2A A2    OR    A,[__r0]
    301E: 62 D0 00 MOV   REG[0xD0],0x0
    3021: 53 A5    MOV   [datetime+2],A
(0199) 	}
(0200) 	
(0201) 	Rtc_WriteToRtc();
    3023: 7C 26 68 LCALL _Rtc_WriteToRtc
    3026: 62 D0 00 MOV   REG[0xD0],0x0
(0202) 	Time_Pause(FALSE);
    3029: 50 00    MOV   A,0x0
    302B: 08       PUSH  A
    302C: 9A 84    CALL  _Time_Pause
    302E: 38 FF    ADD   SP,0xFF
    3030: 38 F8    ADD   SP,0xF8
    3032: 20       POP   X
    3033: 7F       RET   
(0203) }
(0204) 
(0205) void Time_Adj_D(BOOL direction)
(0206) {
_Time_Adj_D:
  year                 --> X+4
  month                --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  date                 --> X+0
  direction            --> X-4
    3034: 10       PUSH  X
    3035: 4F       MOV   X,SP
    3036: 38 05    ADD   SP,0x5
(0207) 	BYTE date, month, year, bcd10, bcd;
(0208) 
(0209) 	Time_Pause(TRUE);
    3038: 50 01    MOV   A,0x1
    303A: 08       PUSH  A
    303B: 9A 75    CALL  _Time_Pause
(0210) 	Rtc_ReadFromRtc();
    303D: 7C 26 7C LCALL _Rtc_ReadFromRtc
(0211) 
(0212) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    3040: 50 07    MOV   A,0x7
    3042: 08       PUSH  A
    3043: 10       PUSH  X
    3044: 62 D0 00 MOV   REG[0xD0],0x0
    3047: 51 A7    MOV   A,[datetime+4]
    3049: 21 0F    AND   A,0xF
    304B: 08       PUSH  A
    304C: 51 A7    MOV   A,[datetime+4]
    304E: 62 D0 00 MOV   REG[0xD0],0x0
    3051: 67       ASR   A
    3052: 67       ASR   A
    3053: 67       ASR   A
    3054: 67       ASR   A
    3055: 21 0F    AND   A,0xF
    3057: 53 A2    MOV   [__r0],A
    3059: 26 A2 03 AND   [__r0],0x3
    305C: 51 A2    MOV   A,[__r0]
    305E: 08       PUSH  A
    305F: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3062: 38 FB    ADD   SP,0xFB
(0213) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    3064: 62 D0 00 MOV   REG[0xD0],0x0
    3067: 5A A1    MOV   [__r1],X
    3069: 06 A1 03 ADD   [__r1],0x3
    306C: 50 07    MOV   A,0x7
    306E: 08       PUSH  A
    306F: 51 A1    MOV   A,[__r1]
    3071: 08       PUSH  A
    3072: 62 D0 00 MOV   REG[0xD0],0x0
    3075: 51 A8    MOV   A,[datetime+5]
    3077: 21 0F    AND   A,0xF
    3079: 08       PUSH  A
    307A: 51 A8    MOV   A,[datetime+5]
    307C: 62 D0 00 MOV   REG[0xD0],0x0
    307F: 67       ASR   A
    3080: 67       ASR   A
    3081: 67       ASR   A
    3082: 67       ASR   A
    3083: 21 0F    AND   A,0xF
    3085: 53 A2    MOV   [__r0],A
    3087: 26 A2 01 AND   [__r0],0x1
    308A: 51 A2    MOV   A,[__r0]
    308C: 08       PUSH  A
    308D: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0214) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    3090: 62 D0 00 MOV   REG[0xD0],0x0
    3093: 5A A1    MOV   [__r1],X
    3095: 06 A1 04 ADD   [__r1],0x4
    3098: 50 07    MOV   A,0x7
    309A: 08       PUSH  A
    309B: 51 A1    MOV   A,[__r1]
    309D: 08       PUSH  A
    309E: 62 D0 00 MOV   REG[0xD0],0x0
    30A1: 51 A9    MOV   A,[datetime+6]
    30A3: 21 0F    AND   A,0xF
    30A5: 08       PUSH  A
    30A6: 51 A9    MOV   A,[datetime+6]
    30A8: 62 D0 00 MOV   REG[0xD0],0x0
    30AB: 67       ASR   A
    30AC: 67       ASR   A
    30AD: 67       ASR   A
    30AE: 67       ASR   A
    30AF: 21 0F    AND   A,0xF
    30B1: 53 A2    MOV   [__r0],A
    30B3: 26 A2 0F AND   [__r0],0xF
    30B6: 51 A2    MOV   A,[__r0]
    30B8: 08       PUSH  A
    30B9: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    30BC: 38 F8    ADD   SP,0xF8
(0215) 
(0216) 	bcd10 = datetime._04h.bits.date10;
    30BE: 62 D0 00 MOV   REG[0xD0],0x0
    30C1: 51 A7    MOV   A,[datetime+4]
    30C3: 62 D0 00 MOV   REG[0xD0],0x0
    30C6: 67       ASR   A
    30C7: 67       ASR   A
    30C8: 67       ASR   A
    30C9: 67       ASR   A
    30CA: 21 0F    AND   A,0xF
    30CC: 53 A2    MOV   [__r0],A
    30CE: 26 A2 03 AND   [__r0],0x3
    30D1: 51 A2    MOV   A,[__r0]
    30D3: 54 01    MOV   [X+1],A
(0217) 	bcd = datetime._04h.bits.date;
    30D5: 62 D0 00 MOV   REG[0xD0],0x0
    30D8: 51 A7    MOV   A,[datetime+4]
    30DA: 21 0F    AND   A,0xF
    30DC: 62 D0 00 MOV   REG[0xD0],0x0
    30DF: 54 02    MOV   [X+2],A
(0218) 
(0219) 	if(direction == TIME_UP)
    30E1: 3D FC 01 CMP   [X-4],0x1
    30E4: B0 38    JNZ   0x311D
(0220) 	{
(0221) 		date++;
    30E6: 77 00    INC   [X+0]
(0222) 		if(isValidDate(date, month, year))
    30E8: 52 04    MOV   A,[X+4]
    30EA: 08       PUSH  A
    30EB: 52 03    MOV   A,[X+3]
    30ED: 08       PUSH  A
    30EE: 52 00    MOV   A,[X+0]
    30F0: 08       PUSH  A
    30F1: 7C 13 F3 LCALL _isValidDate
    30F4: 38 FD    ADD   SP,0xFD
    30F6: 62 D0 00 MOV   REG[0xD0],0x0
    30F9: 39 00    CMP   A,0x0
    30FB: A0 56    JZ    0x3152
(0223) 		{
(0224) 			decToBcd(&bcd10, &bcd, date);
    30FD: 52 00    MOV   A,[X+0]
    30FF: 08       PUSH  A
    3100: 5A A1    MOV   [__r1],X
    3102: 06 A1 02 ADD   [__r1],0x2
    3105: 50 07    MOV   A,0x7
    3107: 08       PUSH  A
    3108: 51 A1    MOV   A,[__r1]
    310A: 08       PUSH  A
    310B: 5A A1    MOV   [__r1],X
    310D: 06 A1 01 ADD   [__r1],0x1
    3110: 50 07    MOV   A,0x7
    3112: 08       PUSH  A
    3113: 51 A1    MOV   A,[__r1]
    3115: 08       PUSH  A
    3116: 7C 0F 6A LCALL _decToBcd
    3119: 38 FB    ADD   SP,0xFB
(0225) 		}
(0226) 	}
    311B: 80 36    JMP   0x3152
(0227) 	else
(0228) 	{
(0229) 		date--;
    311D: 7B 00    DEC   [X+0]
(0230) 		if(isValidDate(date, month, year))
    311F: 52 04    MOV   A,[X+4]
    3121: 08       PUSH  A
    3122: 52 03    MOV   A,[X+3]
    3124: 08       PUSH  A
    3125: 52 00    MOV   A,[X+0]
    3127: 08       PUSH  A
    3128: 7C 13 F3 LCALL _isValidDate
    312B: 38 FD    ADD   SP,0xFD
    312D: 62 D0 00 MOV   REG[0xD0],0x0
    3130: 39 00    CMP   A,0x0
    3132: A0 1F    JZ    0x3152
(0231) 		{
(0232) 			decToBcd(&bcd10, &bcd, date);
    3134: 52 00    MOV   A,[X+0]
    3136: 08       PUSH  A
    3137: 5A A1    MOV   [__r1],X
    3139: 06 A1 02 ADD   [__r1],0x2
    313C: 50 07    MOV   A,0x7
    313E: 08       PUSH  A
    313F: 51 A1    MOV   A,[__r1]
    3141: 08       PUSH  A
    3142: 5A A1    MOV   [__r1],X
    3144: 06 A1 01 ADD   [__r1],0x1
    3147: 50 07    MOV   A,0x7
    3149: 08       PUSH  A
    314A: 51 A1    MOV   A,[__r1]
    314C: 08       PUSH  A
    314D: 7C 0F 6A LCALL _decToBcd
    3150: 38 FB    ADD   SP,0xFB
(0233) 		}
(0234) 	}
(0235) 
(0236) 	datetime._04h.bits.date10 = bcd10;
    3152: 62 D0 00 MOV   REG[0xD0],0x0
    3155: 52 01    MOV   A,[X+1]
    3157: 21 03    AND   A,0x3
    3159: 64       ASL   A
    315A: 64       ASL   A
    315B: 64       ASL   A
    315C: 64       ASL   A
    315D: 53 A2    MOV   [__r0],A
    315F: 26 A2 30 AND   [__r0],0x30
    3162: 62 D0 00 MOV   REG[0xD0],0x0
    3165: 51 A7    MOV   A,[datetime+4]
    3167: 21 CF    AND   A,0xCF
    3169: 62 D0 00 MOV   REG[0xD0],0x0
    316C: 2A A2    OR    A,[__r0]
    316E: 62 D0 00 MOV   REG[0xD0],0x0
    3171: 53 A7    MOV   [datetime+4],A
(0237) 	datetime._04h.bits.date = bcd;
    3173: 62 D0 00 MOV   REG[0xD0],0x0
    3176: 52 02    MOV   A,[X+2]
    3178: 21 0F    AND   A,0xF
    317A: 53 A2    MOV   [__r0],A
    317C: 26 A2 0F AND   [__r0],0xF
    317F: 62 D0 00 MOV   REG[0xD0],0x0
    3182: 51 A7    MOV   A,[datetime+4]
    3184: 21 F0    AND   A,0xF0
    3186: 62 D0 00 MOV   REG[0xD0],0x0
    3189: 2A A2    OR    A,[__r0]
    318B: 62 D0 00 MOV   REG[0xD0],0x0
    318E: 53 A7    MOV   [datetime+4],A
(0238) 
(0239) 	Rtc_WriteToRtc();
    3190: 7C 26 68 LCALL _Rtc_WriteToRtc
    3193: 62 D0 00 MOV   REG[0xD0],0x0
(0240) 	Time_Pause(FALSE);
    3196: 50 00    MOV   A,0x0
    3198: 08       PUSH  A
    3199: 99 17    CALL  _Time_Pause
    319B: 38 FF    ADD   SP,0xFF
    319D: 38 FB    ADD   SP,0xFB
    319F: 20       POP   X
    31A0: 7F       RET   
(0241) }
(0242) 
(0243) void Time_Adj_Mo(BOOL direction)
(0244) {
_Time_Adj_Mo:
  year                 --> X+4
  date                 --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  month                --> X+0
  direction            --> X-4
    31A1: 10       PUSH  X
    31A2: 4F       MOV   X,SP
    31A3: 38 05    ADD   SP,0x5
(0245) 	BYTE date, month, year, bcd10, bcd;
(0246) 
(0247) 	Time_Pause(TRUE);
    31A5: 50 01    MOV   A,0x1
    31A7: 08       PUSH  A
    31A8: 99 08    CALL  _Time_Pause
(0248) 	Rtc_ReadFromRtc();
    31AA: 7C 26 7C LCALL _Rtc_ReadFromRtc
    31AD: 62 D0 00 MOV   REG[0xD0],0x0
(0249) 
(0250) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    31B0: 5A A1    MOV   [__r1],X
    31B2: 06 A1 03 ADD   [__r1],0x3
    31B5: 50 07    MOV   A,0x7
    31B7: 08       PUSH  A
    31B8: 51 A1    MOV   A,[__r1]
    31BA: 08       PUSH  A
    31BB: 62 D0 00 MOV   REG[0xD0],0x0
    31BE: 51 A7    MOV   A,[datetime+4]
    31C0: 21 0F    AND   A,0xF
    31C2: 08       PUSH  A
    31C3: 51 A7    MOV   A,[datetime+4]
    31C5: 62 D0 00 MOV   REG[0xD0],0x0
    31C8: 67       ASR   A
    31C9: 67       ASR   A
    31CA: 67       ASR   A
    31CB: 67       ASR   A
    31CC: 21 0F    AND   A,0xF
    31CE: 53 A2    MOV   [__r0],A
    31D0: 26 A2 03 AND   [__r0],0x3
    31D3: 51 A2    MOV   A,[__r0]
    31D5: 08       PUSH  A
    31D6: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    31D9: 38 FB    ADD   SP,0xFB
(0251) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    31DB: 50 07    MOV   A,0x7
    31DD: 08       PUSH  A
    31DE: 10       PUSH  X
    31DF: 62 D0 00 MOV   REG[0xD0],0x0
    31E2: 51 A8    MOV   A,[datetime+5]
    31E4: 21 0F    AND   A,0xF
    31E6: 08       PUSH  A
    31E7: 51 A8    MOV   A,[datetime+5]
    31E9: 62 D0 00 MOV   REG[0xD0],0x0
    31EC: 67       ASR   A
    31ED: 67       ASR   A
    31EE: 67       ASR   A
    31EF: 67       ASR   A
    31F0: 21 0F    AND   A,0xF
    31F2: 53 A2    MOV   [__r0],A
    31F4: 26 A2 01 AND   [__r0],0x1
    31F7: 51 A2    MOV   A,[__r0]
    31F9: 08       PUSH  A
    31FA: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0252) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    31FD: 62 D0 00 MOV   REG[0xD0],0x0
    3200: 5A A1    MOV   [__r1],X
    3202: 06 A1 04 ADD   [__r1],0x4
    3205: 50 07    MOV   A,0x7
    3207: 08       PUSH  A
    3208: 51 A1    MOV   A,[__r1]
    320A: 08       PUSH  A
    320B: 62 D0 00 MOV   REG[0xD0],0x0
    320E: 51 A9    MOV   A,[datetime+6]
    3210: 21 0F    AND   A,0xF
    3212: 08       PUSH  A
    3213: 51 A9    MOV   A,[datetime+6]
    3215: 62 D0 00 MOV   REG[0xD0],0x0
    3218: 67       ASR   A
    3219: 67       ASR   A
    321A: 67       ASR   A
    321B: 67       ASR   A
    321C: 21 0F    AND   A,0xF
    321E: 53 A2    MOV   [__r0],A
    3220: 26 A2 0F AND   [__r0],0xF
    3223: 51 A2    MOV   A,[__r0]
    3225: 08       PUSH  A
    3226: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3229: 38 F8    ADD   SP,0xF8
(0253) 
(0254) 	bcd10 = datetime._05h.bits.month10;
    322B: 62 D0 00 MOV   REG[0xD0],0x0
    322E: 51 A8    MOV   A,[datetime+5]
    3230: 62 D0 00 MOV   REG[0xD0],0x0
    3233: 67       ASR   A
    3234: 67       ASR   A
    3235: 67       ASR   A
    3236: 67       ASR   A
    3237: 21 0F    AND   A,0xF
    3239: 53 A2    MOV   [__r0],A
    323B: 26 A2 01 AND   [__r0],0x1
    323E: 51 A2    MOV   A,[__r0]
    3240: 54 01    MOV   [X+1],A
(0255) 	bcd = datetime._05h.bits.month;
    3242: 62 D0 00 MOV   REG[0xD0],0x0
    3245: 51 A8    MOV   A,[datetime+5]
    3247: 21 0F    AND   A,0xF
    3249: 62 D0 00 MOV   REG[0xD0],0x0
    324C: 54 02    MOV   [X+2],A
(0256) 
(0257) 	if(direction == TIME_UP)
    324E: 3D FC 01 CMP   [X-4],0x1
    3251: B0 38    JNZ   0x328A
(0258) 	{
(0259) 		month++;
    3253: 77 00    INC   [X+0]
(0260) 		if(isValidDate(date, month, year))
    3255: 52 04    MOV   A,[X+4]
    3257: 08       PUSH  A
    3258: 52 00    MOV   A,[X+0]
    325A: 08       PUSH  A
    325B: 52 03    MOV   A,[X+3]
    325D: 08       PUSH  A
    325E: 7C 13 F3 LCALL _isValidDate
    3261: 38 FD    ADD   SP,0xFD
    3263: 62 D0 00 MOV   REG[0xD0],0x0
    3266: 39 00    CMP   A,0x0
    3268: A0 56    JZ    0x32BF
(0261) 		{
(0262) 			decToBcd(&bcd10, &bcd, month);
    326A: 52 00    MOV   A,[X+0]
    326C: 08       PUSH  A
    326D: 5A A1    MOV   [__r1],X
    326F: 06 A1 02 ADD   [__r1],0x2
    3272: 50 07    MOV   A,0x7
    3274: 08       PUSH  A
    3275: 51 A1    MOV   A,[__r1]
    3277: 08       PUSH  A
    3278: 5A A1    MOV   [__r1],X
    327A: 06 A1 01 ADD   [__r1],0x1
    327D: 50 07    MOV   A,0x7
    327F: 08       PUSH  A
    3280: 51 A1    MOV   A,[__r1]
    3282: 08       PUSH  A
    3283: 7C 0F 6A LCALL _decToBcd
    3286: 38 FB    ADD   SP,0xFB
(0263) 		}
(0264) 	}
    3288: 80 36    JMP   0x32BF
(0265) 	else
(0266) 	{
(0267) 		month--;
    328A: 7B 00    DEC   [X+0]
(0268) 		if(isValidDate(date, month, year))
    328C: 52 04    MOV   A,[X+4]
    328E: 08       PUSH  A
    328F: 52 00    MOV   A,[X+0]
    3291: 08       PUSH  A
    3292: 52 03    MOV   A,[X+3]
    3294: 08       PUSH  A
    3295: 7C 13 F3 LCALL _isValidDate
    3298: 38 FD    ADD   SP,0xFD
    329A: 62 D0 00 MOV   REG[0xD0],0x0
    329D: 39 00    CMP   A,0x0
    329F: A0 1F    JZ    0x32BF
(0269) 		{
(0270) 			decToBcd(&bcd10, &bcd, month);
    32A1: 52 00    MOV   A,[X+0]
    32A3: 08       PUSH  A
    32A4: 5A A1    MOV   [__r1],X
    32A6: 06 A1 02 ADD   [__r1],0x2
    32A9: 50 07    MOV   A,0x7
    32AB: 08       PUSH  A
    32AC: 51 A1    MOV   A,[__r1]
    32AE: 08       PUSH  A
    32AF: 5A A1    MOV   [__r1],X
    32B1: 06 A1 01 ADD   [__r1],0x1
    32B4: 50 07    MOV   A,0x7
    32B6: 08       PUSH  A
    32B7: 51 A1    MOV   A,[__r1]
    32B9: 08       PUSH  A
    32BA: 7C 0F 6A LCALL _decToBcd
    32BD: 38 FB    ADD   SP,0xFB
(0271) 		}
(0272) 	}
(0273) 
(0274) 	datetime._05h.bits.month10 = bcd10;
    32BF: 62 D0 00 MOV   REG[0xD0],0x0
    32C2: 52 01    MOV   A,[X+1]
    32C4: 21 01    AND   A,0x1
    32C6: 64       ASL   A
    32C7: 64       ASL   A
    32C8: 64       ASL   A
    32C9: 64       ASL   A
    32CA: 53 A2    MOV   [__r0],A
    32CC: 26 A2 10 AND   [__r0],0x10
    32CF: 62 D0 00 MOV   REG[0xD0],0x0
    32D2: 51 A8    MOV   A,[datetime+5]
    32D4: 21 EF    AND   A,0xEF
    32D6: 62 D0 00 MOV   REG[0xD0],0x0
    32D9: 2A A2    OR    A,[__r0]
    32DB: 62 D0 00 MOV   REG[0xD0],0x0
    32DE: 53 A8    MOV   [datetime+5],A
(0275) 	datetime._05h.bits.month = bcd;
    32E0: 62 D0 00 MOV   REG[0xD0],0x0
    32E3: 52 02    MOV   A,[X+2]
    32E5: 21 0F    AND   A,0xF
    32E7: 53 A2    MOV   [__r0],A
    32E9: 26 A2 0F AND   [__r0],0xF
    32EC: 62 D0 00 MOV   REG[0xD0],0x0
    32EF: 51 A8    MOV   A,[datetime+5]
    32F1: 21 F0    AND   A,0xF0
    32F3: 62 D0 00 MOV   REG[0xD0],0x0
    32F6: 2A A2    OR    A,[__r0]
    32F8: 62 D0 00 MOV   REG[0xD0],0x0
    32FB: 53 A8    MOV   [datetime+5],A
(0276) 
(0277) 	Rtc_WriteToRtc();
    32FD: 7C 26 68 LCALL _Rtc_WriteToRtc
    3300: 62 D0 00 MOV   REG[0xD0],0x0
(0278) 	Time_Pause(FALSE);
    3303: 50 00    MOV   A,0x0
    3305: 08       PUSH  A
    3306: 7C 2A B2 LCALL _Time_Pause
    3309: 38 FF    ADD   SP,0xFF
    330B: 38 FB    ADD   SP,0xFB
    330D: 20       POP   X
    330E: 7F       RET   
(0279) }
(0280) 
(0281) void Time_Adj_Y(BOOL direction)
(0282) {
_Time_Adj_Y:
  month                --> X+4
  date                 --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  year                 --> X+0
  direction            --> X-4
    330F: 10       PUSH  X
    3310: 4F       MOV   X,SP
    3311: 38 05    ADD   SP,0x5
(0283) 	BYTE date, month, year, bcd10, bcd;
(0284) 
(0285) 	Time_Pause(TRUE);
    3313: 50 01    MOV   A,0x1
    3315: 08       PUSH  A
    3316: 7C 2A B2 LCALL _Time_Pause
(0286) 	Rtc_ReadFromRtc();
    3319: 7C 26 7C LCALL _Rtc_ReadFromRtc
    331C: 62 D0 00 MOV   REG[0xD0],0x0
(0287) 
(0288) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    331F: 5A A1    MOV   [__r1],X
    3321: 06 A1 03 ADD   [__r1],0x3
    3324: 50 07    MOV   A,0x7
    3326: 08       PUSH  A
    3327: 51 A1    MOV   A,[__r1]
    3329: 08       PUSH  A
    332A: 62 D0 00 MOV   REG[0xD0],0x0
    332D: 51 A7    MOV   A,[datetime+4]
    332F: 21 0F    AND   A,0xF
    3331: 08       PUSH  A
    3332: 51 A7    MOV   A,[datetime+4]
    3334: 62 D0 00 MOV   REG[0xD0],0x0
    3337: 67       ASR   A
    3338: 67       ASR   A
    3339: 67       ASR   A
    333A: 67       ASR   A
    333B: 21 0F    AND   A,0xF
    333D: 53 A2    MOV   [__r0],A
    333F: 26 A2 03 AND   [__r0],0x3
    3342: 51 A2    MOV   A,[__r0]
    3344: 08       PUSH  A
    3345: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3348: 38 FB    ADD   SP,0xFB
(0289) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    334A: 62 D0 00 MOV   REG[0xD0],0x0
    334D: 5A A1    MOV   [__r1],X
    334F: 06 A1 04 ADD   [__r1],0x4
    3352: 50 07    MOV   A,0x7
    3354: 08       PUSH  A
    3355: 51 A1    MOV   A,[__r1]
    3357: 08       PUSH  A
    3358: 62 D0 00 MOV   REG[0xD0],0x0
    335B: 51 A8    MOV   A,[datetime+5]
    335D: 21 0F    AND   A,0xF
    335F: 08       PUSH  A
    3360: 51 A8    MOV   A,[datetime+5]
    3362: 62 D0 00 MOV   REG[0xD0],0x0
    3365: 67       ASR   A
    3366: 67       ASR   A
    3367: 67       ASR   A
    3368: 67       ASR   A
    3369: 21 0F    AND   A,0xF
    336B: 53 A2    MOV   [__r0],A
    336D: 26 A2 01 AND   [__r0],0x1
    3370: 51 A2    MOV   A,[__r0]
    3372: 08       PUSH  A
    3373: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0290) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    3376: 50 07    MOV   A,0x7
    3378: 08       PUSH  A
    3379: 10       PUSH  X
    337A: 62 D0 00 MOV   REG[0xD0],0x0
    337D: 51 A9    MOV   A,[datetime+6]
    337F: 21 0F    AND   A,0xF
    3381: 08       PUSH  A
    3382: 51 A9    MOV   A,[datetime+6]
    3384: 62 D0 00 MOV   REG[0xD0],0x0
    3387: 67       ASR   A
    3388: 67       ASR   A
    3389: 67       ASR   A
    338A: 67       ASR   A
    338B: 21 0F    AND   A,0xF
    338D: 53 A2    MOV   [__r0],A
    338F: 26 A2 0F AND   [__r0],0xF
    3392: 51 A2    MOV   A,[__r0]
    3394: 08       PUSH  A
    3395: 7C 0F 41 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3398: 38 F8    ADD   SP,0xF8
(0291) 
(0292) 	bcd10 = datetime._06h.bits.year10;
    339A: 62 D0 00 MOV   REG[0xD0],0x0
    339D: 51 A9    MOV   A,[datetime+6]
    339F: 62 D0 00 MOV   REG[0xD0],0x0
    33A2: 67       ASR   A
    33A3: 67       ASR   A
    33A4: 67       ASR   A
    33A5: 67       ASR   A
    33A6: 21 0F    AND   A,0xF
    33A8: 53 A2    MOV   [__r0],A
    33AA: 26 A2 0F AND   [__r0],0xF
    33AD: 51 A2    MOV   A,[__r0]
    33AF: 54 01    MOV   [X+1],A
(0293) 	bcd = datetime._06h.bits.year;
    33B1: 62 D0 00 MOV   REG[0xD0],0x0
    33B4: 51 A9    MOV   A,[datetime+6]
    33B6: 21 0F    AND   A,0xF
    33B8: 62 D0 00 MOV   REG[0xD0],0x0
    33BB: 54 02    MOV   [X+2],A
(0294) 
(0295) 	if(direction == TIME_UP)
    33BD: 3D FC 01 CMP   [X-4],0x1
    33C0: B0 38    JNZ   0x33F9
(0296) 	{
(0297) 		year++;
    33C2: 77 00    INC   [X+0]
(0298) 		if(isValidDate(date, month, year))
    33C4: 52 00    MOV   A,[X+0]
    33C6: 08       PUSH  A
    33C7: 52 04    MOV   A,[X+4]
    33C9: 08       PUSH  A
    33CA: 52 03    MOV   A,[X+3]
    33CC: 08       PUSH  A
    33CD: 7C 13 F3 LCALL _isValidDate
    33D0: 38 FD    ADD   SP,0xFD
    33D2: 62 D0 00 MOV   REG[0xD0],0x0
    33D5: 39 00    CMP   A,0x0
    33D7: A0 56    JZ    0x342E
(0299) 		{
(0300) 			decToBcd(&bcd10, &bcd, year);
    33D9: 52 00    MOV   A,[X+0]
    33DB: 08       PUSH  A
    33DC: 5A A1    MOV   [__r1],X
    33DE: 06 A1 02 ADD   [__r1],0x2
    33E1: 50 07    MOV   A,0x7
    33E3: 08       PUSH  A
    33E4: 51 A1    MOV   A,[__r1]
    33E6: 08       PUSH  A
    33E7: 5A A1    MOV   [__r1],X
    33E9: 06 A1 01 ADD   [__r1],0x1
    33EC: 50 07    MOV   A,0x7
    33EE: 08       PUSH  A
    33EF: 51 A1    MOV   A,[__r1]
    33F1: 08       PUSH  A
    33F2: 7C 0F 6A LCALL _decToBcd
    33F5: 38 FB    ADD   SP,0xFB
(0301) 		}
(0302) 	}
    33F7: 80 36    JMP   0x342E
(0303) 	else
(0304) 	{
(0305) 		year--;
    33F9: 7B 00    DEC   [X+0]
(0306) 		if(isValidDate(date, month, year))
    33FB: 52 00    MOV   A,[X+0]
    33FD: 08       PUSH  A
    33FE: 52 04    MOV   A,[X+4]
    3400: 08       PUSH  A
    3401: 52 03    MOV   A,[X+3]
    3403: 08       PUSH  A
    3404: 7C 13 F3 LCALL _isValidDate
    3407: 38 FD    ADD   SP,0xFD
    3409: 62 D0 00 MOV   REG[0xD0],0x0
    340C: 39 00    CMP   A,0x0
    340E: A0 1F    JZ    0x342E
(0307) 		{
(0308) 			decToBcd(&bcd10, &bcd, year);
    3410: 52 00    MOV   A,[X+0]
    3412: 08       PUSH  A
    3413: 5A A1    MOV   [__r1],X
    3415: 06 A1 02 ADD   [__r1],0x2
    3418: 50 07    MOV   A,0x7
    341A: 08       PUSH  A
    341B: 51 A1    MOV   A,[__r1]
    341D: 08       PUSH  A
    341E: 5A A1    MOV   [__r1],X
    3420: 06 A1 01 ADD   [__r1],0x1
    3423: 50 07    MOV   A,0x7
    3425: 08       PUSH  A
    3426: 51 A1    MOV   A,[__r1]
    3428: 08       PUSH  A
    3429: 7C 0F 6A LCALL _decToBcd
    342C: 38 FB    ADD   SP,0xFB
(0309) 		}
(0310) 	}
(0311) 
(0312) 	datetime._06h.bits.year10 = bcd10;
    342E: 62 D0 00 MOV   REG[0xD0],0x0
    3431: 52 01    MOV   A,[X+1]
    3433: 21 0F    AND   A,0xF
    3435: 64       ASL   A
    3436: 64       ASL   A
    3437: 64       ASL   A
    3438: 64       ASL   A
    3439: 53 A2    MOV   [__r0],A
    343B: 26 A2 F0 AND   [__r0],0xF0
    343E: 62 D0 00 MOV   REG[0xD0],0x0
    3441: 51 A9    MOV   A,[datetime+6]
    3443: 21 0F    AND   A,0xF
    3445: 62 D0 00 MOV   REG[0xD0],0x0
    3448: 2A A2    OR    A,[__r0]
    344A: 62 D0 00 MOV   REG[0xD0],0x0
    344D: 53 A9    MOV   [datetime+6],A
(0313) 	datetime._06h.bits.year = bcd;
    344F: 62 D0 00 MOV   REG[0xD0],0x0
    3452: 52 02    MOV   A,[X+2]
    3454: 21 0F    AND   A,0xF
    3456: 53 A2    MOV   [__r0],A
    3458: 26 A2 0F AND   [__r0],0xF
    345B: 62 D0 00 MOV   REG[0xD0],0x0
    345E: 51 A9    MOV   A,[datetime+6]
    3460: 21 F0    AND   A,0xF0
    3462: 62 D0 00 MOV   REG[0xD0],0x0
    3465: 2A A2    OR    A,[__r0]
    3467: 62 D0 00 MOV   REG[0xD0],0x0
    346A: 53 A9    MOV   [datetime+6],A
(0314) 
(0315) 	Rtc_WriteToRtc();
    346C: 7C 26 68 LCALL _Rtc_WriteToRtc
    346F: 62 D0 00 MOV   REG[0xD0],0x0
(0316) 	Time_Pause(FALSE);
    3472: 50 00    MOV   A,0x0
    3474: 08       PUSH  A
    3475: 7C 2A B2 LCALL _Time_Pause
    3478: 38 FF    ADD   SP,0xFF
    347A: 38 FB    ADD   SP,0xFB
    347C: 20       POP   X
    347D: 7F       RET   
