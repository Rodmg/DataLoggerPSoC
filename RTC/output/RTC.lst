FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 16 D8 LJMP  _Keypad_GPIO_ISR   (0145)     ljmp _Keypad_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0D 99 LJMP  _ADCINC_ADConversion_ISR(0149)     ljmp	_ADCINC_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 07 AB LJMP  _TempBuf_ISR       (0153)     ljmp	_TempBuf_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 06 59 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 5A LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [currentView+82],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [currentView+83],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 E2 LCALL 0x05E2             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 CF    MOV   X,0xCF             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 90    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 90    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 90    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 8F    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 90    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 90 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 8F    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 8F    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 90    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 90 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 8F    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 1C 53 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
04DD: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_rtc_Bank1
                                        (0019) export LoadConfigTBL_rtc_Bank0
                                        (0020) export LoadConfigTBL_rtc_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_rtc_Bank0:
                                        (0023) ;  Instance name ADCINC, User Module ADCINC
                                        (0024) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0025) 	db		88h, 90h		;ADCINC_AtoDcr0(ASC12CR0)
                                        (0026) 	db		89h, 00h		;ADCINC_AtoDcr1(ASC12CR1)
                                        (0027) 	db		8ah, 60h		;ADCINC_AtoDcr2(ASC12CR2)
                                        (0028) 	db		8bh, f0h		;ADCINC_AtoDcr3(ASC12CR3)
                                        (0029) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0030) 	db		23h, 00h		;ADCINC_PWMcr0(DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADCINC_PWMdr1(DBB00DR1)
                                        (0032) 	db		22h, 01h		;ADCINC_PWMdr2(DBB00DR2)
                                        (0033) ;  Instance name I2Cm, User Module I2Cm
                                        (0034) ;  Instance name LCD, User Module LCD
                                        (0035) ;  Instance name PGA, User Module PGA
                                        (0036) ;       Instance name PGA, Block Name GAIN(ACB02)
                                        (0037) 	db		79h, d6h		;PGA_GAIN_CR0(ACB02CR0)
                                        (0038) 	db		7ah, 21h		;PGA_GAIN_CR1(ACB02CR1)
                                        (0039) 	db		7bh, 20h		;PGA_GAIN_CR2(ACB02CR2)
                                        (0040) 	db		78h, 00h		;PGA_GAIN_CR3(ACB02CR3)
                                        (0041) ;  Instance name TempBuf, User Module DigBuf
                                        (0042) ;       Instance name TempBuf, Block Name DigBuf(DBB01)
                                        (0043) 	db		27h, 03h		;TempBuf_CONTROL_REG(DBB01CR0)
                                        (0044) 	db		25h, 00h		;TempBuf_DATA_1_REG(DBB01DR1)
                                        (0045) 	db		26h, 00h		;TempBuf_DATA_2_REG(DBB01DR2)
                                        (0046) ;  Instance name UART, User Module UART
                                        (0047) ;       Instance name UART, Block Name RX(DCB03)
                                        (0048) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0049) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0050) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0051) ;       Instance name UART, Block Name TX(DCB02)
                                        (0052) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0053) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0054) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0055) ;  Global Register values Bank 0
                                        (0056) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0057) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0058) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0059) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0060) 	db		e6h, 04h		; DecimatorControl_0 register (DEC_CR0)
                                        (0061) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0062) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0063) 	db		b0h, 30h		; Row_0_InputMux register (RDI0RI)
                                        (0064) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0065) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0066) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0067) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0068) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0069) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0070) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0071) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0072) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0073) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0074) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0075) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0076) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0077) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0078) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0079) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0080) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0081) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0082) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0083) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0084) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0085) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0086) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0087) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0088) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0089) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0090) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0091) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0092) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0093) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0094) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0095) 	db		ffh
                                        (0096) LoadConfigTBL_rtc_Bank1:
                                        (0097) ;  Instance name ADCINC, User Module ADCINC
                                        (0098) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0099) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0100) 	db		20h, 31h		;ADCINC_PWMfn(DBB00FN)
                                        (0101) 	db		21h, 16h		;ADCINC_PWMsl(DBB00IN)
                                        (0102) 	db		22h, 40h		;ADCINC_PWMos(DBB00OU)
                                        (0103) ;  Instance name I2Cm, User Module I2Cm
                                        (0104) ;  Instance name LCD, User Module LCD
                                        (0105) ;  Instance name PGA, User Module PGA
                                        (0106) ;       Instance name PGA, Block Name GAIN(ACB02)
                                        (0107) ;  Instance name TempBuf, User Module DigBuf
                                        (0108) ;       Instance name TempBuf, Block Name DigBuf(DBB01)
                                        (0109) 	db		24h, 22h		;TempBuf_FUNC_REG(DBB01FN)
                                        (0110) 	db		25h, 67h		;TempBuf_INPUT_REG(DBB01IN)
                                        (0111) 	db		26h, 45h		;TempBuf_OUTPUT_REG(DBB01OU)
                                        (0112) ;  Instance name UART, User Module UART
                                        (0113) ;       Instance name UART, Block Name RX(DCB03)
                                        (0114) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0115) 	db		2dh, f1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0116) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0117) ;       Instance name UART, Block Name TX(DCB02)
                                        (0118) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0119) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0120) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0121) ;  Global Register values Bank 1
                                        (0122) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0123) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0124) 	db		60h, 10h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0125) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0126) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0127) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0128) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0129) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0130) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0131) 	db		d3h, 80h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0132) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0133) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0134) 	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0135) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0136) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0137) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0138) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0139) 	db		e7h, 48h		; Type2Decimator_Control register (DEC_CR2)
                                        (0140) 	db		ffh
                                        (0141) AREA psoc_config(rom, rel)
                                        (0142) LoadConfigTBL_rtc_Ordered:
                                        (0143) ;  Ordered Global Register values
                                        (0144) 	M8C_SetBank0
04DF: 62 00 00 MOV   REG[0x0],0x0       (0145) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
04E2: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
04E4: 62 00 00 MOV   REG[0x0],0x0       (0147) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
04E7: 62 01 FF MOV   REG[0x1],0xFF      (0148) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
04EA: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
04EC: 62 03 F4 MOV   REG[0x3],0xF4      (0150) 	mov	reg[03h], f4h		; Port_0_DriveMode_2 register (PRT0DM2)
04EF: 62 02 08 MOV   REG[0x2],0x8       (0151) 	mov	reg[02h], 08h		; Port_0_GlobalSelect register (PRT0GS)
04F2: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
04F4: 62 02 00 MOV   REG[0x2],0x0       (0153) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
04F7: 62 03 00 MOV   REG[0x3],0x0       (0154) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
04FA: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
04FC: 62 01 00 MOV   REG[0x1],0x0       (0156) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
04FF: 62 04 00 MOV   REG[0x4],0x0       (0157) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0502: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
0504: 62 04 00 MOV   REG[0x4],0x0       (0159) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
0507: 62 05 FF MOV   REG[0x5],0xFF      (0160) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
050A: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
050C: 62 07 FF MOV   REG[0x7],0xFF      (0162) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
050F: 62 06 00 MOV   REG[0x6],0x0       (0163) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0512: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
0514: 62 06 00 MOV   REG[0x6],0x0       (0165) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0517: 62 07 00 MOV   REG[0x7],0x0       (0166) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
051A: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
051C: 62 05 00 MOV   REG[0x5],0x0       (0168) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
051F: 62 08 00 MOV   REG[0x8],0x0       (0169) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0522: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
0524: 62 08 FF MOV   REG[0x8],0xFF      (0171) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
0527: 62 09 00 MOV   REG[0x9],0x0       (0172) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
052A: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
052C: 62 0B 00 MOV   REG[0xB],0x0       (0174) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
052F: 62 0A 80 MOV   REG[0xA],0x80      (0175) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0532: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
0534: 62 0A 00 MOV   REG[0xA],0x0       (0177) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0537: 62 0B 00 MOV   REG[0xB],0x0       (0178) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
053A: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
053C: 62 09 00 MOV   REG[0x9],0x0       (0180) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
053F: 62 0C 00 MOV   REG[0xC],0x0       (0181) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0542: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
0544: 62 0C 00 MOV   REG[0xC],0x0       (0183) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0547: 62 0D 00 MOV   REG[0xD],0x0       (0184) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
054A: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
054C: 62 0F 00 MOV   REG[0xF],0x0       (0186) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
054F: 62 0E 00 MOV   REG[0xE],0x0       (0187) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0552: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
0554: 62 0E 00 MOV   REG[0xE],0x0       (0189) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0557: 62 0F 00 MOV   REG[0xF],0x0       (0190) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
055A: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
055C: 62 0D 00 MOV   REG[0xD],0x0       (0192) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
055F: 62 10 00 MOV   REG[0x10],0x0      (0193) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0562: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0564: 62 10 00 MOV   REG[0x10],0x0      (0195) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0567: 62 11 00 MOV   REG[0x11],0x0      (0196) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
056A: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
056C: 62 13 00 MOV   REG[0x13],0x0      (0198) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
056F: 62 12 00 MOV   REG[0x12],0x0      (0199) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0572: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
0574: 62 12 00 MOV   REG[0x12],0x0      (0201) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0577: 62 13 00 MOV   REG[0x13],0x0      (0202) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
057A: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
057C: 62 11 00 MOV   REG[0x11],0x0      (0204) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
057F: 62 14 00 MOV   REG[0x14],0x0      (0205) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0582: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
0584: 62 14 00 MOV   REG[0x14],0x0      (0207) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0587: 62 15 00 MOV   REG[0x15],0x0      (0208) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
058A: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
058C: 62 17 00 MOV   REG[0x17],0x0      (0210) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
058F: 62 16 00 MOV   REG[0x16],0x0      (0211) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0592: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
0594: 62 16 00 MOV   REG[0x16],0x0      (0213) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0597: 62 17 00 MOV   REG[0x17],0x0      (0214) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
059A: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
059C: 62 15 00 MOV   REG[0x15],0x0      (0216) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
059F: 62 18 00 MOV   REG[0x18],0x0      (0217) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
05A2: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
05A4: 62 18 00 MOV   REG[0x18],0x0      (0219) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
05A7: 62 19 00 MOV   REG[0x19],0x0      (0220) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
05AA: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
05AC: 62 1B 00 MOV   REG[0x1B],0x0      (0222) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
05AF: 62 1A 00 MOV   REG[0x1A],0x0      (0223) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
05B2: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
05B4: 62 1A 00 MOV   REG[0x1A],0x0      (0225) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
05B7: 62 1B 00 MOV   REG[0x1B],0x0      (0226) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
05BA: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
05BC: 62 19 00 MOV   REG[0x19],0x0      (0228) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
05BF: 62 1C 00 MOV   REG[0x1C],0x0      (0229) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
05C2: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
05C4: 62 1C 00 MOV   REG[0x1C],0x0      (0231) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
05C7: 62 1D 00 MOV   REG[0x1D],0x0      (0232) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
05CA: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
05CC: 62 1F 00 MOV   REG[0x1F],0x0      (0234) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
05CF: 62 1E 00 MOV   REG[0x1E],0x0      (0235) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
05D2: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
05D4: 62 1E 00 MOV   REG[0x1E],0x0      (0237) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
05D7: 62 1F 00 MOV   REG[0x1F],0x0      (0238) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
05DA: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
05DC: 62 1D 00 MOV   REG[0x1D],0x0      (0240) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
05DF: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
05E1: 7F       RET                      (0242) 	ret
                                        (0243) 
                                        (0244) 
                                        (0245) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_rtc
                                        (0026) export _LoadConfig_rtc
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_0_DriveMode_2_SHADE
                                        (0034) export _Port_0_DriveMode_2_SHADE
                                        (0035) export Port_2_Data_SHADE
                                        (0036) export _Port_2_Data_SHADE
                                        (0037) export Port_2_DriveMode_0_SHADE
                                        (0038) export _Port_2_DriveMode_0_SHADE
                                        (0039) export Port_2_DriveMode_1_SHADE
                                        (0040) export _Port_2_DriveMode_1_SHADE
                                        (0041) 
                                        (0042) 
                                        (0043) export NO_SHADOW
                                        (0044) export _NO_SHADOW
                                        (0045) 
                                        (0046) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0047) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0048) 
                                        (0049) AREA psoc_config(rom, rel)
                                        (0050) 
                                        (0051) ;---------------------------------------------------------------------------
                                        (0052) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0053) ;                  parameters handled by boot code, like CPU speed). This
                                        (0054) ;                  function can be called from user code, but typically it
                                        (0055) ;                  is only called from boot.
                                        (0056) ;
                                        (0057) ;       INPUTS: None.
                                        (0058) ;      RETURNS: Nothing.
                                        (0059) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0060) ;               In the large memory model currently only the page
                                        (0061) ;               pointer registers listed below are modified.  This does
                                        (0062) ;               not guarantee that in future implementations of this
                                        (0063) ;               function other page pointer registers will not be
                                        (0064) ;               modified.
                                        (0065) ;          
                                        (0066) ;               Page Pointer Registers Modified: 
                                        (0067) ;               CUR_PP
                                        (0068) ;
                                        (0069) _LoadConfigInit:
                                        (0070)  LoadConfigInit:
                                        (0071)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0072)     
05E2: 55 00 00 MOV   [previousSecond|elapsedSeconds],0x0(0073) 	mov		[Port_0_Data_SHADE], 0h
05E5: 55 02 00 MOV   [previousSecond|elapsedSeconds+2],0x0(0074) 	mov		[Port_0_DriveMode_0_SHADE], 0h
05E8: 55 03 FF MOV   [previousSecond|elapsedSeconds+3],0xFF(0075) 	mov		[Port_0_DriveMode_1_SHADE], ffh
05EB: 55 04 F4 MOV   [previousSecond|elapsedSeconds+4],0xF4(0076) 	mov		[Port_0_DriveMode_2_SHADE], f4h
05EE: 55 01 00 MOV   [previousSecond|elapsedSeconds+1],0x0(0077) 	mov		[Port_2_Data_SHADE], 0h
05F1: 55 05 FF MOV   [previousSecond|elapsedSeconds+5],0xFF(0078) 	mov		[Port_2_DriveMode_0_SHADE], ffh
05F4: 55 06 00 MOV   [previousSecond|elapsedSeconds+6],0x0(0079) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0080) 
05F7: 7C 05 FE LCALL 0x05FE             (0081) 	lcall	LoadConfig_rtc
05FA: 7C 04 DD LCALL 0x04DD             (0082) 	lcall	LoadConfigTBL_rtc_Ordered
                                        (0083) 
                                        (0084) 
                                        (0085)     RAM_EPILOGUE RAM_USE_CLASS_4
05FD: 7F       RET                      (0086)     ret
                                        (0087) 
                                        (0088) ;---------------------------------------------------------------------------
                                        (0089) ; Load Configuration rtc
                                        (0090) ;
                                        (0091) ;    Load configuration registers for rtc.
                                        (0092) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0093) ;
                                        (0094) ;       INPUTS: None.
                                        (0095) ;      RETURNS: Nothing.
                                        (0096) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0097) ;               modified as may the Page Pointer registers!
                                        (0098) ;               In the large memory model currently only the page
                                        (0099) ;               pointer registers listed below are modified.  This does
                                        (0100) ;               not guarantee that in future implementations of this
                                        (0101) ;               function other page pointer registers will not be
                                        (0102) ;               modified.
                                        (0103) ;          
                                        (0104) ;               Page Pointer Registers Modified: 
                                        (0105) ;               CUR_PP
                                        (0106) ;
                                        (0107) _LoadConfig_rtc:
                                        (0108)  LoadConfig_rtc:
                                        (0109)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0110) 
05FE: 10       PUSH  X                  (0111) 	push	x
05FF: 70 EF    AND   F,0xEF             
                                        (0112)     M8C_SetBank0                    ; Force bank 0
0601: 50 00    MOV   A,0x0              (0113)     mov     a, 0                    ; Specify bank 0
0603: 67       ASR   A                  (0114)     asr     a                       ; Store in carry flag
                                        (0115)                                     ; Load bank 0 table:
0604: 50 02    MOV   A,0x2              (0116)     mov     A, >LoadConfigTBL_rtc_Bank0
0606: 57 A6    MOV   X,0xA6             (0117)     mov     X, <LoadConfigTBL_rtc_Bank0
0608: 7C 06 19 LCALL 0x0619             (0118)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0119) 
060B: 50 01    MOV   A,0x1              (0120)     mov     a, 1                    ; Specify bank 1
060D: 67       ASR   A                  (0121)     asr     a                       ; Store in carry flag
                                        (0122)                                     ; Load bank 1 table:
060E: 50 03    MOV   A,0x3              (0123)     mov     A, >LoadConfigTBL_rtc_Bank1
0610: 57 1D    MOV   X,0x1D             (0124)     mov     X, <LoadConfigTBL_rtc_Bank1
0612: 7C 06 19 LCALL 0x0619             (0125)     lcall   LoadConfig              ; Load the bank 1 values
0615: 70 EF    AND   F,0xEF             
                                        (0126) 
                                        (0127)     M8C_SetBank0                    ; Force return to bank 0
0617: 20       POP   X                  (0128) 	pop		x
                                        (0129) 
                                        (0130)     RAM_EPILOGUE RAM_USE_CLASS_4
0618: 7F       RET                      (0131)     ret
                                        (0132) 
                                        (0133) 
                                        (0134) 
                                        (0135) 
                                        (0136) ;---------------------------------------------------------------------------
                                        (0137) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0138) ;              pairs. Terminate on address=0xFF.
                                        (0139) ;
                                        (0140) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0141) ;           Flag Register Carry bit encodes the Register Bank
                                        (0142) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0143) ;
                                        (0144) ;  RETURNS: nothing.
                                        (0145) ;
                                        (0146) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0147) ;                X-3 Temporary store for register address
                                        (0148) ;                X-2 LSB of config table address
                                        (0149) ;                X-1 MSB of config table address
                                        (0150) ;
                                        (0151) LoadConfig:
                                        (0152)     RAM_PROLOGUE RAM_USE_CLASS_2
0619: 38 02    ADD   SP,0x2             (0153)     add     SP, 2                   ; Set up local vars
061B: 10       PUSH  X                  (0154)     push    X                       ; Save config table address on stack
061C: 08       PUSH  A                  (0155)     push    A
061D: 4F       MOV   X,SP               (0156)     mov     X, SP
061E: 56 FC 00 MOV   [X-4],0x0          (0157)     mov     [X-4], 0                ; Set default Destination to Bank 0
0621: D0 04    JNC   0x0626             (0158)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0623: 56 FC 01 MOV   [X-4],0x1          (0159)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0160) .BankSelectSaved:
0626: 18       POP   A                  (0161)     pop     A
0627: 20       POP   X                  (0162)     pop     X
0628: 70 EF    AND   F,0xEF             
062A: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0163) 
                                        (0164) LoadConfigLp:
                                        (0165)     M8C_SetBank0                    ; Switch to bank 0
                                        (0166)     M8C_ClearWDT                    ; Clear the watchdog for long inits
062D: 10       PUSH  X                  (0167)     push    X                       ; Preserve the config table address
062E: 08       PUSH  A                  (0168)     push    A
062F: 28       ROMX                     (0169)     romx                            ; Load register address from table
0630: 39 FF    CMP   A,0xFF             (0170)     cmp     A, END_CONFIG_TABLE     ; End of table?
0632: A0 1F    JZ    0x0652             (0171)     jz      EndLoadConfig           ;   Yes, go wrap it up
0634: 4F       MOV   X,SP               (0172)     mov     X, SP                   ;
0635: 48 FC 01 TST   [X-4],0x1          (0173)     tst     [X-4], 1                ; Loading IO Bank 1?
0638: A0 03    JZ    0x063C             (0174)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
063A: 71 10    OR    F,0x10             
                                        (0175)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0176) .IOBankNowSet:
063C: 54 FD    MOV   [X-3],A            (0177)     mov     [X-3], A                ; Stash the register address
063E: 18       POP   A                  (0178)     pop     A                       ; Retrieve the table address
063F: 20       POP   X                  (0179)     pop     X
0640: 75       INC   X                  (0180)     inc     X                       ; Advance to the data byte
0641: 09 00    ADC   A,0x0              (0181)     adc     A, 0
0643: 10       PUSH  X                  (0182)     push    X                       ; Save the config table address again
0644: 08       PUSH  A                  (0183)     push    A
0645: 28       ROMX                     (0184)     romx                            ; load config data from the table
0646: 4F       MOV   X,SP               (0185)     mov     X, SP                   ; retrieve the register address
0647: 59 FD    MOV   X,[X-3]            (0186)     mov     X, [X-3]
0649: 61 00    MOV   REG[X+0x0],A       (0187)     mov     reg[X], A               ; Configure the register
064B: 18       POP   A                  (0188)     pop     A                       ; retrieve the table address
064C: 20       POP   X                  (0189)     pop     X
064D: 75       INC   X                  (0190)     inc     X                       ; advance to next table entry
064E: 09 00    ADC   A,0x0              (0191)     adc     A, 0
0650: 8F D7    JMP   0x0628             (0192)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0193) EndLoadConfig:
0652: 38 FC    ADD   SP,0xFC            (0194)     add     SP, -4
0654: 70 3F    AND   F,0x3F             
0656: 71 C0    OR    F,0xC0             
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_2
0658: 7F       RET                      (0196)     ret
                                        (0197) 
                                        (0198) AREA InterruptRAM(ram, rel)
                                        (0199) 
                                        (0200) NO_SHADOW:
                                        (0201) _NO_SHADOW:
                                        (0202) ; write only register shadows
                                        (0203) _Port_0_Data_SHADE:
                                        (0204) Port_0_Data_SHADE:	BLK	1
                                        (0205) _Port_2_Data_SHADE:
                                        (0206) Port_2_Data_SHADE:	BLK	1
                                        (0207) _Port_0_DriveMode_0_SHADE:
                                        (0208) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0209) _Port_0_DriveMode_1_SHADE:
                                        (0210) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0211) _Port_0_DriveMode_2_SHADE:
                                        (0212) Port_0_DriveMode_2_SHADE:	BLK	1
                                        (0213) _Port_2_DriveMode_0_SHADE:
                                        (0214) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0215) _Port_2_DriveMode_1_SHADE:
                                        (0216) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0217) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0659: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
065A: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
065B: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
065E: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0661: 7F       RET                      (0182)    ret
0662: 41 E1 FB AND   REG[0xE1],0xFB     
0665: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0668: 7F       RET                      (0214)    ret
0669: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
066B: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
066D: A0 07    JZ    0x0675             (0249)    jz    .SetModeRegEmpty
066F: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0672: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0674: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0675: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0678: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
067A: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
067B: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
067D: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
067F: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0681: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0682: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0685: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0688: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0689: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
068B: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
068C: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
068E: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
068F: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0691: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0692: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0694: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0695: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0697: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
0699: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
069B: A0 06    JZ    0x06A2             (0492)    jz   .SetTxCmpMode
                                        (0493) 
069D: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
06A0: 80 04    JMP   0x06A5             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
06A2: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
06A5: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
06A7: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
06A8: 08       PUSH  A                  (0536)    push A
06A9: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
06AB: A0 06    JZ    0x06B2             (0538)    jz   .DisRxInt
06AD: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
06B0: 80 04    JMP   0x06B5             (0541)    jmp  .CheckTxInt
06B2: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
06B5: 18       POP   A                  (0547)    pop  A
06B6: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
06B8: A0 06    JZ    0x06BF             (0549)    jz   .DisTxInt
06BA: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
06BD: 80 04    JMP   0x06C2             (0552)    jmp  .End_IntCntl
06BF: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
06C2: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
06D3: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
06D4: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
06D5: 67       ASR   A                  (0603)    asr   A
06D6: 67       ASR   A                  (0604)    asr   A
06D7: 67       ASR   A                  (0605)    asr   A
06D8: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
06DA: FF E7    INDEX 0x06C3             (0607)    index UART_HEX_STR                  ; Get Hex value
06DC: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
06DE: 18       POP   A                  (0609)    pop   A                             ; Restore value
06DF: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
06E1: FF E0    INDEX 0x06C3             (0611)    index UART_HEX_STR                  ; Get Hex value
06E3: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
06E5: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
06E6: 4B       SWAP  A,X                (0645)    swap  A,X
06E7: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
06E9: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
06EA: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
06EC: 7F       RET                      (0650)    ret
06ED: 49 2B 10 TST   REG[0x2B],0x10     
06F0: AF FC    JZ    _UART_PutChar      
06F2: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
06F4: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
06F5: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
06F8: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
06FA: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
06FC: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
06FD: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
06FF: 08       PUSH  A                  (0756)    push A
0700: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0702: B0 04    JNZ   0x0707             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0704: 18       POP   A                  (0759)    pop  A
0705: 80 0B    JMP   0x0711             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0707: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0709: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
070A: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
070B: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
070D: B0 03    JNZ   0x0711             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
070F: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0710: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0711: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0713: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0714: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0716: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0718: 08       PUSH  A                  (0819)    push A
0719: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
071B: B0 07    JNZ   0x0723             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
071D: 18       POP   A                  (0822)    pop  A
071E: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0720: 4B       SWAP  A,X                (0824)    swap A,X
0721: 80 07    JMP   0x0729             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0723: 18       POP   A                  (0828)    pop  A
0724: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0726: 4B       SWAP  A,X                (0830)    swap A,X
0727: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0729: 7F       RET                      (0836)    ret
072A: 70 BF    AND   F,0xBF             
072C: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
072E: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0730: A0 06    JZ    0x0737             (0872)    jz    End_PutString                           ; Check for end of string
0732: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0734: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0735: 8F F8    JMP   0x072E             (0875)    jmp   .PutStringLoop                          ; Get next character
0737: 70 3F    AND   F,0x3F             
0739: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
073B: 7F       RET                      (0879)    ret
073C: 70 BF    AND   F,0xBF             
073E: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0741: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0742: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0744: A0 1A    JZ    0x075F             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0746: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0748: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
074A: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
074C: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
074E: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0750: 49 2B 10 TST   REG[0x2B],0x10     
0753: AF FC    JZ    0x0750             
0755: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0757: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0758: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
075B: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
075D: 8F E4    JMP   0x0742             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
075F: 70 3F    AND   F,0x3F             
0761: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0763: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0764: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0765: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0768: B0 06    JNZ   0x076F             (0980)    jnz   .CW_WRITEIT
076A: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
076D: A0 1D    JZ    0x078B             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
076F: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0770: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0772: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0774: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0775: 49 2B 10 TST   REG[0x2B],0x10     
0778: AF FC    JZ    0x0775             
077A: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
077C: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
077D: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0780: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0783: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0786: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0789: 8F DB    JMP   0x0765             (0995)    jmp   .CW_Loop
078B: 70 3F    AND   F,0x3F             
078D: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
078F: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0790: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0791: 10       PUSH  X                  (1030)    push  X
0792: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0793: A0 0B    JZ    0x079F             (1032)    jz    .End_CPutString
0795: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0797: 20       POP   X                  (1034)    pop   X
0798: 18       POP   A                  (1035)    pop   A
0799: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
079A: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
079C: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
079D: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
079F: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
07A1: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
07A2: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
07A4: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
07A6: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
07A8: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
07AA: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\tempbufint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TempBufINT.asm
                                        (0004) ;;   Version: 1.3, Updated on 2013/5/19 at 10:43:26
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigBuf Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) 
                                        (0016) ;-----------------------------------------------
                                        (0017) ;  Global Symbols
                                        (0018) ;-----------------------------------------------
                                        (0019) export  _TempBuf_ISR
                                        (0020) 
                                        (0021) 
                                        (0022) AREA InterruptRAM (RAM,REL,CON)
                                        (0023) 
                                        (0024) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0025) ;---------------------------------------------------
                                        (0026) ; Insert your custom declarations below this banner
                                        (0027) ;---------------------------------------------------
                                        (0028) 
                                        (0029) ;------------------------
                                        (0030) ; Includes
                                        (0031) ;------------------------
                                        (0032) 
                                        (0033) 	
                                        (0034) ;------------------------
                                        (0035) ;  Constant Definitions
                                        (0036) ;------------------------
                                        (0037) 
                                        (0038) 
                                        (0039) ;------------------------
                                        (0040) ; Variable Allocation
                                        (0041) ;------------------------
                                        (0042) 
                                        (0043) 
                                        (0044) ;---------------------------------------------------
                                        (0045) ; Insert your custom declarations above this banner
                                        (0046) ;---------------------------------------------------
                                        (0047) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: _TempBuf_ISR
                                        (0054) ;
                                        (0055) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0056) ;
                                        (0057) ;-----------------------------------------------------------------------------
                                        (0058) ;
                                        (0059) 
                                        (0060) _TempBuf_ISR:
                                        (0061) 
                                        (0062)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0063)    ;---------------------------------------------------
                                        (0064)    ; Insert your custom assembly code below this banner
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ;   NOTE: interrupt service routines must preserve
                                        (0067)    ;   the values of the A and X CPU registers.
                                        (0068)    
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
07AB: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file TempBufINT.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
07AC: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
07AE: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
07AF: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
07B0: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
07B2: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
07B4: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
07B6: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
07B8: 18       POP   A                  (0124)    pop  A
07B9: 70 3F    AND   F,0x3F             
07BB: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
07BD: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
07BE: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
07C0: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
07C1: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
07C2: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
07C4: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
07C6: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
07C9: B0 0E    JNZ   0x07D8             (0164)    jnz  .SETHIGHGAIN
07CB: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
07CE: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
07D0: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
07D2: 18       POP   A                  (0168)    pop  A
07D3: 70 3F    AND   F,0x3F             
07D5: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
07D7: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
07D8: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
07DB: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
07DD: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
07DF: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
07E2: 18       POP   A                  (0177)    pop  A
07E3: 70 3F    AND   F,0x3F             
07E5: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
07E7: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
07E8: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
07EB: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
07EC: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
07ED: 10       PUSH  X                  (0209)     push  X
07EE: 28       ROMX                     (0210)     romx                               ; Get character from ROM
07EF: B0 04    JNZ   0x07F4             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
07F1: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
07F2: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
07F3: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
07F4: 90 44    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
07F6: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
07F7: 18       POP   A                  (0220)     pop   A
07F8: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
07F9: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
07FB: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
07FC: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
080E: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
080F: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0810: 67       ASR   A                  (0262)     asr   A
0811: 67       ASR   A                  (0263)     asr   A
0812: 67       ASR   A                  (0264)     asr   A
0813: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
0815: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
0817: 90 21    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0819: 18       POP   A                  (0268)     pop   A                            ; Restore value
081A: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
081C: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
081E: 90 1A    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0820: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0821: 4B       SWAP  A,X                (0305)     swap  A,X
0822: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0824: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0825: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0827: 7F       RET                      (0310)     ret
0828: 70 BF    AND   F,0xBF             
082A: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
082C: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
082E: A0 06    JZ    0x0835             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0830: 90 08    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0832: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0833: 8F F8    JMP   0x082C             (0351)     jmp   .Loop_PrString               ; Go get next character
0835: 70 3F    AND   F,0x3F             
0837: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0839: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
083A: 90 65    CALL  0x08A1             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
083C: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
083D: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
083E: 67       ASR   A                  (0390)     asr   A
083F: 67       ASR   A                  (0391)     asr   A
0840: 67       ASR   A                  (0392)     asr   A
0841: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0843: 90 3B    CALL  0x0880             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0845: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0846: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0848: 40       NOP                      (0397)     nop
0849: 40       NOP                      (0398)     nop
084A: 40       NOP                      (0399)     nop
084B: 90 33    CALL  0x0880             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
084D: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
084E: 90 51    CALL  0x08A1             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0850: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0851: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0852: 67       ASR   A                  (0436)     asr   A
0853: 67       ASR   A                  (0437)     asr   A
0854: 67       ASR   A                  (0438)     asr   A
0855: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0857: 90 09    CALL  0x0862             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0859: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
085A: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
085C: 40       NOP                      (0443)     nop
085D: 40       NOP                      (0444)     nop
085E: 40       NOP                      (0445)     nop
085F: 90 01    CALL  0x0862             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0861: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0862: 08       PUSH  A                  (0477)     push  A
0863: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0866: 26 01 80 AND   [previousSecond|elapsedSeconds+1],0x80(0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0869: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0480)     mov   A,[Port_2_Data_SHADE]
086B: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
086D: 18       POP   A                  (0483)     pop   A
086E: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0870: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0872: 2A 01    OR    A,[previousSecond|elapsedSeconds+1](0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0874: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0876: 53 01    MOV   [previousSecond|elapsedSeconds+1],A(0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0878: 40       NOP                      (0489)     nop
0879: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
087B: 53 01    MOV   [previousSecond|elapsedSeconds+1],A(0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
087D: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
087F: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0880: 08       PUSH  A                  (0523)     push  A
0881: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0884: 26 01 80 AND   [previousSecond|elapsedSeconds+1],0x80(0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0887: 2E 01 20 OR    [previousSecond|elapsedSeconds+1],0x20(0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
088A: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0527)     mov   A,[Port_2_Data_SHADE]
088C: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
088E: 18       POP   A                  (0530)     pop   A
088F: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0891: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0893: 2A 01    OR    A,[previousSecond|elapsedSeconds+1](0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0895: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0897: 53 01    MOV   [previousSecond|elapsedSeconds+1],A(0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0899: 40       NOP                      (0536)     NOP
089A: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
089C: 53 01    MOV   [previousSecond|elapsedSeconds+1],A(0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
089E: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
08A0: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
08A1: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
08A2: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
08A5: 26 01 80 AND   [previousSecond|elapsedSeconds+1],0x80(0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
08A8: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0574)     mov   A,[Port_2_Data_SHADE]
08AA: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
08AC: 26 05 F0 AND   [previousSecond|elapsedSeconds+5],0xF0(0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
08AF: 51 05    MOV   A,[previousSecond|elapsedSeconds+5](0578)     mov   A,[Port_2_DriveMode_0_SHADE]
08B1: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
08B3: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
08B5: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
08B7: 2E 01 40 OR    [previousSecond|elapsedSeconds+1],0x40(0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
08BA: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0584)     mov   A,[Port_2_Data_SHADE]
08BC: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
08BE: 40       NOP                      (0586)     NOP
                                        (0587) 
08BF: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
08C0: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
08C2: 2E 01 50 OR    [previousSecond|elapsedSeconds+1],0x50(0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
08C5: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0593)     mov   A,[Port_2_Data_SHADE]
08C7: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
08C9: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
08CA: 40       NOP                      (0597)     nop
08CB: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
08CD: 08       PUSH  A                  (0610)     push  A
08CE: 26 01 C0 AND   [previousSecond|elapsedSeconds+1],0xC0(0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
08D1: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0612)     mov   A,[Port_2_Data_SHADE]
08D3: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
08D5: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
08D6: 40       NOP                      (0616)     nop                                    ; fastest PSoC
08D7: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
08D8: 2E 01 50 OR    [previousSecond|elapsedSeconds+1],0x50(0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
08DB: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0620)     mov   A,[Port_2_Data_SHADE]
08DD: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
08DF: 40       NOP                      (0623)     nop
08E0: 40       NOP                      (0624)     nop
                                        (0625) 
08E1: 26 01 C0 AND   [previousSecond|elapsedSeconds+1],0xC0(0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
08E4: 51 01    MOV   A,[previousSecond|elapsedSeconds+1](0627)     mov   A,[Port_2_Data_SHADE]
08E6: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
08E8: 18       POP   A                  (0630)     pop   A
08E9: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
08EB: A0 04    JZ    0x08F0             (0633)     jz    .UNLOCK
08ED: 79       DEC   X                  (0634)     dec   X
08EE: BF D3    JNZ   0x08C2             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
08F0: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
08F1: 2E 05 7F OR    [previousSecond|elapsedSeconds+5],0x7F(0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
08F4: 51 05    MOV   A,[previousSecond|elapsedSeconds+5](0640)     mov   A,[Port_2_DriveMode_0_SHADE]
08F6: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
08F8: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
08FA: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
08FC: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
08FD: 7F       RET                      (0646)     ret
08FE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0901: 26 05 80 AND   [previousSecond|elapsedSeconds+5],0x80(0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0904: 2E 05 7F OR    [previousSecond|elapsedSeconds+5],0x7F(0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
0907: 26 06 80 AND   [previousSecond|elapsedSeconds+6],0x80(0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
090A: 51 05    MOV   A,[previousSecond|elapsedSeconds+5](0689)     mov   A,[Port_2_DriveMode_0_SHADE]
090C: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
090E: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0910: 51 06    MOV   A,[previousSecond|elapsedSeconds+6](0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0912: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0914: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
0916: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0918: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
091A: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
091C: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
091E: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0920: 9F 40    CALL  0x0862             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0922: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0924: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0926: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0928: 9F 38    CALL  0x0862             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
092A: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
092C: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
092E: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0930: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0932: 9F 2E    CALL  0x0862             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0934: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0936: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0938: 50 02    MOV   A,0x2              (0720)     mov   A,02h
093A: 9F 26    CALL  0x0862             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
093C: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
093E: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0940: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0942: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0944: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0946: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0948: 50 01    MOV   A,0x1              (0731)     mov   A,01h
094A: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
094C: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
094E: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0950: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0952: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0954: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0956: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0958: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
095A: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
095C: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
095E: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0960: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0962: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0964: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0966: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0968: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
096A: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
096C: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0971: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0973: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0974: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0976: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0977: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0979: 20       POP   X                  (0795)     pop   X
                                        (0796) 
097A: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
097C: 70 3F    AND   F,0x3F             
097E: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0980: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0981: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0983: 78       DEC   A                  (0828)     dec   A
0984: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0986: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
098F: 08       PUSH  A                  (0871)     push  A
0990: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0992: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0994: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0996: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0998: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
099A: D0 06    JNC   0x09A1             (0877)     jnc   .Delay50u_End
099C: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
099E: 78       DEC   A                  (0880)     dec   A                              ; [4]
099F: BF FE    JNZ   0x099E             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
09A1: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
09A2: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
09A3: 4F       MOV   X,SP               (1015)     mov   X, SP
09A4: 10       PUSH  X                  (1016)     push  X
09A5: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
09A7: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
09A9: 70 3F    AND   F,0x3F             
09AB: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
09AD: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
09AF: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
09B0: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
09B3: B0 05    JNZ   0x09B9             (1026)     jnz   .LCD_CHECK1
09B5: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
09B7: 80 11    JMP   0x09C9             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
09B9: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
09BC: D0 07    JNC   0x09C4             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
09BE: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
09C0: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
09C2: 80 06    JMP   0x09C9             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
09C4: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
09C6: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
09C9: 9E 6F    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
09CB: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
09CD: BF E2    JNZ   0x09B0             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
09CF: 70 3F    AND   F,0x3F             
09D1: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
09D3: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
09D4: 4F       MOV   X,SP               (1168)     mov   X, SP
09D5: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
09D7: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
09D9: 08       PUSH  A                  (1172)     push  A
09DA: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
09DC: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
09DE: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
09E0: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
09E3: B0 05    JNZ   0x09E9             (1177)     jnz   .VBG_NZ_SEG
09E5: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
09E7: 80 13    JMP   0x09FB             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
09E9: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
09EC: D0 09    JNC   0x09F6             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
09EE: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
09F0: 78       DEC   A                  (1185)     dec   A
09F1: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
09F4: 80 06    JMP   0x09FB             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
09F6: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
09F9: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
09FB: 9E 3D    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
09FD: 18       POP   A                  (1195)     pop   A
09FE: 78       DEC   A                  (1196)     dec   A
09FF: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0A01: BF D7    JNZ   0x09D9             (1198)     jnz   .VBG_LOOP
0A03: 70 3F    AND   F,0x3F             
0A05: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0A07: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0A08: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0A09: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0A0A: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0A0B: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0A0D: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0A0F: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0A12: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0A15: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0A17: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0A19: D0 05    JNC   0x0A1F             (1251)     jnc   .VBG_SOLID
0A1B: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0A1D: 80 03    JMP   0x0A21             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0A1F: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0A21: 9E 17    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
0A23: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0A25: BF EF    JNZ   0x0A15             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0A27: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0A29: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0A2C: BF E5    JNZ   0x0A12             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0A2E: 18       POP   A                  (1264)     pop  A
0A2F: 18       POP   A                  (1265)     pop  A
0A30: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0A32: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
0A34: 70 3F    AND   F,0x3F             
0A36: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0A38: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0A47: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0A48: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0A4A: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0A4C: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0A4E: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0A50: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0A53: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0A56: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0A58: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0A5B: B0 05    JNZ   0x0A61             (1332)     jnz   .BG_OTHER
0A5D: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0A5F: 80 03    JMP   0x0A63             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0A61: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0A63: 9D D5    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(1338)     call  LCD_WriteData
0A65: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0A67: BF EE    JNZ   0x0A56             (1340)     jnz   .BG_Loop2
0A69: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0A6B: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0A6E: BF E4    JNZ   0x0A53             (1343)     jnz   .BG_Loop1
                                        (1344) 
0A70: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0A72: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0A74: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
0A76: 70 3F    AND   F,0x3F             
0A78: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0A7A: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0A7B: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2Cm.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2Cm.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2Cm_Start
                                        (0031) export  _I2Cm_Start
                                        (0032) export   I2Cm_Stop
                                        (0033) export  _I2Cm_Stop
                                        (0034) export   I2Cm_fSendRepeatStart
                                        (0035) export  _I2Cm_fSendRepeatStart
                                        (0036) export   I2Cm_fSendStart
                                        (0037) export  _I2Cm_fSendStart
                                        (0038) export   I2Cm_SendStop
                                        (0039) export  _I2Cm_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2Cm_fReadBytes
                                        (0042) export  _I2Cm_bWriteBytes
                                        (0043) export  _I2Cm_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2Cm_fWrite
                                        (0046) export  _I2Cm_fWrite
                                        (0047) 
                                        (0048) export   I2Cm_bRead
                                        (0049) export  _I2Cm_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2Cm_fReadBytes
                                        (0054) export   I2Cm_bWriteBytes
                                        (0055) export   I2Cm_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2Cm_bStatus
                                        (0064) export _I2Cm_bStatus
                                        (0065) export  I2Cm_bData
                                        (0066) export _I2Cm_bData
                                        (0067) export  I2Cm_bAddr
                                        (0068) export _I2Cm_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area rtc_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2Cm_bStatus:
                                        (0076)  I2Cm_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2Cm_bData:
                                        (0078)  I2Cm_bData:                           blk   1  ; Data transfered
                                        (0079) _I2Cm_bXferCnt:
                                        (0080)  I2Cm_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2Cm_bAddr:                                     ; Bytes
                                        (0082)  I2Cm_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2Cm_bit_count:
                                        (0084)  I2Cm_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2Cm_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2Cm_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2Cm_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2Cm_Start:
                                        (0121) _I2Cm_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_0_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
0A7E: 2E 03 03 OR    [previousSecond|elapsedSeconds+3],0x3(0125)     or   [Port_0_DriveMode_1_SHADE],I2Cm_SDA_pin|I2Cm_SCL_pin
0A81: 26 02 FC AND   [previousSecond|elapsedSeconds+2],0xFC(0126)     and  [Port_0_DriveMode_0_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
                                        (0127) 
                                        (0128) IF(I2Cm_DriveMode2)            
0A84: 26 04 FC AND   [previousSecond|elapsedSeconds+4],0xFC(0129)     and  [Port_0_DriveMode_2_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0A87: 51 04    MOV   A,[previousSecond|elapsedSeconds+4](0130)     mov  A,[Port_0_DriveMode_2_SHADE]
0A89: 60 03    MOV   REG[0x3],A         (0131)     mov  reg[I2Cm_I2CPRTDM2],A
0A8B: 71 10    OR    F,0x10             
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 	M8C_SetBank1
0A8D: 51 03    MOV   A,[previousSecond|elapsedSeconds+3](0135)     mov  A,[Port_0_DriveMode_1_SHADE]
0A8F: 60 01    MOV   REG[0x1],A         (0136)     mov  reg[I2Cm_I2CPRTDM1],A
0A91: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0137)     mov  A,[Port_0_DriveMode_0_SHADE]
0A93: 60 00    MOV   REG[0x0],A         (0138)     mov  reg[I2Cm_I2CPRTDM0],A
0A95: 70 EF    AND   F,0xEF             
                                        (0139)     M8C_SetBank0
                                        (0140)                                                      ; Set both pins, low so that only the port
                                        (0141)                                                      ; mode has to be changed from a 0 to a 1
0A97: 26 00 FC AND   [previousSecond|elapsedSeconds],0xFC(0142)     and  [Port_0_Data_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0A9A: 51 00    MOV   A,[previousSecond|elapsedSeconds](0143)     mov  A,[Port_0_Data_SHADE]
0A9C: 60 00    MOV   REG[0x0],A         (0144)     mov  reg[I2Cm_I2CPRTDR],A
                                        (0145)     RAM_EPILOGUE RAM_USE_CLASS_4
0A9E: 7F       RET                      (0146)     ret
                                        (0147) .ENDSECTION
                                        (0148) 
                                        (0149) .SECTION
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;  FUNCTION NAME: I2Cm_Stop
                                        (0152) ;
                                        (0153) ;  DESCRIPTION:
                                        (0154) ;    This function performs no operation and is used for future
                                        (0155) ;    module compatibility.
                                        (0156) ;
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;
                                        (0159) ;  ARGUMENTS: none
                                        (0160) ;
                                        (0161) ;  RETURNS: none
                                        (0162) ;
                                        (0163) ;  SIDE EFFECTS:
                                        (0164) ;    The A and X registers may be modified by this or future implementations
                                        (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0168) ;    functions.
                                        (0169) ;          
                                        (0170)  I2Cm_Stop:
                                        (0171) _I2Cm_Stop:
                                        (0172)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0173)     RAM_EPILOGUE RAM_USE_CLASS_1
0A9F: 7F       RET                      (0174)     ret
0AA0: 70 BF    AND   F,0xBF             
0AA2: 62 D3 07 MOV   REG[0xD3],0x7      
0AA5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;
                                        (0185) ;  ARGUMENTS:
                                        (0186) ;  [SP-3]=> Address of slave
                                        (0187) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0188) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0189) ;  [SP-6]=> Count of bytes to read.
                                        (0190) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0191) ;           to determine if:
                                        (0192) ;             0x01 => Use RepeatStart instead of Start
                                        (0193) ;             0x02 => Don't send Stop
                                        (0194) ;
                                        (0195) ;  RETURNS:
                                        (0196) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0197) ;
                                        (0198) ;  SIDE EFFECTS:
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;          
                                        (0205) ;    Currently only the page pointer registers listed below are modified: 
                                        (0206) ;          CUR_PP
                                        (0207) ;		   IDX_PP
                                        (0208) ;
                                        (0209) SlaveAdr:     equ  -3
                                        (0210) RxArrayLSB:   equ  -4
                                        (0211) RxArrayMSB:   equ  -5
                                        (0212) RxByteCount:  equ  -6
                                        (0213) RxMode:       equ  -7
                                        (0214) 
                                        (0215) _I2Cm_fReadBytes:
                                        (0216)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0217)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0218)     RAM_SETPAGE_IDX2STK
                                        (0219)     RAM_SETPAGE_CUR >I2Cm_bStatus
0AA8: 4F       MOV   X,SP               (0220)     mov   X, SP
                                        (0221)     
0AA9: 52 FD    MOV   A,[X-3]            (0222)     mov   A, [X+SlaveAdr]
0AAB: 64       ASL   A                  (0223)     asl   A                                                ; Shift address to the left to make
                                        (0224)                                                            ; a complete byte with the R/W bit.
0AAC: 29 01    OR    A,0x1              (0225)     or    A,0x01                                           ; OR the address with the Read bit.
0AAE: 55 9D 00 MOV   [menu+4],0x0       (0226)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
0AB1: 48 F9 01 TST   [X-7],0x1          (0227)     tst   [x+RxMode],I2Cm_RepStart
0AB4: B0 05    JNZ   0x0ABA             (0228)     jnz   DoRestartRx
0AB6: 91 3B    CALL  0x0BF3             (0229)     call  I2C_DoStart                                      ; Send a start and address.
0AB8: 80 03    JMP   0x0ABC             (0230)     jmp   CheckRxAck
                                        (0231) DoRestartRx:
0ABA: 91 01    CALL  0x0BBD             (0232)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
0ABC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0233) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0234)     RAM_SETPAGE_CUR >I2Cm_bStatus
0ABF: 47 9D 01 TST   [menu+4],0x1       (0235)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0AC2: A0 2A    JZ    0x0AED             (0236)     jz    End_RD_Loop
                                        (0237)                                                            ; Send ACK until last byte
0AC4: 2E 9D 10 OR    [menu+4],0x10      (0238)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0239) RD_Loop:                                                   ; Loop through bytes
0AC7: 10       PUSH  X                  (0240)     push  x                                                ; Save X for later
0AC8: 7B FA    DEC   [X-6]              (0241)     dec   [x+RxByteCount]                                  ; Decrement data counter
0ACA: B0 04    JNZ   0x0ACF             (0242)     jnz   I2C_READ
0ACC: 26 9D EF AND   [menu+4],0xEF      (0243)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0244) I2C_READ:
0ACF: 91 F7    CALL  0x0CC8             (0245)     call  I2Cm_read                                        ; Read a byte
0AD1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0246)     RAM_SETPAGE_CUR >I2Cm_bStatus
0AD4: 20       POP   X                  (0247)     pop   x                                                ; Restore x
0AD5: 10       PUSH  X                  (0248)     push  x
0AD6: 52 FC    MOV   A,[X-4]            (0249)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
0AD8: 08       PUSH  A                  (0250)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0251) IF SYSTEM_LARGE_MEMORY_MODEL
0AD9: 52 FB    MOV   A,[X-5]            (0252)     mov   A,[x+RxArrayMSB]
0ADB: 60 D3    MOV   REG[0xD3],A        
                                        (0253)     RAM_SETPAGE_IDX A
                                        (0254) ENDIF
0ADD: 20       POP   X                  (0255)     pop   x                                                ; restores the index pointer pushed a few lines above
0ADE: 51 9E    MOV   A,[menu+5]         (0256)     mov   a,[I2Cm_bData]                                   ; Save data in data array
0AE0: 54 00    MOV   [X+0],A            (0257)     mov   [x],a                                            ; Put read data in array
0AE2: 20       POP   X                  (0258)     pop   x                                                ; Restore the original pointer (for the subrtn params)
0AE3: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0259)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
0AE6: 77 FC    INC   [X-4]              (0260)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
0AE8: 48 FA FF TST   [X-6],0xFF         (0261)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
0AEB: BF DB    JNZ   0x0AC7             (0262)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0263) End_RD_Loop:                                               ; Endloop
0AED: 48 F9 02 TST   [X-7],0x2          (0264)     tst   [x+RxMode],I2Cm_NoStop
0AF0: B0 03    JNZ   0x0AF4             (0265)     jnz   SkipRxStop
0AF2: 92 6F    CALL  _I2Cm_SendStop     (0266)     call  I2Cm_SendStop
0AF4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0267) SkipRxStop:
                                        (0268)     RAM_SETPAGE_CUR >I2Cm_bStatus
0AF7: 50 00    MOV   A,0x0              (0269)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0AF9: 47 9D 01 TST   [menu+4],0x1       (0270)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
0AFC: A0 03    JZ    0x0B00             (0271)     jz    End_ReadBytes
0AFE: 50 01    MOV   A,0x1              (0272)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
0B00: 70 3F    AND   F,0x3F             
0B02: 71 C0    OR    F,0xC0             
                                        (0273) End_ReadBytes:
                                        (0274)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0275)     RAM_EPILOGUE RAM_USE_CLASS_4
0B04: 7F       RET                      (0276)     ret
0B05: 70 BF    AND   F,0xBF             
0B07: 62 D3 07 MOV   REG[0xD3],0x7      
0B0A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      A => Address of slave
                                        (0290) ;      X => Pointer to other arguments.
                                        (0291) ;    [x] => LSB of Array address to put data in.
                                        (0292) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0293) ;  [X-2] => Count of bytes to read.
                                        (0294) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0295) ;           to determine if:
                                        (0296) ;             0x01 => Use RepeatStart instead of Start
                                        (0297) ;             0x02 => Don't send Stop
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309) RxArray_X:      equ   0
                                        (0310) RxByteCount_X:  equ  -2
                                        (0311) RxMode_X:       equ  -3
                                        (0312) 
                                        (0313)  I2Cm_fReadBytes:		                 
                                        (0314)     asl   A                                            ; Shift address to the left to make
                                        (0315)                                                        ; a complete byte with the R/W bit.
                                        (0316)     or    A,0x01                                       ; OR the address with the Read bit.
                                        (0317)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
                                        (0318)     tst   [x+RxMode_X],I2Cm_RepStart
                                        (0319)     jnz   DoRestartRxSmm
                                        (0320)     call  I2C_DoStart                                      ; Send a start and address.
                                        (0321)     jmp   CheckRxAckSmm
                                        (0322) DoRestartRxSmm:
                                        (0323)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0324) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (0325)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0326)     jz    End_RD_LoopSmm
                                        (0327)                                                            ; Send ACK until last byte
                                        (0328)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0329) RD_LoopSmm:                                                   ; Loop through bytes
                                        (0330)     push  x                                                ; Save X for later
                                        (0331)     dec   [x+RxByteCount_X]                                ; Decrement data counter
                                        (0332)     jnz   I2C_READSmm
                                        (0333)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0334) I2C_READSmm:
                                        (0335)     call  I2Cm_read                                        ; Read a byte
                                        (0336)     pop   x                                                ; Restore x
                                        (0337)     push  x                                                ; Store x
                                        (0338)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
                                        (0339)     mov   a,[I2Cm_bData]                                   ; Save data in data array
                                        (0340)     mov   [x+RxArray_X],a                                  ; Put read data in array
                                        (0341)     pop   x                                                ; Restore the original pointer
                                        (0342)     inc   [x+RxArray_X]                                    ; Advance data pointer
                                        (0343)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
                                        (0344)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0345) End_RD_LoopSmm:                                            ; Endloop
                                        (0346)     tst   [x+RxMode_X],I2Cm_NoStop
                                        (0347)     jnz   SkipRxStopSmm
                                        (0348)     call  I2Cm_SendStop
                                        (0349) SkipRxStopSmm:
                                        (0350)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
                                        (0351)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
                                        (0352)     jz    End_ReadBytesSmm
                                        (0353)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0354) End_ReadBytesSmm:
                                        (0355)     ret
                                        (0356) .ENDSECTION
                                        (0357) ENDIF
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    Write multiple data bits to slave device.
                                        (0365) ;
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;
                                        (0368) ;  ARGUMENTS:
                                        (0369) ; [SP-3] => Address of slave
                                        (0370) ; [SP-4] => LSB of Array address to put data in.
                                        (0371) ; [SP-5] => MSB of Array address to put data in.
                                        (0372) ; [SP-6] => Count of bytes to write.
                                        (0373) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0374) ;           to determine if:
                                        (0375) ;              0x01 => Use RePeatStart instead of Start
                                        (0376) ;              0x02 => Don't send Stop
                                        (0377) ;
                                        (0378) ;
                                        (0379) ;  RETURNS:
                                        (0380) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0381) ;
                                        (0382) ;  SIDE EFFECTS:
                                        (0383) ;    The A and X registers may be modified by this or future implementations
                                        (0384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0387) ;    functions.
                                        (0388) ;          
                                        (0389) ;    Currently only the page pointer registers listed below are modified: 
                                        (0390) ;          CUR_PP
                                        (0391) ;		   IDX_PP
                                        (0392) ;
                                        (0393) TxSlaveAdr:   equ  -3
                                        (0394) TxArrayLSB:   equ  -4
                                        (0395) TxArrayMSB:   equ  -5
                                        (0396) TxByteCount:  equ  -6
                                        (0397) TxMode:       equ  -7
                                        (0398) 
                                        (0399) _I2Cm_bWriteBytes:
                                        (0400)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0401)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0402)     RAM_SETPAGE_IDX2STK
                                        (0403)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B0D: 4F       MOV   X,SP               (0404)     mov   X, SP
                                        (0405)     
0B0E: 52 FD    MOV   A,[X-3]            (0406)     mov   A,[x+TxSlaveAdr]
0B10: 64       ASL   A                  (0407)     asl   A                                           ; Shift address to the left to make
                                        (0408)                                                       ; a complete byte with the R/W bit.
                                        (0409)                                                       ; The ASL takes care of clearing bit 0.
0B11: 55 9D 00 MOV   [menu+4],0x0       (0410)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0411) 
                                        (0412) 
0B14: 48 F9 01 TST   [X-7],0x1          (0413)     tst   [x+TxMode],I2Cm_RepStart
0B17: B0 05    JNZ   0x0B1D             (0414)     jnz   DoRestartTx
0B19: 90 D8    CALL  0x0BF3             (0415)     call  I2C_DoStart                                 ; Send a start and address.
0B1B: 80 03    JMP   0x0B1F             (0416)     jmp   DoTxAck
                                        (0417) DoRestartTx:
0B1D: 90 9E    CALL  0x0BBD             (0418)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0B1F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0419) DoTxAck:
                                        (0420)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B22: 55 9F 00 MOV   [menu+6],0x0       (0421)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
0B25: 47 9D 01 TST   [menu+4],0x1       (0422)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
0B28: A0 27    JZ    0x0B50             (0423)     jz    End_WR_Loop
0B2A: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0424) WR_Loop:                                              ; Loop through bytes
                                        (0425)     RAM_SETPAGE_IDX2STK
0B2D: 10       PUSH  X                  (0426)     push  x                                           ; Save X for later
0B2E: 52 FC    MOV   A,[X-4]            (0427)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
0B30: 08       PUSH  A                  (0428) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0429) IF SYSTEM_LARGE_MEMORY_MODEL
0B31: 52 FB    MOV   A,[X-5]            (0430)     mov   a,[x+TxArrayMSB]
0B33: 60 D3    MOV   REG[0xD3],A        
                                        (0431)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0432) ENDIF
0B35: 20       POP   X                  (0433)     pop   x                                           ; this recovers the address previously stoed on teh stack
0B36: 52 00    MOV   A,[X+0]            (0434)     mov   a,[x]                                       ; Get data pointer to by X
0B38: 53 9E    MOV   [menu+5],A         (0435)     mov   [I2Cm_bData],a                              ; Save data in temp location
0B3A: 90 ED    CALL  0x0C29             (0436)     call  I2Cm_write                                  ; Write the data
0B3C: 62 D0 00 MOV   REG[0xD0],0x0      
0B3F: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0437) 	RAM_SETPAGE_CUR >I2Cm_bStatus
                                        (0438)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
0B42: 20       POP   X                  (0439)     pop   x
0B43: 47 9D 01 TST   [menu+4],0x1       (0440)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B46: A0 0E    JZ    0x0B55             (0441)     jz    DoWBstop                                    ; Stop transfer if NAKed
0B48: 76 9F    INC   [menu+6]           (0442)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0B4A: 77 FC    INC   [X-4]              (0443)     inc   [x+TxArrayLSB]                              ; Advance pointer
0B4C: 7B FA    DEC   [X-6]              (0444)     dec   [x+TxByteCount]                             ; Decrement byte counter
0B4E: BF DB    JNZ   0x0B2A             (0445)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0446) End_WR_Loop:                                          ; Endloop
0B50: 48 F9 02 TST   [X-7],0x2          (0447)     tst   [x+TxMode],I2Cm_NoStop
0B53: B0 03    JNZ   0x0B57             (0448)     jnz   SkipTxStop
                                        (0449) DoWBstop:
0B55: 92 0C    CALL  _I2Cm_SendStop     (0450)     call  I2Cm_SendStop
0B57: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0451) SkipTxStop:
                                        (0452) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0B5A: 51 9F    MOV   A,[menu+6]         (0453)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
0B5C: 70 3F    AND   F,0x3F             
0B5E: 71 C0    OR    F,0xC0             
                                        (0454) End_WriteBytes:
                                        (0455)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0456)     RAM_EPILOGUE RAM_USE_CLASS_4
0B60: 7F       RET                      (0457)     ret
0B61: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0458) .ENDSECTION
                                        (0459) 
                                        (0460) 
                                        (0461) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;    Write multiple data bits to slave device.
                                        (0468) ;
                                        (0469) ;-----------------------------------------------------------------------------
                                        (0470) ;
                                        (0471) ;  ARGUMENTS:
                                        (0472) ;     A => Address of slave
                                        (0473) ;     X => Pointer to other arguments.
                                        (0474) ;   [x] => LSB of Array address to put data in.
                                        (0475) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0476) ; [X-2] => Count of bytes to write.
                                        (0477) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0478) ;          to determine if:
                                        (0479) ;              0x01 => Use RePeatStart instead of Start
                                        (0480) ;              0x02 => Don't send Stop
                                        (0481) ;
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) TxArray_X:      equ   0
                                        (0494) TxByteCount_X:  equ  -2
                                        (0495) TxMode_X:       equ  -3
                                        (0496) 
                                        (0497)  I2Cm_bWriteBytes:						       
                                        (0498)     asl   A                                           ; Shift address to the left to make
                                        (0499)                                                       ; a complete byte with the R/W bit.
                                        (0500)                                                       ; The ASL takes care of clearing bit 0.
                                        (0501)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0502) 
                                        (0503) 
                                        (0504)     tst   [x+TxMode_X],I2Cm_RepStart
                                        (0505)     jnz   DoRestartTxSmm
                                        (0506)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0507)     jmp   DoTxAckSmm
                                        (0508) DoRestartTxSmm:
                                        (0509)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0510) DoTxAckSmm:
                                        (0511)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
                                        (0512)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
                                        (0513)     jz    End_WR_LoopSmm
                                        (0514) WR_LoopSmm:                                              ; Loop through bytes
                                        (0515)     push  x                                           ; Save X for later
                                        (0516)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
                                        (0517)     mov   a,[x]                                       ; Get data pointer to by X
                                        (0518)     mov   [I2Cm_bData],a                              ; Save data in temp location
                                        (0519)     call  I2Cm_write                                  ; Write the data
                                        (0520)     pop   x
                                        (0521)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0522)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
                                        (0523)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
                                        (0524)     inc   [x+TxArray_X]                                 ; Advance pointer
                                        (0525)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
                                        (0526)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0527) End_WR_LoopSmm:                                          ; Endloop
                                        (0528)     tst   [x+TxMode_X],I2Cm_NoStop
                                        (0529)     jnz   SkipTxStopSmm
                                        (0530) DoWBstopSmm:
                                        (0531)     call  I2Cm_SendStop
                                        (0532) SkipTxStopSmm:
                                        (0533)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0534) End_WriteBytesSmm:
                                        (0535)     ret
                                        (0536) .ENDSECTION
                                        (0537) ENDIF
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;    Write multiple data bits to slave device from ROM
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547) ;
                                        (0548) ;  ARGUMENTS:
                                        (0549) ;   [SP-3] => Address of slave
                                        (0550) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0551) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0552) ;   [SP-6] => Count of bytes to write.
                                        (0553) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0554) ;            to determine if:
                                        (0555) ;               0x01 => Use RepeatStart instead of Start
                                        (0556) ;               0x02 => Don't send Stop
                                        (0557) ;
                                        (0558) ;  RETURNS:
                                        (0559) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0560) ;
                                        (0561) ;  SIDE EFFECTS:
                                        (0562) ;    The A and X registers may be modified by this or future implementations
                                        (0563) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0564) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0565) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0566) ;    functions.
                                        (0567) ;          
                                        (0568) ;    Currently only the page pointer registers listed below are modified: 
                                        (0569) ;          CUR_PP
                                        (0570) ;
                                        (0571) TxCSlaveAdr:   equ  -3
                                        (0572) TxCArrayLSB:   equ  -4
                                        (0573) TxCArrayMSB:   equ  -5
                                        (0574) TxCByteCount:  equ  -6
                                        (0575) TxCMode:       equ  -7
                                        (0576) 
                                        (0577) _I2Cm_bWriteCBytes:
                                        (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0579)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0580)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B64: 4F       MOV   X,SP               (0581)     mov   X, SP
                                        (0582) 
0B65: 52 FD    MOV   A,[X-3]            (0583)     mov   A,[x+TxCSlaveAdr]
0B67: 64       ASL   A                  (0584)     asl   A                                           ; Shift address to the left to make
                                        (0585)                                                       ; a complete byte with the R/W bit.
                                        (0586)                                                       ; The ASL takes care of clearing bit 0.
0B68: 55 9D 00 MOV   [menu+4],0x0       (0587)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0588) 
                                        (0589) 
0B6B: 48 F9 01 TST   [X-7],0x1          (0590)     tst   [x+TxCMode],I2Cm_RepStart                   ; Check if a Start or RepeatStart
0B6E: B0 05    JNZ   0x0B74             (0591)     jnz   DoCRestartTx                                ; should executed.
0B70: 90 81    CALL  0x0BF3             (0592)     call  I2C_DoStart                                 ; Send a start and address.
0B72: 80 03    JMP   0x0B76             (0593)     jmp   DoCTxAck
                                        (0594) DoCRestartTx:
0B74: 90 47    CALL  0x0BBD             (0595)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0B76: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0596) 
                                        (0597) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0598) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0B79: 55 9F 00 MOV   [menu+6],0x0       (0599)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
0B7C: 47 9D 01 TST   [menu+4],0x1       (0600)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B7F: A0 20    JZ    0x0BA0             (0601)     jz    End_WRC_Loop
                                        (0602) WRC_Loop:                                             ; Loop through bytes
0B81: 10       PUSH  X                  (0603)     push  x                                           ; Save X for later
                                        (0604) 
0B82: 52 FB    MOV   A,[X-5]            (0605)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
0B84: 59 FC    MOV   X,[X-4]            (0606)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
0B86: 28       ROMX                     (0607)     romx                                              ; Put ROM Data in a
0B87: 53 9E    MOV   [menu+5],A         (0608)     mov   [I2Cm_bData],a                              ; Save data in temp location
0B89: 90 9E    CALL  0x0C29             (0609)     call  I2Cm_write                                  ; Write the data
0B8B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0610)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B8E: 20       POP   X                  (0611)     pop   x
0B8F: 47 9D 01 TST   [menu+4],0x1       (0612)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B92: A0 12    JZ    0x0BA5             (0613)     jz    DoWCBstop                                    ; Stop transfer if NAKed
0B94: 76 9F    INC   [menu+6]           (0614)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0B96: 77 FC    INC   [X-4]              (0615)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
0B98: D0 03    JNC   0x0B9C             (0616)     jnc   DecBCnt
0B9A: 77 FB    INC   [X-5]              (0617)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0618) 
                                        (0619) DecBCnt:
0B9C: 7B FA    DEC   [X-6]              (0620)     dec   [x+TxCByteCount]                            ; Decrement byte counter
0B9E: BF E2    JNZ   0x0B81             (0621)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0622) End_WRC_Loop:                                         ; Endloop
0BA0: 48 F9 02 TST   [X-7],0x2          (0623)     tst   [x+TxCMode],I2Cm_NoStop
0BA3: B0 03    JNZ   0x0BA7             (0624)     jnz   SkipTxCStop
                                        (0625) DoWCBstop:
0BA5: 91 BC    CALL  _I2Cm_SendStop     (0626)     call  I2Cm_SendStop
0BA7: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0627) SkipTxCStop:
                                        (0628)     RAM_SETPAGE_CUR >I2Cm_bStatus
0BAA: 51 9F    MOV   A,[menu+6]         (0629)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
0BAC: 70 3F    AND   F,0x3F             
0BAE: 71 C0    OR    F,0xC0             
                                        (0630) End_WriteCBytes:
                                        (0631)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
0BB0: 7F       RET                      (0633)     ret
                                        (0634) .ENDSECTION
                                        (0635) 
                                        (0636) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0637) .SECTION
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0640) ;
                                        (0641) ;  DESCRIPTION:
                                        (0642) ;    Write multiple data bits to slave device from ROM
                                        (0643) ;
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;      A => Address of slave
                                        (0648) ;      X => Pointer to other arguments.
                                        (0649) ;     [x] => LSB of ROM Array address to put data in.
                                        (0650) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0651) ;   [X-2] => Count of bytes to write.
                                        (0652) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0653) ;            to determine if:
                                        (0654) ;               0x01 => Use RepeatStart instead of Start
                                        (0655) ;               0x02 => Don't send Stop
                                        (0656) ;
                                        (0657) ;  RETURNS:
                                        (0658) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0659) ;
                                        (0660) ;  SIDE EFFECTS:
                                        (0661) ;    The A and X registers may be modified by this or future implementations
                                        (0662) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0663) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0664) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0665) ;    functions.
                                        (0666) ;          
                                        (0667) TxCArrayLSB_x:   equ   0
                                        (0668) TxCArrayMSB_x:   equ  -1
                                        (0669) TxCByteCount_x:  equ  -2
                                        (0670) TxCMode_x:       equ  -3
                                        (0671) 
                                        (0672)  I2Cm_bWriteCBytes:					        
                                        (0673)     asl   A                                           ; Shift address to the left to make
                                        (0674)                                                       ; a complete byte with the R/W bit.
                                        (0675)                                                       ; The ASL takes care of clearing bit 0.
                                        (0676)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0677) 
                                        (0678) 
                                        (0679)     tst   [x+TxCMode_x],I2Cm_RepStart                 ; Check if a Start or RepeatStart
                                        (0680)     jnz   DoCRestartTxSmm                                ; should executed.
                                        (0681)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0682)     jmp   DoCTxAckSmm
                                        (0683) DoCRestartTxSmm:
                                        (0684)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0685) 
                                        (0686) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
                                        (0687)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
                                        (0688)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0689)     jz    End_WRC_LoopSmm
                                        (0690) WRC_LoopSmm:                                             ; Loop through bytes
                                        (0691)     push  x                                           ; Save X for later
                                        (0692) 
                                        (0693)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
                                        (0694)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
                                        (0695)     romx                                              ; Put ROM Data in a
                                        (0696)     mov   [I2Cm_bData],a                              ; Save data in temp location
                                        (0697)     call  I2Cm_write                                  ; Write the data
                                        (0698)     pop   x
                                        (0699)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0700)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
                                        (0701)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
                                        (0702)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
                                        (0703)     jnc   DecBCntSmm
                                        (0704)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0705) 
                                        (0706) DecBCntSmm:
                                        (0707)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
                                        (0708)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0709) End_WRC_LoopSmm:                                         ; Endloop
                                        (0710)     tst   [x+TxCMode_x],I2Cm_NoStop
                                        (0711)     jnz   SkipTxCStopSmm
                                        (0712) DoWCBstopSmm:
                                        (0713)     call  I2Cm_SendStop
                                        (0714) SkipTxCStopSmm:
                                        (0715)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0716) End_WriteCBytesSmm:
                                        (0717)     ret
                                        (0718) .ENDSECTION
                                        (0719) ENDIF
                                        (0720) 
                                        (0721) .SECTION
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;  FUNCTION NAME: I2Cm_fSendRepeatStart
                                        (0724) ;
                                        (0725) ;  DESCRIPTION:
                                        (0726) ;    Send repeated start condition and send slave address.
                                        (0727) ;
                                        (0728) ;-----------------------------------------------------------------------------
                                        (0729) ;
                                        (0730) ;  ARGUMENTS:
                                        (0731) ;    I2Cm_bAddr - Contains the slave address and transfer direction.
                                        (0732) ;
                                        (0733) ;  RETURNS:
                                        (0734) ;    I2Cm_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0735) ;
                                        (0736) ;  SIDE EFFECTS:
                                        (0737) ;    The A and X registers may be modified by this or future implementations
                                        (0738) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0739) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0740) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0741) ;    functions.
                                        (0742) ;          
                                        (0743) ;    Currently only the page pointer registers listed below are modified: 
                                        (0744) ;          CUR_PP
                                        (0745) ;
                                        (0746) ;  THEORY of OPERATION or PROCEDURE:
                                        (0747) ;    Prepare to send start by setting SCl and SDA high.
                                        (0748) ;    must be followed directly by I2Cm_start.
                                        (0749) ;
                                        (0750)  I2Cm_fSendRepeatStart:
                                        (0751) _I2Cm_fSendRepeatStart:
                                        (0752)     RAM_PROLOGUE RAM_USE_CLASS_4
0BB1: 64       ASL   A                  (0753)     asl   a                                                ; Shift address to the left
0BB2: 79       DEC   X                  (0754)     dec   x                                                ; If zero, C flag will be set
0BB3: D0 04    JNC   0x0BB8             (0755)     jnc   .setRead                                ; Do a write if zero
0BB5: 90 06    CALL  0x0BBD             (0756)     call  I2C_DoRepeatStart
                                        (0757)     RAM_EPILOGUE RAM_USE_CLASS_4
0BB7: 7F       RET                      (0758)     ret
                                        (0759) .setRead:
0BB8: 29 01    OR    A,0x1              (0760)     or    a,0x01                                           ; Set Read flag
0BBA: 90 01    CALL  0x0BBD             (0761)     call  I2C_DoRepeatStart
                                        (0762)     RAM_EPILOGUE RAM_USE_CLASS_4
0BBC: 7F       RET                      (0763)     ret  
0BBD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0764) 
                                        (0765) I2C_DoRepeatStart:
                                        (0766)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0767)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
0BC0: 08       PUSH  A                  (0768)     push  a
0BC1: 71 10    OR    F,0x10             
                                        (0769)     M8C_SetBank1
0BC3: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(0770)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin          ; Assert SCL low
0BC6: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(0771)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0BC9: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0772)     mov   A,[Port_0_DriveMode_0_SHADE]
0BCB: 60 00    MOV   REG[0x0],A         (0773)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0774) 
                                        (0775)                                                            ; Delay 3/4 period
0BCD: 50 0C    MOV   A,0xC              (0776)     mov   A,I2Cm_delay3qtr
0BCF: 91 C4    CALL  0x0D95             (0777)     call  I2Cm_delay
                                        (0778)                                                            ; Release SCL high
0BD1: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(0779)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0BD4: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0780)     mov   A,[Port_0_DriveMode_0_SHADE]
0BD6: 60 00    MOV   REG[0x0],A         (0781)     mov   reg[I2Cm_I2CPRTDM0],A
0BD8: 70 EF    AND   F,0xEF             
                                        (0782) 
                                        (0783)     M8C_SetBank0
                                        (0784) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0785)                                                            ; states adde by slave
0BDA: 49 00 02 TST   REG[0x0],0x2       (0786)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0BDD: AF FC    JZ    0x0BDA             (0787)     jz    clockstretch1
                                        (0788) 
0BDF: 50 0C    MOV   A,0xC              (0789)     mov   A,I2Cm_delay3qtr                                 ; Delay 1/2 period
0BE1: 91 B2    CALL  0x0D95             (0790)     call  I2Cm_delay
0BE3: 18       POP   A                  (0791)     pop   a
0BE4: 90 0D    CALL  0x0BF3             (0792)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0793)     RAM_EPILOGUE RAM_USE_CLASS_4
0BE6: 7F       RET                      (0794)     ret
                                        (0795) .ENDSECTION
                                        (0796) 
                                        (0797) .SECTION
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;  FUNCTION NAME: I2Cm_fSendStart
                                        (0800) ;
                                        (0801) ;  DESCRIPTION:
                                        (0802) ;    Generates start condition and sends slave address.
                                        (0803) ;
                                        (0804) ;-----------------------------------------------------------------------------
                                        (0805) ;
                                        (0806) ;  ARGUMENTS:
                                        (0807) ;    A => Contains the slave address.
                                        (0808) ;
                                        (0809) ;  RETURNS:
                                        (0810) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0811) ;
                                        (0812) ;  SIDE EFFECTS:
                                        (0813) ;    The A and X registers may be modified by this or future implementations
                                        (0814) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0815) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0816) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0817) ;    functions.
                                        (0818) ;          
                                        (0819) ;    Currently only the page pointer registers listed below are modified: 
                                        (0820) ;          CUR_PP
                                        (0821) ;
                                        (0822) ;  THEORY of OPERATION or PROCEDURE:
                                        (0823) ;   Send start by setting SDA low while SCL is high. Set
                                        (0824) ;   SCL low in preparation to send address. Must be followed
                                        (0825) ;   by I2Cm_write.
                                        (0826) ;
                                        (0827)  I2Cm_fSendStart:
                                        (0828) _I2Cm_fSendStart:
                                        (0829)     RAM_PROLOGUE RAM_USE_CLASS_4
0BE7: 64       ASL   A                  (0830)     asl   a                                                     ; Shift address to the left
0BE8: 79       DEC   X                  (0831)     dec   x                                                     ; If zero, C flag will be set
0BE9: D0 04    JNC   0x0BEE             (0832)     jnc   .SetRead
0BEB: 90 06    CALL  0x0BF3             (0833)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0834)     RAM_EPILOGUE RAM_USE_CLASS_4
0BED: 7F       RET                      (0835)     ret
                                        (0836) .SetRead:
0BEE: 29 01    OR    A,0x1              (0837)     or    a,0x01                                                ; Set Read flag
0BF0: 90 01    CALL  0x0BF3             (0838)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0BF2: 7F       RET                      (0840)     ret
0BF3: 62 D0 00 MOV   REG[0xD0],0x0      
0BF6: 71 10    OR    F,0x10             
                                        (0841) 
                                        (0842) I2C_DoStart:
                                        (0843)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0844)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0845)     M8C_SetBank1
0BF8: 08       PUSH  A                  (0846)     push  A                                                     ; Save the slave address
0BF9: 2E 02 01 OR    [previousSecond|elapsedSeconds+2],0x1(0847)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin               ; Assert SDA low
0BFC: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0848)     mov   A,[Port_0_DriveMode_0_SHADE]
0BFE: 60 00    MOV   REG[0x0],A         (0849)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0850) 
0C00: 50 05    MOV   A,0x5              (0851)     mov   A,I2Cm_delayhalf                                      ; Delay 1/2 period
0C02: 91 91    CALL  0x0D95             (0852)     call  I2Cm_delay
0C04: 18       POP   A                  (0853)     pop   A                                                     ; Restore slave address to A
0C05: 70 EF    AND   F,0xEF             
0C07: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0854)     M8C_SetBank0
                                        (0855)     RAM_SETPAGE_CUR >I2Cm_bData
0C0A: 53 9E    MOV   [menu+5],A         (0856)     mov   [I2Cm_bData],A
0C0C: 62 D0 00 MOV   REG[0xD0],0x0      
0C0F: 71 10    OR    F,0x10             
                                        (0857) 
                                        (0858)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0859)     M8C_SetBank1
0C11: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(0860)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin               ; Set SCL low
0C14: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0861)     mov   A,[Port_0_DriveMode_0_SHADE]
0C16: 60 00    MOV   REG[0x0],A         (0862)     mov   reg[I2Cm_I2CPRTDM0],A
0C18: 70 EF    AND   F,0xEF             
                                        (0863)     M8C_SetBank0
                                        (0864) 
0C1A: 50 02    MOV   A,0x2              (0865)     mov   A,I2Cm_delayqtr                                       ; Delay 1/4 period
0C1C: 91 77    CALL  0x0D95             (0866)     call  I2Cm_delay
0C1E: 90 09    CALL  0x0C29             (0867)     call   I2Cm_write                                           ; Write the byte.
                                        (0868)     RAM_EPILOGUE RAM_USE_CLASS_4
0C20: 7F       RET                      (0869)     ret
0C21: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0870) .ENDSECTION
                                        (0871) 
                                        (0872) .SECTION
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;  FUNCTION NAME: I2Cm_fWrite
                                        (0875) ;
                                        (0876) ;  DESCRIPTION:
                                        (0877) ;    Writes a byte to the I2C master bus.
                                        (0878) ;
                                        (0879) ;-----------------------------------------------------------------------------
                                        (0880) ;
                                        (0881) ;  ARGUMENTS:
                                        (0882) ;    A contains Data to be written to I2C slave.
                                        (0883) ;
                                        (0884) ;  RETURNS:
                                        (0885) ;    1 If ACKed, else 0
                                        (0886) ;
                                        (0887) ;  SIDE EFFECTS:
                                        (0888) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0889) ;
                                        (0890) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0891) ;
                                        (0892) ;  FUNCTION NAME: I2Cm_write
                                        (0893) ;
                                        (0894) ;  DESCRIPTION:
                                        (0895) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0896) ;
                                        (0897) ;  ARGUMENTS:
                                        (0898) ;    Reg A contains slave address.
                                        (0899) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Send data byte to slave. Must be followed by I2Cm_get_ack.
                                        (0915) ;
                                        (0916) I2Cm_fWrite:
                                        (0917) _I2Cm_fWrite:
                                        (0918)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0919)     RAM_SETPAGE_CUR >I2Cm_bData
0C24: 53 9E    MOV   [menu+5],A         (0920)     mov   [I2Cm_bData],A                                   ; Put data in bData
0C26: 90 01    CALL  0x0C29             (0921)     call  I2Cm_write
                                        (0922)     RAM_EPILOGUE RAM_USE_CLASS_4
0C28: 7F       RET                      (0923)     ret
0C29: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0924) 
                                        (0925) I2Cm_write:
                                        (0926) _I2Cm_write:
                                        (0927)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0928)     RAM_SETPAGE_CUR >I2Cm_bit_count
                                        (0929)     
0C2C: 55 A0 08 MOV   [menu+7],0x8       (0930)     mov   [I2Cm_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0931) writenextbit:
0C2F: 7A A0    DEC   [menu+7]           (0932)     dec   [I2Cm_bit_count]
0C31: 62 D0 00 MOV   REG[0xD0],0x0      
0C34: 71 10    OR    F,0x10             
                                        (0933) 
                                        (0934)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0935)                                                            ; Assert SCL low
                                        (0936)     M8C_SetBank1
0C36: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(0937)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0C39: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0938)     mov   A,[Port_0_DriveMode_0_SHADE]
0C3B: 60 00    MOV   REG[0x0],A         (0939)     mov   reg[I2Cm_I2CPRTDM0],A
0C3D: 70 EF    AND   F,0xEF             
0C3F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0940)     M8C_SetBank0
                                        (0941) 
                                        (0942)     RAM_SETPAGE_CUR >I2Cm_bit_count
0C42: 6B 9E    RLC   [menu+5]           (0943)     rlc   [I2Cm_bData]
0C44: 62 D0 00 MOV   REG[0xD0],0x0      
0C47: 71 10    OR    F,0x10             
                                        (0944)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0945)     M8C_SetBank1
0C49: C0 0A    JC    0x0C54             (0946)     jc    write_bit                                        ; Assert SDA low for data 0    
0C4B: 2E 02 01 OR    [previousSecond|elapsedSeconds+2],0x1(0947)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0C4E: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0948)     mov   A,[Port_0_DriveMode_0_SHADE]
0C50: 60 00    MOV   REG[0x0],A         (0949)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0950) 
0C52: 80 08    JMP   0x0C5B             (0951)     jmp   writestartclock
                                        (0952) write_bit:                                                 ; Release SDA high for data 1
0C54: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(0953)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin      
0C57: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0954)     mov   A,[Port_0_DriveMode_0_SHADE]
0C59: 60 00    MOV   REG[0x0],A         (0955)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0956) 
                                        (0957) writestartclock:
0C5B: 50 05    MOV   A,0x5              (0958)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0C5D: 91 36    CALL  0x0D95             (0959)     call  I2Cm_delay
                                        (0960)                                                            ; Release SCL High
0C5F: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(0961)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C62: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](0962)     mov   A,[Port_0_DriveMode_0_SHADE]
0C64: 60 00    MOV   REG[0x0],A         (0963)     mov   reg[I2Cm_I2CPRTDM0],A
0C66: 70 EF    AND   F,0xEF             
                                        (0964) 
                                        (0965)     M8C_SetBank0
                                        (0966) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0967)                                                            ; are added by slave.
0C68: 49 00 02 TST   REG[0x0],0x2       (0968)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0C6B: AF FC    JZ    0x0C68             (0969)     jz    clockstretch2
                                        (0970)                                                            ; Delay for 1/2 period
0C6D: 50 05    MOV   A,0x5              (0971)     mov   A,I2Cm_delayhalf
0C6F: 91 24    CALL  0x0D95             (0972)     call  I2Cm_delay
0C71: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0973) 
                                        (0974)     RAM_SETPAGE_CUR >I2Cm_bit_count
0C74: 3C A0 00 CMP   [menu+7],0x0       (0975)     cmp   [I2Cm_bit_count],0
0C77: BF B7    JNZ   0x0C2F             (0976)     jnz   writenextbit
0C79: 90 01    CALL  0x0C7C             (0977)     call  I2Cm_get_ack                
                                        (0978) 
                                        (0979)     RAM_EPILOGUE RAM_USE_CLASS_4
0C7B: 7F       RET                      (0980)     ret
0C7C: 62 D0 00 MOV   REG[0xD0],0x0      
0C7F: 71 10    OR    F,0x10             
                                        (0981) .ENDSECTION
                                        (0982) 
                                        (0983) .SECTION
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;  FUNCTION NAME: I2Cm_get_ack
                                        (0986) ;
                                        (0987) ;  DESCRIPTION:
                                        (0988) ;    Get slave acknowledge response. Used only by I2Cm_write.
                                        (0989) ;
                                        (0990) ;-----------------------------------------------------------------------------
                                        (0991) ;
                                        (0992) ;  ARGUMENTS:
                                        (0993) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0994) ;
                                        (0995) ;  RETURNS:
                                        (0996) ;    Sets flag in I2Cm_bStatus if ACKed by Slave.
                                        (0997) ;
                                        (0998) ;  SIDE EFFECTS:
                                        (0999) ;    The A and X registers may be modified by this or future implementations
                                        (1000) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1001) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1002) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1003) ;    functions.
                                        (1004) ;          
                                        (1005) ;    Currently only the page pointer registers listed below are modified: 
                                        (1006) ;          CUR_PP
                                        (1007) ;
                                        (1008) I2Cm_get_ack:
                                        (1009) _I2Cm_get_ack:
                                        (1010)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1011)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1012)     M8C_SetBank1
0C81: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(1013)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0C84: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1014)     mov   A,[Port_0_DriveMode_0_SHADE]
0C86: 60 00    MOV   REG[0x0],A         (1015)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1016)                                                            ; Release SDA high so slave may ACK
0C88: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(1017)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0C8B: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1018)     mov   A,[Port_0_DriveMode_0_SHADE]
0C8D: 60 00    MOV   REG[0x0],A         (1019)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1020)                                                            ; Delay 3/4 period
0C8F: 50 0C    MOV   A,0xC              (1021)     mov   A,I2Cm_delay3qtr
0C91: 91 02    CALL  0x0D95             (1022)     call  I2Cm_delay
                                        (1023)                                                            ; Release SCL high
0C93: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(1024)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C96: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1025)     mov   A,[Port_0_DriveMode_0_SHADE]
0C98: 60 00    MOV   REG[0x0],A         (1026)     mov   reg[I2Cm_I2CPRTDM0],A
0C9A: 70 EF    AND   F,0xEF             
                                        (1027) 
                                        (1028)     M8C_SetBank0
                                        (1029) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1030)                                                            ; are added my slave.
0C9C: 49 00 02 TST   REG[0x0],0x2       (1031)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0C9F: AF FC    JZ    0x0C9C             (1032)     jz    clockstretch3
0CA1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1033)     
                                        (1034)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1035)                                                        ; Clear ACK bit
0CA4: 26 9D FE AND   [menu+4],0xFE      (1036)     and   [I2Cm_bStatus],~I2Cm_SLAVE_ACKed
0CA7: 49 00 01 TST   REG[0x0],0x1       (1037)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0CAA: B0 04    JNZ   0x0CAF             (1038)     jnz    getack2                                         ; If ACKed, set flag
0CAC: 2E 9D 01 OR    [menu+4],0x1       (1039)     or    [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (1040) 
                                        (1041) getack2:
0CAF: 50 05    MOV   A,0x5              (1042)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0CB1: 90 E2    CALL  0x0D95             (1043)     call  I2Cm_delay
                                        (1044) 
0CB3: 51 9D    MOV   A,[menu+4]         (1045)     mov   A,[I2Cm_bStatus]                                 ; Get result and put it in A
0CB5: 21 01    AND   A,0x1              (1046)     and   A,I2Cm_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1047)     RAM_EPILOGUE RAM_USE_CLASS_4
0CB7: 7F       RET                      (1048)     ret
0CB8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1049) .ENDSECTION
                                        (1050) 
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: I2Cm_bRead
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;    Reads 1 data byte from the I2C master bus.
                                        (1057) ;
                                        (1058) ;-----------------------------------------------------------------------------
                                        (1059) ;
                                        (1060) ;  ARGUMENTS:
                                        (1061) ;    Reg A Contains the Slave Address.
                                        (1062) ;    I2Cm_bStatus - Set for no ack to be followed by stop.
                                        (1063) ;    Clear for ack to indicate more data to follow.
                                        (1064) ;
                                        (1065) ;  RETURNS:
                                        (1066) ;    I2Cm_bData - Contains received data.
                                        (1067) ;
                                        (1068) ;  SIDE EFFECTS:
                                        (1069) ;    The A and X registers may be modified by this or future implementations
                                        (1070) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1071) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1072) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1073) ;    functions.
                                        (1074) ;          
                                        (1075) ;    Currently only the page pointer registers listed below are modified: 
                                        (1076) ;          CUR_PP
                                        (1077) ;
                                        (1078) ;    Must be followed by I2Cm_put_ack.
                                        (1079) ;
                                        (1080) I2Cm_bRead:
                                        (1081) _I2Cm_bRead:
                                        (1082)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1083)     RAM_SETPAGE_CUR >I2Cm_bStatus
0CBB: 55 9D 00 MOV   [menu+4],0x0       (1084)     mov   [I2Cm_bStatus],0x00                              ; Clear ACK flag
0CBE: 21 FF    AND   A,0xFF             (1085)     and   A,0xFF                                           ; Is Ack flag set"
0CC0: A0 07    JZ    0x0CC8             (1086)     jz    I2Cm_read                                        ; Don't ACK
0CC2: 2E 9D 10 OR    [menu+4],0x10      (1087)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Set ACK flag
0CC5: 90 01    CALL  0x0CC8             (1088)     call  I2Cm_read
                                        (1089)     RAM_EPILOGUE RAM_USE_CLASS_4
0CC7: 7F       RET                      (1090)     ret
0CC8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1091) 
                                        (1092) I2Cm_read:
                                        (1093) _I2Cm_read:
                                        (1094)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1095)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0CCB: 55 A0 08 MOV   [menu+7],0x8       (1096)     mov   [I2Cm_bit_count],8                               ; Count and prepare bits to read
                                        (1097) readnextbit:
0CCE: 7A A0    DEC   [menu+7]           (1098)     dec   [I2Cm_bit_count]
0CD0: 6B 9E    RLC   [menu+5]           (1099)     rlc   [I2Cm_bData]
0CD2: 62 D0 00 MOV   REG[0xD0],0x0      
0CD5: 71 10    OR    F,0x10             
                                        (1100)     
                                        (1101)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1102)     M8C_SetBank1                                           ; Asser SCL low
0CD7: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(1103)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0CDA: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1104)     mov   A,[Port_0_DriveMode_0_SHADE]
0CDC: 60 00    MOV   REG[0x0],A         (1105)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1106)                                                            ; Delay 1/2 period
0CDE: 50 05    MOV   A,0x5              (1107)     mov   A,I2Cm_delayhalf
0CE0: 90 B3    CALL  0x0D95             (1108)     call  I2Cm_delay
                                        (1109)                                                            ; Release SCL high
0CE2: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(1110)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0CE5: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1111)     mov   A,[Port_0_DriveMode_0_SHADE]
0CE7: 60 00    MOV   REG[0x0],A         (1112)     mov   reg[I2Cm_I2CPRTDM0],A
0CE9: 70 EF    AND   F,0xEF             
0CEB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1113) 
                                        (1114)     M8C_SetBank0
                                        (1115)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1116) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1117)                                                            ; addes wait states.
                                        (1118) 
0CEE: 49 00 02 TST   REG[0x0],0x2       (1119)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0CF1: AF FC    JZ    0x0CEE             (1120)     jz    clockstretch4
                                        (1121)                                                            ; Delay 1/4 period
0CF3: 50 02    MOV   A,0x2              (1122)     mov   A,I2Cm_delayqtr
0CF5: 90 9E    CALL  0x0D95             (1123)     call  I2Cm_delay
                                        (1124) 
0CF7: 26 9E FE AND   [menu+5],0xFE      (1125)     and   [I2Cm_bData],~01h                                ; Record bit received
0CFA: 49 00 01 TST   REG[0x0],0x1       (1126)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0CFD: A0 04    JZ    0x0D02             (1127)     jz    readnobit
0CFF: 2E 9E 01 OR    [menu+5],0x1       (1128)     or    [I2Cm_bData],01h
                                        (1129) readnobit:
0D02: 3C A0 00 CMP   [menu+7],0x0       (1130)     cmp   [I2Cm_bit_count],0
0D05: BF C8    JNZ   0x0CCE             (1131)     jnz   readnextbit                                      ; Check for byte complete
                                        (1132) 
0D07: 90 01    CALL  0x0D0A             (1133)     call   I2Cm_put_ack                
                                        (1134)     RAM_EPILOGUE RAM_USE_CLASS_4
0D09: 7F       RET                      (1135)     ret
0D0A: 62 D0 00 MOV   REG[0xD0],0x0      
0D0D: 71 10    OR    F,0x10             
                                        (1136) .ENDSECTION
                                        (1137)                                                          
                                        (1138) .SECTION
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;  FUNCTION NAME: I2Cm_put_ack
                                        (1141) ;
                                        (1142) ;  DESCRIPTION:
                                        (1143) ;    Send acknowledge to slave. Used only by I2Cm_read
                                        (1144) ;
                                        (1145) ;-----------------------------------------------------------------------------
                                        (1146) ;
                                        (1147) ;  ARGUMENTS:
                                        (1148) ;    I2Cm_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1149) ;    to indicate more data to follow.
                                        (1150) ;
                                        (1151) ;  RETURNS:
                                        (1152) ;    I2Cm_bData - Contains received data.
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS:
                                        (1155) ;    The A and X registers may be modified by this or future implementations
                                        (1156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1159) ;    functions.
                                        (1160) ;          
                                        (1161) ;    Currently only the page pointer registers listed below are modified: 
                                        (1162) ;          CUR_PP
                                        (1163) ;
                                        (1164) ;    Send ack if more data will follow.
                                        (1165) ;
                                        (1166) I2Cm_put_ack:
                                        (1167) _I2Cm_put_ack:
                                        (1168)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1169)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1170)     M8C_SetBank1                                           ; Assert SCL low
0D0F: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(1171)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0D12: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1172)     mov   A,[Port_0_DriveMode_0_SHADE]
0D14: 60 00    MOV   REG[0x0],A         (1173)     mov   reg[I2Cm_I2CPRTDM0],A
0D16: 70 EF    AND   F,0xEF             
0D18: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1174)     M8C_SetBank0
                                        (1175) 
                                        (1176)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1177)                                                        ; Check if ack is to be transmitted
0D1B: 47 9D 10 TST   [menu+4],0x10      (1178)     tst   [I2Cm_bStatus],I2Cm_SEND_ACK
0D1E: 62 D0 00 MOV   REG[0xD0],0x0      
0D21: 71 10    OR    F,0x10             
                                        (1179) 
                                        (1180)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1181)     M8C_SetBank1
                                        (1182) 
0D23: A0 0A    JZ    0x0D2E             (1183)     jz    noputack
                                        (1184)                                                            ; Assert SDA low
0D25: 2E 02 01 OR    [previousSecond|elapsedSeconds+2],0x1(1185)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0D28: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1186)     mov   A,[Port_0_DriveMode_0_SHADE]
0D2A: 60 00    MOV   REG[0x0],A         (1187)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1188) 
0D2C: 80 08    JMP   0x0D35             (1189)     jmp   putack1
                                        (1190) noputack:                                                  ; Release SDA high
0D2E: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(1191)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0D31: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1192)     mov   A,[Port_0_DriveMode_0_SHADE]
0D33: 60 00    MOV   REG[0x0],A         (1193)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1194) 
                                        (1195) putack1:
0D35: 50 02    MOV   A,0x2              (1196)     mov   A,I2Cm_delayqtr                                  ; Delay 1/4 period
0D37: 90 5C    CALL  0x0D95             (1197)     call  I2Cm_delay
                                        (1198)                                                            ; Release SCL high
0D39: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(1199)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0D3C: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1200)     mov   A,[Port_0_DriveMode_0_SHADE]
0D3E: 60 00    MOV   REG[0x0],A         (1201)     mov   reg[I2Cm_I2CPRTDM0],A
0D40: 70 EF    AND   F,0xEF             
                                        (1202) 
                                        (1203)     M8C_SetBank0
                                        (1204) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1205)                                                            ; adds wait states.
0D42: 49 00 02 TST   REG[0x0],0x2       (1206)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D45: AF FC    JZ    0x0D42             (1207)     jz    clockstretch5
                                        (1208)                                                            ; delay for the high half of the clock.
0D47: 50 05    MOV   A,0x5              (1209)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0D49: 90 4A    CALL  0x0D95             (1210)     call  I2Cm_delay
0D4B: 71 10    OR    F,0x10             
                                        (1211) 
                                        (1212)     M8C_SetBank1                                           ; Assert SCL low
0D4D: 2E 02 02 OR    [previousSecond|elapsedSeconds+2],0x2(1213)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0D50: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1214)     mov   A,[Port_0_DriveMode_0_SHADE]
0D52: 60 00    MOV   REG[0x0],A         (1215)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1216)                                                            ; If there is another read pending
                                        (1217)                                                            ; must release SDA for slave
0D54: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(1218)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0D57: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1219)     mov   A,[Port_0_DriveMode_0_SHADE]
0D59: 60 00    MOV   REG[0x0],A         (1220)     mov   reg[I2Cm_I2CPRTDM0],A
0D5B: 70 EF    AND   F,0xEF             
0D5D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1221)     M8C_SetBank0
                                        (1222) 
                                        (1223)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0D60: 51 9E    MOV   A,[menu+5]         (1224)     mov   A, [I2Cm_bData]
                                        (1225)     RAM_EPILOGUE RAM_USE_CLASS_4
0D62: 7F       RET                      (1226)     ret
0D63: 62 D0 00 MOV   REG[0xD0],0x0      
0D66: 71 10    OR    F,0x10             
                                        (1227) .ENDSECTION
                                        (1228) 
                                        (1229) .SECTION
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;  FUNCTION NAME: I2Cm_SendStop
                                        (1232) ;
                                        (1233) ;  DESCRIPTION:
                                        (1234) ;    Assert stop condition.
                                        (1235) ;
                                        (1236) ;-----------------------------------------------------------------------------
                                        (1237) ;
                                        (1238) ;  ARGUMENTS: none
                                        (1239) ;
                                        (1240) ;  RETURNS: none
                                        (1241) ;
                                        (1242) ;  SIDE EFFECTS:
                                        (1243) ;    The A and X registers may be modified by this or future implementations
                                        (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1247) ;    functions.
                                        (1248) ;          
                                        (1249) ;    Currently only the page pointer registers listed below are modified: 
                                        (1250) ;          CUR_PP
                                        (1251) ;
                                        (1252) ;  THEORY of OPERATION or PROCEDURE:
                                        (1253) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1254) ;
                                        (1255)  I2Cm_SendStop:
                                        (1256) _I2Cm_SendStop:
                                        (1257)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1258)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1259)     M8C_SetBank1                                           ; Assert ACK and SDA low
0D68: 2E 02 03 OR    [previousSecond|elapsedSeconds+2],0x3(1260)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin|I2Cm_SDA_pin
0D6B: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1261)     mov   A,[Port_0_DriveMode_0_SHADE]
0D6D: 60 00    MOV   REG[0x0],A         (1262)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1263) 
0D6F: 50 0C    MOV   A,0xC              (1264)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0D71: 90 22    CALL  0x0D95             (1265)     call  I2Cm_delay
                                        (1266)                                                            ; Release SCL high
0D73: 26 02 FD AND   [previousSecond|elapsedSeconds+2],0xFD(1267)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0D76: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1268)     mov   A,[Port_0_DriveMode_0_SHADE]
0D78: 60 00    MOV   REG[0x0],A         (1269)     mov   reg[I2Cm_I2CPRTDM0],A
0D7A: 70 EF    AND   F,0xEF             
                                        (1270) 
                                        (1271)     M8C_SetBank0
                                        (1272) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1273)                                                            ; has added wait states.
0D7C: 49 00 02 TST   REG[0x0],0x2       (1274)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D7F: AF FC    JZ    0x0D7C             (1275)     jz    clockstretch6
0D81: 71 10    OR    F,0x10             
                                        (1276)     M8C_SetBank1
                                        (1277) 
0D83: 50 0C    MOV   A,0xC              (1278)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0D85: 90 0E    CALL  0x0D95             (1279)     call  I2Cm_delay
                                        (1280) 
                                        (1281)                                                            ; Release SDA high
0D87: 26 02 FE AND   [previousSecond|elapsedSeconds+2],0xFE(1282)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0D8A: 51 02    MOV   A,[previousSecond|elapsedSeconds+2](1283)     mov   A,[Port_0_DriveMode_0_SHADE]
0D8C: 60 00    MOV   REG[0x0],A         (1284)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1285) 
0D8E: 50 05    MOV   A,0x5              (1286)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0D90: 90 03    CALL  0x0D95             (1287)     call  I2Cm_delay
0D92: 70 EF    AND   F,0xEF             
                                        (1288)     M8C_SetBank0
                                        (1289)     
                                        (1290)     RAM_EPILOGUE RAM_USE_CLASS_4
0D94: 7F       RET                      (1291)     ret
                                        (1292) .ENDSECTION
                                        (1293) 
                                        (1294) .SECTION
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;  FUNCTION NAME: I2Cm_delay
                                        (1297) ;
                                        (1298) ;  DESCRIPTION:
                                        (1299) ;    Create delays for I2Cm routines.
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) ;
                                        (1303) ;  ARGUMENTS: none
                                        (1304) ;
                                        (1305) ;  RETURNS: none
                                        (1306) ;
                                        (1307) ;  SIDE EFFECTS:
                                        (1308) ;    The A and X registers may be modified by this or future implementations
                                        (1309) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1310) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1312) ;    functions.
                                        (1313) ;          
                                        (1314) I2Cm_delay:                                      ; 11 cycles for call. 32 total.
                                        (1315) I2Cmdelay1:                                      ; Delay 1/4 period at 100 kHz
0D95: 78       DEC   A                  (1316)      dec  A                                      ; 4 cycles
0D96: BF FE    JNZ   0x0D95             (1317)      jnz  I2Cmdelay1                             ; 5 cycles for jump, 4 no jump.     
0D98: 7F       RET                      (1318)      ret                                         ; 8 cycles
                                        (1319)   
                                        (1320) .ENDSECTION
                                        (1321) 
                                        (1322) 
                                        (1323) 
                                        (1324) ; End of File I2Cm.asm
                                        (1325) 
                                        (1326) 
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
0D99: 7A 0C    DEC   [previousSecond|elapsedSeconds+12](0093)     dec  [ADCINC_bState]
                                        (0094) if1:
0D9B: C0 02    JC    0x0D9E             (0095)     jc endif1 ; no underflow
0D9D: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
0D9E: 3C 0D 00 CMP   [previousSecond|elapsedSeconds+13],0x0(0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
0DA1: B0 12    JNZ   0x0DB4             (0100)     jnz endif2  ;leaving reset mode
0DA3: 08       PUSH  A                  (0101)     push A                            ;read decimator
0DA4: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
0DA6: 53 0A    MOV   [previousSecond|elapsedSeconds+10],A(0103)     mov  [iTemp + LowByte],A
0DA8: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
0DAA: 53 09    MOV   [previousSecond|elapsedSeconds+9],A(0105)     mov  [iTemp + HighByte], A
0DAC: 18       POP   A                  (0106)     pop A
0DAD: 55 0D 01 MOV   [previousSecond|elapsedSeconds+13],0x1(0107)     mov [ADCINC_fMode],1
0DB0: 55 0C 0F MOV   [previousSecond|elapsedSeconds+12],0xF(0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
0DB3: 7E       RETI                     (0109)     reti
0DB4: 43 8A 20 OR    REG[0x8A],0x20     
0DB7: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
0DBA: 08       PUSH  A                  (0113)     push A
0DBB: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
0DBD: 12 0A    SUB   A,[previousSecond|elapsedSeconds+10](0115)     sub  A,[iTemp + LowByte]
0DBF: 53 0A    MOV   [previousSecond|elapsedSeconds+10],A(0116)     mov  [iTemp +LowByte],A
0DC1: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0DC3: 1A 09    SBB   A,[previousSecond|elapsedSeconds+9](0118)     sbb  A,[iTemp + HighByte]
                                        (0119) 
                                        (0120)        ;check for overflow
                                        (0121) IF     ADCINC_8_OR_MORE_BITS
0DC5: 39 04    CMP   A,0x4              (0122)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0123) if3: 
0DC7: B0 05    JNZ   0x0DCD             (0124)     jnz endif3 ;overflow
0DC9: 78       DEC   A                  (0125)     dec A
0DCA: 55 0A FF MOV   [previousSecond|elapsedSeconds+10],0xFF(0126)     mov [iTemp + LowByte],ffh
                                        (0127) endif3:
                                        (0128) ELSE
                                        (0129)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0130) if4: 
                                        (0131)     jnz endif4 ;overflow
                                        (0132)     dec [iTemp + LowByte]
                                        (0133) endif4:
                                        (0134) ENDIF
                                        (0135) IF ADCINC_SIGNED_DATA
                                        (0136) IF ADCINC_9_OR_MORE_BITS
                                        (0137)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0138) ELSE
                                        (0139)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0140)     sbb A,0
                                        (0141) ENDIF
                                        (0142) ENDIF
0DCD: 5F 08 0A MOV   [previousSecond|elapsedSeconds+8],[previousSecond|elapsedSeconds+10](0143)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
0DD0: 53 07    MOV   [previousSecond|elapsedSeconds+7],A(0144)     mov  [ADCINC_iResult + HighByte],A
0DD2: 55 0B 01 MOV   [previousSecond|elapsedSeconds+11],0x1(0145)     mov  [ADCINC_fStatus],1
                                        (0146) ConversionReady:
                                        (0147)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0148)     ;---------------------------------------------------
                                        (0149)     ; Insert your custom code below this banner
                                        (0150)     ;---------------------------------------------------
                                        (0151)     ;  Sample data is now in iResult
                                        (0152)     ;
                                        (0153)     ;  NOTE: This interrupt service routine has already
                                        (0154)     ;  preserved the values of the A CPU register. If
                                        (0155)     ;  you need to use the X register you must preserve
                                        (0156)     ;  its value and restore it before the return from
                                        (0157)     ;  interrupt.
                                        (0158)     ;---------------------------------------------------
                                        (0159)     ; Insert your custom code above this banner
                                        (0160)     ;---------------------------------------------------
                                        (0161)     ;@PSoC_UserCode_END@ (Do not change this line.)
0DD5: 18       POP   A                  (0162)     pop A
0DD6: 3C 0E 00 CMP   [previousSecond|elapsedSeconds+14],0x0(0163)     cmp [ADCINC_bNumSamples],0
                                        (0164) if5: 
0DD9: B0 0E    JNZ   0x0DE8             (0165)     jnz endif5 ; Number of samples is zero
0DDB: 55 0D 00 MOV   [previousSecond|elapsedSeconds+13],0x0(0166)     mov [ADCINC_fMode],0
0DDE: 55 0C 00 MOV   [previousSecond|elapsedSeconds+12],0x0(0167)     mov [ADCINC_bState],0
0DE1: 41 8B EF AND   REG[0x8B],0xEF     
0DE4: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0168)     ADCINC_ENABLE_INTEGRATOR_M
0DE7: 7E       RETI                     (0169)     reti       
                                        (0170) endif5:
0DE8: 7A 0E    DEC   [previousSecond|elapsedSeconds+14](0171)     dec [ADCINC_bNumSamples]
                                        (0172) if6:
0DEA: A0 0E    JZ    0x0DF9             (0173)     jz endif6  ; count not zero
0DEC: 55 0D 00 MOV   [previousSecond|elapsedSeconds+13],0x0(0174)     mov [ADCINC_fMode],0
0DEF: 55 0C 00 MOV   [previousSecond|elapsedSeconds+12],0x0(0175)     mov [ADCINC_bState],0
0DF2: 41 8B EF AND   REG[0x8B],0xEF     
0DF5: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0176)     ADCINC_ENABLE_INTEGRATOR_M
0DF8: 7E       RETI                     (0177)     reti       
0DF9: 71 10    OR    F,0x10             
                                        (0178) endif6:
                                        (0179)     ;All samples done
                                        (0180)     M8C_SetBank1
0DFB: 41 E7 3F AND   REG[0xE7],0x3F     (0181)     and reg[E7h], 3Fh            ; if we are in 29xxx or 24x94   
0DFE: 43 E7 80 OR    REG[0xE7],0x80     (0182)     or  reg[E7h], 80h            ; then set to incremental Mode
0E01: 70 EF    AND   F,0xEF             
0E03: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0183)     M8C_SetBank0
                                        (0184)     ADCINC_STOPADC_M
0E06: 7E       RETI                     (0185)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.
                                        (0093) ;
                                        (0094)  ADCINC_Start:
                                        (0095) _ADCINC_Start:
                                        (0096)    RAM_PROLOGUE RAM_USE_CLASS_1
0E07: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
0E09: 43 8A 20 OR    REG[0x8A],0x20     
0E0C: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
0E0F: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
0E12: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0E15: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0118) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0119) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0120) ;    functions.
                                        (0121) ;
                                        (0122)  ADCINC_SetPower:
                                        (0123) _ADCINC_SetPower:
                                        (0124)    RAM_PROLOGUE RAM_USE_CLASS_2
0E16: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
0E17: 21 03    AND   A,0x3              (0126)    and  A,03h                                    ; Ensure value is legal
0E19: 08       PUSH  A                  (0127)    push A
0E1A: 5D 8B    MOV   A,REG[0x8B]        (0128)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
0E1C: 21 FC    AND   A,0xFC             (0129)    and  A,~03h                                   ;   clear power bits to zero
0E1E: 2B 00    OR    A,[X+0]            (0130)    or   A,[ X ]                                  ;   establish new value
0E20: 60 8B    MOV   REG[0x8B],A        (0131)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
0E22: 18       POP   A                  (0132)    pop  A
0E23: 70 3F    AND   F,0x3F             
0E25: 71 C0    OR    F,0xC0             
                                        (0133)    RAM_EPILOGUE RAM_USE_CLASS_2
0E27: 7F       RET                      (0134)    ret
0E28: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0135) .ENDSECTION
                                        (0136) 
                                        (0137) .SECTION
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;  FUNCTION NAME: ADCINC_Stop
                                        (0140) ;
                                        (0141) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0142) ;                 and turns off PWM
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;
                                        (0145) ;  ARGUMENTS:     None.
                                        (0146) ;  RETURNS:       Nothing.
                                        (0147) ;  SIDE EFFECTS:
                                        (0148) ;    The A and X registers may be modified by this or future implementations
                                        (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0152) ;    functions.
                                        (0153) ;
                                        (0154)  ADCINC_Stop:
                                        (0155) _ADCINC_Stop:
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0157)    ADCINC_STOPADC_M
0E2B: 41 8B FC AND   REG[0x8B],0xFC     (0158)    and  reg[ADCINC_AtoDcr3], ~03h
0E2E: 41 23 FE AND   REG[0x23],0xFE     (0159)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0E31: 7F       RET                      (0161)    ret
0E32: 62 D0 00 MOV   REG[0xD0],0x0      
0E35: 41 8B EF AND   REG[0x8B],0xEF     
0E38: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) 
                                        (0165) .SECTION
                                        (0166) ;-----------------------------------------------------------------------------
                                        (0167) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0168) ;
                                        (0169) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    A register contain number of samples
                                        (0173) ;  RETURNS:      Nothing.
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;          
                                        (0181) ;    Currently only the page pointer registers listed below are modified: 
                                        (0182) ;          CUR_PP
                                        (0183) ;
                                        (0184)  ADCINC_GetSamples:
                                        (0185) _ADCINC_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0188)    ADCINC_ENABLE_INTEGRATOR_M
0E3B: 55 0D 00 MOV   [previousSecond|elapsedSeconds+13],0x0(0189)    mov [ADCINC_fMode],0
0E3E: 55 0C 00 MOV   [previousSecond|elapsedSeconds+12],0x0(0190)    mov [ADCINC_bState],0
0E41: 53 0E    MOV   [previousSecond|elapsedSeconds+14],A(0191)    mov [ADCINC_bNumSamples],A
0E43: 5D 22    MOV   A,REG[0x22]        (0192)    mov A, reg[ADCINC_PWMdr2]
0E45: B0 04    JNZ   0x0E4A             (0193)    jnz  .SkipPulseWrite
0E47: 62 22 01 MOV   REG[0x22],0x1      (0194)    mov reg[ADCINC_PWMdr2], 1
0E4A: 71 10    OR    F,0x10             
                                        (0195) .SkipPulseWrite:
                                        (0196) 
                                        (0197)    M8C_SetBank1
0E4C: 41 E7 3F AND   REG[0xE7],0x3F     (0198)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0E4F: 43 E7 40 OR    REG[0xE7],0x40     (0199)    or  reg[E7h], 40h             ; then set to incremental Mode
0E52: 70 EF    AND   F,0xEF             
0E54: 62 DB FE MOV   REG[0xDB],0xFE     
0E57: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0200)    M8C_SetBank0
                                        (0201) 
                                        (0202)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0203)    RAM_EPILOGUE RAM_USE_CLASS_4 
0E5A: 7F       RET                      (0204)    ret
0E5B: 71 10    OR    F,0x10             
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) 
                                        (0208) .SECTION
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0211) ;
                                        (0212) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0213) ;               is disabled but the PWM output is still active.
                                        (0214) ;               Integrator is reset
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS:    None.
                                        (0218) ;  RETURNS:      Nothing.
                                        (0219) ;  SIDE EFFECTS:
                                        (0220) ;    The A and X registers may be modified by this or future implementations
                                        (0221) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0222) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0223) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0224) ;    functions.
                                        (0225) ;
                                        (0226)  ADCINC_StopADC:
                                        (0227) _ADCINC_StopADC:
                                        (0228)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0229)    M8C_SetBank1
0E5D: 41 E7 3F AND   REG[0xE7],0x3F     (0230)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0E60: 43 E7 80 OR    REG[0xE7],0x80     (0231)    or  reg[E7h], 80h             ; then set to incremental Mode
0E63: 70 EF    AND   F,0xEF             
0E65: 41 E1 FE AND   REG[0xE1],0xFE     
0E68: 43 8A 20 OR    REG[0x8A],0x20     
0E6B: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0232)    M8C_SetBank0
                                        (0233)    ADCINC_STOPADC_M
                                        (0234)    ADCINC_RESET_INTEGRATOR_M
                                        (0235)    RAM_EPILOGUE RAM_USE_CLASS_1 
0E6E: 7F       RET                      (0236)    ret
0E6F: 62 D0 00 MOV   REG[0xD0],0x0      
0E72: 51 0B    MOV   A,[previousSecond|elapsedSeconds+11]
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0243) ;
                                        (0244) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  ARGUMENTS:    None.
                                        (0247) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0248) ;  SIDE EFFECTS:
                                        (0249) ;    The A and X registers may be modified by this or future implementations
                                        (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0253) ;    functions.
                                        (0254) ;          
                                        (0255) ;    Currently only the page pointer registers listed below are modified: 
                                        (0256) ;          CUR_PP
                                        (0257) ;
                                        (0258)  ADCINC_fIsDataAvailable:
                                        (0259) _ADCINC_fIsDataAvailable:
                                        (0260)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0261)    ADCINC_fIsDataAvailable_M   
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
0E74: 7F       RET                      (0263)    ret
0E75: 62 D0 00 MOV   REG[0xD0],0x0      
0E78: 55 0B 00 MOV   [previousSecond|elapsedSeconds+11],0x0
0E7B: 58 07    MOV   X,[previousSecond|elapsedSeconds+7]
0E7D: 51 08    MOV   A,[previousSecond|elapsedSeconds+8]
0E7F: 3C 0B 00 CMP   [previousSecond|elapsedSeconds+11],0x0
0E82: BF F5    JNZ   0x0E78             
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0270) ;                  ADCINC_wClearFlagGetData
                                        (0271) ;
                                        (0272) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0273) ;                  Flag is checked after trandfer to insure valid data.
                                        (0274) ;                  available. Also clears the DATA_READY flag. 
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  ARGUMENTS:    None.
                                        (0277) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;          
                                        (0285) ;    Currently only the page pointer registers listed below are modified: 
                                        (0286) ;          CUR_PP
                                        (0287) ;
                                        (0288)  ADCINC_iClearFlagGetData:
                                        (0289) _ADCINC_iClearFlagGetData:
                                        (0290)  ADCINC_wClearFlagGetData:
                                        (0291) _ADCINC_wClearFlagGetData:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0293)    ADCINC_iClearFlagGetData_M   
                                        (0294)    RAM_EPILOGUE RAM_USE_CLASS_4
0E84: 7F       RET                      (0295)    ret
0E85: 62 D0 00 MOV   REG[0xD0],0x0      
0E88: 55 0B 00 MOV   [previousSecond|elapsedSeconds+11],0x0
0E8B: 51 08    MOV   A,[previousSecond|elapsedSeconds+8]
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) 
                                        (0299) .SECTION
                                        (0300) ;-----------------------------------------------------------------------------
                                        (0301) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0302) ;                  ADCINC_bClearFlagGetData
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315) ;    Currently only the page pointer registers listed below are modified: 
                                        (0316) ;          CUR_PP
                                        (0317) ;
                                        (0318)  ADCINC_cClearFlagGetData:
                                        (0319) _ADCINC_cClearFlagGetData:
                                        (0320)  ADCINC_bClearFlagGetData:
                                        (0321) _ADCINC_bClearFlagGetData:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0323)    ADCINC_bClearFlagGetData_M     
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0E8D: 7F       RET                      (0325)    ret
0E8E: 62 D0 00 MOV   REG[0xD0],0x0      
0E91: 58 07    MOV   X,[previousSecond|elapsedSeconds+7]
0E93: 51 08    MOV   A,[previousSecond|elapsedSeconds+8]
                                        (0326) .ENDSECTION
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0330) ;				   ADCINC_wGetData
                                        (0331) ;
                                        (0332) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0333) ;                   available.
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;  ARGUMENTS:    None.
                                        (0336) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0337) ;  SIDE EFFECTS:
                                        (0338) ;    The A and X registers may be modified by this or future implementations
                                        (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0342) ;    functions.
                                        (0343) ;          
                                        (0344) ;    Currently only the page pointer registers listed below are modified: 
                                        (0345) ;          CUR_PP
                                        (0346) ;
                                        (0347)  ADCINC_iGetData:
                                        (0348) _ADCINC_iGetData:
                                        (0349)  ADCINC_wGetData:
                                        (0350) _ADCINC_wGetData:
                                        (0351)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0352)    ADCINC_wGetData_M          
                                        (0353)    RAM_EPILOGUE RAM_USE_CLASS_4
0E95: 7F       RET                      (0354)    ret
0E96: 62 D0 00 MOV   REG[0xD0],0x0      
0E99: 51 08    MOV   A,[previousSecond|elapsedSeconds+8]
                                        (0355) .ENDSECTION
                                        (0356) .SECTION
                                        (0357) ;-----------------------------------------------------------------------------
                                        (0358) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0359) ;                  ADCINC_cGetData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0362) ;                   available.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  ARGUMENTS:    None.
                                        (0365) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0366) ;  SIDE EFFECTS:
                                        (0367) ;    The A and X registers may be modified by this or future implementations
                                        (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0371) ;    functions.
                                        (0372) ;          
                                        (0373) ;    Currently only the page pointer registers listed below are modified: 
                                        (0374) ;          CUR_PP
                                        (0375) ;
                                        (0376)  ADCINC_bGetData:
                                        (0377) _ADCINC_bGetData:
                                        (0378)  ADCINC_cGetData:
                                        (0379) _ADCINC_cGetData:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0381)    ADCINC_cGetData_M        
                                        (0382)    RAM_EPILOGUE RAM_USE_CLASS_4
0E9B: 7F       RET                      (0383)    ret
0E9C: 62 D0 00 MOV   REG[0xD0],0x0      
0E9F: 51 0B    MOV   A,[previousSecond|elapsedSeconds+11]
0EA1: 55 0B 00 MOV   [previousSecond|elapsedSeconds+11],0x0
                                        (0384) .ENDSECTION
                                        (0385) 
                                        (0386) 
                                        (0387) .SECTION
                                        (0388) ;-----------------------------------------------------------------------------
                                        (0389) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0390) ;
                                        (0391) ;  DESCRIPTION: Clears the data ready flag.
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  ARGUMENTS:    None.
                                        (0394) ;  RETURNS:      Nothing.
                                        (0395) ;  SIDE EFFECTS: 
                                        (0396) ;    The DATA_READY flag is cleared.
                                        (0397) ;    
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;          
                                        (0404) ;    Currently only the page pointer registers listed below are modified: 
                                        (0405) ;          CUR_PP
                                        (0406) ;
                                        (0407)  ADCINC_fClearFlag:
                                        (0408) _ADCINC_fClearFlag:
                                        (0409)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0410)    ADCINC_fClearFlag_M    
                                        (0411)    RAM_EPILOGUE RAM_USE_CLASS_4
0EA4: 7F       RET                      (0412)    ret
0EA5: 60 22    MOV   REG[0x22],A        
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;
                                        (0424) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0425) ;  RETURNS:   Nothing
                                        (0426) ;  SIDE EFFECTS:
                                        (0427) ;    The A and X registers may be modified by this or future implementations
                                        (0428) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0429) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0430) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0431) ;    functions.
                                        (0432) ;
                                        (0433)  ADCINC_WritePulseWidth:
                                        (0434) _ADCINC_WritePulseWidth:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0436)    ADCINC_WritePulseWidth_M  
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
0EA7: 7F       RET                      (0438)    ret
                                        (0439) .ENDSECTION
                                        (0440) 
                                        (0441) ; End of File ADCINC.asm
FILE: C:\Users\Rod\Desktop\RTC\RTC\bcdutil.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "BcdUtil.h"
(0004) 
(0005) void bcdToDec(BYTE bcd10, BYTE bcd, BYTE *dec)
(0006) {
__UserModules_end|__text_start|_bcdToDec|_bcdToDec:
  dec                  --> X-7
  bcd                  --> X-5
  bcd10                --> X-4
    0EA8: 10       PUSH  X
    0EA9: 4F       MOV   X,SP
(0007) 	*dec = (bcd10 & 0xf) * 10 + (bcd & 0xf);
    0EAA: 62 D0 00 MOV   REG[0xD0],0x0
    0EAD: 52 FB    MOV   A,[X-5]
    0EAF: 21 0F    AND   A,0xF
    0EB1: 53 90    MOV   [__r0],A
    0EB3: 52 FC    MOV   A,[X-4]
    0EB5: 21 0F    AND   A,0xF
    0EB7: 60 E8    MOV   REG[0xE8],A
    0EB9: 62 E9 0A MOV   REG[0xE9],0xA
    0EBC: 40       NOP   
    0EBD: 5D EB    MOV   A,REG[0xEB]
    0EBF: 02 90    ADD   A,[__r0]
    0EC1: 53 90    MOV   [__r0],A
    0EC3: 52 FA    MOV   A,[X-6]
    0EC5: 53 8D    MOV   [__r3],A
    0EC7: 52 F9    MOV   A,[X-7]
    0EC9: 60 D5    MOV   REG[0xD5],A
    0ECB: 51 90    MOV   A,[__r0]
    0ECD: 3F 8D    MVI   [__r3],A
    0ECF: 20       POP   X
    0ED0: 7F       RET   
(0008) }
(0009) 
(0010) void decToBcd(BYTE *bcd10, BYTE *bcd, BYTE dec)
(0011) {
_decToBcd:
  dec                  --> X-8
  bcd                  --> X-7
  bcd10                --> X-5
    0ED1: 10       PUSH  X
    0ED2: 4F       MOV   X,SP
(0012) 	*bcd10 = dec/10;
    0ED3: 62 D0 00 MOV   REG[0xD0],0x0
    0ED6: 50 0A    MOV   A,0xA
    0ED8: 08       PUSH  A
    0ED9: 52 F8    MOV   A,[X-8]
    0EDB: 08       PUSH  A
    0EDC: 7C 33 1D LCALL 0x331D
    0EDF: 18       POP   A
    0EE0: 53 90    MOV   [__r0],A
    0EE2: 38 FF    ADD   SP,0xFF
    0EE4: 52 FC    MOV   A,[X-4]
    0EE6: 53 8D    MOV   [__r3],A
    0EE8: 52 FB    MOV   A,[X-5]
    0EEA: 60 D5    MOV   REG[0xD5],A
    0EEC: 51 90    MOV   A,[__r0]
    0EEE: 3F 8D    MVI   [__r3],A
(0013) 	*bcd = dec - (*bcd10 * 10);
    0EF0: 52 FC    MOV   A,[X-4]
    0EF2: 53 8F    MOV   [__r1],A
    0EF4: 52 FB    MOV   A,[X-5]
    0EF6: 60 D4    MOV   REG[0xD4],A
    0EF8: 3E 8F    MVI   A,[__r1]
    0EFA: 60 E8    MOV   REG[0xE8],A
    0EFC: 62 E9 0A MOV   REG[0xE9],0xA
    0EFF: 40       NOP   
    0F00: 5D EB    MOV   A,REG[0xEB]
    0F02: 53 90    MOV   [__r0],A
    0F04: 52 F8    MOV   A,[X-8]
    0F06: 12 90    SUB   A,[__r0]
    0F08: 53 90    MOV   [__r0],A
    0F0A: 52 FA    MOV   A,[X-6]
    0F0C: 53 8D    MOV   [__r3],A
    0F0E: 52 F9    MOV   A,[X-7]
    0F10: 60 D5    MOV   REG[0xD5],A
    0F12: 51 90    MOV   A,[__r0]
    0F14: 3F 8D    MVI   [__r3],A
    0F16: 20       POP   X
    0F17: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\configview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "configView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void ConfigView_Start(void)
(0014) {
_ConfigView_Start:
    0F18: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void ConfigView_Callback(void)
(0019) {
_ConfigView_Callback:
  conf                 --> X+0
    0F19: 10       PUSH  X
    0F1A: 4F       MOV   X,SP
    0F1B: 38 0B    ADD   SP,0xB
(0020) 	Config conf;
(0021) 	Persist_LoadConfig(&conf);
    0F1D: 62 D0 00 MOV   REG[0xD0],0x0
    0F20: 50 07    MOV   A,0x7
    0F22: 08       PUSH  A
    0F23: 10       PUSH  X
    0F24: 7C 21 D1 LCALL _Persist_LoadConfig
    0F27: 38 FE    ADD   SP,0xFE
(0022) 
(0023) 	currentView = CONFIG;
    0F29: 62 D0 00 MOV   REG[0xD0],0x0
    0F2C: 55 A6 04 MOV   [currentView],0x4
(0024) 	Menu_Clear();
    0F2F: 7C 20 68 LCALL _Menu_Clear
(0025) 	LCD_Position(0, 0);
    0F32: 10       PUSH  X
    0F33: 50 00    MOV   A,0x0
    0F35: 57 00    MOV   X,0x0
    0F37: 7C 09 71 LCALL _LCD_Position
    0F3A: 20       POP   X
(0026) 	if(conf.flags.registerEnabled)
    0F3B: 52 00    MOV   A,[X+0]
    0F3D: 62 D0 00 MOV   REG[0xD0],0x0
    0F40: 67       ASR   A
    0F41: 67       ASR   A
    0F42: 67       ASR   A
    0F43: 67       ASR   A
    0F44: 67       ASR   A
    0F45: 67       ASR   A
    0F46: 67       ASR   A
    0F47: 21 01    AND   A,0x1
    0F49: 53 90    MOV   [__r0],A
    0F4B: 26 90 01 AND   [__r0],0x1
    0F4E: A0 0F    JZ    0x0F5E
(0027) 	{
(0028) 		LCD_PrCString("Registrar: Si");
    0F50: 10       PUSH  X
    0F51: 50 01    MOV   A,0x1
    0F53: 08       PUSH  A
    0F54: 50 CA    MOV   A,0xCA
    0F56: 5C       MOV   X,A
    0F57: 18       POP   A
    0F58: 7C 07 EC LCALL _LCD_PrCString
    0F5B: 20       POP   X
(0029) 	}
    0F5C: 80 0D    JMP   0x0F6A
(0030) 	else
(0031) 	{
(0032) 		LCD_PrCString("Registrar: No");
    0F5E: 10       PUSH  X
    0F5F: 50 01    MOV   A,0x1
    0F61: 08       PUSH  A
    0F62: 50 BC    MOV   A,0xBC
    0F64: 5C       MOV   X,A
    0F65: 18       POP   A
    0F66: 7C 07 EC LCALL _LCD_PrCString
    0F69: 20       POP   X
(0033) 
(0034) 	}
(0035) 	LCD_Position(1,0);
    0F6A: 10       PUSH  X
    0F6B: 57 00    MOV   X,0x0
    0F6D: 50 01    MOV   A,0x1
    0F6F: 7C 09 71 LCALL _LCD_Position
    0F72: 20       POP   X
(0036) 	if(conf.flags.alarmEnabled)
    0F73: 52 00    MOV   A,[X+0]
    0F75: 62 D0 00 MOV   REG[0xD0],0x0
    0F78: 67       ASR   A
    0F79: 67       ASR   A
    0F7A: 67       ASR   A
    0F7B: 67       ASR   A
    0F7C: 67       ASR   A
    0F7D: 67       ASR   A
    0F7E: 21 03    AND   A,0x3
    0F80: 53 90    MOV   [__r0],A
    0F82: 26 90 01 AND   [__r0],0x1
    0F85: A0 0F    JZ    0x0F95
(0037) 	{
(0038) 		LCD_PrCString("Alarma:    Si");
    0F87: 10       PUSH  X
    0F88: 50 01    MOV   A,0x1
    0F8A: 08       PUSH  A
    0F8B: 50 AE    MOV   A,0xAE
    0F8D: 5C       MOV   X,A
    0F8E: 18       POP   A
    0F8F: 7C 07 EC LCALL _LCD_PrCString
    0F92: 20       POP   X
(0039) 	}
    0F93: 80 0D    JMP   0x0FA1
(0040) 	else
(0041) 	{
(0042) 		LCD_PrCString("Alarma:    No");
    0F95: 10       PUSH  X
    0F96: 50 01    MOV   A,0x1
    0F98: 08       PUSH  A
    0F99: 50 A0    MOV   A,0xA0
    0F9B: 5C       MOV   X,A
    0F9C: 18       POP   A
    0F9D: 7C 07 EC LCALL _LCD_PrCString
    0FA0: 20       POP   X
(0043) 	}
    0FA1: 38 F5    ADD   SP,0xF5
    0FA3: 20       POP   X
    0FA4: 7F       RET   
(0044) }
(0045) 
(0046) void ConfigView_Update(void)
(0047) {
_ConfigView_Update:
  conf                 --> X+0
    0FA5: 10       PUSH  X
    0FA6: 4F       MOV   X,SP
    0FA7: 38 11    ADD   SP,0x11
(0048) 	if(Keypad_IsKeyStored())
    0FA9: 7C 16 B7 LCALL _Keypad_IsKeyStored
    0FAC: 62 D0 00 MOV   REG[0xD0],0x0
    0FAF: 39 00    CMP   A,0x0
    0FB1: A1 5D    JZ    0x110F
(0049) 	{
(0050) 		Config conf;
(0051) 		Persist_LoadConfig(&conf);
    0FB3: 50 07    MOV   A,0x7
    0FB5: 08       PUSH  A
    0FB6: 10       PUSH  X
    0FB7: 7C 21 D1 LCALL _Persist_LoadConfig
    0FBA: 38 FE    ADD   SP,0xFE
    0FBC: 62 D0 00 MOV   REG[0xD0],0x0
(0052) 
(0053) 		switch(Keypad_GetKey())
    0FBF: 7C 16 CF LCALL _Keypad_GetKey
    0FC2: 62 D0 00 MOV   REG[0xD0],0x0
    0FC5: 54 0C    MOV   [X+12],A
    0FC7: 56 0B 00 MOV   [X+11],0x0
    0FCA: 52 0C    MOV   A,[X+12]
    0FCC: 11 48    SUB   A,0x48
    0FCE: 53 83    MOV   [__rY],A
    0FD0: 52 0B    MOV   A,[X+11]
    0FD2: 31 80    XOR   A,0x80
    0FD4: 19 80    SBB   A,0x80
    0FD6: 2A 83    OR    A,[__rY]
    0FD8: A0 6E    JZ    0x1047
    0FDA: D0 0D    JNC   0x0FE8
    0FDC: 3D 0B 00 CMP   [X+11],0x0
    0FDF: B0 06    JNZ   0x0FE6
    0FE1: 3D 0C 11 CMP   [X+12],0x11
    0FE4: A0 B3    JZ    0x1098
    0FE6: 80 B6    JMP   0x109D
    0FE8: 3D 0B 00 CMP   [X+11],0x0
    0FEB: B0 06    JNZ   0x0FF2
    0FED: 3D 0C 88 CMP   [X+12],0x88
    0FF0: A0 03    JZ    0x0FF4
    0FF2: 80 AA    JMP   0x109D
(0054) 		{
(0055) 			case 0x88:
(0056) 				// "1"
(0057) 				conf.flags.registerEnabled = !conf.flags.registerEnabled;
    0FF4: 52 00    MOV   A,[X+0]
    0FF6: 62 D0 00 MOV   REG[0xD0],0x0
    0FF9: 67       ASR   A
    0FFA: 67       ASR   A
    0FFB: 67       ASR   A
    0FFC: 67       ASR   A
    0FFD: 67       ASR   A
    0FFE: 67       ASR   A
    0FFF: 67       ASR   A
    1000: 21 01    AND   A,0x1
    1002: 53 90    MOV   [__r0],A
    1004: 26 90 01 AND   [__r0],0x1
    1007: B0 09    JNZ   0x1011
    1009: 56 0E 01 MOV   [X+14],0x1
    100C: 56 0D 00 MOV   [X+13],0x0
    100F: 80 07    JMP   0x1017
    1011: 56 0E 00 MOV   [X+14],0x0
    1014: 56 0D 00 MOV   [X+13],0x0
    1017: 62 D0 00 MOV   REG[0xD0],0x0
    101A: 52 0E    MOV   A,[X+14]
    101C: 53 90    MOV   [__r0],A
    101E: 26 90 01 AND   [__r0],0x1
    1021: 51 90    MOV   A,[__r0]
    1023: 64       ASL   A
    1024: 64       ASL   A
    1025: 64       ASL   A
    1026: 64       ASL   A
    1027: 64       ASL   A
    1028: 64       ASL   A
    1029: 64       ASL   A
    102A: 53 90    MOV   [__r0],A
    102C: 26 90 80 AND   [__r0],0x80
    102F: 52 00    MOV   A,[X+0]
    1031: 21 7F    AND   A,0x7F
    1033: 2A 90    OR    A,[__r0]
    1035: 54 00    MOV   [X+0],A
(0058) 				Persist_SaveConfig(&conf);
    1037: 50 07    MOV   A,0x7
    1039: 08       PUSH  A
    103A: 10       PUSH  X
    103B: 7C 21 AB LCALL _Persist_SaveConfig
    103E: 38 FE    ADD   SP,0xFE
    1040: 62 D0 00 MOV   REG[0xD0],0x0
    1043: 53 90    MOV   [__r0],A
(0059) 				break;
    1045: 80 57    JMP   0x109D
(0060) 			case 0x48:
(0061) 				// "4"
(0062) 				conf.flags.alarmEnabled = !conf.flags.alarmEnabled;
    1047: 52 00    MOV   A,[X+0]
    1049: 62 D0 00 MOV   REG[0xD0],0x0
    104C: 67       ASR   A
    104D: 67       ASR   A
    104E: 67       ASR   A
    104F: 67       ASR   A
    1050: 67       ASR   A
    1051: 67       ASR   A
    1052: 21 03    AND   A,0x3
    1054: 53 90    MOV   [__r0],A
    1056: 26 90 01 AND   [__r0],0x1
    1059: B0 09    JNZ   0x1063
    105B: 56 10 01 MOV   [X+16],0x1
    105E: 56 0F 00 MOV   [X+15],0x0
    1061: 80 07    JMP   0x1069
    1063: 56 10 00 MOV   [X+16],0x0
    1066: 56 0F 00 MOV   [X+15],0x0
    1069: 62 D0 00 MOV   REG[0xD0],0x0
    106C: 52 10    MOV   A,[X+16]
    106E: 53 90    MOV   [__r0],A
    1070: 26 90 01 AND   [__r0],0x1
    1073: 51 90    MOV   A,[__r0]
    1075: 64       ASL   A
    1076: 64       ASL   A
    1077: 64       ASL   A
    1078: 64       ASL   A
    1079: 64       ASL   A
    107A: 64       ASL   A
    107B: 53 90    MOV   [__r0],A
    107D: 26 90 40 AND   [__r0],0x40
    1080: 52 00    MOV   A,[X+0]
    1082: 21 BF    AND   A,0xBF
    1084: 2A 90    OR    A,[__r0]
    1086: 54 00    MOV   [X+0],A
(0063) 				Persist_SaveConfig(&conf);
    1088: 50 07    MOV   A,0x7
    108A: 08       PUSH  A
    108B: 10       PUSH  X
    108C: 7C 21 AB LCALL _Persist_SaveConfig
    108F: 38 FE    ADD   SP,0xFE
    1091: 62 D0 00 MOV   REG[0xD0],0x0
    1094: 53 90    MOV   [__r0],A
(0064) 				break;
    1096: 80 06    JMP   0x109D
(0065) 			case 0x11:
(0066) 				// "D"
(0067) 				MainView_Callback();
    1098: 7C 1D 7E LCALL _MainView_Callback
(0068) 				return;
    109B: 80 73    JMP   0x110F
(0069) 				break;
(0070) 		}
(0071) 
(0072) 		Menu_Clear();
    109D: 7C 20 68 LCALL _Menu_Clear
(0073) 		LCD_Position(0, 0);
    10A0: 10       PUSH  X
    10A1: 50 00    MOV   A,0x0
    10A3: 57 00    MOV   X,0x0
    10A5: 7C 09 71 LCALL _LCD_Position
    10A8: 20       POP   X
(0074) 		if(conf.flags.registerEnabled)
    10A9: 52 00    MOV   A,[X+0]
    10AB: 62 D0 00 MOV   REG[0xD0],0x0
    10AE: 67       ASR   A
    10AF: 67       ASR   A
    10B0: 67       ASR   A
    10B1: 67       ASR   A
    10B2: 67       ASR   A
    10B3: 67       ASR   A
    10B4: 67       ASR   A
    10B5: 21 01    AND   A,0x1
    10B7: 53 90    MOV   [__r0],A
    10B9: 26 90 01 AND   [__r0],0x1
    10BC: A0 0F    JZ    0x10CC
(0075) 		{
(0076) 			LCD_PrCString("Registrar: Si");
    10BE: 10       PUSH  X
    10BF: 50 01    MOV   A,0x1
    10C1: 08       PUSH  A
    10C2: 50 CA    MOV   A,0xCA
    10C4: 5C       MOV   X,A
    10C5: 18       POP   A
    10C6: 7C 07 EC LCALL _LCD_PrCString
    10C9: 20       POP   X
(0077) 		}
    10CA: 80 0D    JMP   0x10D8
(0078) 		else
(0079) 		{
(0080) 			LCD_PrCString("Registrar: No");
    10CC: 10       PUSH  X
    10CD: 50 01    MOV   A,0x1
    10CF: 08       PUSH  A
    10D0: 50 BC    MOV   A,0xBC
    10D2: 5C       MOV   X,A
    10D3: 18       POP   A
    10D4: 7C 07 EC LCALL _LCD_PrCString
    10D7: 20       POP   X
(0081) 
(0082) 		}
(0083) 		LCD_Position(1,0);
    10D8: 10       PUSH  X
    10D9: 57 00    MOV   X,0x0
    10DB: 50 01    MOV   A,0x1
    10DD: 7C 09 71 LCALL _LCD_Position
    10E0: 20       POP   X
(0084) 		if(conf.flags.alarmEnabled)
    10E1: 52 00    MOV   A,[X+0]
    10E3: 62 D0 00 MOV   REG[0xD0],0x0
    10E6: 67       ASR   A
    10E7: 67       ASR   A
    10E8: 67       ASR   A
    10E9: 67       ASR   A
    10EA: 67       ASR   A
    10EB: 67       ASR   A
    10EC: 21 03    AND   A,0x3
    10EE: 53 90    MOV   [__r0],A
    10F0: 26 90 01 AND   [__r0],0x1
    10F3: A0 0F    JZ    0x1103
(0085) 		{
(0086) 			LCD_PrCString("Alarma:    Si");
    10F5: 10       PUSH  X
    10F6: 50 01    MOV   A,0x1
    10F8: 08       PUSH  A
    10F9: 50 AE    MOV   A,0xAE
    10FB: 5C       MOV   X,A
    10FC: 18       POP   A
    10FD: 7C 07 EC LCALL _LCD_PrCString
    1100: 20       POP   X
(0087) 		}
    1101: 80 0D    JMP   0x110F
(0088) 		else
(0089) 		{
(0090) 			LCD_PrCString("Alarma:    No");
    1103: 10       PUSH  X
    1104: 50 01    MOV   A,0x1
    1106: 08       PUSH  A
    1107: 50 A0    MOV   A,0xA0
    1109: 5C       MOV   X,A
    110A: 18       POP   A
    110B: 7C 07 EC LCALL _LCD_PrCString
    110E: 20       POP   X
(0091) 		}
(0092) 	}
    110F: 38 EF    ADD   SP,0xEF
    1111: 20       POP   X
    1112: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\datetimeview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "dateTimeView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "Time.h"
(0007) #include "Rtc.h"
(0008) #include "viewManager.h"
(0009) #include "Keypad.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void DateTimeView_Start(void)
(0014) {
_DateTimeView_Start:
    1113: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void DateTimeView_Callback(void)
(0019) {
(0020) 	currentView = DATETIME_CONFIG;
_DateTimeView_Callback:
    1114: 62 D0 00 MOV   REG[0xD0],0x0
    1117: 55 A6 01 MOV   [currentView],0x1
(0021) 	Menu_Clear();
    111A: 7C 20 68 LCALL _Menu_Clear
(0022) 	LCD_Position(0, 0);
    111D: 10       PUSH  X
    111E: 50 00    MOV   A,0x0
    1120: 57 00    MOV   X,0x0
    1122: 7C 09 71 LCALL _LCD_Position
(0023) 	LCD_PrCString("00/00/00");
    1125: 50 01    MOV   A,0x1
    1127: 08       PUSH  A
    1128: 50 E1    MOV   A,0xE1
    112A: 5C       MOV   X,A
    112B: 18       POP   A
    112C: 7C 07 EC LCALL _LCD_PrCString
(0024) 	LCD_Position(1,0);
    112F: 57 00    MOV   X,0x0
    1131: 50 01    MOV   A,0x1
    1133: 7C 09 71 LCALL _LCD_Position
(0025) 	LCD_PrCString("00:00:00");
    1136: 50 01    MOV   A,0x1
    1138: 08       PUSH  A
    1139: 50 D8    MOV   A,0xD8
    113B: 5C       MOV   X,A
    113C: 18       POP   A
    113D: 7C 07 EC LCALL _LCD_PrCString
    1140: 20       POP   X
    1141: 7F       RET   
(0026) }
(0027) 
(0028) void DateTimeView_Update(void)
(0029) {
_DateTimeView_Update:
    1142: 10       PUSH  X
    1143: 4F       MOV   X,SP
    1144: 38 02    ADD   SP,0x2
(0030) 	if(Keypad_IsKeyStored())
    1146: 7C 16 B7 LCALL _Keypad_IsKeyStored
    1149: 62 D0 00 MOV   REG[0xD0],0x0
    114C: 39 00    CMP   A,0x0
    114E: A1 32    JZ    0x1281
(0031) 	{
(0032) 		switch(Keypad_GetKey())
    1150: 7C 16 CF LCALL _Keypad_GetKey
    1153: 62 D0 00 MOV   REG[0xD0],0x0
    1156: 54 01    MOV   [X+1],A
    1158: 56 00 00 MOV   [X+0],0x0
    115B: 3D 00 00 CMP   [X+0],0x0
    115E: B0 06    JNZ   0x1165
    1160: 3D 01 42 CMP   [X+1],0x42
    1163: A0 DE    JZ    0x1242
    1165: 52 01    MOV   A,[X+1]
    1167: 11 44    SUB   A,0x44
    1169: 62 D0 00 MOV   REG[0xD0],0x0
    116C: 53 83    MOV   [__rY],A
    116E: 52 00    MOV   A,[X+0]
    1170: 31 80    XOR   A,0x80
    1172: 19 80    SBB   A,0x80
    1174: 2A 83    OR    A,[__rY]
    1176: A0 C1    JZ    0x1238
    1178: D0 56    JNC   0x11CF
    117A: 3D 00 00 CMP   [X+0],0x0
    117D: B0 06    JNZ   0x1184
    117F: 3D 01 22 CMP   [X+1],0x22
    1182: A0 DD    JZ    0x1260
    1184: 52 01    MOV   A,[X+1]
    1186: 11 24    SUB   A,0x24
    1188: 62 D0 00 MOV   REG[0xD0],0x0
    118B: 53 83    MOV   [__rY],A
    118D: 52 00    MOV   A,[X+0]
    118F: 31 80    XOR   A,0x80
    1191: 19 80    SBB   A,0x80
    1193: 2A 83    OR    A,[__rY]
    1195: A0 C0    JZ    0x1256
    1197: D0 2B    JNC   0x11C3
    1199: 3D 00 00 CMP   [X+0],0x0
    119C: B0 06    JNZ   0x11A3
    119E: 3D 01 11 CMP   [X+1],0x11
    11A1: A0 C8    JZ    0x126A
    11A3: 3D 00 00 CMP   [X+0],0x0
    11A6: B0 06    JNZ   0x11AD
    11A8: 3D 01 12 CMP   [X+1],0x12
    11AB: A0 CD    JZ    0x1279
    11AD: 3D 00 00 CMP   [X+0],0x0
    11B0: B0 06    JNZ   0x11B7
    11B2: 3D 01 14 CMP   [X+1],0x14
    11B5: A0 50    JZ    0x1206
    11B7: 3D 00 00 CMP   [X+0],0x0
    11BA: B0 06    JNZ   0x11C1
    11BC: 3D 01 18 CMP   [X+1],0x18
    11BF: A0 AF    JZ    0x126F
    11C1: 80 BF    JMP   0x1281
    11C3: 3D 00 00 CMP   [X+0],0x0
    11C6: B0 06    JNZ   0x11CD
    11C8: 3D 01 28 CMP   [X+1],0x28
    11CB: A0 80    JZ    0x124C
    11CD: 80 B3    JMP   0x1281
    11CF: 3D 00 00 CMP   [X+0],0x0
    11D2: B0 06    JNZ   0x11D9
    11D4: 3D 01 82 CMP   [X+1],0x82
    11D7: A0 4C    JZ    0x1224
    11D9: 52 01    MOV   A,[X+1]
    11DB: 11 84    SUB   A,0x84
    11DD: 62 D0 00 MOV   REG[0xD0],0x0
    11E0: 53 83    MOV   [__rY],A
    11E2: 52 00    MOV   A,[X+0]
    11E4: 31 80    XOR   A,0x80
    11E6: 19 80    SBB   A,0x80
    11E8: 2A 83    OR    A,[__rY]
    11EA: A0 2F    JZ    0x121A
    11EC: D0 0D    JNC   0x11FA
    11EE: 3D 00 00 CMP   [X+0],0x0
    11F1: B0 06    JNZ   0x11F8
    11F3: 3D 01 48 CMP   [X+1],0x48
    11F6: A0 37    JZ    0x122E
    11F8: 80 88    JMP   0x1281
    11FA: 3D 00 00 CMP   [X+0],0x0
    11FD: B0 06    JNZ   0x1204
    11FF: 3D 01 88 CMP   [X+1],0x88
    1202: A0 0D    JZ    0x1210
    1204: 80 7C    JMP   0x1281
(0033) 		{
(0034) 			case 0x14:
(0035) 					// "0"
(0036) 					Time_Adj_Mi(TIME_DOWN);
    1206: 50 00    MOV   A,0x0
    1208: 08       PUSH  A
    1209: 7C 2C 10 LCALL _Time_Adj_Mi
    120C: 38 FF    ADD   SP,0xFF
(0037) 					break;
    120E: 80 72    JMP   0x1281
(0038) 				case 0x88:
(0039) 					// "1"
(0040) 					Time_Adj_D(TIME_UP);
    1210: 50 01    MOV   A,0x1
    1212: 08       PUSH  A
    1213: 7C 2E C8 LCALL _Time_Adj_D
    1216: 38 FF    ADD   SP,0xFF
(0041) 					break;
    1218: 80 68    JMP   0x1281
(0042) 				case 0x84:
(0043) 					// "2"
(0044) 					Time_Adj_Mo(TIME_UP);
    121A: 50 01    MOV   A,0x1
    121C: 08       PUSH  A
    121D: 7C 30 35 LCALL _Time_Adj_Mo
    1220: 38 FF    ADD   SP,0xFF
(0045) 					break;
    1222: 80 5E    JMP   0x1281
(0046) 				case 0x82:
(0047) 					// "3"
(0048) 					Time_Adj_Y(TIME_UP);
    1224: 50 01    MOV   A,0x1
    1226: 08       PUSH  A
    1227: 7C 31 A3 LCALL _Time_Adj_Y
    122A: 38 FF    ADD   SP,0xFF
(0049) 					break;
    122C: 80 54    JMP   0x1281
(0050) 				case 0x48:
(0051) 					// "4"
(0052) 					Time_Adj_D(TIME_DOWN);
    122E: 50 00    MOV   A,0x0
    1230: 08       PUSH  A
    1231: 7C 2E C8 LCALL _Time_Adj_D
    1234: 38 FF    ADD   SP,0xFF
(0053) 					break;
    1236: 80 4A    JMP   0x1281
(0054) 				case 0x44:
(0055) 					// "5"
(0056) 					Time_Adj_Mo(TIME_DOWN);
    1238: 50 00    MOV   A,0x0
    123A: 08       PUSH  A
    123B: 7C 30 35 LCALL _Time_Adj_Mo
    123E: 38 FF    ADD   SP,0xFF
(0057) 					break;
    1240: 80 40    JMP   0x1281
(0058) 				case 0x42:
(0059) 					// "6"
(0060) 					Time_Adj_Y(TIME_DOWN);
    1242: 50 00    MOV   A,0x0
    1244: 08       PUSH  A
    1245: 7C 31 A3 LCALL _Time_Adj_Y
    1248: 38 FF    ADD   SP,0xFF
(0061) 					break;
    124A: 80 36    JMP   0x1281
(0062) 				case 0x28:
(0063) 					// "7"
(0064) 					Time_Adj_H(TIME_UP);
    124C: 50 01    MOV   A,0x1
    124E: 08       PUSH  A
    124F: 7C 2C CE LCALL _Time_Adj_H
    1252: 38 FF    ADD   SP,0xFF
(0065) 					break;
    1254: 80 2C    JMP   0x1281
(0066) 				case 0x24:
(0067) 					// "8"
(0068) 					Time_Adj_Mi(TIME_UP);
    1256: 50 01    MOV   A,0x1
    1258: 08       PUSH  A
    1259: 7C 2C 10 LCALL _Time_Adj_Mi
    125C: 38 FF    ADD   SP,0xFF
(0069) 					break;
    125E: 80 22    JMP   0x1281
(0070) 				case 0x22:
(0071) 					// "9"
(0072) 					Time_Adj_S(TIME_UP);
    1260: 50 01    MOV   A,0x1
    1262: 08       PUSH  A
    1263: 7C 2B 52 LCALL _Time_Adj_S
    1266: 38 FF    ADD   SP,0xFF
(0073) 					break;
    1268: 80 18    JMP   0x1281
(0074) 				case 0x11:
(0075) 					// "D"
(0076) 					MainView_Callback();
    126A: 7C 1D 7E LCALL _MainView_Callback
(0077) 					return;
    126D: 80 75    JMP   0x12E3
(0078) 					break;
(0079) 				case 0x18:
(0080) 					// "*"
(0081) 					Time_Adj_H(TIME_DOWN);
    126F: 50 00    MOV   A,0x0
    1271: 08       PUSH  A
    1272: 7C 2C CE LCALL _Time_Adj_H
    1275: 38 FF    ADD   SP,0xFF
(0082) 					break;
    1277: 80 09    JMP   0x1281
(0083) 				case 0x12:
(0084) 					// "#"
(0085) 					Time_Adj_S(TIME_DOWN);
    1279: 50 00    MOV   A,0x0
    127B: 08       PUSH  A
    127C: 7C 2B 52 LCALL _Time_Adj_S
    127F: 38 FF    ADD   SP,0xFF
(0086) 					break;
(0087) 		}
(0088) 	}
(0089) 
(0090) 	Rtc_ReadFromRtc();
    1281: 7C 24 E8 LCALL _Rtc_ReadFromRtc
    1284: 62 D0 00 MOV   REG[0xD0],0x0
(0091) 	
(0092) 	LCD_Position(0, 0);
    1287: 10       PUSH  X
    1288: 50 00    MOV   A,0x0
    128A: 57 00    MOV   X,0x0
    128C: 7C 09 71 LCALL _LCD_Position
(0093) 	LCD_PrHexByte(datetime._04h.byte);
    128F: 62 D0 00 MOV   REG[0xD0],0x0
    1292: 51 95    MOV   A,[datetime+4]
    1294: 7C 08 0E LCALL _LCD_PrHexByte
(0094) 	LCD_Position(0, 3);
    1297: 57 03    MOV   X,0x3
    1299: 50 00    MOV   A,0x0
    129B: 7C 09 71 LCALL _LCD_Position
(0095) 	LCD_PrHexByte(datetime._05h.byte);
    129E: 62 D0 00 MOV   REG[0xD0],0x0
    12A1: 51 96    MOV   A,[datetime+5]
    12A3: 7C 08 0E LCALL _LCD_PrHexByte
(0096) 	LCD_Position(0, 6);
    12A6: 57 06    MOV   X,0x6
    12A8: 50 00    MOV   A,0x0
    12AA: 7C 09 71 LCALL _LCD_Position
(0097) 	LCD_PrHexByte(datetime._06h.byte);
    12AD: 62 D0 00 MOV   REG[0xD0],0x0
    12B0: 51 97    MOV   A,[datetime+6]
    12B2: 7C 08 0E LCALL _LCD_PrHexByte
(0098) 
(0099) 	LCD_Position(1, 0);
    12B5: 57 00    MOV   X,0x0
    12B7: 50 01    MOV   A,0x1
    12B9: 7C 09 71 LCALL _LCD_Position
(0100) 	/*if(is12h)
(0101) 	{
(0102) 		LCD_PrHexByte(datetime._02h.bits_ampm.hours | (datetime._02h.bits_ampm.hours10 << 4));
(0103) 	}
(0104) 	else
(0105) 	{*/
(0106) 		LCD_PrHexByte(datetime._02h.byte);
    12BC: 62 D0 00 MOV   REG[0xD0],0x0
    12BF: 51 93    MOV   A,[datetime+2]
    12C1: 7C 08 0E LCALL _LCD_PrHexByte
(0107) 	//}
(0108) 	LCD_Position(1, 3);
    12C4: 57 03    MOV   X,0x3
    12C6: 50 01    MOV   A,0x1
    12C8: 7C 09 71 LCALL _LCD_Position
(0109) 	LCD_PrHexByte(datetime._01h.byte);
    12CB: 62 D0 00 MOV   REG[0xD0],0x0
    12CE: 51 92    MOV   A,[datetime+1]
    12D0: 7C 08 0E LCALL _LCD_PrHexByte
(0110) 	LCD_Position(1, 6);
    12D3: 57 06    MOV   X,0x6
    12D5: 50 01    MOV   A,0x1
    12D7: 7C 09 71 LCALL _LCD_Position
(0111) 	LCD_PrHexByte(datetime._00h.byte);
    12DA: 62 D0 00 MOV   REG[0xD0],0x0
    12DD: 51 91    MOV   A,[datetime]
    12DF: 7C 08 0E LCALL _LCD_PrHexByte
    12E2: 20       POP   X
    12E3: 38 FE    ADD   SP,0xFE
    12E5: 20       POP   X
    12E6: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\dateutil.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "dateUtil.h"
(0004) 
(0005) BOOL isLeapYear(unsigned short year)
(0006) {
_isLeapYear:
  year                 --> X-5
    12E7: 10       PUSH  X
    12E8: 4F       MOV   X,SP
    12E9: 38 02    ADD   SP,0x2
(0007) 	return (!(year%4) && (year%100) || !(year%400));
    12EB: 62 D0 00 MOV   REG[0xD0],0x0
    12EE: 52 FC    MOV   A,[X-4]
    12F0: 21 03    AND   A,0x3
    12F2: 53 8F    MOV   [__r1],A
    12F4: 52 FB    MOV   A,[X-5]
    12F6: 21 00    AND   A,0x0
    12F8: 39 00    CMP   A,0x0
    12FA: B0 27    JNZ   0x1322
    12FC: 3C 8F 00 CMP   [__r1],0x0
    12FF: B0 22    JNZ   0x1322
    1301: 62 D0 00 MOV   REG[0xD0],0x0
    1304: 50 00    MOV   A,0x0
    1306: 08       PUSH  A
    1307: 50 64    MOV   A,0x64
    1309: 08       PUSH  A
    130A: 52 FB    MOV   A,[X-5]
    130C: 08       PUSH  A
    130D: 52 FC    MOV   A,[X-4]
    130F: 08       PUSH  A
    1310: 7C 33 12 LCALL 0x3312
    1313: 38 FE    ADD   SP,0xFE
    1315: 18       POP   A
    1316: 53 8F    MOV   [__r1],A
    1318: 18       POP   A
    1319: 39 00    CMP   A,0x0
    131B: B0 27    JNZ   0x1343
    131D: 3C 8F 00 CMP   [__r1],0x0
    1320: B0 22    JNZ   0x1343
    1322: 62 D0 00 MOV   REG[0xD0],0x0
    1325: 50 01    MOV   A,0x1
    1327: 08       PUSH  A
    1328: 50 90    MOV   A,0x90
    132A: 08       PUSH  A
    132B: 52 FB    MOV   A,[X-5]
    132D: 08       PUSH  A
    132E: 52 FC    MOV   A,[X-4]
    1330: 08       PUSH  A
    1331: 7C 33 12 LCALL 0x3312
    1334: 38 FE    ADD   SP,0xFE
    1336: 18       POP   A
    1337: 53 8F    MOV   [__r1],A
    1339: 18       POP   A
    133A: 39 00    CMP   A,0x0
    133C: B0 0E    JNZ   0x134B
    133E: 3C 8F 00 CMP   [__r1],0x0
    1341: B0 09    JNZ   0x134B
    1343: 56 01 01 MOV   [X+1],0x1
    1346: 56 00 00 MOV   [X+0],0x0
    1349: 80 07    JMP   0x1351
    134B: 56 01 00 MOV   [X+1],0x0
    134E: 56 00 00 MOV   [X+0],0x0
    1351: 62 D0 00 MOV   REG[0xD0],0x0
    1354: 52 01    MOV   A,[X+1]
    1356: 38 FE    ADD   SP,0xFE
    1358: 20       POP   X
    1359: 7F       RET   
(0008) }
(0009) 
(0010) BOOL isValidDate(BYTE day, BYTE month, BYTE year)
(0011) {
_isValidDate:
  monthLen             --> X+2
  fullYear             --> X+0
  year                 --> X-6
  month                --> X-5
  day                  --> X-4
    135A: 10       PUSH  X
    135B: 4F       MOV   X,SP
    135C: 38 0E    ADD   SP,0xE
(0012) 	unsigned short fullYear = 2000 + year;
    135E: 62 D0 00 MOV   REG[0xD0],0x0
    1361: 52 FA    MOV   A,[X-6]
    1363: 53 8F    MOV   [__r1],A
    1365: 55 90 00 MOV   [__r0],0x0
    1368: 06 8F D0 ADD   [__r1],0xD0
    136B: 0E 90 07 ADC   [__r0],0x7
    136E: 51 8F    MOV   A,[__r1]
    1370: 54 01    MOV   [X+1],A
    1372: 51 90    MOV   A,[__r0]
    1374: 54 00    MOV   [X+0],A
(0013) 	BYTE monthLen[]={31,28,31,30,31,30,31,31,30,31,30,31};
    1376: 55 8F EA MOV   [__r1],0xEA
    1379: 55 90 01 MOV   [__r0],0x1
    137C: 5A 8D    MOV   [__r3],X
    137E: 06 8D 02 ADD   [__r3],0x2
    1381: 62 D5 07 MOV   REG[0xD5],0x7
    1384: 10       PUSH  X
    1385: 55 84 00 MOV   [__rX],0x0
    1388: 51 90    MOV   A,[__r0]
    138A: 58 8F    MOV   X,[__r1]
    138C: 08       PUSH  A
    138D: 28       ROMX  
    138E: 62 D0 00 MOV   REG[0xD0],0x0
    1391: 3F 8D    MVI   [__r3],A
    1393: 18       POP   A
    1394: 75       INC   X
    1395: 09 00    ADC   A,0x0
    1397: 76 84    INC   [__rX]
    1399: 3C 84 0C CMP   [__rX],0xC
    139C: BF EF    JNZ   0x138C
    139E: 20       POP   X
(0014) 	
(0015) 	if(year > 99) return FALSE;
    139F: 50 63    MOV   A,0x63
    13A1: 3B FA    CMP   A,[X-6]
    13A3: D0 08    JNC   0x13AC
    13A5: 62 D0 00 MOV   REG[0xD0],0x0
    13A8: 50 00    MOV   A,0x0
    13AA: 80 63    JMP   0x140E
(0016) 
(0017) 	if (!fullYear || !month || !day || month>12)
    13AC: 3D 00 00 CMP   [X+0],0x0
    13AF: B0 06    JNZ   0x13B6
    13B1: 3D 01 00 CMP   [X+1],0x0
    13B4: A0 11    JZ    0x13C6
    13B6: 3D FB 00 CMP   [X-5],0x0
    13B9: A0 0C    JZ    0x13C6
    13BB: 3D FC 00 CMP   [X-4],0x0
    13BE: A0 07    JZ    0x13C6
    13C0: 50 0C    MOV   A,0xC
    13C2: 3B FB    CMP   A,[X-5]
    13C4: D0 08    JNC   0x13CD
(0018) 		return FALSE;
    13C6: 62 D0 00 MOV   REG[0xD0],0x0
    13C9: 50 00    MOV   A,0x0
    13CB: 80 42    JMP   0x140E
(0019) 	if (isLeapYear(fullYear) && month==2)
    13CD: 52 00    MOV   A,[X+0]
    13CF: 08       PUSH  A
    13D0: 52 01    MOV   A,[X+1]
    13D2: 08       PUSH  A
    13D3: 9F 12    CALL  _isLeapYear
    13D5: 38 FE    ADD   SP,0xFE
    13D7: 62 D0 00 MOV   REG[0xD0],0x0
    13DA: 39 00    CMP   A,0x0
    13DC: A0 08    JZ    0x13E5
    13DE: 3D FB 02 CMP   [X-5],0x2
    13E1: B0 03    JNZ   0x13E5
(0020) 		monthLen[1]++;
    13E3: 77 03    INC   [X+3]
(0021) 	if (day > monthLen[month-1])
    13E5: 62 D0 00 MOV   REG[0xD0],0x0
    13E8: 55 90 07 MOV   [__r0],0x7
    13EB: 5A 8F    MOV   [__r1],X
    13ED: 06 8F 01 ADD   [__r1],0x1
    13F0: 52 FB    MOV   A,[X-5]
    13F2: 02 8F    ADD   A,[__r1]
    13F4: 53 8F    MOV   [__r1],A
    13F6: 50 00    MOV   A,0x0
    13F8: 0A 90    ADC   A,[__r0]
    13FA: 60 D4    MOV   REG[0xD4],A
    13FC: 3E 8F    MVI   A,[__r1]
    13FE: 3B FC    CMP   A,[X-4]
    1400: D0 08    JNC   0x1409
(0022) 		return FALSE;
    1402: 62 D0 00 MOV   REG[0xD0],0x0
    1405: 50 00    MOV   A,0x0
    1407: 80 06    JMP   0x140E
(0023) 	return TRUE;
    1409: 62 D0 00 MOV   REG[0xD0],0x0
    140C: 50 01    MOV   A,0x1
    140E: 38 F2    ADD   SP,0xF2
    1410: 20       POP   X
    1411: 7F       RET   
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
1412: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
1413: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
1415: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
1417: 78       DEC   A                  (0062)     dec   A
1418: BF FC    JNZ   0x1415             (0063)     jnz   DELAY50US
                                        (0064) 
141A: 18       POP   A                  (0065) 	pop A
141B: 78       DEC   A                  (0066) 	dec   A
141C: BF F5    JNZ   _Delay10msTimes    (0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
141E: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
141F: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
1421: 78       DEC   A                  (0104) 	dec A
1422: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
1424: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
142D: 08       PUSH  A                  (0149)     push  A
142E: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
1430: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
1432: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
1434: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
1436: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
1438: D0 06    JNC   0x143F             (0155)     jnc   Delay50u_End
143A: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
143C: 78       DEC   A                  (0158)     dec   A                            ; [4]
143D: BF FE    JNZ   0x143C             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
143F: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
1440: 7F       RET                      (0163)     ret
FILE: C:\Users\Rod\Desktop\RTC\RTC\eeprom.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "EEPROM.h"
(0004) #include "delay.h"
(0005) 
(0006) extern BYTE data;
(0007) void EEPROM_Start(void)
(0008) {
(0009) 	I2Cm_Start();
_EEPROM_Start:
    1441: 10       PUSH  X
    1442: 7C 0A 7B LCALL _I2Cm_Start
    1445: 20       POP   X
    1446: 7F       RET   
(0010) }
(0011) void EEPROM_Stop(void)
(0012) {
(0013) 	I2Cm_Stop();
_EEPROM_Stop:
    1447: 10       PUSH  X
    1448: 7C 0A 9F LCALL _I2Cm_Stop
    144B: 20       POP   X
    144C: 7F       RET   
(0014) }
(0015) 
(0016) BYTE EEPROM_Write(void* buffer, WORD address, BYTE count)
(0017) {
_EEPROM_Write:
  error                --> X+1
  i                    --> X+0
  count                --> X-8
  address              --> X-7
  buffer               --> X-5
    144D: 10       PUSH  X
    144E: 4F       MOV   X,SP
    144F: 38 02    ADD   SP,0x2
(0018) 	BYTE error = EEPROM_NOERROR;
    1451: 56 01 00 MOV   [X+1],0x0
(0019) 	BYTE i=0;
    1454: 56 00 00 MOV   [X+0],0x0
(0020) 	
(0021) 	if(I2Cm_fSendStart(EEPROM_I2C_ADD, I2Cm_WRITE) != 0)
    1457: 10       PUSH  X
    1458: 57 00    MOV   X,0x0
    145A: 50 50    MOV   A,0x50
    145C: 7C 0B E7 LCALL _I2Cm_fSendStart
    145F: 20       POP   X
    1460: 62 D0 00 MOV   REG[0xD0],0x0
    1463: 39 00    CMP   A,0x0
    1465: A0 5F    JZ    0x14C5
(0022) 	{
(0023) 		if(I2Cm_fWrite(address >> 8) != 0)
    1467: 52 F9    MOV   A,[X-7]
    1469: 10       PUSH  X
    146A: 7C 0C 21 LCALL _I2Cm_fWrite
    146D: 20       POP   X
    146E: 62 D0 00 MOV   REG[0xD0],0x0
    1471: 39 00    CMP   A,0x0
    1473: A0 4C    JZ    0x14C0
(0024) 		{
(0025) 			if(I2Cm_fWrite(address & 0xFF) != 0)
    1475: 52 FA    MOV   A,[X-6]
    1477: 10       PUSH  X
    1478: 7C 0C 21 LCALL _I2Cm_fWrite
    147B: 20       POP   X
    147C: 62 D0 00 MOV   REG[0xD0],0x0
    147F: 39 00    CMP   A,0x0
    1481: A0 39    JZ    0x14BB
(0026) 			{
(0027) 				for (i=0; i<count; i++)
    1483: 56 00 00 MOV   [X+0],0x0
    1486: 80 2C    JMP   0x14B3
(0028) 				{
(0029) 					if(I2Cm_fWrite(*((BYTE*)buffer+i)) == 0)
    1488: 62 D0 00 MOV   REG[0xD0],0x0
    148B: 52 00    MOV   A,[X+0]
    148D: 53 8F    MOV   [__r1],A
    148F: 55 90 00 MOV   [__r0],0x0
    1492: 52 FC    MOV   A,[X-4]
    1494: 04 8F    ADD   [__r1],A
    1496: 52 FB    MOV   A,[X-5]
    1498: 0C 90    ADC   [__r0],A
    149A: 51 90    MOV   A,[__r0]
    149C: 60 D4    MOV   REG[0xD4],A
    149E: 3E 8F    MVI   A,[__r1]
    14A0: 10       PUSH  X
    14A1: 7C 0C 21 LCALL _I2Cm_fWrite
    14A4: 20       POP   X
    14A5: 62 D0 00 MOV   REG[0xD0],0x0
    14A8: 39 00    CMP   A,0x0
    14AA: B0 06    JNZ   0x14B1
(0030) 					{	
(0031) 						error= EEPROM_SLAVENOTACKDATA;
    14AC: 56 01 02 MOV   [X+1],0x2
(0032) 						break;
    14AF: 80 18    JMP   0x14C8
(0033) 					}
(0034) 				}
    14B1: 77 00    INC   [X+0]
    14B3: 52 00    MOV   A,[X+0]
    14B5: 3B F8    CMP   A,[X-8]
    14B7: CF D0    JC    0x1488
(0035) 			}
    14B9: 80 0E    JMP   0x14C8
(0036) 			else
(0037) 			{
(0038) 				error = EEPROM_SLAVENOTACKADDRESS;
    14BB: 56 01 01 MOV   [X+1],0x1
(0039) 			}
(0040) 		}
    14BE: 80 09    JMP   0x14C8
(0041) 		else
(0042) 		{
(0043) 		error = EEPROM_SLAVENOTACKADDRESS;
    14C0: 56 01 01 MOV   [X+1],0x1
(0044) 		}
(0045) 	}
    14C3: 80 04    JMP   0x14C8
(0046) 	else
(0047) 	{
(0048) 		error = EEPROM_SLAVENOTACKADDRESS;
    14C5: 56 01 01 MOV   [X+1],0x1
(0049) 	}
(0050)     
(0051) 	I2Cm_SendStop();
    14C8: 10       PUSH  X
    14C9: 7C 0D 63 LCALL _I2Cm_SendStop
(0052) 	
(0053) 	Delay50uTimes(0x64);
    14CC: 50 64    MOV   A,0x64
    14CE: 7C 14 1F LCALL _Delay50uTimes
    14D1: 20       POP   X
(0054) 
(0055) 	return error;
    14D2: 52 01    MOV   A,[X+1]
    14D4: 62 D0 00 MOV   REG[0xD0],0x0
    14D7: 38 FE    ADD   SP,0xFE
    14D9: 20       POP   X
    14DA: 7F       RET   
(0056) }
(0057) BYTE EEPROM_Read(void* buffer, WORD address, BYTE count)
(0058) {
_EEPROM_Read:
  error                --> X+1
  i                    --> X+0
  count                --> X-8
  address              --> X-7
  buffer               --> X-5
    14DB: 10       PUSH  X
    14DC: 4F       MOV   X,SP
    14DD: 38 02    ADD   SP,0x2
(0059) 	BYTE error = EEPROM_NOERROR;
    14DF: 56 01 00 MOV   [X+1],0x0
(0060) 	BYTE i=0;
    14E2: 56 00 00 MOV   [X+0],0x0
(0061) 	
(0062) 	if(I2Cm_fSendStart(EEPROM_I2C_ADD, I2Cm_WRITE) != 0)
    14E5: 10       PUSH  X
    14E6: 57 00    MOV   X,0x0
    14E8: 50 50    MOV   A,0x50
    14EA: 7C 0B E7 LCALL _I2Cm_fSendStart
    14ED: 20       POP   X
    14EE: 62 D0 00 MOV   REG[0xD0],0x0
    14F1: 39 00    CMP   A,0x0
    14F3: A0 93    JZ    0x1587
(0063) 	{
(0064) 		if(I2Cm_fWrite(address >> 8) != 0)
    14F5: 52 F9    MOV   A,[X-7]
    14F7: 10       PUSH  X
    14F8: 7C 0C 21 LCALL _I2Cm_fWrite
    14FB: 20       POP   X
    14FC: 62 D0 00 MOV   REG[0xD0],0x0
    14FF: 39 00    CMP   A,0x0
    1501: A0 80    JZ    0x1582
(0065) 		{
(0066) 			if (I2Cm_fWrite(address & 0xFF) != 0)
    1503: 52 FA    MOV   A,[X-6]
    1505: 10       PUSH  X
    1506: 7C 0C 21 LCALL _I2Cm_fWrite
    1509: 20       POP   X
    150A: 62 D0 00 MOV   REG[0xD0],0x0
    150D: 39 00    CMP   A,0x0
    150F: A0 6D    JZ    0x157D
(0067) 			{
(0068) 				if (I2Cm_fSendRepeatStart(EEPROM_I2C_ADD,I2Cm_READ) != 0)
    1511: 10       PUSH  X
    1512: 57 01    MOV   X,0x1
    1514: 50 50    MOV   A,0x50
    1516: 7C 0B B1 LCALL _I2Cm_fSendRepeatStart
    1519: 20       POP   X
    151A: 62 D0 00 MOV   REG[0xD0],0x0
    151D: 39 00    CMP   A,0x0
    151F: A0 58    JZ    0x1578
(0069) 				{
(0070) 					count--;
    1521: 7B F8    DEC   [X-8]
(0071) 					for (i=0;i<count;i++)
    1523: 56 00 00 MOV   [X+0],0x0
    1526: 80 26    JMP   0x154D
(0072) 					{
(0073) 						*((BYTE*)buffer+i) =I2Cm_bRead(I2Cm_ACKslave);
    1528: 10       PUSH  X
    1529: 50 01    MOV   A,0x1
    152B: 7C 0C B8 LCALL _I2Cm_bRead
    152E: 20       POP   X
    152F: 62 D0 00 MOV   REG[0xD0],0x0
    1532: 53 90    MOV   [__r0],A
    1534: 52 00    MOV   A,[X+0]
    1536: 53 8D    MOV   [__r3],A
    1538: 55 8E 00 MOV   [__r2],0x0
    153B: 52 FC    MOV   A,[X-4]
    153D: 04 8D    ADD   [__r3],A
    153F: 52 FB    MOV   A,[X-5]
    1541: 0C 8E    ADC   [__r2],A
    1543: 51 8E    MOV   A,[__r2]
    1545: 60 D5    MOV   REG[0xD5],A
    1547: 51 90    MOV   A,[__r0]
    1549: 3F 8D    MVI   [__r3],A
(0074) 					}
    154B: 77 00    INC   [X+0]
    154D: 52 00    MOV   A,[X+0]
    154F: 3B F8    CMP   A,[X-8]
    1551: CF D6    JC    0x1528
(0075) 					*((BYTE*)buffer+i) =I2Cm_bRead(I2Cm_NAKslave);
    1553: 10       PUSH  X
    1554: 50 00    MOV   A,0x0
    1556: 7C 0C B8 LCALL _I2Cm_bRead
    1559: 20       POP   X
    155A: 62 D0 00 MOV   REG[0xD0],0x0
    155D: 53 90    MOV   [__r0],A
    155F: 52 00    MOV   A,[X+0]
    1561: 53 8D    MOV   [__r3],A
    1563: 55 8E 00 MOV   [__r2],0x0
    1566: 52 FC    MOV   A,[X-4]
    1568: 04 8D    ADD   [__r3],A
    156A: 52 FB    MOV   A,[X-5]
    156C: 0C 8E    ADC   [__r2],A
    156E: 51 8E    MOV   A,[__r2]
    1570: 60 D5    MOV   REG[0xD5],A
    1572: 51 90    MOV   A,[__r0]
    1574: 3F 8D    MVI   [__r3],A
(0076) 				}
    1576: 80 13    JMP   0x158A
(0077) 				else
(0078) 				{
(0079) 				error = EEPROM_SLAVENOTACKDATA;
    1578: 56 01 02 MOV   [X+1],0x2
(0080) 				}
(0081) 			}
    157B: 80 0E    JMP   0x158A
(0082) 			else
(0083) 			{
(0084) 			error = EEPROM_SLAVENOTACKDATA;
    157D: 56 01 02 MOV   [X+1],0x2
(0085) 			}
(0086) 		}
    1580: 80 09    JMP   0x158A
(0087) 		else
(0088) 		{
(0089) 		error = EEPROM_SLAVENOTACKADDRESS;
    1582: 56 01 01 MOV   [X+1],0x1
(0090) 		}
(0091) 	}
    1585: 80 04    JMP   0x158A
(0092) 	else
(0093) 	{
(0094) 		error = EEPROM_SLAVENOTACKADDRESS;
    1587: 56 01 01 MOV   [X+1],0x1
(0095) 	}
(0096) 	
(0097) 	I2Cm_SendStop();
    158A: 10       PUSH  X
    158B: 7C 0D 63 LCALL _I2Cm_SendStop
    158E: 20       POP   X
(0098) 	
(0099) 	return error;
    158F: 52 01    MOV   A,[X+1]
    1591: 62 D0 00 MOV   REG[0xD0],0x0
    1594: 38 FE    ADD   SP,0xFE
    1596: 20       POP   X
    1597: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\keypad.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h" 
(0003) #include "Keypad.h"
(0004) 
(0005) #if KEYPAD_PORT == 0
(0006) 	#define PRTxDM2 PRT0DM2
(0007) 	#define PRTxDM1 PRT0DM1
(0008) 	#define PRTxDM0 PRT0DM0
(0009) 	#define PRTxDR 	PRT0DR
(0010) 	
(0011) 	#define PRTxIC1 PRT0IC1
(0012) 	#define PRTxIC0 PRT0IC0
(0013) 	#define PRTxIE 	PRT0IE
(0014) 		
(0015) #elif KEYPAD_PORT == 1
(0016) 	#define PRTxDM2 PRT1DM2
(0017) 	#define PRTxDM1 PRT1DM1
(0018) 	#define PRTxDM0 PRT1DM0
(0019) 	#define PRTxDR 	PRT1DR
(0020) 	
(0021) 	#define PRTxIC1 PRT1IC1
(0022) 	#define PRTxIC0 PRT1IC0
(0023) 	#define PRTxIE 	PRT1IE
(0024) 		
(0025) #elif KEYPAD_PORT == 2
(0026) 	#define PRTxDM2 PRT2DM2
(0027) 	#define PRTxDM1 PRT2DM1
(0028) 	#define PRTxDM0 PRT2DM0
(0029) 	#define PRTxDR 	PRT2DR
(0030) 	
(0031) 	#define PRTxIC1 PRT2IC1
(0032) 	#define PRTxIC0 PRT2IC0
(0033) 	#define PRTxIE 	PRT2IE
(0034) 		
(0035) #else 
(0036) 	#error "Keypad port is invalid!"
(0037) #endif
(0038) 		
(0039) static BOOL keyStillPressed = FALSE;
(0040) static BYTE keypadMask = 0x0F;
(0041) static BYTE pressedKey = 0x00;
(0042) static BOOL keyPressed = FALSE;
(0043) 
(0044) void Keypad_Start(void)
(0045) {
(0046) 	PRTxDM2 &= ~keypadMask;	// initialize button
_Keypad_Start:
    1598: 62 D0 00 MOV   REG[0xD0],0x0
    159B: 51 A3    MOV   A,[keypad.c:keypadMask]
    159D: 73       CPL   A
    159E: 62 D0 00 MOV   REG[0xD0],0x0
    15A1: 53 90    MOV   [__r0],A
    15A3: 5D 07    MOV   A,REG[0x7]
    15A5: 22 90    AND   A,[__r0]
    15A7: 60 07    MOV   REG[0x7],A
(0047) 	PRTxDM1 &= ~keypadMask;
    15A9: 62 D0 00 MOV   REG[0xD0],0x0
    15AC: 51 A3    MOV   A,[keypad.c:keypadMask]
    15AE: 73       CPL   A
    15AF: 62 D0 00 MOV   REG[0xD0],0x0
    15B2: 53 90    MOV   [__r0],A
    15B4: 71 10    OR    F,0x10
    15B6: 5D 05    MOV   A,REG[0x5]
    15B8: 22 90    AND   A,[__r0]
    15BA: 60 05    MOV   REG[0x5],A
(0048) 	PRTxDM0 &= ~keypadMask;
    15BC: 70 CF    AND   F,0xCF
    15BE: 62 D0 00 MOV   REG[0xD0],0x0
    15C1: 51 A3    MOV   A,[keypad.c:keypadMask]
    15C3: 73       CPL   A
    15C4: 62 D0 00 MOV   REG[0xD0],0x0
    15C7: 53 90    MOV   [__r0],A
    15C9: 71 10    OR    F,0x10
    15CB: 5D 04    MOV   A,REG[0x4]
    15CD: 22 90    AND   A,[__r0]
    15CF: 60 04    MOV   REG[0x4],A
(0049) 	
(0050) 	PRTxDM2 &= keypadMask;	// initialize button
    15D1: 70 CF    AND   F,0xCF
    15D3: 5D 07    MOV   A,REG[0x7]
    15D5: 53 90    MOV   [__r0],A
    15D7: 62 D0 00 MOV   REG[0xD0],0x0
    15DA: 51 A3    MOV   A,[keypad.c:keypadMask]
    15DC: 62 D0 00 MOV   REG[0xD0],0x0
    15DF: 24 90    AND   [__r0],A
    15E1: 51 90    MOV   A,[__r0]
    15E3: 60 07    MOV   REG[0x7],A
(0051) 	PRTxDM1 &= keypadMask;
    15E5: 71 10    OR    F,0x10
    15E7: 5D 05    MOV   A,REG[0x5]
    15E9: 53 90    MOV   [__r0],A
    15EB: 70 CF    AND   F,0xCF
    15ED: 62 D0 00 MOV   REG[0xD0],0x0
    15F0: 51 A3    MOV   A,[keypad.c:keypadMask]
    15F2: 62 D0 00 MOV   REG[0xD0],0x0
    15F5: 24 90    AND   [__r0],A
    15F7: 51 90    MOV   A,[__r0]
    15F9: 71 10    OR    F,0x10
    15FB: 60 05    MOV   REG[0x5],A
(0052) 	PRTxDM0 &= keypadMask;
    15FD: 5D 04    MOV   A,REG[0x4]
    15FF: 53 90    MOV   [__r0],A
    1601: 70 CF    AND   F,0xCF
    1603: 62 D0 00 MOV   REG[0xD0],0x0
    1606: 51 A3    MOV   A,[keypad.c:keypadMask]
    1608: 62 D0 00 MOV   REG[0xD0],0x0
    160B: 24 90    AND   [__r0],A
    160D: 51 90    MOV   A,[__r0]
    160F: 71 10    OR    F,0x10
    1611: 60 04    MOV   REG[0x4],A
(0053) 	
(0054) 	PRTxDR = ~keypadMask;	// Setup pull-down resistor
    1613: 70 CF    AND   F,0xCF
    1615: 62 D0 00 MOV   REG[0xD0],0x0
    1618: 51 A3    MOV   A,[keypad.c:keypadMask]
    161A: 73       CPL   A
    161B: 62 D0 00 MOV   REG[0xD0],0x0
    161E: 60 04    MOV   REG[0x4],A
(0055) 	
(0056) 	PRTxIC1 |= keypadMask; // setup interrupt mode
    1620: 71 10    OR    F,0x10
    1622: 5D 07    MOV   A,REG[0x7]
    1624: 53 90    MOV   [__r0],A
    1626: 70 CF    AND   F,0xCF
    1628: 62 D0 00 MOV   REG[0xD0],0x0
    162B: 51 A3    MOV   A,[keypad.c:keypadMask]
    162D: 62 D0 00 MOV   REG[0xD0],0x0
    1630: 2C 90    OR    [__r0],A
    1632: 51 90    MOV   A,[__r0]
    1634: 71 10    OR    F,0x10
    1636: 60 07    MOV   REG[0x7],A
(0057) 	PRTxIC0 &= ~keypadMask;
    1638: 70 CF    AND   F,0xCF
    163A: 62 D0 00 MOV   REG[0xD0],0x0
    163D: 51 A3    MOV   A,[keypad.c:keypadMask]
    163F: 73       CPL   A
    1640: 62 D0 00 MOV   REG[0xD0],0x0
    1643: 53 90    MOV   [__r0],A
    1645: 71 10    OR    F,0x10
    1647: 5D 06    MOV   A,REG[0x6]
    1649: 22 90    AND   A,[__r0]
    164B: 60 06    MOV   REG[0x6],A
(0058) 	
(0059) 	PRTxIE |= keypadMask; //Enable GPIO port interrupt bits
    164D: 70 CF    AND   F,0xCF
    164F: 5D 05    MOV   A,REG[0x5]
    1651: 53 90    MOV   [__r0],A
    1653: 62 D0 00 MOV   REG[0xD0],0x0
    1656: 51 A3    MOV   A,[keypad.c:keypadMask]
    1658: 62 D0 00 MOV   REG[0xD0],0x0
    165B: 2C 90    OR    [__r0],A
    165D: 51 90    MOV   A,[__r0]
    165F: 60 05    MOV   REG[0x5],A
(0060) 	
(0061) 	INT_MSK0 |= INT_MSK0_GPIO; //Enable global GPIO interrupt
    1661: 43 E0 20 OR    REG[0xE0],0x20
    1664: 7F       RET   
(0062) 	
(0063) }
(0064) 
(0065) BOOL KeyPad_Test(void)
(0066) {
_KeyPad_Test:
  cont                 --> X+1
  i                    --> X+0
    1665: 10       PUSH  X
    1666: 4F       MOV   X,SP
    1667: 38 02    ADD   SP,0x2
(0067) 	BYTE i, cont;
(0068) 	cont = 0;
    1669: 56 01 00 MOV   [X+1],0x0
(0069) 	
(0070) 	for (i = 0; i<50 ;i++)
    166C: 56 00 00 MOV   [X+0],0x0
    166F: 80 39    JMP   0x16A9
(0071) 	{
(0072) 		if ((PRTxDR & keypadMask) != 0x00)
    1671: 5D 04    MOV   A,REG[0x4]
    1673: 62 D0 00 MOV   REG[0xD0],0x0
    1676: 53 90    MOV   [__r0],A
    1678: 62 D0 00 MOV   REG[0xD0],0x0
    167B: 51 A3    MOV   A,[keypad.c:keypadMask]
    167D: 62 D0 00 MOV   REG[0xD0],0x0
    1680: 24 90    AND   [__r0],A
    1682: A0 1B    JZ    0x169E
(0073) 		{
(0074) 			cont ++;
    1684: 77 01    INC   [X+1]
(0075) 			if ( (cont > 20) && !keyStillPressed )
    1686: 50 14    MOV   A,0x14
    1688: 3B 01    CMP   A,[X+1]
    168A: D0 1C    JNC   0x16A7
    168C: 62 D0 00 MOV   REG[0xD0],0x0
    168F: 3C A5 00 CMP   [keypad.c:keyStillPressed],0x0
    1692: B0 14    JNZ   0x16A7
(0076) 			{
(0077) 				keyStillPressed = TRUE;
    1694: 55 A5 01 MOV   [keypad.c:keyStillPressed],0x1
(0078) 				return TRUE;
    1697: 62 D0 00 MOV   REG[0xD0],0x0
    169A: 50 01    MOV   A,0x1
    169C: 80 16    JMP   0x16B3
(0079) 			}
(0080) 		}
(0081) 		else 
(0082) 		{
(0083) 			keyStillPressed = FALSE;
    169E: 62 D0 00 MOV   REG[0xD0],0x0
    16A1: 55 A5 00 MOV   [keypad.c:keyStillPressed],0x0
(0084) 			cont = 0;
    16A4: 56 01 00 MOV   [X+1],0x0
(0085) 		}
(0086) 	}
    16A7: 77 00    INC   [X+0]
    16A9: 3D 00 32 CMP   [X+0],0x32
    16AC: CF C4    JC    0x1671
(0087) 	return FALSE;
    16AE: 62 D0 00 MOV   REG[0xD0],0x0
    16B1: 50 00    MOV   A,0x0
    16B3: 38 FE    ADD   SP,0xFE
    16B5: 20       POP   X
    16B6: 7F       RET   
(0088) }
(0089) 
(0090) BOOL Keypad_IsKeyStored(void)
(0091) {
(0092) 	if(keyPressed == TRUE)
_Keypad_IsKeyStored:
    16B7: 62 D0 00 MOV   REG[0xD0],0x0
    16BA: 3C A1 01 CMP   [keypad.c:keyPressed],0x1
    16BD: B0 0B    JNZ   0x16C9
(0093) 	{
(0094) 		keyPressed = FALSE;
    16BF: 55 A1 00 MOV   [keypad.c:keyPressed],0x0
(0095) 		return TRUE;
    16C2: 62 D0 00 MOV   REG[0xD0],0x0
    16C5: 50 01    MOV   A,0x1
    16C7: 80 06    JMP   0x16CE
(0096) 	}
(0097) 	else
(0098) 	{
(0099) 		return FALSE;
    16C9: 62 D0 00 MOV   REG[0xD0],0x0
    16CC: 50 00    MOV   A,0x0
    16CE: 7F       RET   
(0100) 	}
(0101) }
(0102) 
(0103) BYTE Keypad_GetKey(void)
(0104) {
(0105) 	return pressedKey;
_Keypad_GetKey:
    16CF: 62 D0 00 MOV   REG[0xD0],0x0
    16D2: 51 A2    MOV   A,[keypad.c:pressedKey]
    16D4: 62 D0 00 MOV   REG[0xD0],0x0
    16D7: 7F       RET   
(0106) }
(0107) 
(0108) #pragma interrupt_handler Keypad_GPIO_ISR
(0109) void Keypad_GPIO_ISR(void)
(0110) {	
_Keypad_GPIO_ISR:
    16D8: 71 C0    OR    F,0xC0
    16DA: 08       PUSH  A
    16DB: 5D D0    MOV   A,REG[0xD0]
    16DD: 08       PUSH  A
    16DE: 5D D3    MOV   A,REG[0xD3]
    16E0: 08       PUSH  A
    16E1: 5D D4    MOV   A,REG[0xD4]
    16E3: 08       PUSH  A
    16E4: 5D D5    MOV   A,REG[0xD5]
    16E6: 08       PUSH  A
    16E7: 62 D0 00 MOV   REG[0xD0],0x0
    16EA: 51 90    MOV   A,[__r0]
    16EC: 08       PUSH  A
    16ED: 51 8F    MOV   A,[__r1]
    16EF: 08       PUSH  A
    16F0: 51 8E    MOV   A,[__r2]
    16F2: 08       PUSH  A
    16F3: 51 8D    MOV   A,[__r3]
    16F5: 08       PUSH  A
    16F6: 51 8C    MOV   A,[__r4]
    16F8: 08       PUSH  A
    16F9: 51 8B    MOV   A,[__r5]
    16FB: 08       PUSH  A
    16FC: 51 8A    MOV   A,[__r6]
    16FE: 08       PUSH  A
    16FF: 51 89    MOV   A,[__r7]
    1701: 08       PUSH  A
    1702: 51 88    MOV   A,[__r8]
    1704: 08       PUSH  A
    1705: 51 87    MOV   A,[__r9]
    1707: 08       PUSH  A
    1708: 51 86    MOV   A,[__r10]
    170A: 08       PUSH  A
    170B: 51 85    MOV   A,[__r11]
    170D: 08       PUSH  A
    170E: 51 84    MOV   A,[__rX]
    1710: 08       PUSH  A
    1711: 51 83    MOV   A,[__rY]
    1713: 08       PUSH  A
    1714: 51 82    MOV   A,[__rZ]
    1716: 08       PUSH  A
(0111) 	if (KeyPad_Test())
    1717: 9F 4C    CALL  _KeyPad_Test
    1719: 39 00    CMP   A,0x0
    171B: A0 33    JZ    0x174F
(0112) 	{
(0113) 		//nos aseguramos de solo tomar los 4 bits menos significativos
(0114) 		pressedKey = (PRTxDR & keypadMask);
    171D: 5D 04    MOV   A,REG[0x4]
    171F: 62 D0 00 MOV   REG[0xD0],0x0
    1722: 22 A3    AND   A,[keypad.c:keypadMask]
    1724: 62 D0 00 MOV   REG[0xD0],0x0
    1727: 53 A2    MOV   [keypad.c:pressedKey],A
(0115) 		
(0116) 		//Invierte los puertos 
(0117) 		
(0118) 		PRTxDR = keypadMask;	// Setup pull-down resistor
    1729: 62 D0 00 MOV   REG[0xD0],0x0
    172C: 51 A3    MOV   A,[keypad.c:keypadMask]
    172E: 60 04    MOV   REG[0x4],A
(0119) 		
(0120) 		//tomamos ahora los 4 bits mas significativos y obtenemos el byte completo
(0121) 		pressedKey |= (PRTxDR & ~keypadMask); 
    1730: 51 A3    MOV   A,[keypad.c:keypadMask]
    1732: 73       CPL   A
    1733: 62 D0 00 MOV   REG[0xD0],0x0
    1736: 53 90    MOV   [__r0],A
    1738: 5D 04    MOV   A,REG[0x4]
    173A: 22 90    AND   A,[__r0]
    173C: 62 D0 00 MOV   REG[0xD0],0x0
    173F: 2C A2    OR    [keypad.c:pressedKey],A
(0122) 		
(0123) 		//los regresa a la normalidad
(0124) 		
(0125) 		PRTxDR = ~keypadMask;
    1741: 62 D0 00 MOV   REG[0xD0],0x0
    1744: 51 A3    MOV   A,[keypad.c:keypadMask]
    1746: 73       CPL   A
    1747: 60 04    MOV   REG[0x4],A
(0126) 		
(0127) 		keyPressed = TRUE;
    1749: 62 D0 00 MOV   REG[0xD0],0x0
    174C: 55 A1 01 MOV   [keypad.c:keyPressed],0x1
(0128) 	}
    174F: 62 D0 00 MOV   REG[0xD0],0x0
    1752: 18       POP   A
    1753: 53 82    MOV   [__rZ],A
    1755: 18       POP   A
    1756: 53 83    MOV   [__rY],A
    1758: 18       POP   A
    1759: 53 84    MOV   [__rX],A
    175B: 18       POP   A
    175C: 53 85    MOV   [__r11],A
    175E: 18       POP   A
    175F: 53 86    MOV   [__r10],A
    1761: 18       POP   A
    1762: 53 87    MOV   [__r9],A
    1764: 18       POP   A
    1765: 53 88    MOV   [__r8],A
    1767: 18       POP   A
    1768: 53 89    MOV   [__r7],A
    176A: 18       POP   A
    176B: 53 8A    MOV   [__r6],A
    176D: 18       POP   A
    176E: 53 8B    MOV   [__r5],A
    1770: 18       POP   A
    1771: 53 8C    MOV   [__r4],A
    1773: 18       POP   A
    1774: 53 8D    MOV   [__r3],A
    1776: 18       POP   A
    1777: 53 8E    MOV   [__r2],A
    1779: 18       POP   A
    177A: 53 8F    MOV   [__r1],A
    177C: 18       POP   A
    177D: 53 90    MOV   [__r0],A
    177F: 18       POP   A
    1780: 60 D5    MOV   REG[0xD5],A
    1782: 18       POP   A
    1783: 60 D4    MOV   REG[0xD4],A
    1785: 18       POP   A
    1786: 60 D3    MOV   REG[0xD3],A
    1788: 18       POP   A
    1789: 60 D0    MOV   REG[0xD0],A
    178B: 18       POP   A
    178C: 7E       RETI  
FILE: C:\Users\Rod\Desktop\RTC\RTC\levelview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "mainView.h"
(0004) #include "menu.h"
(0005) #include "BcdUtil.h"
(0006) #include "viewManager.h"
(0007) #include "Keypad.h"
(0008) #include "levelView.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void LevelView_Start(void)
(0014) {
_LevelView_Start:
    178D: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void LevelView_Callback(void)
(0019) {
_LevelView_Callback:
  bcdmin               --> X+14
  bcd10min             --> X+13
  bcdmax               --> X+12
  bcd10max             --> X+11
  conf                 --> X+0
    178E: 10       PUSH  X
    178F: 4F       MOV   X,SP
    1790: 38 0F    ADD   SP,0xF
(0020) 	BYTE bcd10max, bcdmax, bcd10min, bcdmin;
(0021) 	Config conf;
(0022) 	Persist_LoadConfig(&conf);
    1792: 62 D0 00 MOV   REG[0xD0],0x0
    1795: 50 07    MOV   A,0x7
    1797: 08       PUSH  A
    1798: 10       PUSH  X
    1799: 7C 21 D1 LCALL _Persist_LoadConfig
    179C: 38 FE    ADD   SP,0xFE
    179E: 62 D0 00 MOV   REG[0xD0],0x0
(0023) 
(0024) 	decToBcd(&bcd10max, &bcdmax, conf.maxTemp);
    17A1: 52 05    MOV   A,[X+5]
    17A3: 08       PUSH  A
    17A4: 5A 8F    MOV   [__r1],X
    17A6: 06 8F 0C ADD   [__r1],0xC
    17A9: 50 07    MOV   A,0x7
    17AB: 08       PUSH  A
    17AC: 51 8F    MOV   A,[__r1]
    17AE: 08       PUSH  A
    17AF: 5A 8F    MOV   [__r1],X
    17B1: 06 8F 0B ADD   [__r1],0xB
    17B4: 50 07    MOV   A,0x7
    17B6: 08       PUSH  A
    17B7: 51 8F    MOV   A,[__r1]
    17B9: 08       PUSH  A
    17BA: 7C 0E D1 LCALL _decToBcd
(0025) 	decToBcd(&bcd10min, &bcdmin, conf.minTemp);
    17BD: 52 06    MOV   A,[X+6]
    17BF: 08       PUSH  A
    17C0: 62 D0 00 MOV   REG[0xD0],0x0
    17C3: 5A 8F    MOV   [__r1],X
    17C5: 06 8F 0E ADD   [__r1],0xE
    17C8: 50 07    MOV   A,0x7
    17CA: 08       PUSH  A
    17CB: 51 8F    MOV   A,[__r1]
    17CD: 08       PUSH  A
    17CE: 5A 8F    MOV   [__r1],X
    17D0: 06 8F 0D ADD   [__r1],0xD
    17D3: 50 07    MOV   A,0x7
    17D5: 08       PUSH  A
    17D6: 51 8F    MOV   A,[__r1]
    17D8: 08       PUSH  A
    17D9: 7C 0E D1 LCALL _decToBcd
    17DC: 38 F6    ADD   SP,0xF6
(0026) 
(0027) 	currentView = LEVEL_CONFIG;
    17DE: 62 D0 00 MOV   REG[0xD0],0x0
    17E1: 55 A6 03 MOV   [currentView],0x3
(0028) 	Menu_Clear();
    17E4: 7C 20 68 LCALL _Menu_Clear
(0029) 	LCD_Position(0, 0);
    17E7: 10       PUSH  X
    17E8: 50 00    MOV   A,0x0
    17EA: 57 00    MOV   X,0x0
    17EC: 7C 09 71 LCALL _LCD_Position
(0030) 	LCD_PrCString("Max: ");
    17EF: 50 01    MOV   A,0x1
    17F1: 08       PUSH  A
    17F2: 50 FC    MOV   A,0xFC
    17F4: 5C       MOV   X,A
    17F5: 18       POP   A
    17F6: 7C 07 EC LCALL _LCD_PrCString
    17F9: 20       POP   X
(0031) 	LCD_PrHexByte( (bcd10max << 4)|bcdmax );
    17FA: 52 0B    MOV   A,[X+11]
    17FC: 62 D0 00 MOV   REG[0xD0],0x0
    17FF: 64       ASL   A
    1800: 64       ASL   A
    1801: 64       ASL   A
    1802: 64       ASL   A
    1803: 53 90    MOV   [__r0],A
    1805: 52 0C    MOV   A,[X+12]
    1807: 2C 90    OR    [__r0],A
    1809: 10       PUSH  X
    180A: 51 90    MOV   A,[__r0]
    180C: 7C 08 0E LCALL _LCD_PrHexByte
(0032) 	LCD_Position(1,0);
    180F: 57 00    MOV   X,0x0
    1811: 50 01    MOV   A,0x1
    1813: 7C 09 71 LCALL _LCD_Position
(0033) 	LCD_PrCString("Min: ");
    1816: 50 01    MOV   A,0x1
    1818: 08       PUSH  A
    1819: 50 F6    MOV   A,0xF6
    181B: 5C       MOV   X,A
    181C: 18       POP   A
    181D: 7C 07 EC LCALL _LCD_PrCString
    1820: 20       POP   X
(0034) 	LCD_PrHexByte( (bcd10min << 4)|bcdmin );
    1821: 52 0D    MOV   A,[X+13]
    1823: 62 D0 00 MOV   REG[0xD0],0x0
    1826: 64       ASL   A
    1827: 64       ASL   A
    1828: 64       ASL   A
    1829: 64       ASL   A
    182A: 53 90    MOV   [__r0],A
    182C: 52 0E    MOV   A,[X+14]
    182E: 2C 90    OR    [__r0],A
    1830: 10       PUSH  X
    1831: 51 90    MOV   A,[__r0]
    1833: 7C 08 0E LCALL _LCD_PrHexByte
    1836: 20       POP   X
    1837: 38 F1    ADD   SP,0xF1
    1839: 20       POP   X
    183A: 7F       RET   
(0035) }
(0036) 
(0037) void LevelView_Update(void)
(0038) {
_LevelView_Update:
  bcd10min             --> X+14
  bcd10max             --> X+13
  conf                 --> X+2
  bcdmin               --> X+1
  bcdmax               --> X+0
    183B: 10       PUSH  X
    183C: 4F       MOV   X,SP
    183D: 38 11    ADD   SP,0x11
(0039) 	if(Keypad_IsKeyStored())
    183F: 7C 16 B7 LCALL _Keypad_IsKeyStored
    1842: 62 D0 00 MOV   REG[0xD0],0x0
    1845: 39 00    CMP   A,0x0
    1847: A1 81    JZ    0x19C9
(0040) 	{
(0041) 		BYTE bcd10max, bcdmax, bcd10min, bcdmin;
(0042) 		Config conf;
(0043) 		Persist_LoadConfig(&conf);
    1849: 5A 8F    MOV   [__r1],X
    184B: 06 8F 02 ADD   [__r1],0x2
    184E: 50 07    MOV   A,0x7
    1850: 08       PUSH  A
    1851: 51 8F    MOV   A,[__r1]
    1853: 08       PUSH  A
    1854: 7C 21 D1 LCALL _Persist_LoadConfig
    1857: 38 FE    ADD   SP,0xFE
    1859: 62 D0 00 MOV   REG[0xD0],0x0
(0044) 
(0045) 		decToBcd(&bcd10max, &bcdmax, conf.maxTemp);
    185C: 52 07    MOV   A,[X+7]
    185E: 08       PUSH  A
    185F: 50 07    MOV   A,0x7
    1861: 08       PUSH  A
    1862: 10       PUSH  X
    1863: 5A 8F    MOV   [__r1],X
    1865: 06 8F 0D ADD   [__r1],0xD
    1868: 08       PUSH  A
    1869: 51 8F    MOV   A,[__r1]
    186B: 08       PUSH  A
    186C: 7C 0E D1 LCALL _decToBcd
(0046) 		decToBcd(&bcd10min, &bcdmin, conf.minTemp);
    186F: 52 08    MOV   A,[X+8]
    1871: 08       PUSH  A
    1872: 62 D0 00 MOV   REG[0xD0],0x0
    1875: 5A 8F    MOV   [__r1],X
    1877: 06 8F 01 ADD   [__r1],0x1
    187A: 50 07    MOV   A,0x7
    187C: 08       PUSH  A
    187D: 51 8F    MOV   A,[__r1]
    187F: 08       PUSH  A
    1880: 5A 8F    MOV   [__r1],X
    1882: 06 8F 0E ADD   [__r1],0xE
    1885: 50 07    MOV   A,0x7
    1887: 08       PUSH  A
    1888: 51 8F    MOV   A,[__r1]
    188A: 08       PUSH  A
    188B: 7C 0E D1 LCALL _decToBcd
    188E: 38 F6    ADD   SP,0xF6
(0047) 
(0048) 		switch(Keypad_GetKey())
    1890: 7C 16 CF LCALL _Keypad_GetKey
    1893: 62 D0 00 MOV   REG[0xD0],0x0
    1896: 54 10    MOV   [X+16],A
    1898: 56 0F 00 MOV   [X+15],0x0
    189B: 52 10    MOV   A,[X+16]
    189D: 11 28    SUB   A,0x28
    189F: 53 83    MOV   [__rY],A
    18A1: 52 0F    MOV   A,[X+15]
    18A3: 31 80    XOR   A,0x80
    18A5: 19 80    SBB   A,0x80
    18A7: 2A 83    OR    A,[__rY]
    18A9: A0 88    JZ    0x1932
    18AB: D0 22    JNC   0x18CE
    18AD: 52 10    MOV   A,[X+16]
    18AF: 11 11    SUB   A,0x11
    18B1: 62 D0 00 MOV   REG[0xD0],0x0
    18B4: 53 83    MOV   [__rY],A
    18B6: 52 0F    MOV   A,[X+15]
    18B8: 31 80    XOR   A,0x80
    18BA: 19 80    SBB   A,0x80
    18BC: C0 BD    JC    0x197A
    18BE: 2A 83    OR    A,[__rY]
    18C0: A0 B4    JZ    0x1975
    18C2: 3D 0F 00 CMP   [X+15],0x0
    18C5: B0 06    JNZ   0x18CC
    18C7: 3D 10 18 CMP   [X+16],0x18
    18CA: A0 88    JZ    0x1953
    18CC: 80 AD    JMP   0x197A
    18CE: 52 10    MOV   A,[X+16]
    18D0: 11 48    SUB   A,0x48
    18D2: 62 D0 00 MOV   REG[0xD0],0x0
    18D5: 53 83    MOV   [__rY],A
    18D7: 52 0F    MOV   A,[X+15]
    18D9: 31 80    XOR   A,0x80
    18DB: 19 80    SBB   A,0x80
    18DD: C0 9C    JC    0x197A
    18DF: 2A 83    OR    A,[__rY]
    18E1: A0 2E    JZ    0x1910
    18E3: 3D 0F 00 CMP   [X+15],0x0
    18E6: B0 06    JNZ   0x18ED
    18E8: 3D 10 88 CMP   [X+16],0x88
    18EB: A0 03    JZ    0x18EF
    18ED: 80 8C    JMP   0x197A
(0049) 		{
(0050) 			case 0x88:
(0051) 				// "1"
(0052) 				if(conf.maxTemp < 99) conf.maxTemp++;
    18EF: 3D 07 63 CMP   [X+7],0x63
    18F2: D0 03    JNC   0x18F6
    18F4: 77 07    INC   [X+7]
(0053) 				Persist_SaveConfig(&conf);
    18F6: 62 D0 00 MOV   REG[0xD0],0x0
    18F9: 5A 8F    MOV   [__r1],X
    18FB: 06 8F 02 ADD   [__r1],0x2
    18FE: 50 07    MOV   A,0x7
    1900: 08       PUSH  A
    1901: 51 8F    MOV   A,[__r1]
    1903: 08       PUSH  A
    1904: 7C 21 AB LCALL _Persist_SaveConfig
    1907: 38 FE    ADD   SP,0xFE
    1909: 62 D0 00 MOV   REG[0xD0],0x0
    190C: 53 90    MOV   [__r0],A
(0054) 				break;
    190E: 80 6B    JMP   0x197A
(0055) 			case 0x48:
(0056) 				if(conf.maxTemp > 0) conf.maxTemp--;
    1910: 50 00    MOV   A,0x0
    1912: 3B 07    CMP   A,[X+7]
    1914: D0 03    JNC   0x1918
    1916: 7B 07    DEC   [X+7]
(0057) 				Persist_SaveConfig(&conf);
    1918: 62 D0 00 MOV   REG[0xD0],0x0
    191B: 5A 8F    MOV   [__r1],X
    191D: 06 8F 02 ADD   [__r1],0x2
    1920: 50 07    MOV   A,0x7
    1922: 08       PUSH  A
    1923: 51 8F    MOV   A,[__r1]
    1925: 08       PUSH  A
    1926: 7C 21 AB LCALL _Persist_SaveConfig
    1929: 38 FE    ADD   SP,0xFE
    192B: 62 D0 00 MOV   REG[0xD0],0x0
    192E: 53 90    MOV   [__r0],A
(0058) 				// "4"
(0059) 				break;
    1930: 80 49    JMP   0x197A
(0060) 			case 0x28:
(0061) 				// "7"
(0062) 				if(conf.maxTemp < 99) conf.minTemp++;
    1932: 3D 07 63 CMP   [X+7],0x63
    1935: D0 03    JNC   0x1939
    1937: 77 08    INC   [X+8]
(0063) 				Persist_SaveConfig(&conf);
    1939: 62 D0 00 MOV   REG[0xD0],0x0
    193C: 5A 8F    MOV   [__r1],X
    193E: 06 8F 02 ADD   [__r1],0x2
    1941: 50 07    MOV   A,0x7
    1943: 08       PUSH  A
    1944: 51 8F    MOV   A,[__r1]
    1946: 08       PUSH  A
    1947: 7C 21 AB LCALL _Persist_SaveConfig
    194A: 38 FE    ADD   SP,0xFE
    194C: 62 D0 00 MOV   REG[0xD0],0x0
    194F: 53 90    MOV   [__r0],A
(0064) 				break;
    1951: 80 28    JMP   0x197A
(0065) 			case 0x18:
(0066) 				// "*"
(0067) 				if(conf.maxTemp > 0) conf.minTemp--;
    1953: 50 00    MOV   A,0x0
    1955: 3B 07    CMP   A,[X+7]
    1957: D0 03    JNC   0x195B
    1959: 7B 08    DEC   [X+8]
(0068) 				Persist_SaveConfig(&conf);
    195B: 62 D0 00 MOV   REG[0xD0],0x0
    195E: 5A 8F    MOV   [__r1],X
    1960: 06 8F 02 ADD   [__r1],0x2
    1963: 50 07    MOV   A,0x7
    1965: 08       PUSH  A
    1966: 51 8F    MOV   A,[__r1]
    1968: 08       PUSH  A
    1969: 7C 21 AB LCALL _Persist_SaveConfig
    196C: 38 FE    ADD   SP,0xFE
    196E: 62 D0 00 MOV   REG[0xD0],0x0
    1971: 53 90    MOV   [__r0],A
(0069) 				break;
    1973: 80 06    JMP   0x197A
(0070) 			case 0x11:
(0071) 				// "D"
(0072) 				MainView_Callback();
    1975: 7C 1D 7E LCALL _MainView_Callback
(0073) 				return;
    1978: 80 50    JMP   0x19C9
(0074) 				break;
(0075) 		}
(0076) 
(0077) 		Menu_Clear();
    197A: 7C 20 68 LCALL _Menu_Clear
(0078) 		LCD_Position(0, 0);
    197D: 10       PUSH  X
    197E: 50 00    MOV   A,0x0
    1980: 57 00    MOV   X,0x0
    1982: 7C 09 71 LCALL _LCD_Position
(0079) 		LCD_PrCString("Max: ");
    1985: 50 01    MOV   A,0x1
    1987: 08       PUSH  A
    1988: 50 FC    MOV   A,0xFC
    198A: 5C       MOV   X,A
    198B: 18       POP   A
    198C: 7C 07 EC LCALL _LCD_PrCString
    198F: 20       POP   X
(0080) 		bcdmax = (bcd10max << 4) | bcdmax;
    1990: 52 0D    MOV   A,[X+13]
    1992: 62 D0 00 MOV   REG[0xD0],0x0
    1995: 64       ASL   A
    1996: 64       ASL   A
    1997: 64       ASL   A
    1998: 64       ASL   A
    1999: 2B 00    OR    A,[X+0]
    199B: 54 00    MOV   [X+0],A
(0081) 		LCD_PrHexByte(bcdmax);
    199D: 10       PUSH  X
    199E: 52 00    MOV   A,[X+0]
    19A0: 7C 08 0E LCALL _LCD_PrHexByte
(0082) 		LCD_Position(1,0);
    19A3: 57 00    MOV   X,0x0
    19A5: 50 01    MOV   A,0x1
    19A7: 7C 09 71 LCALL _LCD_Position
(0083) 		LCD_PrCString("Min: ");
    19AA: 50 01    MOV   A,0x1
    19AC: 08       PUSH  A
    19AD: 50 F6    MOV   A,0xF6
    19AF: 5C       MOV   X,A
    19B0: 18       POP   A
    19B1: 7C 07 EC LCALL _LCD_PrCString
    19B4: 20       POP   X
(0084) 		bcdmin = (bcd10min << 4) | bcdmin;
    19B5: 52 0E    MOV   A,[X+14]
    19B7: 62 D0 00 MOV   REG[0xD0],0x0
    19BA: 64       ASL   A
    19BB: 64       ASL   A
    19BC: 64       ASL   A
    19BD: 64       ASL   A
    19BE: 2B 01    OR    A,[X+1]
    19C0: 54 01    MOV   [X+1],A
(0085) 		LCD_PrHexByte(bcdmin);
    19C2: 10       PUSH  X
    19C3: 52 01    MOV   A,[X+1]
    19C5: 7C 08 0E LCALL _LCD_PrHexByte
    19C8: 20       POP   X
(0086) 	}
    19C9: 38 EF    ADD   SP,0xEF
(0087) 
(0088) 	
(0089) }FILE: C:\Users\Rod\Desktop\RTC\RTC\logger.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Logger.h"
(0004) #include "TempSensor.h"
(0005) #include "Persist.h"
(0006) #include "Rtc.h"
(0007) #include "BcdUtil.h"
(0008) 
(0009) void Logger_Start(void)
(0010) {
_Logger_Start:
    19CD: 7F       RET   
(0011) 	
(0012) }
(0013) 
(0014) void Logger_End(void)
(0015) {
_Logger_End:
    19CE: 7F       RET   
(0016) 	
(0017) }
(0018) 
(0019) void Logger_Loop(void)
(0020) {
_Logger_Loop:
  now                  --> X+30
  currentYear          --> X+29
  currentMonth         --> X+28
  currentDate          --> X+27
  timestampEnd         --> X+25
  timestampStart       --> X+23
  currentMin           --> X+22
  currentHour          --> X+21
  timestampNow         --> X+19
  record               --> X+13
  currentSecond        --> X+12
  currentTemp          --> X+11
  conf                 --> X+0
    19CF: 10       PUSH  X
    19D0: 4F       MOV   X,SP
    19D1: 38 20    ADD   SP,0x20
(0021) 	static BYTE elapsedSeconds, previousSecond;
(0022) 	BYTE currentTemp, currentSecond;
(0023) 	BYTE currentHour, currentMin, currentDate, currentMonth, currentYear;
(0024) 	int timestampNow, timestampStart, timestampEnd;
(0025) 	Time now;
(0026) 	Config conf;
(0027) 	Record record;
(0028) 	
(0029) 	Rtc_ReadFromRtc();
    19D3: 7C 24 E8 LCALL _Rtc_ReadFromRtc
(0030) 	
(0031) 	// Only proceed once in a second
(0032) 	currentSecond = datetime._00h.bits.seconds;
    19D6: 62 D0 00 MOV   REG[0xD0],0x0
    19D9: 51 91    MOV   A,[datetime]
    19DB: 21 0F    AND   A,0xF
    19DD: 54 0C    MOV   [X+12],A
(0033) 	if (currentSecond != previousSecond)
    19DF: 62 D0 00 MOV   REG[0xD0],0x0
    19E2: 52 0C    MOV   A,[X+12]
    19E4: 3A A7    CMP   A,[currentView+1]
    19E6: A2 5D    JZ    0x1C44
(0034) 	{
(0035) 		previousSecond = currentSecond;
    19E8: 52 0C    MOV   A,[X+12]
    19EA: 53 A7    MOV   [currentView+1],A
(0036) 		elapsedSeconds++;
    19EC: 62 D0 00 MOV   REG[0xD0],0x0
    19EF: 76 A8    INC   [currentView+2]
(0037) 		
(0038) 		Persist_LoadConfig(&conf);
    19F1: 62 D0 00 MOV   REG[0xD0],0x0
    19F4: 50 07    MOV   A,0x7
    19F6: 08       PUSH  A
    19F7: 10       PUSH  X
    19F8: 7C 21 D1 LCALL _Persist_LoadConfig
    19FB: 38 FE    ADD   SP,0xFE
    19FD: 62 D0 00 MOV   REG[0xD0],0x0
(0039) 		currentTemp = TempSensor_GetTemp();
    1A00: 7C 26 64 LCALL _TempSensor_GetTemp
    1A03: 62 D0 00 MOV   REG[0xD0],0x0
    1A06: 51 8F    MOV   A,[__r1]
    1A08: 54 0B    MOV   [X+11],A
(0040) 		
(0041) 		// Get max and min temperatures
(0042) 		if (currentTemp > conf.maxRegisteredTemp)
    1A0A: 52 07    MOV   A,[X+7]
    1A0C: 3B 0B    CMP   A,[X+11]
    1A0E: D0 14    JNC   0x1A23
(0043) 		{
(0044) 			conf.maxRegisteredTemp = currentTemp;
    1A10: 52 0B    MOV   A,[X+11]
    1A12: 54 07    MOV   [X+7],A
(0045) 			Persist_SaveConfig(&conf);
    1A14: 62 D0 00 MOV   REG[0xD0],0x0
    1A17: 50 07    MOV   A,0x7
    1A19: 08       PUSH  A
    1A1A: 10       PUSH  X
    1A1B: 7C 21 AB LCALL _Persist_SaveConfig
    1A1E: 38 FE    ADD   SP,0xFE
    1A20: 62 D0 00 MOV   REG[0xD0],0x0
(0046) 		}
(0047) 		if (currentTemp < conf.minRegisteredTemp)
    1A23: 52 0B    MOV   A,[X+11]
    1A25: 3B 08    CMP   A,[X+8]
    1A27: D0 14    JNC   0x1A3C
(0048) 		{
(0049) 			conf.minRegisteredTemp = currentTemp;
    1A29: 52 0B    MOV   A,[X+11]
    1A2B: 54 08    MOV   [X+8],A
(0050) 			Persist_SaveConfig(&conf);
    1A2D: 62 D0 00 MOV   REG[0xD0],0x0
    1A30: 50 07    MOV   A,0x7
    1A32: 08       PUSH  A
    1A33: 10       PUSH  X
    1A34: 7C 21 AB LCALL _Persist_SaveConfig
    1A37: 38 FE    ADD   SP,0xFE
    1A39: 62 D0 00 MOV   REG[0xD0],0x0
(0051) 		}
(0052) 	
(0053) 		// Once in a minute
(0054) 		if(conf.flags.registerEnabled && elapsedSeconds > 59)
    1A3C: 52 00    MOV   A,[X+0]
    1A3E: 62 D0 00 MOV   REG[0xD0],0x0
    1A41: 67       ASR   A
    1A42: 67       ASR   A
    1A43: 67       ASR   A
    1A44: 67       ASR   A
    1A45: 67       ASR   A
    1A46: 67       ASR   A
    1A47: 67       ASR   A
    1A48: 21 01    AND   A,0x1
    1A4A: 53 90    MOV   [__r0],A
    1A4C: 26 90 01 AND   [__r0],0x1
    1A4F: A1 D4    JZ    0x1C24
    1A51: 62 D0 00 MOV   REG[0xD0],0x0
    1A54: 50 3B    MOV   A,0x3B
    1A56: 3A A8    CMP   A,[currentView+2]
    1A58: D1 CB    JNC   0x1C24
(0055) 		{
(0056) 			elapsedSeconds = 0;
    1A5A: 62 D0 00 MOV   REG[0xD0],0x0
    1A5D: 55 A8 00 MOV   [currentView+2],0x0
(0057) 			
(0058) 			bcdToDec((datetime._02h.bits_24hrs.hours10), (datetime._02h.bits_24hrs.hours), &currentHour);
    1A60: 62 D0 00 MOV   REG[0xD0],0x0
    1A63: 5A 8F    MOV   [__r1],X
    1A65: 06 8F 15 ADD   [__r1],0x15
    1A68: 50 07    MOV   A,0x7
    1A6A: 08       PUSH  A
    1A6B: 51 8F    MOV   A,[__r1]
    1A6D: 08       PUSH  A
    1A6E: 62 D0 00 MOV   REG[0xD0],0x0
    1A71: 51 93    MOV   A,[datetime+2]
    1A73: 21 0F    AND   A,0xF
    1A75: 08       PUSH  A
    1A76: 51 93    MOV   A,[datetime+2]
    1A78: 62 D0 00 MOV   REG[0xD0],0x0
    1A7B: 67       ASR   A
    1A7C: 67       ASR   A
    1A7D: 67       ASR   A
    1A7E: 67       ASR   A
    1A7F: 21 0F    AND   A,0xF
    1A81: 53 90    MOV   [__r0],A
    1A83: 26 90 03 AND   [__r0],0x3
    1A86: 51 90    MOV   A,[__r0]
    1A88: 08       PUSH  A
    1A89: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    1A8C: 38 FC    ADD   SP,0xFC
(0059) 			bcdToDec((datetime._01h.bits.minutes10), (datetime._01h.bits.minutes), &currentMin);
    1A8E: 62 D0 00 MOV   REG[0xD0],0x0
    1A91: 5A 8F    MOV   [__r1],X
    1A93: 06 8F 16 ADD   [__r1],0x16
    1A96: 50 07    MOV   A,0x7
    1A98: 08       PUSH  A
    1A99: 51 8F    MOV   A,[__r1]
    1A9B: 08       PUSH  A
    1A9C: 62 D0 00 MOV   REG[0xD0],0x0
    1A9F: 51 92    MOV   A,[datetime+1]
    1AA1: 21 0F    AND   A,0xF
    1AA3: 08       PUSH  A
    1AA4: 51 92    MOV   A,[datetime+1]
    1AA6: 62 D0 00 MOV   REG[0xD0],0x0
    1AA9: 67       ASR   A
    1AAA: 67       ASR   A
    1AAB: 67       ASR   A
    1AAC: 67       ASR   A
    1AAD: 21 0F    AND   A,0xF
    1AAF: 53 90    MOV   [__r0],A
    1AB1: 26 90 07 AND   [__r0],0x7
    1AB4: 51 90    MOV   A,[__r0]
    1AB6: 08       PUSH  A
    1AB7: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
(0060) 			bcdToDec((datetime._04h.bits.date10), (datetime._04h.bits.date), &currentDate);
    1ABA: 62 D0 00 MOV   REG[0xD0],0x0
    1ABD: 5A 8F    MOV   [__r1],X
    1ABF: 06 8F 1B ADD   [__r1],0x1B
    1AC2: 50 07    MOV   A,0x7
    1AC4: 08       PUSH  A
    1AC5: 51 8F    MOV   A,[__r1]
    1AC7: 08       PUSH  A
    1AC8: 62 D0 00 MOV   REG[0xD0],0x0
    1ACB: 51 95    MOV   A,[datetime+4]
    1ACD: 21 0F    AND   A,0xF
    1ACF: 08       PUSH  A
    1AD0: 51 95    MOV   A,[datetime+4]
    1AD2: 62 D0 00 MOV   REG[0xD0],0x0
    1AD5: 67       ASR   A
    1AD6: 67       ASR   A
    1AD7: 67       ASR   A
    1AD8: 67       ASR   A
    1AD9: 21 0F    AND   A,0xF
    1ADB: 53 90    MOV   [__r0],A
    1ADD: 26 90 03 AND   [__r0],0x3
    1AE0: 51 90    MOV   A,[__r0]
    1AE2: 08       PUSH  A
    1AE3: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    1AE6: 38 F8    ADD   SP,0xF8
(0061) 			bcdToDec((datetime._05h.bits.month10), (datetime._05h.bits.month), &currentMonth);
    1AE8: 62 D0 00 MOV   REG[0xD0],0x0
    1AEB: 5A 8F    MOV   [__r1],X
    1AED: 06 8F 1C ADD   [__r1],0x1C
    1AF0: 50 07    MOV   A,0x7
    1AF2: 08       PUSH  A
    1AF3: 51 8F    MOV   A,[__r1]
    1AF5: 08       PUSH  A
    1AF6: 62 D0 00 MOV   REG[0xD0],0x0
    1AF9: 51 96    MOV   A,[datetime+5]
    1AFB: 21 0F    AND   A,0xF
    1AFD: 08       PUSH  A
    1AFE: 51 96    MOV   A,[datetime+5]
    1B00: 62 D0 00 MOV   REG[0xD0],0x0
    1B03: 67       ASR   A
    1B04: 67       ASR   A
    1B05: 67       ASR   A
    1B06: 67       ASR   A
    1B07: 21 0F    AND   A,0xF
    1B09: 53 90    MOV   [__r0],A
    1B0B: 26 90 01 AND   [__r0],0x1
    1B0E: 51 90    MOV   A,[__r0]
    1B10: 08       PUSH  A
    1B11: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
(0062) 			bcdToDec((datetime._06h.bits.year10), (datetime._06h.bits.year), &currentYear);
    1B14: 62 D0 00 MOV   REG[0xD0],0x0
    1B17: 5A 8F    MOV   [__r1],X
    1B19: 06 8F 1D ADD   [__r1],0x1D
    1B1C: 50 07    MOV   A,0x7
    1B1E: 08       PUSH  A
    1B1F: 51 8F    MOV   A,[__r1]
    1B21: 08       PUSH  A
    1B22: 62 D0 00 MOV   REG[0xD0],0x0
    1B25: 51 97    MOV   A,[datetime+6]
    1B27: 21 0F    AND   A,0xF
    1B29: 08       PUSH  A
    1B2A: 51 97    MOV   A,[datetime+6]
    1B2C: 62 D0 00 MOV   REG[0xD0],0x0
    1B2F: 67       ASR   A
    1B30: 67       ASR   A
    1B31: 67       ASR   A
    1B32: 67       ASR   A
    1B33: 21 0F    AND   A,0xF
    1B35: 53 90    MOV   [__r0],A
    1B37: 26 90 0F AND   [__r0],0xF
    1B3A: 51 90    MOV   A,[__r0]
    1B3C: 08       PUSH  A
    1B3D: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    1B40: 38 F8    ADD   SP,0xF8
(0063) 			
(0064) 			timestampNow = currentHour*60 + currentMin;
    1B42: 62 D0 00 MOV   REG[0xD0],0x0
    1B45: 52 16    MOV   A,[X+22]
    1B47: 53 8F    MOV   [__r1],A
    1B49: 55 90 00 MOV   [__r0],0x0
    1B4C: 52 15    MOV   A,[X+21]
    1B4E: 53 8D    MOV   [__r3],A
    1B50: 50 00    MOV   A,0x0
    1B52: 08       PUSH  A
    1B53: 51 8D    MOV   A,[__r3]
    1B55: 08       PUSH  A
    1B56: 50 00    MOV   A,0x0
    1B58: 08       PUSH  A
    1B59: 50 3C    MOV   A,0x3C
    1B5B: 08       PUSH  A
    1B5C: 7C 38 4E LCALL 0x384E
    1B5F: 38 FC    ADD   SP,0xFC
    1B61: 51 84    MOV   A,[__rX]
    1B63: 53 8D    MOV   [__r3],A
    1B65: 51 83    MOV   A,[__rY]
    1B67: 53 8E    MOV   [__r2],A
    1B69: 51 8D    MOV   A,[__r3]
    1B6B: 02 8F    ADD   A,[__r1]
    1B6D: 54 14    MOV   [X+20],A
    1B6F: 51 8E    MOV   A,[__r2]
    1B71: 0A 90    ADC   A,[__r0]
    1B73: 54 13    MOV   [X+19],A
(0065) 			timestampStart = conf.registerStart.hour*60 + conf.registerStart.min;
    1B75: 52 02    MOV   A,[X+2]
    1B77: 53 8F    MOV   [__r1],A
    1B79: 52 01    MOV   A,[X+1]
    1B7B: 53 8D    MOV   [__r3],A
    1B7D: 50 00    MOV   A,0x0
    1B7F: 08       PUSH  A
    1B80: 51 8D    MOV   A,[__r3]
    1B82: 08       PUSH  A
    1B83: 50 00    MOV   A,0x0
    1B85: 08       PUSH  A
    1B86: 50 3C    MOV   A,0x3C
    1B88: 08       PUSH  A
    1B89: 7C 38 4E LCALL 0x384E
    1B8C: 38 FC    ADD   SP,0xFC
    1B8E: 51 84    MOV   A,[__rX]
    1B90: 53 8D    MOV   [__r3],A
    1B92: 51 83    MOV   A,[__rY]
    1B94: 53 8E    MOV   [__r2],A
    1B96: 51 8D    MOV   A,[__r3]
    1B98: 02 8F    ADD   A,[__r1]
    1B9A: 54 18    MOV   [X+24],A
    1B9C: 51 8E    MOV   A,[__r2]
    1B9E: 0A 90    ADC   A,[__r0]
    1BA0: 54 17    MOV   [X+23],A
(0066) 			timestampEnd = conf.registerEnd.hour*60 + conf.registerEnd.min;
    1BA2: 52 04    MOV   A,[X+4]
    1BA4: 53 8F    MOV   [__r1],A
    1BA6: 52 03    MOV   A,[X+3]
    1BA8: 53 8D    MOV   [__r3],A
    1BAA: 50 00    MOV   A,0x0
    1BAC: 08       PUSH  A
    1BAD: 51 8D    MOV   A,[__r3]
    1BAF: 08       PUSH  A
    1BB0: 50 00    MOV   A,0x0
    1BB2: 08       PUSH  A
    1BB3: 50 3C    MOV   A,0x3C
    1BB5: 08       PUSH  A
    1BB6: 7C 38 4E LCALL 0x384E
    1BB9: 38 FC    ADD   SP,0xFC
    1BBB: 51 84    MOV   A,[__rX]
    1BBD: 53 8D    MOV   [__r3],A
    1BBF: 51 83    MOV   A,[__rY]
    1BC1: 53 8E    MOV   [__r2],A
    1BC3: 51 8D    MOV   A,[__r3]
    1BC5: 02 8F    ADD   A,[__r1]
    1BC7: 54 1A    MOV   [X+26],A
    1BC9: 51 8E    MOV   A,[__r2]
    1BCB: 0A 90    ADC   A,[__r0]
    1BCD: 54 19    MOV   [X+25],A
(0067) 			
(0068) 			if(timestampNow >= timestampStart && timestampNow < timestampEnd)
    1BCF: 52 14    MOV   A,[X+20]
    1BD1: 13 18    SUB   A,[X+24]
    1BD3: 52 17    MOV   A,[X+23]
    1BD5: 31 80    XOR   A,0x80
    1BD7: 53 84    MOV   [__rX],A
    1BD9: 52 13    MOV   A,[X+19]
    1BDB: 31 80    XOR   A,0x80
    1BDD: 1A 84    SBB   A,[__rX]
    1BDF: C0 44    JC    0x1C24
    1BE1: 52 14    MOV   A,[X+20]
    1BE3: 13 1A    SUB   A,[X+26]
    1BE5: 52 19    MOV   A,[X+25]
    1BE7: 31 80    XOR   A,0x80
    1BE9: 62 D0 00 MOV   REG[0xD0],0x0
    1BEC: 53 84    MOV   [__rX],A
    1BEE: 52 13    MOV   A,[X+19]
    1BF0: 31 80    XOR   A,0x80
    1BF2: 1A 84    SBB   A,[__rX]
    1BF4: D0 2F    JNC   0x1C24
(0069) 			{
(0070) 				// Log
(0071) 				record.temp = currentTemp;
    1BF6: 52 0B    MOV   A,[X+11]
    1BF8: 54 12    MOV   [X+18],A
(0072) 				record.time.hour = currentHour;
    1BFA: 52 15    MOV   A,[X+21]
    1BFC: 54 10    MOV   [X+16],A
(0073) 				record.time.min = currentMin;
    1BFE: 52 16    MOV   A,[X+22]
    1C00: 54 11    MOV   [X+17],A
(0074) 				record.date.date = currentDate;
    1C02: 52 1B    MOV   A,[X+27]
    1C04: 54 0D    MOV   [X+13],A
(0075) 				record.date.month = currentMonth;
    1C06: 52 1C    MOV   A,[X+28]
    1C08: 54 0E    MOV   [X+14],A
(0076) 				record.date.year = currentYear;
    1C0A: 52 1D    MOV   A,[X+29]
    1C0C: 54 0F    MOV   [X+15],A
(0077) 				Persist_SaveRecord(&record);
    1C0E: 62 D0 00 MOV   REG[0xD0],0x0
    1C11: 5A 8F    MOV   [__r1],X
    1C13: 06 8F 0D ADD   [__r1],0xD
    1C16: 50 07    MOV   A,0x7
    1C18: 08       PUSH  A
    1C19: 51 8F    MOV   A,[__r1]
    1C1B: 08       PUSH  A
    1C1C: 7C 20 BD LCALL _Persist_SaveRecord
    1C1F: 38 FE    ADD   SP,0xFE
    1C21: 62 D0 00 MOV   REG[0xD0],0x0
(0078) 			}
(0079) 			
(0080) 		}
(0081) 	
(0082) 		if(conf.flags.alarmEnabled)
    1C24: 52 00    MOV   A,[X+0]
    1C26: 62 D0 00 MOV   REG[0xD0],0x0
    1C29: 67       ASR   A
    1C2A: 67       ASR   A
    1C2B: 67       ASR   A
    1C2C: 67       ASR   A
    1C2D: 67       ASR   A
    1C2E: 67       ASR   A
    1C2F: 21 03    AND   A,0x3
    1C31: 53 90    MOV   [__r0],A
    1C33: 26 90 01 AND   [__r0],0x1
    1C36: A0 0D    JZ    0x1C44
(0083) 		{
(0084) 			if(currentTemp > conf.maxTemp || currentTemp < conf.minTemp)
    1C38: 52 05    MOV   A,[X+5]
    1C3A: 3B 0B    CMP   A,[X+11]
    1C3C: C0 07    JC    0x1C44
    1C3E: 52 0B    MOV   A,[X+11]
    1C40: 3B 06    CMP   A,[X+6]
    1C42: D0 01    JNC   0x1C44
(0085) 			{
(0086) 				// Sound alarm
(0087) 			}
(0088) 		}
(0089) 		
(0090) 	}
    1C44: 38 E0    ADD   SP,0xE0
(0091) 	
(0092) 	
(0093) }FILE: C:\Users\Rod\Desktop\RTC\RTC\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "Time.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) #include "viewManager.h"
(0011) #include "MainView.h"
(0012) #include "dateTimeView.h"
(0013) #include "regTimeView.h"
(0014) #include "levelView.h"
(0015) #include "configView.h"
(0016) #include "TempSensor.h"
(0017) #include "TempView.h"
(0018) #include "Logger.h"
(0019) #include <string.h>
(0020) 
(0021) extern CurrentView currentView;
(0022) 
(0023) int putchar(char c)
(0024) {
_putchar:
  c                    --> X-4
    1C48: 10       PUSH  X
    1C49: 4F       MOV   X,SP
(0025) 	UART_PutChar(c);
    1C4A: 10       PUSH  X
    1C4B: 52 FC    MOV   A,[X-4]
    1C4D: 7C 06 ED LCALL _UART_PutChar
    1C50: 20       POP   X
    1C51: 20       POP   X
    1C52: 7F       RET   
(0026) }
(0027) 
(0028) void main(void)
(0029) {
_main:
    1C53: 10       PUSH  X
    1C54: 4F       MOV   X,SP
    1C55: 38 02    ADD   SP,0x2
(0030) 	Time_Start();
    1C57: 7C 29 26 LCALL _Time_Start
(0031) 	Keypad_Start();
    1C5A: 7C 15 98 LCALL _Keypad_Start
(0032) 	Persist_Start();
    1C5D: 7C 20 8D LCALL _Persist_Start
(0033) 	LCD_Start();
    1C60: 10       PUSH  X
    1C61: 7C 08 FE LCALL _LCD_Start|LCD_Init|_LCD_Init|LCD_Start
    1C64: 20       POP   X
(0034) 	MainView_Start();
    1C65: 7C 1C F9 LCALL _MainView_Start
(0035) 	DateTimeView_Start();
    1C68: 7C 11 13 LCALL _DateTimeView_Start
(0036) 	RegTimeView_Start();
    1C6B: 7C 21 F7 LCALL _RegTimeView_Start
(0037) 	LevelView_Start();
    1C6E: 7C 17 8D LCALL _LevelView_Start
(0038) 	ConfigView_Start();
    1C71: 7C 0F 18 LCALL _ConfigView_Start
(0039) 	TempSensor_Start();
    1C74: 7C 26 49 LCALL _TempSensor_Start
(0040) 	Logger_Start();
    1C77: 7C 19 CD LCALL _Logger_Start
(0041) 
(0042) 	UART_Start(UART_PARITY_NONE);
    1C7A: 10       PUSH  X
    1C7B: 50 00    MOV   A,0x0
    1C7D: 7C 06 7B LCALL _UART_Start
(0043) 	UART_IntCntl(UART_ENABLE_RX_INT);
    1C80: 50 01    MOV   A,0x1
    1C82: 7C 06 A8 LCALL _UART_IntCntl
    1C85: 20       POP   X
(0044) 
(0045) 	M8C_EnableGInt;
    1C86: 71 01    OR    F,0x1
(0046) 
(0047) 	MainView_Callback();
    1C88: 7C 1D 7E LCALL _MainView_Callback
(0048) 
(0049) 	for(;;)
(0050) 	{
(0051) 		switch(currentView)
    1C8B: 62 D0 00 MOV   REG[0xD0],0x0
    1C8E: 51 A6    MOV   A,[currentView]
    1C90: 54 01    MOV   [X+1],A
    1C92: 56 00 00 MOV   [X+0],0x0
    1C95: 3D 00 00 CMP   [X+0],0x0
    1C98: B0 06    JNZ   0x1C9F
    1C9A: 3D 01 00 CMP   [X+1],0x0
    1C9D: A0 35    JZ    0x1CD3
    1C9F: 3D 00 00 CMP   [X+0],0x0
    1CA2: B0 06    JNZ   0x1CA9
    1CA4: 3D 01 01 CMP   [X+1],0x1
    1CA7: A0 30    JZ    0x1CD8
    1CA9: 3D 00 00 CMP   [X+0],0x0
    1CAC: B0 06    JNZ   0x1CB3
    1CAE: 3D 01 02 CMP   [X+1],0x2
    1CB1: A0 2B    JZ    0x1CDD
    1CB3: 3D 00 00 CMP   [X+0],0x0
    1CB6: B0 06    JNZ   0x1CBD
    1CB8: 3D 01 03 CMP   [X+1],0x3
    1CBB: A0 26    JZ    0x1CE2
    1CBD: 3D 00 00 CMP   [X+0],0x0
    1CC0: B0 06    JNZ   0x1CC7
    1CC2: 3D 01 04 CMP   [X+1],0x4
    1CC5: A0 21    JZ    0x1CE7
    1CC7: 3D 00 00 CMP   [X+0],0x0
    1CCA: B0 06    JNZ   0x1CD1
    1CCC: 3D 01 05 CMP   [X+1],0x5
    1CCF: A0 1C    JZ    0x1CEC
    1CD1: 80 1D    JMP   0x1CEF
(0052) 		{
(0053) 			case MAIN:
(0054) 				MainView_Update();
    1CD3: 7C 1D 90 LCALL _MainView_Update
(0055) 				break;
    1CD6: 80 18    JMP   0x1CEF
(0056) 			case DATETIME_CONFIG:
(0057) 				DateTimeView_Update();
    1CD8: 7C 11 42 LCALL _DateTimeView_Update
(0058) 				break;
    1CDB: 80 13    JMP   0x1CEF
(0059) 			case REGTIME_CONFIG:
(0060) 				RegTimeView_Update();
    1CDD: 7C 22 02 LCALL _RegTimeView_Update
(0061) 				break;
    1CE0: 80 0E    JMP   0x1CEF
(0062) 			case LEVEL_CONFIG:
(0063) 				LevelView_Update();
    1CE2: 7C 18 3B LCALL _LevelView_Update
(0064) 				break;
    1CE5: 80 09    JMP   0x1CEF
(0065) 			case CONFIG:
(0066) 				ConfigView_Update();
    1CE7: 7C 0F A5 LCALL _ConfigView_Update
(0067) 				break;
    1CEA: 80 04    JMP   0x1CEF
(0068) 			case TEMP:
(0069) 				TempView_Update();
    1CEC: 7C 28 AD LCALL _TempView_Update
(0070) 				break;
(0071) 		}
(0072) 		Logger_Loop();
    1CEF: 7C 19 CF LCALL _Logger_Loop
(0073) 	}
    1CF2: 8F 98    JMP   0x1C8B
(0074) 
(0075) }
FILE: C:\Users\Rod\Desktop\RTC\RTC\mainview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "mainView.h"
(0004) #include "Menu.h"
(0005) #include "Keypad.h"
(0006) #include "dateTimeView.h"
(0007) #include "viewManager.h"
(0008) #include "regTimeView.h"
(0009) #include "levelView.h"
(0010) #include "configView.h"
(0011) #include "TempView.h"
(0012) #include <string.h>
(0013) 
(0014) extern CurrentView currentView;
(0015) 
(0016) MenuEntry entries[5];
(0017) Menu menu;
(0018) 
(0019) void MainView_Start(void)
(0020) {
(0021) 	Menu_Start();
_MainView_Start:
    1CF9: 7C 1E 07 LCALL _Menu_Start
(0022) 
(0023) 	cstrcpy(entries[0].text, "Ajustar Hora");
    1CFC: 50 02    MOV   A,0x2
    1CFE: 08       PUSH  A
    1CFF: 50 3A    MOV   A,0x3A
    1D01: 08       PUSH  A
    1D02: 50 00    MOV   A,0x0
    1D04: 08       PUSH  A
    1D05: 50 0F    MOV   A,0xF
    1D07: 08       PUSH  A
    1D08: 7C 38 8C LCALL _cstrcpyLMM
    1D0B: 38 FC    ADD   SP,0xFC
(0024) 	cstrcpy(entries[1].text, "Ajustar Captura");
    1D0D: 50 02    MOV   A,0x2
    1D0F: 08       PUSH  A
    1D10: 50 2A    MOV   A,0x2A
    1D12: 08       PUSH  A
    1D13: 50 00    MOV   A,0x0
    1D15: 08       PUSH  A
    1D16: 50 21    MOV   A,0x21
    1D18: 08       PUSH  A
    1D19: 7C 38 8C LCALL _cstrcpyLMM
(0025) 	cstrcpy(entries[2].text, "Ajustar Nivel");
    1D1C: 50 02    MOV   A,0x2
    1D1E: 08       PUSH  A
    1D1F: 50 1C    MOV   A,0x1C
    1D21: 08       PUSH  A
    1D22: 50 00    MOV   A,0x0
    1D24: 08       PUSH  A
    1D25: 50 33    MOV   A,0x33
    1D27: 08       PUSH  A
    1D28: 7C 38 8C LCALL _cstrcpyLMM
    1D2B: 38 F8    ADD   SP,0xF8
(0026) 	cstrcpy(entries[3].text, "Configuracion");
    1D2D: 50 02    MOV   A,0x2
    1D2F: 08       PUSH  A
    1D30: 50 0E    MOV   A,0xE
    1D32: 08       PUSH  A
    1D33: 50 00    MOV   A,0x0
    1D35: 08       PUSH  A
    1D36: 50 45    MOV   A,0x45
    1D38: 08       PUSH  A
    1D39: 7C 38 8C LCALL _cstrcpyLMM
(0027) 	cstrcpy(entries[4].text, "Temp Actual");
    1D3C: 50 02    MOV   A,0x2
    1D3E: 08       PUSH  A
    1D3F: 50 02    MOV   A,0x2
    1D41: 08       PUSH  A
    1D42: 50 00    MOV   A,0x0
    1D44: 08       PUSH  A
    1D45: 50 57    MOV   A,0x57
    1D47: 08       PUSH  A
    1D48: 7C 38 8C LCALL _cstrcpyLMM
    1D4B: 38 F8    ADD   SP,0xF8
(0028) 
(0029) 	entries[0].callback = &DateTimeView_Callback;
    1D4D: 62 D0 00 MOV   REG[0xD0],0x0
    1D50: 55 20 D9 MOV   [entries+17],0xD9
    1D53: 55 1F 04 MOV   [entries+16],0x4
(0030) 	entries[1].callback = &RegTimeView_Callback;
    1D56: 55 32 D7 MOV   [entries+35],0xD7
    1D59: 55 31 04 MOV   [entries+34],0x4
(0031) 	entries[2].callback = &LevelView_Callback;
    1D5C: 55 44 D5 MOV   [entries+53],0xD5
    1D5F: 55 43 04 MOV   [entries+52],0x4
(0032) 	entries[3].callback = &ConfigView_Callback;
    1D62: 55 56 D3 MOV   [entries+71],0xD3
    1D65: 55 55 04 MOV   [entries+70],0x4
(0033) 	entries[4].callback = &TempView_Callback;
    1D68: 55 68 D1 MOV   [entries+89],0xD1
    1D6B: 55 67 04 MOV   [entries+88],0x4
(0034) 
(0035) 	menu.currentIndex = 0;
    1D6E: 62 D0 00 MOV   REG[0xD0],0x0
    1D71: 55 9C 00 MOV   [menu+3],0x0
(0036) 	menu.nOptions = 5;
    1D74: 55 9B 05 MOV   [menu+2],0x5
(0037) 	menu.entries = entries;
    1D77: 55 9A 0F MOV   [menu+1],0xF
    1D7A: 55 99 00 MOV   [menu],0x0
    1D7D: 7F       RET   
(0038) }
(0039) 
(0040) void MainView_Callback(void)
(0041) {
(0042) 	currentView = MAIN;
_MainView_Callback:
    1D7E: 62 D0 00 MOV   REG[0xD0],0x0
    1D81: 55 A6 00 MOV   [currentView],0x0
(0043) 	Menu_Update(&menu);
    1D84: 50 00    MOV   A,0x0
    1D86: 08       PUSH  A
    1D87: 50 99    MOV   A,0x99
    1D89: 08       PUSH  A
    1D8A: 7C 1E 09 LCALL _Menu_Update
    1D8D: 38 FE    ADD   SP,0xFE
    1D8F: 7F       RET   
(0044) }
(0045) 
(0046) void MainView_Update(void)
(0047) {
_MainView_Update:
    1D90: 10       PUSH  X
    1D91: 4F       MOV   X,SP
    1D92: 38 02    ADD   SP,0x2
(0048) 	if(Keypad_IsKeyStored())
    1D94: 7C 16 B7 LCALL _Keypad_IsKeyStored
    1D97: 62 D0 00 MOV   REG[0xD0],0x0
    1D9A: 39 00    CMP   A,0x0
    1D9C: A0 66    JZ    0x1E03
(0049) 	{
(0050) 		switch(Keypad_GetKey())
    1D9E: 7C 16 CF LCALL _Keypad_GetKey
    1DA1: 62 D0 00 MOV   REG[0xD0],0x0
    1DA4: 54 01    MOV   [X+1],A
    1DA6: 56 00 00 MOV   [X+0],0x0
    1DA9: 52 01    MOV   A,[X+1]
    1DAB: 11 44    SUB   A,0x44
    1DAD: 53 83    MOV   [__rY],A
    1DAF: 52 00    MOV   A,[X+0]
    1DB1: 31 80    XOR   A,0x80
    1DB3: 19 80    SBB   A,0x80
    1DB5: 2A 83    OR    A,[__rY]
    1DB7: A0 28    JZ    0x1DE0
    1DB9: D0 0D    JNC   0x1DC7
    1DBB: 3D 00 00 CMP   [X+0],0x0
    1DBE: B0 06    JNZ   0x1DC5
    1DC0: 3D 01 24 CMP   [X+1],0x24
    1DC3: A0 0F    JZ    0x1DD3
    1DC5: 80 32    JMP   0x1DF8
    1DC7: 3D 00 00 CMP   [X+0],0x0
    1DCA: B0 06    JNZ   0x1DD1
    1DCC: 3D 01 84 CMP   [X+1],0x84
    1DCF: A0 1D    JZ    0x1DED
    1DD1: 80 26    JMP   0x1DF8
(0051) 		{
(0052) 			case 0x24:
(0053) 				// "8"
(0054) 				Menu_Down(&menu);
    1DD3: 50 00    MOV   A,0x0
    1DD5: 08       PUSH  A
    1DD6: 50 99    MOV   A,0x99
    1DD8: 08       PUSH  A
    1DD9: 7C 1F 44 LCALL _Menu_Down
    1DDC: 38 FE    ADD   SP,0xFE
(0055) 				break;
    1DDE: 80 19    JMP   0x1DF8
(0056) 			case 0x44:
(0057) 				// "5"
(0058) 				Menu_Select(&menu);
    1DE0: 50 00    MOV   A,0x0
    1DE2: 08       PUSH  A
    1DE3: 50 99    MOV   A,0x99
    1DE5: 08       PUSH  A
    1DE6: 7C 1F 92 LCALL _Menu_Select
    1DE9: 38 FE    ADD   SP,0xFE
(0059) 				return;
    1DEB: 80 17    JMP   0x1E03
(0060) 				break;
(0061) 			case 0x84:
(0062) 				// "2"
(0063) 				Menu_Up(&menu);
    1DED: 50 00    MOV   A,0x0
    1DEF: 08       PUSH  A
    1DF0: 50 99    MOV   A,0x99
    1DF2: 08       PUSH  A
    1DF3: 7C 1F 05 LCALL _Menu_Up
    1DF6: 38 FE    ADD   SP,0xFE
(0064) 				break;
(0065) 		}
(0066) 		Menu_Update(&menu);
    1DF8: 50 00    MOV   A,0x0
    1DFA: 08       PUSH  A
    1DFB: 50 99    MOV   A,0x99
    1DFD: 08       PUSH  A
    1DFE: 7C 1E 09 LCALL _Menu_Update
    1E01: 38 FE    ADD   SP,0xFE
(0067) 	}
    1E03: 38 FE    ADD   SP,0xFE
    1E05: 20       POP   X
    1E06: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\menu.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "menu.h"
(0004) 
(0005) void Menu_Start(void)
(0006) {
_Menu_Start:
    1E07: 7F       RET   
(0007) 	//LCD_Start();
(0008) }
(0009) 
(0010) void Menu_Stop(void)
(0011) {
_Menu_Stop:
    1E08: 7F       RET   
(0012) 	//LCD_Stop();
(0013) }
(0014) 
(0015) void Menu_Update(Menu *menu)
(0016) {
_Menu_Update:
  menu                 --> X-5
    1E09: 10       PUSH  X
    1E0A: 4F       MOV   X,SP
(0017) 	Menu_Clear();
    1E0B: 92 5B    CALL  _Menu_Clear
(0018) 	LCD_Position(0, 0);
    1E0D: 10       PUSH  X
    1E0E: 50 00    MOV   A,0x0
    1E10: 57 00    MOV   X,0x0
    1E12: 7C 09 71 LCALL _LCD_Position
(0019) 	LCD_PrCString(">");
    1E15: 50 02    MOV   A,0x2
    1E17: 08       PUSH  A
    1E18: 50 5A    MOV   A,0x5A
    1E1A: 5C       MOV   X,A
    1E1B: 18       POP   A
    1E1C: 7C 07 EC LCALL _LCD_PrCString
    1E1F: 20       POP   X
(0020) 	LCD_PrString(menu->entries[menu->currentIndex].text);
    1E20: 62 D0 00 MOV   REG[0xD0],0x0
    1E23: 52 FC    MOV   A,[X-4]
    1E25: 53 8F    MOV   [__r1],A
    1E27: 52 FB    MOV   A,[X-5]
    1E29: 60 D4    MOV   REG[0xD4],A
    1E2B: 3E 8F    MVI   A,[__r1]
    1E2D: 53 90    MOV   [__r0],A
    1E2F: 3E 8F    MVI   A,[__r1]
    1E31: 53 8F    MOV   [__r1],A
    1E33: 52 FC    MOV   A,[X-4]
    1E35: 01 03    ADD   A,0x3
    1E37: 53 8D    MOV   [__r3],A
    1E39: 52 FB    MOV   A,[X-5]
    1E3B: 09 00    ADC   A,0x0
    1E3D: 60 D4    MOV   REG[0xD4],A
    1E3F: 3E 8D    MVI   A,[__r3]
    1E41: 53 8D    MOV   [__r3],A
    1E43: 50 00    MOV   A,0x0
    1E45: 08       PUSH  A
    1E46: 51 8D    MOV   A,[__r3]
    1E48: 08       PUSH  A
    1E49: 50 00    MOV   A,0x0
    1E4B: 08       PUSH  A
    1E4C: 50 12    MOV   A,0x12
    1E4E: 08       PUSH  A
    1E4F: 7C 38 4E LCALL 0x384E
    1E52: 38 FC    ADD   SP,0xFC
    1E54: 51 84    MOV   A,[__rX]
    1E56: 53 8D    MOV   [__r3],A
    1E58: 51 83    MOV   A,[__rY]
    1E5A: 53 8E    MOV   [__r2],A
    1E5C: 51 8D    MOV   A,[__r3]
    1E5E: 02 8F    ADD   A,[__r1]
    1E60: 53 8F    MOV   [__r1],A
    1E62: 51 8E    MOV   A,[__r2]
    1E64: 0A 90    ADC   A,[__r0]
    1E66: 10       PUSH  X
    1E67: 08       PUSH  A
    1E68: 51 8F    MOV   A,[__r1]
    1E6A: 5C       MOV   X,A
    1E6B: 18       POP   A
    1E6C: 7C 08 28 LCALL _LCD_PrString
(0021) 	LCD_Position(1, 0);
    1E6F: 57 00    MOV   X,0x0
    1E71: 50 01    MOV   A,0x1
    1E73: 7C 09 71 LCALL _LCD_Position
(0022) 	LCD_PrCString(" ");
    1E76: 50 02    MOV   A,0x2
    1E78: 08       PUSH  A
    1E79: 50 58    MOV   A,0x58
    1E7B: 5C       MOV   X,A
    1E7C: 18       POP   A
    1E7D: 7C 07 EC LCALL _LCD_PrCString
    1E80: 20       POP   X
(0023) 	if(menu->currentIndex < menu->nOptions - 1)
    1E81: 62 D0 00 MOV   REG[0xD0],0x0
    1E84: 52 FC    MOV   A,[X-4]
    1E86: 01 02    ADD   A,0x2
    1E88: 53 8F    MOV   [__r1],A
    1E8A: 52 FB    MOV   A,[X-5]
    1E8C: 09 00    ADC   A,0x0
    1E8E: 60 D4    MOV   REG[0xD4],A
    1E90: 3E 8F    MVI   A,[__r1]
    1E92: 53 90    MOV   [__r0],A
    1E94: 16 90 01 SUB   [__r0],0x1
    1E97: 52 FC    MOV   A,[X-4]
    1E99: 01 03    ADD   A,0x3
    1E9B: 53 8D    MOV   [__r3],A
    1E9D: 52 FB    MOV   A,[X-5]
    1E9F: 09 00    ADC   A,0x0
    1EA1: 60 D4    MOV   REG[0xD4],A
    1EA3: 3E 8D    MVI   A,[__r3]
    1EA5: 3A 90    CMP   A,[__r0]
    1EA7: D0 5B    JNC   0x1F03
(0024) 	{
(0025) 		LCD_PrString(menu->entries[menu->currentIndex + 1].text);
    1EA9: 62 D0 00 MOV   REG[0xD0],0x0
    1EAC: 52 FC    MOV   A,[X-4]
    1EAE: 53 8F    MOV   [__r1],A
    1EB0: 52 FB    MOV   A,[X-5]
    1EB2: 60 D4    MOV   REG[0xD4],A
    1EB4: 3E 8F    MVI   A,[__r1]
    1EB6: 53 90    MOV   [__r0],A
    1EB8: 3E 8F    MVI   A,[__r1]
    1EBA: 53 8F    MOV   [__r1],A
    1EBC: 52 FC    MOV   A,[X-4]
    1EBE: 01 03    ADD   A,0x3
    1EC0: 53 8D    MOV   [__r3],A
    1EC2: 52 FB    MOV   A,[X-5]
    1EC4: 09 00    ADC   A,0x0
    1EC6: 60 D4    MOV   REG[0xD4],A
    1EC8: 3E 8D    MVI   A,[__r3]
    1ECA: 53 8D    MOV   [__r3],A
    1ECC: 50 00    MOV   A,0x0
    1ECE: 08       PUSH  A
    1ECF: 51 8D    MOV   A,[__r3]
    1ED1: 08       PUSH  A
    1ED2: 50 00    MOV   A,0x0
    1ED4: 08       PUSH  A
    1ED5: 50 12    MOV   A,0x12
    1ED7: 08       PUSH  A
    1ED8: 7C 38 4E LCALL 0x384E
    1EDB: 38 FC    ADD   SP,0xFC
    1EDD: 51 84    MOV   A,[__rX]
    1EDF: 53 8D    MOV   [__r3],A
    1EE1: 51 83    MOV   A,[__rY]
    1EE3: 53 8E    MOV   [__r2],A
    1EE5: 51 8D    MOV   A,[__r3]
    1EE7: 02 8F    ADD   A,[__r1]
    1EE9: 53 8F    MOV   [__r1],A
    1EEB: 51 8E    MOV   A,[__r2]
    1EED: 0A 90    ADC   A,[__r0]
    1EEF: 53 90    MOV   [__r0],A
    1EF1: 06 8F 12 ADD   [__r1],0x12
    1EF4: 0E 90 00 ADC   [__r0],0x0
    1EF7: 10       PUSH  X
    1EF8: 51 90    MOV   A,[__r0]
    1EFA: 08       PUSH  A
    1EFB: 51 8F    MOV   A,[__r1]
    1EFD: 5C       MOV   X,A
    1EFE: 18       POP   A
    1EFF: 7C 08 28 LCALL _LCD_PrString
    1F02: 20       POP   X
(0026) 	}
    1F03: 20       POP   X
    1F04: 7F       RET   
(0027) 
(0028) }
(0029) 
(0030) void Menu_Up(Menu *menu)
(0031) {
_Menu_Up:
  menu                 --> X-5
    1F05: 10       PUSH  X
    1F06: 4F       MOV   X,SP
(0032) 	if(menu->currentIndex > 0)
    1F07: 62 D0 00 MOV   REG[0xD0],0x0
    1F0A: 52 FC    MOV   A,[X-4]
    1F0C: 01 03    ADD   A,0x3
    1F0E: 53 8F    MOV   [__r1],A
    1F10: 52 FB    MOV   A,[X-5]
    1F12: 09 00    ADC   A,0x0
    1F14: 60 D4    MOV   REG[0xD4],A
    1F16: 3E 8F    MVI   A,[__r1]
    1F18: 53 90    MOV   [__r0],A
    1F1A: 50 00    MOV   A,0x0
    1F1C: 3A 90    CMP   A,[__r0]
    1F1E: D0 23    JNC   0x1F42
(0033) 	{
(0034) 		menu->currentIndex--;
    1F20: 62 D0 00 MOV   REG[0xD0],0x0
    1F23: 52 FC    MOV   A,[X-4]
    1F25: 01 03    ADD   A,0x3
    1F27: 53 8F    MOV   [__r1],A
    1F29: 52 FB    MOV   A,[X-5]
    1F2B: 09 00    ADC   A,0x0
    1F2D: 53 90    MOV   [__r0],A
    1F2F: 60 D4    MOV   REG[0xD4],A
    1F31: 3E 8F    MVI   A,[__r1]
    1F33: 7A 8F    DEC   [__r1]
    1F35: 53 8E    MOV   [__r2],A
    1F37: 16 8E 01 SUB   [__r2],0x1
    1F3A: 51 90    MOV   A,[__r0]
    1F3C: 60 D5    MOV   REG[0xD5],A
    1F3E: 51 8E    MOV   A,[__r2]
    1F40: 3F 8F    MVI   [__r1],A
(0035) 	}
    1F42: 20       POP   X
    1F43: 7F       RET   
(0036) }
(0037) 
(0038) void Menu_Down(Menu *menu)
(0039) {
_Menu_Down:
  menu                 --> X-5
    1F44: 10       PUSH  X
    1F45: 4F       MOV   X,SP
(0040) 	if(menu->currentIndex < menu->nOptions - 1)
    1F46: 62 D0 00 MOV   REG[0xD0],0x0
    1F49: 52 FC    MOV   A,[X-4]
    1F4B: 01 02    ADD   A,0x2
    1F4D: 53 8F    MOV   [__r1],A
    1F4F: 52 FB    MOV   A,[X-5]
    1F51: 09 00    ADC   A,0x0
    1F53: 60 D4    MOV   REG[0xD4],A
    1F55: 3E 8F    MVI   A,[__r1]
    1F57: 53 90    MOV   [__r0],A
    1F59: 16 90 01 SUB   [__r0],0x1
    1F5C: 52 FC    MOV   A,[X-4]
    1F5E: 01 03    ADD   A,0x3
    1F60: 53 8D    MOV   [__r3],A
    1F62: 52 FB    MOV   A,[X-5]
    1F64: 09 00    ADC   A,0x0
    1F66: 60 D4    MOV   REG[0xD4],A
    1F68: 3E 8D    MVI   A,[__r3]
    1F6A: 3A 90    CMP   A,[__r0]
    1F6C: D0 23    JNC   0x1F90
(0041) 	{
(0042) 		menu->currentIndex++;
    1F6E: 62 D0 00 MOV   REG[0xD0],0x0
    1F71: 52 FC    MOV   A,[X-4]
    1F73: 01 03    ADD   A,0x3
    1F75: 53 8F    MOV   [__r1],A
    1F77: 52 FB    MOV   A,[X-5]
    1F79: 09 00    ADC   A,0x0
    1F7B: 53 90    MOV   [__r0],A
    1F7D: 60 D4    MOV   REG[0xD4],A
    1F7F: 3E 8F    MVI   A,[__r1]
    1F81: 7A 8F    DEC   [__r1]
    1F83: 53 8E    MOV   [__r2],A
    1F85: 06 8E 01 ADD   [__r2],0x1
    1F88: 51 90    MOV   A,[__r0]
    1F8A: 60 D5    MOV   REG[0xD5],A
    1F8C: 51 8E    MOV   A,[__r2]
    1F8E: 3F 8F    MVI   [__r1],A
(0043) 	}
    1F90: 20       POP   X
    1F91: 7F       RET   
(0044) }
(0045) 
(0046) void Menu_Select(Menu *menu)
(0047) {
_Menu_Select:
  menu                 --> X-5
    1F92: 10       PUSH  X
    1F93: 4F       MOV   X,SP
(0048) 	if(menu->entries[menu->currentIndex].callback != 0)
    1F94: 62 D0 00 MOV   REG[0xD0],0x0
    1F97: 52 FC    MOV   A,[X-4]
    1F99: 53 8F    MOV   [__r1],A
    1F9B: 52 FB    MOV   A,[X-5]
    1F9D: 60 D4    MOV   REG[0xD4],A
    1F9F: 3E 8F    MVI   A,[__r1]
    1FA1: 53 90    MOV   [__r0],A
    1FA3: 3E 8F    MVI   A,[__r1]
    1FA5: 53 8F    MOV   [__r1],A
    1FA7: 52 FC    MOV   A,[X-4]
    1FA9: 01 03    ADD   A,0x3
    1FAB: 53 8D    MOV   [__r3],A
    1FAD: 52 FB    MOV   A,[X-5]
    1FAF: 09 00    ADC   A,0x0
    1FB1: 60 D4    MOV   REG[0xD4],A
    1FB3: 3E 8D    MVI   A,[__r3]
    1FB5: 53 8D    MOV   [__r3],A
    1FB7: 50 00    MOV   A,0x0
    1FB9: 08       PUSH  A
    1FBA: 51 8D    MOV   A,[__r3]
    1FBC: 08       PUSH  A
    1FBD: 50 00    MOV   A,0x0
    1FBF: 08       PUSH  A
    1FC0: 50 12    MOV   A,0x12
    1FC2: 08       PUSH  A
    1FC3: 7C 38 4E LCALL 0x384E
    1FC6: 38 FC    ADD   SP,0xFC
    1FC8: 51 84    MOV   A,[__rX]
    1FCA: 53 8D    MOV   [__r3],A
    1FCC: 51 83    MOV   A,[__rY]
    1FCE: 53 8E    MOV   [__r2],A
    1FD0: 51 8D    MOV   A,[__r3]
    1FD2: 02 8F    ADD   A,[__r1]
    1FD4: 53 8F    MOV   [__r1],A
    1FD6: 51 8E    MOV   A,[__r2]
    1FD8: 0A 90    ADC   A,[__r0]
    1FDA: 53 90    MOV   [__r0],A
    1FDC: 06 8F 10 ADD   [__r1],0x10
    1FDF: 0E 90 00 ADC   [__r0],0x0
    1FE2: 51 90    MOV   A,[__r0]
    1FE4: 60 D4    MOV   REG[0xD4],A
    1FE6: 3E 8F    MVI   A,[__r1]
    1FE8: 53 90    MOV   [__r0],A
    1FEA: 3E 8F    MVI   A,[__r1]
    1FEC: 53 8F    MOV   [__r1],A
    1FEE: 51 90    MOV   A,[__r0]
    1FF0: 10       PUSH  X
    1FF1: 58 8F    MOV   X,[__r1]
    1FF3: 08       PUSH  A
    1FF4: 28       ROMX  
    1FF5: 53 90    MOV   [__r0],A
    1FF7: 18       POP   A
    1FF8: 75       INC   X
    1FF9: 09 00    ADC   A,0x0
    1FFB: 28       ROMX  
    1FFC: 20       POP   X
    1FFD: 3C 90 00 CMP   [__r0],0x0
    2000: B0 05    JNZ   0x2006
    2002: 39 00    CMP   A,0x0
    2004: A0 61    JZ    0x2066
(0049) 	{
(0050) 		menu->entries[menu->currentIndex].callback();
    2006: 62 D0 00 MOV   REG[0xD0],0x0
    2009: 52 FC    MOV   A,[X-4]
    200B: 53 8F    MOV   [__r1],A
    200D: 52 FB    MOV   A,[X-5]
    200F: 60 D4    MOV   REG[0xD4],A
    2011: 3E 8F    MVI   A,[__r1]
    2013: 53 90    MOV   [__r0],A
    2015: 3E 8F    MVI   A,[__r1]
    2017: 53 8F    MOV   [__r1],A
    2019: 52 FC    MOV   A,[X-4]
    201B: 01 03    ADD   A,0x3
    201D: 53 8D    MOV   [__r3],A
    201F: 52 FB    MOV   A,[X-5]
    2021: 09 00    ADC   A,0x0
    2023: 60 D4    MOV   REG[0xD4],A
    2025: 3E 8D    MVI   A,[__r3]
    2027: 53 8D    MOV   [__r3],A
    2029: 50 00    MOV   A,0x0
    202B: 08       PUSH  A
    202C: 51 8D    MOV   A,[__r3]
    202E: 08       PUSH  A
    202F: 50 00    MOV   A,0x0
    2031: 08       PUSH  A
    2032: 50 12    MOV   A,0x12
    2034: 08       PUSH  A
    2035: 7C 38 4E LCALL 0x384E
    2038: 38 FC    ADD   SP,0xFC
    203A: 51 84    MOV   A,[__rX]
    203C: 53 8D    MOV   [__r3],A
    203E: 51 83    MOV   A,[__rY]
    2040: 53 8E    MOV   [__r2],A
    2042: 51 8D    MOV   A,[__r3]
    2044: 02 8F    ADD   A,[__r1]
    2046: 53 8F    MOV   [__r1],A
    2048: 51 8E    MOV   A,[__r2]
    204A: 0A 90    ADC   A,[__r0]
    204C: 53 90    MOV   [__r0],A
    204E: 06 8F 10 ADD   [__r1],0x10
    2051: 0E 90 00 ADC   [__r0],0x0
    2054: 51 90    MOV   A,[__r0]
    2056: 60 D4    MOV   REG[0xD4],A
    2058: 3E 8F    MVI   A,[__r1]
    205A: 53 90    MOV   [__r0],A
    205C: 3E 8F    MVI   A,[__r1]
    205E: 10       PUSH  X
    205F: 5C       MOV   X,A
    2060: 51 90    MOV   A,[__r0]
    2062: 7C 38 B9 LCALL __plcall
    2065: 20       POP   X
(0051) 	}
    2066: 20       POP   X
    2067: 7F       RET   
(0052) }
(0053) 
(0054) void Menu_Clear(void)
(0055) {
(0056) 	LCD_Position(0, 0);
_Menu_Clear:
    2068: 10       PUSH  X
    2069: 50 00    MOV   A,0x0
    206B: 57 00    MOV   X,0x0
    206D: 7C 09 71 LCALL _LCD_Position
(0057) 	LCD_PrCString("                ");
    2070: 50 02    MOV   A,0x2
    2072: 08       PUSH  A
    2073: 50 47    MOV   A,0x47
    2075: 5C       MOV   X,A
    2076: 18       POP   A
    2077: 7C 07 EC LCALL _LCD_PrCString
(0058) 	LCD_Position(1, 0);
    207A: 57 00    MOV   X,0x0
    207C: 50 01    MOV   A,0x1
    207E: 7C 09 71 LCALL _LCD_Position
(0059) 	LCD_PrCString("                ");
    2081: 50 02    MOV   A,0x2
    2083: 08       PUSH  A
    2084: 50 47    MOV   A,0x47
    2086: 5C       MOV   X,A
    2087: 18       POP   A
    2088: 7C 07 EC LCALL _LCD_PrCString
    208B: 20       POP   X
    208C: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\persist.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "EEPROM.h"
(0004) #include "Persist.h"
(0005) 
(0006) void Persist_Start(void)
(0007) {
(0008) 	EEPROM_Start();
_Persist_Start:
    208D: 7C 14 41 LCALL _EEPROM_Start
    2090: 7F       RET   
(0009) }
(0010) 
(0011) void Persist_Stop(void)
(0012) {
(0013) 	EEPROM_Stop();
_Persist_Stop:
    2091: 7C 14 47 LCALL _EEPROM_Stop
    2094: 7F       RET   
(0014) }
(0015) 
(0016) void Persist_Clear(void)
(0017) {
_Persist_Clear:
  blankConfig          --> X+0
    2095: 10       PUSH  X
    2096: 4F       MOV   X,SP
    2097: 38 0B    ADD   SP,0xB
(0018) 	Config blankConfig;
(0019) 	blankConfig.flags.alarmEnabled = FALSE;
    2099: 62 D0 00 MOV   REG[0xD0],0x0
    209C: 52 00    MOV   A,[X+0]
    209E: 21 BF    AND   A,0xBF
    20A0: 54 00    MOV   [X+0],A
(0020) 	blankConfig.flags.registerEnabled = FALSE;
    20A2: 52 00    MOV   A,[X+0]
    20A4: 21 7F    AND   A,0x7F
    20A6: 54 00    MOV   [X+0],A
(0021) 	blankConfig.nRecords = 0;
    20A8: 56 0A 00 MOV   [X+10],0x0
    20AB: 56 09 00 MOV   [X+9],0x0
(0022) 
(0023) 	Persist_SaveConfig(&blankConfig);
    20AE: 50 07    MOV   A,0x7
    20B0: 08       PUSH  A
    20B1: 10       PUSH  X
    20B2: 90 F7    CALL  _Persist_SaveConfig
    20B4: 38 FE    ADD   SP,0xFE
    20B6: 62 D0 00 MOV   REG[0xD0],0x0
    20B9: 38 F5    ADD   SP,0xF5
    20BB: 20       POP   X
    20BC: 7F       RET   
(0024) }
(0025) 
(0026) // saves new record and increments config.nRecords. returns success or error.
(0027) BOOL Persist_SaveRecord(Record *record)
(0028) {
_Persist_SaveRecord:
  index                --> X+11
  conf                 --> X+0
  record               --> X-5
    20BD: 10       PUSH  X
    20BE: 4F       MOV   X,SP
    20BF: 38 0D    ADD   SP,0xD
(0029) 	unsigned short index;
(0030) 	Config conf;
(0031) 	Persist_LoadConfig(&conf);
    20C1: 62 D0 00 MOV   REG[0xD0],0x0
    20C4: 50 07    MOV   A,0x7
    20C6: 08       PUSH  A
    20C7: 10       PUSH  X
    20C8: 91 07    CALL  _Persist_LoadConfig
    20CA: 38 FE    ADD   SP,0xFE
    20CC: 62 D0 00 MOV   REG[0xD0],0x0
(0032) 	conf.nRecords++;
    20CF: 77 0A    INC   [X+10]
    20D1: 0F 09 00 ADC   [X+9],0x0
(0033) 
(0034) 	if(conf.nRecords > MAX_RECORDS) return FALSE;
    20D4: 50 88    MOV   A,0x88
    20D6: 13 0A    SUB   A,[X+10]
    20D8: 50 13    MOV   A,0x13
    20DA: 1B 09    SBB   A,[X+9]
    20DC: D0 08    JNC   0x20E5
    20DE: 62 D0 00 MOV   REG[0xD0],0x0
    20E1: 50 00    MOV   A,0x0
    20E3: 80 6B    JMP   0x214F
(0035) 
(0036) 	index = sizeof(Config) + ((conf.nRecords - 1) * sizeof(Record));
    20E5: 62 D0 00 MOV   REG[0xD0],0x0
    20E8: 52 0A    MOV   A,[X+10]
    20EA: 11 01    SUB   A,0x1
    20EC: 53 8F    MOV   [__r1],A
    20EE: 52 09    MOV   A,[X+9]
    20F0: 19 00    SBB   A,0x0
    20F2: 08       PUSH  A
    20F3: 51 8F    MOV   A,[__r1]
    20F5: 08       PUSH  A
    20F6: 50 00    MOV   A,0x0
    20F8: 08       PUSH  A
    20F9: 50 06    MOV   A,0x6
    20FB: 08       PUSH  A
    20FC: 7C 38 4E LCALL 0x384E
    20FF: 38 FC    ADD   SP,0xFC
    2101: 51 84    MOV   A,[__rX]
    2103: 53 8F    MOV   [__r1],A
    2105: 51 83    MOV   A,[__rY]
    2107: 53 90    MOV   [__r0],A
    2109: 51 8F    MOV   A,[__r1]
    210B: 01 0B    ADD   A,0xB
    210D: 54 0C    MOV   [X+12],A
    210F: 51 90    MOV   A,[__r0]
    2111: 09 00    ADC   A,0x0
    2113: 54 0B    MOV   [X+11],A
(0037) 
(0038) 	if(EEPROM_Write((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
    2115: 50 06    MOV   A,0x6
    2117: 08       PUSH  A
    2118: 52 0B    MOV   A,[X+11]
    211A: 08       PUSH  A
    211B: 52 0C    MOV   A,[X+12]
    211D: 08       PUSH  A
    211E: 52 FB    MOV   A,[X-5]
    2120: 08       PUSH  A
    2121: 52 FC    MOV   A,[X-4]
    2123: 08       PUSH  A
    2124: 7C 14 4D LCALL _EEPROM_Write
    2127: 38 FB    ADD   SP,0xFB
    2129: 62 D0 00 MOV   REG[0xD0],0x0
    212C: 39 00    CMP   A,0x0
    212E: A0 05    JZ    0x2134
    2130: 50 00    MOV   A,0x0
    2132: 80 1C    JMP   0x214F
(0039) 	if(!Persist_SaveConfig(&conf)) return FALSE;
    2134: 62 D0 00 MOV   REG[0xD0],0x0
    2137: 50 07    MOV   A,0x7
    2139: 08       PUSH  A
    213A: 10       PUSH  X
    213B: 90 6E    CALL  _Persist_SaveConfig
    213D: 38 FE    ADD   SP,0xFE
    213F: 62 D0 00 MOV   REG[0xD0],0x0
    2142: 39 00    CMP   A,0x0
    2144: B0 05    JNZ   0x214A
    2146: 50 00    MOV   A,0x0
    2148: 80 06    JMP   0x214F
(0040) 
(0041) 	return TRUE;
    214A: 62 D0 00 MOV   REG[0xD0],0x0
    214D: 50 01    MOV   A,0x1
    214F: 38 F3    ADD   SP,0xF3
    2151: 20       POP   X
    2152: 7F       RET   
(0042) }
(0043) 
(0044) // Loads record n in record.
(0045) BOOL Persist_LoadRecord(Record *record, BYTE n)
(0046) {
_Persist_LoadRecord:
  index                --> X+0
  n                    --> X-6
  record               --> X-5
    2153: 10       PUSH  X
    2154: 4F       MOV   X,SP
    2155: 38 02    ADD   SP,0x2
(0047) 	unsigned short index = sizeof(Config) + (n * sizeof(Record));
    2157: 62 D0 00 MOV   REG[0xD0],0x0
    215A: 52 FA    MOV   A,[X-6]
    215C: 53 8F    MOV   [__r1],A
    215E: 50 00    MOV   A,0x0
    2160: 08       PUSH  A
    2161: 51 8F    MOV   A,[__r1]
    2163: 08       PUSH  A
    2164: 50 00    MOV   A,0x0
    2166: 08       PUSH  A
    2167: 50 06    MOV   A,0x6
    2169: 08       PUSH  A
    216A: 7C 38 4E LCALL 0x384E
    216D: 38 FC    ADD   SP,0xFC
    216F: 51 84    MOV   A,[__rX]
    2171: 53 8F    MOV   [__r1],A
    2173: 51 83    MOV   A,[__rY]
    2175: 53 90    MOV   [__r0],A
    2177: 51 8F    MOV   A,[__r1]
    2179: 01 0B    ADD   A,0xB
    217B: 54 01    MOV   [X+1],A
    217D: 51 90    MOV   A,[__r0]
    217F: 09 00    ADC   A,0x0
    2181: 54 00    MOV   [X+0],A
(0048) 
(0049) 	if(EEPROM_Read((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
    2183: 50 06    MOV   A,0x6
    2185: 08       PUSH  A
    2186: 52 00    MOV   A,[X+0]
    2188: 08       PUSH  A
    2189: 52 01    MOV   A,[X+1]
    218B: 08       PUSH  A
    218C: 52 FB    MOV   A,[X-5]
    218E: 08       PUSH  A
    218F: 52 FC    MOV   A,[X-4]
    2191: 08       PUSH  A
    2192: 7C 14 DB LCALL _EEPROM_Read
    2195: 38 FB    ADD   SP,0xFB
    2197: 62 D0 00 MOV   REG[0xD0],0x0
    219A: 39 00    CMP   A,0x0
    219C: A0 05    JZ    0x21A2
    219E: 50 00    MOV   A,0x0
    21A0: 80 06    JMP   0x21A7
(0050) 
(0051) 	return TRUE;
    21A2: 62 D0 00 MOV   REG[0xD0],0x0
    21A5: 50 01    MOV   A,0x1
    21A7: 38 FE    ADD   SP,0xFE
    21A9: 20       POP   X
    21AA: 7F       RET   
(0052) }
(0053) 
(0054) // Saves config
(0055) BOOL Persist_SaveConfig(Config *config)
(0056) {
_Persist_SaveConfig:
  config               --> X-5
    21AB: 10       PUSH  X
    21AC: 4F       MOV   X,SP
(0057) 	if(EEPROM_Write((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
    21AD: 50 0B    MOV   A,0xB
    21AF: 08       PUSH  A
    21B0: 50 00    MOV   A,0x0
    21B2: 08       PUSH  A
    21B3: 08       PUSH  A
    21B4: 52 FB    MOV   A,[X-5]
    21B6: 08       PUSH  A
    21B7: 52 FC    MOV   A,[X-4]
    21B9: 08       PUSH  A
    21BA: 7C 14 4D LCALL _EEPROM_Write
    21BD: 38 FB    ADD   SP,0xFB
    21BF: 62 D0 00 MOV   REG[0xD0],0x0
    21C2: 39 00    CMP   A,0x0
    21C4: A0 05    JZ    0x21CA
    21C6: 50 00    MOV   A,0x0
    21C8: 80 06    JMP   0x21CF
(0058) 
(0059) 	return TRUE;
    21CA: 62 D0 00 MOV   REG[0xD0],0x0
    21CD: 50 01    MOV   A,0x1
    21CF: 20       POP   X
    21D0: 7F       RET   
(0060) }
(0061) 
(0062) // Loads config.
(0063) BOOL Persist_LoadConfig(Config *config)
(0064) {
_Persist_LoadConfig:
  config               --> X-5
    21D1: 10       PUSH  X
    21D2: 4F       MOV   X,SP
(0065) 	if(EEPROM_Read((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
    21D3: 50 0B    MOV   A,0xB
    21D5: 08       PUSH  A
    21D6: 50 00    MOV   A,0x0
    21D8: 08       PUSH  A
    21D9: 08       PUSH  A
    21DA: 52 FB    MOV   A,[X-5]
    21DC: 08       PUSH  A
    21DD: 52 FC    MOV   A,[X-4]
    21DF: 08       PUSH  A
    21E0: 7C 14 DB LCALL _EEPROM_Read
    21E3: 38 FB    ADD   SP,0xFB
    21E5: 62 D0 00 MOV   REG[0xD0],0x0
    21E8: 39 00    CMP   A,0x0
    21EA: A0 05    JZ    0x21F0
    21EC: 50 00    MOV   A,0x0
    21EE: 80 06    JMP   0x21F5
(0066) 
(0067) 	return TRUE;
    21F0: 62 D0 00 MOV   REG[0xD0],0x0
    21F3: 50 01    MOV   A,0x1
    21F5: 20       POP   X
    21F6: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\regtimeview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "regTimeView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void RegTimeView_Start(void)
(0014) {
_RegTimeView_Start:
    21F7: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void RegTimeView_Callback(void)
(0019) {
(0020) 	currentView = REGTIME_CONFIG;
_RegTimeView_Callback:
    21F8: 62 D0 00 MOV   REG[0xD0],0x0
    21FB: 55 A6 02 MOV   [currentView],0x2
(0021) 	Menu_Clear();
    21FE: 7C 20 68 LCALL _Menu_Clear
    2201: 7F       RET   
(0022) }
(0023) 
(0024) void RegTimeView_Update(void)
(0025) {
_RegTimeView_Update:
  endHour10            --> X+18
  startHour10          --> X+17
  endMin10             --> X+16
  startMin10           --> X+15
  endHour              --> X+14
  startHour            --> X+13
  endMin               --> X+12
  startMin             --> X+11
  conf                 --> X+0
    2202: 10       PUSH  X
    2203: 4F       MOV   X,SP
    2204: 38 15    ADD   SP,0x15
(0026) 	BYTE startMin10, startMin, endMin10, endMin, startHour10, startHour, endHour10, endHour;
(0027) 	Config conf;
(0028) 	Persist_LoadConfig(&conf);
    2206: 62 D0 00 MOV   REG[0xD0],0x0
    2209: 50 07    MOV   A,0x7
    220B: 08       PUSH  A
    220C: 10       PUSH  X
    220D: 7C 21 D1 LCALL _Persist_LoadConfig
    2210: 38 FE    ADD   SP,0xFE
    2212: 62 D0 00 MOV   REG[0xD0],0x0
(0029) 	
(0030) 	if(Keypad_IsKeyStored())
    2215: 7C 16 B7 LCALL _Keypad_IsKeyStored
    2218: 62 D0 00 MOV   REG[0xD0],0x0
    221B: 39 00    CMP   A,0x0
    221D: A1 6C    JZ    0x238A
(0031) 	{
(0032) 		switch(Keypad_GetKey())
    221F: 7C 16 CF LCALL _Keypad_GetKey
    2222: 62 D0 00 MOV   REG[0xD0],0x0
    2225: 54 14    MOV   [X+20],A
    2227: 56 13 00 MOV   [X+19],0x0
    222A: 52 14    MOV   A,[X+20]
    222C: 11 28    SUB   A,0x28
    222E: 53 83    MOV   [__rY],A
    2230: 52 13    MOV   A,[X+19]
    2232: 31 80    XOR   A,0x80
    2234: 19 80    SBB   A,0x80
    2236: 2A 83    OR    A,[__rY]
    2238: A0 E2    JZ    0x231B
    223A: D0 38    JNC   0x2273
    223C: 52 14    MOV   A,[X+20]
    223E: 11 18    SUB   A,0x18
    2240: 62 D0 00 MOV   REG[0xD0],0x0
    2243: 53 83    MOV   [__rY],A
    2245: 52 13    MOV   A,[X+19]
    2247: 31 80    XOR   A,0x80
    2249: 19 80    SBB   A,0x80
    224B: 2A 83    OR    A,[__rY]
    224D: A1 01    JZ    0x234F
    224F: D0 17    JNC   0x2267
    2251: 3D 13 00 CMP   [X+19],0x0
    2254: B0 06    JNZ   0x225B
    2256: 3D 14 11 CMP   [X+20],0x11
    2259: A1 2B    JZ    0x2385
    225B: 3D 13 00 CMP   [X+19],0x0
    225E: B0 06    JNZ   0x2265
    2260: 3D 14 14 CMP   [X+20],0x14
    2263: A1 06    JZ    0x236A
    2265: 81 24    JMP   0x238A
    2267: 3D 13 00 CMP   [X+19],0x0
    226A: B0 06    JNZ   0x2271
    226C: 3D 14 24 CMP   [X+20],0x24
    226F: A0 C5    JZ    0x2335
    2271: 81 18    JMP   0x238A
    2273: 52 14    MOV   A,[X+20]
    2275: 11 48    SUB   A,0x48
    2277: 62 D0 00 MOV   REG[0xD0],0x0
    227A: 53 83    MOV   [__rY],A
    227C: 52 13    MOV   A,[X+19]
    227E: 31 80    XOR   A,0x80
    2280: 19 80    SBB   A,0x80
    2282: 2A 83    OR    A,[__rY]
    2284: A0 60    JZ    0x22E5
    2286: D0 0D    JNC   0x2294
    2288: 3D 13 00 CMP   [X+19],0x0
    228B: B0 06    JNZ   0x2292
    228D: 3D 14 44 CMP   [X+20],0x44
    2290: A0 6F    JZ    0x2300
    2292: 80 F7    JMP   0x238A
    2294: 52 14    MOV   A,[X+20]
    2296: 11 84    SUB   A,0x84
    2298: 62 D0 00 MOV   REG[0xD0],0x0
    229B: 53 83    MOV   [__rY],A
    229D: 52 13    MOV   A,[X+19]
    229F: 31 80    XOR   A,0x80
    22A1: 19 80    SBB   A,0x80
    22A3: C0 E6    JC    0x238A
    22A5: 2A 83    OR    A,[__rY]
    22A7: A0 27    JZ    0x22CF
    22A9: 3D 13 00 CMP   [X+19],0x0
    22AC: B0 06    JNZ   0x22B3
    22AE: 3D 14 88 CMP   [X+20],0x88
    22B1: A0 03    JZ    0x22B5
    22B3: 80 D6    JMP   0x238A
(0033) 		{
(0034) 			case 0x88:
(0035) 				// "1"
(0036) 				// start h up
(0037) 				if(conf.registerStart.hour < 23)
    22B5: 3D 01 17 CMP   [X+1],0x17
    22B8: D0 03    JNC   0x22BC
(0038) 				{
(0039) 					conf.registerStart.hour++;
    22BA: 77 01    INC   [X+1]
(0040) 				}
(0041) 				Persist_SaveConfig(&conf);
    22BC: 62 D0 00 MOV   REG[0xD0],0x0
    22BF: 50 07    MOV   A,0x7
    22C1: 08       PUSH  A
    22C2: 10       PUSH  X
    22C3: 7C 21 AB LCALL _Persist_SaveConfig
    22C6: 38 FE    ADD   SP,0xFE
    22C8: 62 D0 00 MOV   REG[0xD0],0x0
    22CB: 53 90    MOV   [__r0],A
(0042) 				break;
    22CD: 80 BC    JMP   0x238A
(0043) 			case 0x84:
(0044) 				// "2"
(0045) 				// start min up
(0046) 				if(conf.registerStart.min < 59)
    22CF: 3D 02 3B CMP   [X+2],0x3B
    22D2: D0 03    JNC   0x22D6
(0047) 				{
(0048) 					conf.registerStart.min++;
    22D4: 77 02    INC   [X+2]
(0049) 				}
(0050) 				Persist_SaveConfig(&conf);
    22D6: 62 D0 00 MOV   REG[0xD0],0x0
    22D9: 50 07    MOV   A,0x7
    22DB: 08       PUSH  A
    22DC: 10       PUSH  X
    22DD: 7C 21 AB LCALL _Persist_SaveConfig
    22E0: 38 FE    ADD   SP,0xFE
    22E2: 62 D0 00 MOV   REG[0xD0],0x0
(0051) 			case 0x48:
(0052) 				// "4"
(0053) 				// start h down
(0054) 				if(conf.registerStart.hour > 0)
    22E5: 50 00    MOV   A,0x0
    22E7: 3B 01    CMP   A,[X+1]
    22E9: D0 03    JNC   0x22ED
(0055) 				{
(0056) 					conf.registerStart.hour--;
    22EB: 7B 01    DEC   [X+1]
(0057) 				}
(0058) 				Persist_SaveConfig(&conf);
    22ED: 62 D0 00 MOV   REG[0xD0],0x0
    22F0: 50 07    MOV   A,0x7
    22F2: 08       PUSH  A
    22F3: 10       PUSH  X
    22F4: 7C 21 AB LCALL _Persist_SaveConfig
    22F7: 38 FE    ADD   SP,0xFE
    22F9: 62 D0 00 MOV   REG[0xD0],0x0
    22FC: 53 90    MOV   [__r0],A
(0059) 				break;
    22FE: 80 8B    JMP   0x238A
(0060) 			case 0x44:
(0061) 				// "5"
(0062) 				// start min down
(0063) 				if(conf.registerStart.min > 0)
    2300: 50 00    MOV   A,0x0
    2302: 3B 02    CMP   A,[X+2]
    2304: D0 03    JNC   0x2308
(0064) 				{
(0065) 					conf.registerStart.min--;
    2306: 7B 02    DEC   [X+2]
(0066) 				}
(0067) 				Persist_SaveConfig(&conf);
    2308: 62 D0 00 MOV   REG[0xD0],0x0
    230B: 50 07    MOV   A,0x7
    230D: 08       PUSH  A
    230E: 10       PUSH  X
    230F: 7C 21 AB LCALL _Persist_SaveConfig
    2312: 38 FE    ADD   SP,0xFE
    2314: 62 D0 00 MOV   REG[0xD0],0x0
    2317: 53 90    MOV   [__r0],A
(0068) 				break;
    2319: 80 70    JMP   0x238A
(0069) 			case 0x28:
(0070) 				// "7"
(0071) 				// end h up
(0072) 				if(conf.registerEnd.hour < 23)
    231B: 3D 03 17 CMP   [X+3],0x17
    231E: D0 03    JNC   0x2322
(0073) 				{
(0074) 					conf.registerEnd.hour++;
    2320: 77 03    INC   [X+3]
(0075) 				}
(0076) 				Persist_SaveConfig(&conf);
    2322: 62 D0 00 MOV   REG[0xD0],0x0
    2325: 50 07    MOV   A,0x7
    2327: 08       PUSH  A
    2328: 10       PUSH  X
    2329: 7C 21 AB LCALL _Persist_SaveConfig
    232C: 38 FE    ADD   SP,0xFE
    232E: 62 D0 00 MOV   REG[0xD0],0x0
    2331: 53 90    MOV   [__r0],A
(0077) 				break;
    2333: 80 56    JMP   0x238A
(0078) 			case 0x24:
(0079) 				// "8"
(0080) 				// end min up
(0081) 				if(conf.registerEnd.min < 59)
    2335: 3D 04 3B CMP   [X+4],0x3B
    2338: D0 03    JNC   0x233C
(0082) 				{
(0083) 					conf.registerEnd.min++;
    233A: 77 04    INC   [X+4]
(0084) 				}
(0085) 				Persist_SaveConfig(&conf);
    233C: 62 D0 00 MOV   REG[0xD0],0x0
    233F: 50 07    MOV   A,0x7
    2341: 08       PUSH  A
    2342: 10       PUSH  X
    2343: 7C 21 AB LCALL _Persist_SaveConfig
    2346: 38 FE    ADD   SP,0xFE
    2348: 62 D0 00 MOV   REG[0xD0],0x0
    234B: 53 90    MOV   [__r0],A
(0086) 				break;
    234D: 80 3C    JMP   0x238A
(0087) 			case 0x18:
(0088) 				// "*"
(0089) 				// end h down
(0090) 				if(conf.registerEnd.hour > 0)
    234F: 50 00    MOV   A,0x0
    2351: 3B 03    CMP   A,[X+3]
    2353: D0 03    JNC   0x2357
(0091) 				{
(0092) 					conf.registerEnd.hour--;
    2355: 7B 03    DEC   [X+3]
(0093) 				}
(0094) 				Persist_SaveConfig(&conf);
    2357: 62 D0 00 MOV   REG[0xD0],0x0
    235A: 50 07    MOV   A,0x7
    235C: 08       PUSH  A
    235D: 10       PUSH  X
    235E: 7C 21 AB LCALL _Persist_SaveConfig
    2361: 38 FE    ADD   SP,0xFE
    2363: 62 D0 00 MOV   REG[0xD0],0x0
    2366: 53 90    MOV   [__r0],A
(0095) 				break;
    2368: 80 21    JMP   0x238A
(0096) 			case 0x14:
(0097) 				// "0"
(0098) 				// end min down
(0099) 				if(conf.registerEnd.min > 0)
    236A: 50 00    MOV   A,0x0
    236C: 3B 04    CMP   A,[X+4]
    236E: D0 03    JNC   0x2372
(0100) 				{
(0101) 					conf.registerEnd.min--;
    2370: 7B 04    DEC   [X+4]
(0102) 				}
(0103) 				Persist_SaveConfig(&conf);
    2372: 62 D0 00 MOV   REG[0xD0],0x0
    2375: 50 07    MOV   A,0x7
    2377: 08       PUSH  A
    2378: 10       PUSH  X
    2379: 7C 21 AB LCALL _Persist_SaveConfig
    237C: 38 FE    ADD   SP,0xFE
    237E: 62 D0 00 MOV   REG[0xD0],0x0
    2381: 53 90    MOV   [__r0],A
(0104) 				break;
    2383: 80 06    JMP   0x238A
(0105) 			case 0x11:
(0106) 				// "D"
(0107) 				MainView_Callback();
    2385: 7C 1D 7E LCALL _MainView_Callback
(0108) 				return;
    2388: 81 00    JMP   0x2489
(0109) 				break;
(0110) 		}
(0111) 	}
(0112) 	
(0113) 	decToBcd(&startHour10, &startHour, conf.registerStart.hour);
    238A: 52 01    MOV   A,[X+1]
    238C: 08       PUSH  A
    238D: 62 D0 00 MOV   REG[0xD0],0x0
    2390: 5A 8F    MOV   [__r1],X
    2392: 06 8F 0D ADD   [__r1],0xD
    2395: 50 07    MOV   A,0x7
    2397: 08       PUSH  A
    2398: 51 8F    MOV   A,[__r1]
    239A: 08       PUSH  A
    239B: 5A 8F    MOV   [__r1],X
    239D: 06 8F 11 ADD   [__r1],0x11
    23A0: 50 07    MOV   A,0x7
    23A2: 08       PUSH  A
    23A3: 51 8F    MOV   A,[__r1]
    23A5: 08       PUSH  A
    23A6: 7C 0E D1 LCALL _decToBcd
(0114) 	startHour = (startHour10 << 4) | startHour;
    23A9: 52 11    MOV   A,[X+17]
    23AB: 62 D0 00 MOV   REG[0xD0],0x0
    23AE: 64       ASL   A
    23AF: 64       ASL   A
    23B0: 64       ASL   A
    23B1: 64       ASL   A
    23B2: 2B 0D    OR    A,[X+13]
    23B4: 54 0D    MOV   [X+13],A
(0115) 	decToBcd(&startMin10, &startMin, conf.registerStart.min);
    23B6: 52 02    MOV   A,[X+2]
    23B8: 08       PUSH  A
    23B9: 5A 8F    MOV   [__r1],X
    23BB: 06 8F 0B ADD   [__r1],0xB
    23BE: 50 07    MOV   A,0x7
    23C0: 08       PUSH  A
    23C1: 51 8F    MOV   A,[__r1]
    23C3: 08       PUSH  A
    23C4: 5A 8F    MOV   [__r1],X
    23C6: 06 8F 0F ADD   [__r1],0xF
    23C9: 50 07    MOV   A,0x7
    23CB: 08       PUSH  A
    23CC: 51 8F    MOV   A,[__r1]
    23CE: 08       PUSH  A
    23CF: 7C 0E D1 LCALL _decToBcd
    23D2: 38 F6    ADD   SP,0xF6
(0116) 	startMin = (startMin10 << 4) | startMin;
    23D4: 52 0F    MOV   A,[X+15]
    23D6: 62 D0 00 MOV   REG[0xD0],0x0
    23D9: 64       ASL   A
    23DA: 64       ASL   A
    23DB: 64       ASL   A
    23DC: 64       ASL   A
    23DD: 2B 0B    OR    A,[X+11]
    23DF: 54 0B    MOV   [X+11],A
(0117) 	
(0118) 	decToBcd(&endHour10, &endHour, conf.registerEnd.hour);
    23E1: 52 03    MOV   A,[X+3]
    23E3: 08       PUSH  A
    23E4: 5A 8F    MOV   [__r1],X
    23E6: 06 8F 0E ADD   [__r1],0xE
    23E9: 50 07    MOV   A,0x7
    23EB: 08       PUSH  A
    23EC: 51 8F    MOV   A,[__r1]
    23EE: 08       PUSH  A
    23EF: 5A 8F    MOV   [__r1],X
    23F1: 06 8F 12 ADD   [__r1],0x12
    23F4: 50 07    MOV   A,0x7
    23F6: 08       PUSH  A
    23F7: 51 8F    MOV   A,[__r1]
    23F9: 08       PUSH  A
    23FA: 7C 0E D1 LCALL _decToBcd
(0119) 	endHour = (endHour10 << 4) | endHour;
    23FD: 52 12    MOV   A,[X+18]
    23FF: 62 D0 00 MOV   REG[0xD0],0x0
    2402: 64       ASL   A
    2403: 64       ASL   A
    2404: 64       ASL   A
    2405: 64       ASL   A
    2406: 2B 0E    OR    A,[X+14]
    2408: 54 0E    MOV   [X+14],A
(0120) 	decToBcd(&endMin10, &endMin, conf.registerEnd.min);
    240A: 52 04    MOV   A,[X+4]
    240C: 08       PUSH  A
    240D: 5A 8F    MOV   [__r1],X
    240F: 06 8F 0C ADD   [__r1],0xC
    2412: 50 07    MOV   A,0x7
    2414: 08       PUSH  A
    2415: 51 8F    MOV   A,[__r1]
    2417: 08       PUSH  A
    2418: 5A 8F    MOV   [__r1],X
    241A: 06 8F 10 ADD   [__r1],0x10
    241D: 50 07    MOV   A,0x7
    241F: 08       PUSH  A
    2420: 51 8F    MOV   A,[__r1]
    2422: 08       PUSH  A
    2423: 7C 0E D1 LCALL _decToBcd
    2426: 38 F6    ADD   SP,0xF6
(0121) 	endMin = (endMin10 << 4) | endMin;
    2428: 52 10    MOV   A,[X+16]
    242A: 62 D0 00 MOV   REG[0xD0],0x0
    242D: 64       ASL   A
    242E: 64       ASL   A
    242F: 64       ASL   A
    2430: 64       ASL   A
    2431: 2B 0C    OR    A,[X+12]
    2433: 54 0C    MOV   [X+12],A
(0122) 	
(0123) 	LCD_Position(0, 0);
    2435: 10       PUSH  X
    2436: 50 00    MOV   A,0x0
    2438: 57 00    MOV   X,0x0
    243A: 7C 09 71 LCALL _LCD_Position
(0124) 	LCD_PrCString("Inicio: ");
    243D: 50 02    MOV   A,0x2
    243F: 08       PUSH  A
    2440: 50 67    MOV   A,0x67
    2442: 5C       MOV   X,A
    2443: 18       POP   A
    2444: 7C 07 EC LCALL _LCD_PrCString
    2447: 20       POP   X
(0125) 	LCD_PrHexByte(startHour);
    2448: 10       PUSH  X
    2449: 52 0D    MOV   A,[X+13]
    244B: 7C 08 0E LCALL _LCD_PrHexByte
(0126) 	LCD_PrCString(":");
    244E: 50 02    MOV   A,0x2
    2450: 08       PUSH  A
    2451: 50 65    MOV   A,0x65
    2453: 5C       MOV   X,A
    2454: 18       POP   A
    2455: 7C 07 EC LCALL _LCD_PrCString
    2458: 20       POP   X
(0127) 	LCD_PrHexByte(startMin);
    2459: 10       PUSH  X
    245A: 52 0B    MOV   A,[X+11]
    245C: 7C 08 0E LCALL _LCD_PrHexByte
(0128) 	LCD_Position(1,0);
    245F: 57 00    MOV   X,0x0
    2461: 50 01    MOV   A,0x1
    2463: 7C 09 71 LCALL _LCD_Position
(0129) 	LCD_PrCString("Fin:    ");
    2466: 50 02    MOV   A,0x2
    2468: 08       PUSH  A
    2469: 50 5C    MOV   A,0x5C
    246B: 5C       MOV   X,A
    246C: 18       POP   A
    246D: 7C 07 EC LCALL _LCD_PrCString
    2470: 20       POP   X
(0130) 	LCD_PrHexByte(endHour);
    2471: 10       PUSH  X
    2472: 52 0E    MOV   A,[X+14]
    2474: 7C 08 0E LCALL _LCD_PrHexByte
(0131) 	LCD_PrCString(":");
    2477: 50 02    MOV   A,0x2
    2479: 08       PUSH  A
    247A: 50 65    MOV   A,0x65
    247C: 5C       MOV   X,A
    247D: 18       POP   A
    247E: 7C 07 EC LCALL _LCD_PrCString
    2481: 20       POP   X
(0132) 	LCD_PrHexByte(endMin);
    2482: 10       PUSH  X
    2483: 52 0C    MOV   A,[X+12]
    2485: 7C 08 0E LCALL _LCD_PrHexByte
    2488: 20       POP   X
    2489: 38 EB    ADD   SP,0xEB
    248B: 20       POP   X
    248C: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\rtc.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Rtc.h"
(0004) 
(0005) typedef union
(0006) {
(0007) 	struct
(0008) 	{
(0009) 		BYTE OUT : 1;
(0010) 		BYTE : 2;
(0011) 		BYTE SQWE : 1;
(0012) 		BYTE : 2;
(0013) 		BYTE RS1 : 1;
(0014) 		BYTE RS0 : 1;
(0015) 	} bits;
(0016) 	BYTE byte;
(0017) 
(0018) } ControlRegister;
(0019) 
(0020) DateTime datetime;
(0021) static ControlRegister cr;
(0022) 
(0023) void Rtc_Start(void)
(0024) {
(0025) 	I2Cm_Start();
_Rtc_Start:
    248D: 10       PUSH  X
    248E: 7C 0A 7B LCALL _I2Cm_Start
    2491: 20       POP   X
(0026) 
(0027) 	// Starts RTC clock
(0028) 	datetime._00h.bits.CH = 0;
    2492: 62 D0 00 MOV   REG[0xD0],0x0
    2495: 51 91    MOV   A,[datetime]
    2497: 21 7F    AND   A,0x7F
    2499: 53 91    MOV   [datetime],A
(0029) 	Rtc_WriteToRtc();
    249B: 90 37    CALL  _Rtc_WriteToRtc
    249D: 62 D0 00 MOV   REG[0xD0],0x0
    24A0: 7F       RET   
(0030) }
(0031) 
(0032) void Rtc_Stop(void)
(0033) {
(0034) 	// Stops RTC clock
(0035) 	Rtc_ReadFromRtc();
_Rtc_Stop:
    24A1: 90 45    CALL  _Rtc_ReadFromRtc
(0036) 	datetime._00h.bits.CH = 1;
    24A3: 62 D0 00 MOV   REG[0xD0],0x0
    24A6: 51 91    MOV   A,[datetime]
    24A8: 29 80    OR    A,0x80
    24AA: 53 91    MOV   [datetime],A
(0037) 	Rtc_WriteToRtc();
    24AC: 90 26    CALL  _Rtc_WriteToRtc
    24AE: 62 D0 00 MOV   REG[0xD0],0x0
(0038) 
(0039) 	I2Cm_Stop();
    24B1: 10       PUSH  X
    24B2: 7C 0A 9F LCALL _I2Cm_Stop
    24B5: 20       POP   X
    24B6: 7F       RET   
(0040) }
(0041) 
(0042) void Rtc_EnableSqw1Hz(void)
(0043) {
(0044) 	Rtc_GetSqwOutConfig();
_Rtc_EnableSqw1Hz:
    24B7: 90 57    CALL  _Rtc_GetSqwOutConfig
(0045) 	cr.bits.SQWE = 1;
    24B9: 62 D0 00 MOV   REG[0xD0],0x0
    24BC: 51 A4    MOV   A,[rtc.c:cr]
    24BE: 29 10    OR    A,0x10
    24C0: 53 A4    MOV   [rtc.c:cr],A
(0046) 	cr.bits.RS0 = 0;
    24C2: 51 A4    MOV   A,[rtc.c:cr]
    24C4: 21 FE    AND   A,0xFE
    24C6: 53 A4    MOV   [rtc.c:cr],A
(0047) 	cr.bits.RS1 = 0;
    24C8: 51 A4    MOV   A,[rtc.c:cr]
    24CA: 21 FD    AND   A,0xFD
    24CC: 53 A4    MOV   [rtc.c:cr],A
(0048) 	Rtc_SetSqwOutConfig();
    24CE: 90 2C    CALL  _Rtc_SetSqwOutConfig
    24D0: 62 D0 00 MOV   REG[0xD0],0x0
    24D3: 7F       RET   
(0049) }
(0050) 
(0051) #define RTC_NOERROR 0x00
(0052) #define RTC_SLAVENOTACKADDRESS 0x01
(0053) #define RTC_SLAVENOTACKDATA 0x02
(0054) 
(0055) BYTE Rtc_WriteToRtc(void)
(0056) {
(0057) 	return Rtc_WriteToRam(&datetime, 0x00, 7);
_Rtc_WriteToRtc:
    24D4: 50 07    MOV   A,0x7
    24D6: 08       PUSH  A
    24D7: 50 00    MOV   A,0x0
    24D9: 08       PUSH  A
    24DA: 50 00    MOV   A,0x0
    24DC: 08       PUSH  A
    24DD: 50 91    MOV   A,0x91
    24DF: 08       PUSH  A
    24E0: 90 47    CALL  _Rtc_WriteToRam
    24E2: 38 FC    ADD   SP,0xFC
    24E4: 62 D0 00 MOV   REG[0xD0],0x0
    24E7: 7F       RET   
(0058) }
(0059) 
(0060) BYTE Rtc_ReadFromRtc(void)
(0061) {
(0062) 	return Rtc_ReadFromRam(&datetime, 0x00, 7);
_Rtc_ReadFromRtc:
    24E8: 50 07    MOV   A,0x7
    24EA: 08       PUSH  A
    24EB: 50 00    MOV   A,0x0
    24ED: 08       PUSH  A
    24EE: 50 00    MOV   A,0x0
    24F0: 08       PUSH  A
    24F1: 50 91    MOV   A,0x91
    24F3: 08       PUSH  A
    24F4: 90 A9    CALL  _Rtc_ReadFromRam
    24F6: 38 FC    ADD   SP,0xFC
    24F8: 62 D0 00 MOV   REG[0xD0],0x0
    24FB: 7F       RET   
(0063) }
(0064) 
(0065) BYTE Rtc_SetSqwOutConfig(void)
(0066) {
(0067) 	return Rtc_WriteToRam(&cr, 0x07, 1);
_Rtc_SetSqwOutConfig:
    24FC: 50 01    MOV   A,0x1
    24FE: 08       PUSH  A
    24FF: 50 07    MOV   A,0x7
    2501: 08       PUSH  A
    2502: 50 00    MOV   A,0x0
    2504: 08       PUSH  A
    2505: 50 A4    MOV   A,0xA4
    2507: 08       PUSH  A
    2508: 90 1F    CALL  _Rtc_WriteToRam
    250A: 38 FC    ADD   SP,0xFC
    250C: 62 D0 00 MOV   REG[0xD0],0x0
    250F: 7F       RET   
(0068) }
(0069) 
(0070) BYTE Rtc_GetSqwOutConfig(void)
(0071) {
(0072) 	Rtc_ReadFromRam(&cr, 0x07, 1);
_Rtc_GetSqwOutConfig:
    2510: 50 01    MOV   A,0x1
    2512: 08       PUSH  A
    2513: 50 07    MOV   A,0x7
    2515: 08       PUSH  A
    2516: 50 00    MOV   A,0x0
    2518: 08       PUSH  A
    2519: 50 A4    MOV   A,0xA4
    251B: 08       PUSH  A
    251C: 90 81    CALL  _Rtc_ReadFromRam
    251E: 38 FC    ADD   SP,0xFC
(0073) 	return cr.byte;
    2520: 62 D0 00 MOV   REG[0xD0],0x0
    2523: 51 A4    MOV   A,[rtc.c:cr]
    2525: 62 D0 00 MOV   REG[0xD0],0x0
    2528: 7F       RET   
(0074) }
(0075) 
(0076) BYTE Rtc_WriteToRam(void* buffer, BYTE address, BYTE count)
(0077) {
_Rtc_WriteToRam:
  error                --> X+1
  i                    --> X+0
  count                --> X-7
  address              --> X-6
  buffer               --> X-5
    2529: 10       PUSH  X
    252A: 4F       MOV   X,SP
    252B: 38 02    ADD   SP,0x2
(0078) 	BYTE error = RTC_NOERROR;
    252D: 56 01 00 MOV   [X+1],0x0
(0079) 	BYTE i = 0;
    2530: 56 00 00 MOV   [X+0],0x0
(0080) 
(0081) 	if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
    2533: 10       PUSH  X
    2534: 57 00    MOV   X,0x0
    2536: 50 68    MOV   A,0x68
    2538: 7C 0B E7 LCALL _I2Cm_fSendStart
    253B: 20       POP   X
    253C: 62 D0 00 MOV   REG[0xD0],0x0
    253F: 39 00    CMP   A,0x0
    2541: A0 4C    JZ    0x258E
(0082) 	{
(0083) 		if(I2Cm_fWrite(address) != 0)
    2543: 10       PUSH  X
    2544: 52 FA    MOV   A,[X-6]
    2546: 7C 0C 21 LCALL _I2Cm_fWrite
    2549: 20       POP   X
    254A: 62 D0 00 MOV   REG[0xD0],0x0
    254D: 39 00    CMP   A,0x0
    254F: A0 39    JZ    0x2589
(0084) 		{
(0085) 			for (i = 0; i < count; i++)
    2551: 56 00 00 MOV   [X+0],0x0
    2554: 80 2C    JMP   0x2581
(0086) 			{
(0087) 				if(I2Cm_fWrite( *( (BYTE*)buffer+i ) ) == 0)
    2556: 62 D0 00 MOV   REG[0xD0],0x0
    2559: 52 00    MOV   A,[X+0]
    255B: 53 8F    MOV   [__r1],A
    255D: 55 90 00 MOV   [__r0],0x0
    2560: 52 FC    MOV   A,[X-4]
    2562: 04 8F    ADD   [__r1],A
    2564: 52 FB    MOV   A,[X-5]
    2566: 0C 90    ADC   [__r0],A
    2568: 51 90    MOV   A,[__r0]
    256A: 60 D4    MOV   REG[0xD4],A
    256C: 3E 8F    MVI   A,[__r1]
    256E: 10       PUSH  X
    256F: 7C 0C 21 LCALL _I2Cm_fWrite
    2572: 20       POP   X
    2573: 62 D0 00 MOV   REG[0xD0],0x0
    2576: 39 00    CMP   A,0x0
    2578: B0 06    JNZ   0x257F
(0088) 				{
(0089) 					error = RTC_SLAVENOTACKDATA;
    257A: 56 01 02 MOV   [X+1],0x2
(0090) 					break;
    257D: 80 13    JMP   0x2591
(0091) 				}
(0092) 			}
    257F: 77 00    INC   [X+0]
    2581: 52 00    MOV   A,[X+0]
    2583: 3B F9    CMP   A,[X-7]
    2585: CF D0    JC    0x2556
(0093) 		}
    2587: 80 09    JMP   0x2591
(0094) 		else
(0095) 		{
(0096) 			error = RTC_SLAVENOTACKDATA;
    2589: 56 01 02 MOV   [X+1],0x2
(0097) 		}
(0098) 	}
    258C: 80 04    JMP   0x2591
(0099) 	else
(0100) 	{
(0101) 		error = RTC_SLAVENOTACKADDRESS;
    258E: 56 01 01 MOV   [X+1],0x1
(0102) 	}
(0103) 
(0104) 	I2Cm_SendStop();
    2591: 10       PUSH  X
    2592: 7C 0D 63 LCALL _I2Cm_SendStop
    2595: 20       POP   X
(0105) 
(0106) 	return error;
    2596: 52 01    MOV   A,[X+1]
    2598: 62 D0 00 MOV   REG[0xD0],0x0
    259B: 38 FE    ADD   SP,0xFE
    259D: 20       POP   X
    259E: 7F       RET   
(0107) }
(0108) 
(0109) BYTE Rtc_ReadFromRam(void* buffer, BYTE address, BYTE count)
(0110) {
_Rtc_ReadFromRam:
  error                --> X+1
  i                    --> X+0
  count                --> X-7
  address              --> X-6
  buffer               --> X-5
    259F: 10       PUSH  X
    25A0: 4F       MOV   X,SP
    25A1: 38 02    ADD   SP,0x2
(0111) 	BYTE error = RTC_NOERROR;
    25A3: 56 01 00 MOV   [X+1],0x0
(0112) 	BYTE i = 0;
    25A6: 56 00 00 MOV   [X+0],0x0
(0113) 
(0114) 	if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
    25A9: 10       PUSH  X
    25AA: 57 00    MOV   X,0x0
    25AC: 50 68    MOV   A,0x68
    25AE: 7C 0B E7 LCALL _I2Cm_fSendStart
    25B1: 20       POP   X
    25B2: 62 D0 00 MOV   REG[0xD0],0x0
    25B5: 39 00    CMP   A,0x0
    25B7: A0 80    JZ    0x2638
(0115) 	{
(0116) 		if(I2Cm_fWrite(address) != 0)
    25B9: 10       PUSH  X
    25BA: 52 FA    MOV   A,[X-6]
    25BC: 7C 0C 21 LCALL _I2Cm_fWrite
    25BF: 20       POP   X
    25C0: 62 D0 00 MOV   REG[0xD0],0x0
    25C3: 39 00    CMP   A,0x0
    25C5: A0 6D    JZ    0x2633
(0117) 		{
(0118) 			if(I2Cm_fSendRepeatStart(RTC_I2C_ADDRESS, I2Cm_READ) != 0)
    25C7: 10       PUSH  X
    25C8: 57 01    MOV   X,0x1
    25CA: 50 68    MOV   A,0x68
    25CC: 7C 0B B1 LCALL _I2Cm_fSendRepeatStart
    25CF: 20       POP   X
    25D0: 62 D0 00 MOV   REG[0xD0],0x0
    25D3: 39 00    CMP   A,0x0
    25D5: A0 58    JZ    0x262E
(0119) 			{
(0120) 				count--;
    25D7: 7B F9    DEC   [X-7]
(0121) 				for (i = 0; i < count; i++)
    25D9: 56 00 00 MOV   [X+0],0x0
    25DC: 80 26    JMP   0x2603
(0122) 				{
(0123) 					*( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_ACKslave);
    25DE: 10       PUSH  X
    25DF: 50 01    MOV   A,0x1
    25E1: 7C 0C B8 LCALL _I2Cm_bRead
    25E4: 20       POP   X
    25E5: 62 D0 00 MOV   REG[0xD0],0x0
    25E8: 53 90    MOV   [__r0],A
    25EA: 52 00    MOV   A,[X+0]
    25EC: 53 8D    MOV   [__r3],A
    25EE: 55 8E 00 MOV   [__r2],0x0
    25F1: 52 FC    MOV   A,[X-4]
    25F3: 04 8D    ADD   [__r3],A
    25F5: 52 FB    MOV   A,[X-5]
    25F7: 0C 8E    ADC   [__r2],A
    25F9: 51 8E    MOV   A,[__r2]
    25FB: 60 D5    MOV   REG[0xD5],A
    25FD: 51 90    MOV   A,[__r0]
    25FF: 3F 8D    MVI   [__r3],A
(0124) 				}
    2601: 77 00    INC   [X+0]
    2603: 52 00    MOV   A,[X+0]
    2605: 3B F9    CMP   A,[X-7]
    2607: CF D6    JC    0x25DE
(0125) 
(0126) 				*( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_NAKslave);
    2609: 10       PUSH  X
    260A: 50 00    MOV   A,0x0
    260C: 7C 0C B8 LCALL _I2Cm_bRead
    260F: 20       POP   X
    2610: 62 D0 00 MOV   REG[0xD0],0x0
    2613: 53 90    MOV   [__r0],A
    2615: 52 00    MOV   A,[X+0]
    2617: 53 8D    MOV   [__r3],A
    2619: 55 8E 00 MOV   [__r2],0x0
    261C: 52 FC    MOV   A,[X-4]
    261E: 04 8D    ADD   [__r3],A
    2620: 52 FB    MOV   A,[X-5]
    2622: 0C 8E    ADC   [__r2],A
    2624: 51 8E    MOV   A,[__r2]
    2626: 60 D5    MOV   REG[0xD5],A
    2628: 51 90    MOV   A,[__r0]
    262A: 3F 8D    MVI   [__r3],A
(0127) 			}
    262C: 80 0E    JMP   0x263B
(0128) 			else
(0129) 			{
(0130) 				error = RTC_SLAVENOTACKDATA;
    262E: 56 01 02 MOV   [X+1],0x2
(0131) 			}
(0132) 		}
    2631: 80 09    JMP   0x263B
(0133) 		else
(0134) 		{
(0135) 			error = RTC_SLAVENOTACKDATA;
    2633: 56 01 02 MOV   [X+1],0x2
(0136) 		}
(0137) 	}
    2636: 80 04    JMP   0x263B
(0138) 	else
(0139) 	{
(0140) 		error = RTC_SLAVENOTACKADDRESS;
    2638: 56 01 01 MOV   [X+1],0x1
(0141) 	}
(0142) 
(0143) 	I2Cm_SendStop();
    263B: 10       PUSH  X
    263C: 7C 0D 63 LCALL _I2Cm_SendStop
    263F: 20       POP   X
(0144) 
(0145) 	return error;
    2640: 52 01    MOV   A,[X+1]
    2642: 62 D0 00 MOV   REG[0xD0],0x0
    2645: 38 FE    ADD   SP,0xFE
    2647: 20       POP   X
    2648: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\tempsensor.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "TempSensor.h"
(0004) #include <stdio.h>
(0005) 
(0006) 
(0007) void TempSensor_Start(void)
(0008) {
(0009) 	PGA_Start(PGA_HIGHPOWER);
_TempSensor_Start:
    2649: 10       PUSH  X
    264A: 50 03    MOV   A,0x3
    264C: 7C 07 AC LCALL _PGA_Start|PGA_SetPower|PGA_Start|_PGA_SetPower
(0010) 	ADCINC_Start(ADCINC_HIGHPOWER);
    264F: 50 03    MOV   A,0x3
    2651: 7C 0E 07 LCALL _ADCINC_Start
(0011) 	ADCINC_GetSamples(0);
    2654: 50 00    MOV   A,0x0
    2656: 7C 0E 32 LCALL _ADCINC_GetSamples
    2659: 20       POP   X
    265A: 7F       RET   
(0012) }
(0013) void TempSensor_Stop(void)
(0014) {
(0015) 	PGA_Stop();
_TempSensor_Stop:
    265B: 10       PUSH  X
    265C: 7C 07 E8 LCALL _PGA_Stop
(0016) 	ADCINC_Stop();
    265F: 7C 0E 28 LCALL _ADCINC_Stop
    2662: 20       POP   X
    2663: 7F       RET   
(0017) }
(0018) 
(0019) int TempSensor_GetTemp(void)
(0020) {
_TempSensor_GetTemp:
  latemp               --> X+4
  temp                 --> X+0
    2664: 10       PUSH  X
    2665: 4F       MOV   X,SP
    2666: 38 06    ADD   SP,0x6
(0021) 	float temp;
(0022) 	int latemp;
(0023) 	while (ADCINC_fIsDataAvailable() == 0);
    2668: 10       PUSH  X
    2669: 7C 0E 6F LCALL _ADCINC_fIsDataAvailable
    266C: 20       POP   X
    266D: 62 D0 00 MOV   REG[0xD0],0x0
    2670: 39 00    CMP   A,0x0
    2672: AF F5    JZ    0x2668
(0024) 	temp = ADCINC_wClearFlagGetData();
    2674: 10       PUSH  X
    2675: 7C 0E 75 LCALL _ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData|_ADCINC_iClearFlagGetData
    2678: 62 D0 00 MOV   REG[0xD0],0x0
    267B: 5A 90    MOV   [__r0],X
    267D: 53 8F    MOV   [__r1],A
    267F: 20       POP   X
    2680: 21 01    AND   A,0x1
    2682: 53 8D    MOV   [__r3],A
    2684: 51 90    MOV   A,[__r0]
    2686: 21 00    AND   A,0x0
    2688: 53 8E    MOV   [__r2],A
    268A: 51 8D    MOV   A,[__r3]
    268C: 53 89    MOV   [__r7],A
    268E: 51 8E    MOV   A,[__r2]
    2690: 53 8A    MOV   [__r6],A
    2692: 47 8A 80 TST   [__r6],0x80
    2695: A0 09    JZ    0x269F
    2697: 55 8B FF MOV   [__r5],0xFF
    269A: 55 8C FF MOV   [__r4],0xFF
    269D: 80 0A    JMP   0x26A8
    269F: 62 D0 00 MOV   REG[0xD0],0x0
    26A2: 55 8B 00 MOV   [__r5],0x0
    26A5: 55 8C 00 MOV   [__r4],0x0
    26A8: 62 D0 00 MOV   REG[0xD0],0x0
    26AB: 51 8C    MOV   A,[__r4]
    26AD: 08       PUSH  A
    26AE: 51 8B    MOV   A,[__r5]
    26B0: 08       PUSH  A
    26B1: 51 8A    MOV   A,[__r6]
    26B3: 08       PUSH  A
    26B4: 51 89    MOV   A,[__r7]
    26B6: 08       PUSH  A
    26B7: 7C 37 E3 LCALL 0x37E3
    26BA: 18       POP   A
    26BB: 53 89    MOV   [__r7],A
    26BD: 18       POP   A
    26BE: 53 8A    MOV   [__r6],A
    26C0: 18       POP   A
    26C1: 53 8B    MOV   [__r5],A
    26C3: 18       POP   A
    26C4: 53 8C    MOV   [__r4],A
    26C6: 70 FB    AND   F,0xFB
    26C8: 6E 90    RRC   [__r0]
    26CA: 6E 8F    RRC   [__r1]
    26CC: 51 8F    MOV   A,[__r1]
    26CE: 53 8D    MOV   [__r3],A
    26D0: 51 90    MOV   A,[__r0]
    26D2: 53 8E    MOV   [__r2],A
    26D4: 47 8E 80 TST   [__r2],0x80
    26D7: A0 09    JZ    0x26E1
    26D9: 55 8F FF MOV   [__r1],0xFF
    26DC: 55 90 FF MOV   [__r0],0xFF
    26DF: 80 0A    JMP   0x26EA
    26E1: 62 D0 00 MOV   REG[0xD0],0x0
    26E4: 55 8F 00 MOV   [__r1],0x0
    26E7: 55 90 00 MOV   [__r0],0x0
    26EA: 62 D0 00 MOV   REG[0xD0],0x0
    26ED: 51 90    MOV   A,[__r0]
    26EF: 08       PUSH  A
    26F0: 51 8F    MOV   A,[__r1]
    26F2: 08       PUSH  A
    26F3: 51 8E    MOV   A,[__r2]
    26F5: 08       PUSH  A
    26F6: 51 8D    MOV   A,[__r3]
    26F8: 08       PUSH  A
    26F9: 7C 37 E3 LCALL 0x37E3
    26FC: 18       POP   A
    26FD: 53 8D    MOV   [__r3],A
    26FF: 18       POP   A
    2700: 53 8E    MOV   [__r2],A
    2702: 18       POP   A
    2703: 53 8F    MOV   [__r1],A
    2705: 18       POP   A
    2706: 08       PUSH  A
    2707: 51 8F    MOV   A,[__r1]
    2709: 08       PUSH  A
    270A: 51 8E    MOV   A,[__r2]
    270C: 08       PUSH  A
    270D: 51 8D    MOV   A,[__r3]
    270F: 08       PUSH  A
    2710: 50 40    MOV   A,0x40
    2712: 08       PUSH  A
    2713: 50 00    MOV   A,0x0
    2715: 08       PUSH  A
    2716: 08       PUSH  A
    2717: 08       PUSH  A
    2718: 7C 36 29 LCALL 0x3629
    271B: 18       POP   A
    271C: 53 8D    MOV   [__r3],A
    271E: 18       POP   A
    271F: 53 8E    MOV   [__r2],A
    2721: 18       POP   A
    2722: 53 8F    MOV   [__r1],A
    2724: 18       POP   A
    2725: 53 90    MOV   [__r0],A
    2727: 38 FC    ADD   SP,0xFC
    2729: 51 8C    MOV   A,[__r4]
    272B: 08       PUSH  A
    272C: 51 8B    MOV   A,[__r5]
    272E: 08       PUSH  A
    272F: 51 8A    MOV   A,[__r6]
    2731: 08       PUSH  A
    2732: 51 89    MOV   A,[__r7]
    2734: 08       PUSH  A
    2735: 51 90    MOV   A,[__r0]
    2737: 08       PUSH  A
    2738: 51 8F    MOV   A,[__r1]
    273A: 08       PUSH  A
    273B: 51 8E    MOV   A,[__r2]
    273D: 08       PUSH  A
    273E: 51 8D    MOV   A,[__r3]
    2740: 08       PUSH  A
    2741: 7C 34 46 LCALL 0x3446
    2744: 18       POP   A
    2745: 54 03    MOV   [X+3],A
    2747: 18       POP   A
    2748: 54 02    MOV   [X+2],A
    274A: 18       POP   A
    274B: 54 01    MOV   [X+1],A
    274D: 18       POP   A
    274E: 54 00    MOV   [X+0],A
    2750: 38 FC    ADD   SP,0xFC
(0025) 	latemp = temp;
    2752: 52 00    MOV   A,[X+0]
    2754: 08       PUSH  A
    2755: 52 01    MOV   A,[X+1]
    2757: 08       PUSH  A
    2758: 52 02    MOV   A,[X+2]
    275A: 08       PUSH  A
    275B: 52 03    MOV   A,[X+3]
    275D: 08       PUSH  A
    275E: 7C 33 35 LCALL 0x3335
    2761: 18       POP   A
    2762: 54 05    MOV   [X+5],A
    2764: 18       POP   A
    2765: 54 04    MOV   [X+4],A
    2767: 38 FE    ADD   SP,0xFE
(0026) 	cprintf("Raw: %d\n",latemp);
    2769: 52 04    MOV   A,[X+4]
    276B: 08       PUSH  A
    276C: 52 05    MOV   A,[X+5]
    276E: 08       PUSH  A
    276F: 50 02    MOV   A,0x2
    2771: 08       PUSH  A
    2772: 50 80    MOV   A,0x80
    2774: 08       PUSH  A
    2775: 7C 3C 82 LCALL _cprintf
    2778: 38 FC    ADD   SP,0xFC
(0027) 	temp = (((temp)*500.0)/1023.0)-264;//270.5;
    277A: 62 D0 00 MOV   REG[0xD0],0x0
    277D: 52 00    MOV   A,[X+0]
    277F: 08       PUSH  A
    2780: 52 01    MOV   A,[X+1]
    2782: 08       PUSH  A
    2783: 52 02    MOV   A,[X+2]
    2785: 08       PUSH  A
    2786: 52 03    MOV   A,[X+3]
    2788: 08       PUSH  A
    2789: 50 43    MOV   A,0x43
    278B: 08       PUSH  A
    278C: 50 FA    MOV   A,0xFA
    278E: 08       PUSH  A
    278F: 50 00    MOV   A,0x0
    2791: 08       PUSH  A
    2792: 08       PUSH  A
    2793: 7C 36 29 LCALL 0x3629
    2796: 18       POP   A
    2797: 53 8D    MOV   [__r3],A
    2799: 18       POP   A
    279A: 53 8E    MOV   [__r2],A
    279C: 18       POP   A
    279D: 53 8F    MOV   [__r1],A
    279F: 18       POP   A
    27A0: 53 90    MOV   [__r0],A
    27A2: 38 FC    ADD   SP,0xFC
    27A4: 50 44    MOV   A,0x44
    27A6: 08       PUSH  A
    27A7: 50 7F    MOV   A,0x7F
    27A9: 08       PUSH  A
    27AA: 50 C0    MOV   A,0xC0
    27AC: 08       PUSH  A
    27AD: 50 00    MOV   A,0x0
    27AF: 08       PUSH  A
    27B0: 51 90    MOV   A,[__r0]
    27B2: 08       PUSH  A
    27B3: 51 8F    MOV   A,[__r1]
    27B5: 08       PUSH  A
    27B6: 51 8E    MOV   A,[__r2]
    27B8: 08       PUSH  A
    27B9: 51 8D    MOV   A,[__r3]
    27BB: 08       PUSH  A
    27BC: 7C 35 46 LCALL 0x3546
    27BF: 18       POP   A
    27C0: 53 8D    MOV   [__r3],A
    27C2: 18       POP   A
    27C3: 53 8E    MOV   [__r2],A
    27C5: 18       POP   A
    27C6: 53 8F    MOV   [__r1],A
    27C8: 18       POP   A
    27C9: 53 90    MOV   [__r0],A
    27CB: 38 FC    ADD   SP,0xFC
    27CD: 50 43    MOV   A,0x43
    27CF: 08       PUSH  A
    27D0: 50 84    MOV   A,0x84
    27D2: 08       PUSH  A
    27D3: 50 00    MOV   A,0x0
    27D5: 08       PUSH  A
    27D6: 08       PUSH  A
    27D7: 51 90    MOV   A,[__r0]
    27D9: 08       PUSH  A
    27DA: 51 8F    MOV   A,[__r1]
    27DC: 08       PUSH  A
    27DD: 51 8E    MOV   A,[__r2]
    27DF: 08       PUSH  A
    27E0: 51 8D    MOV   A,[__r3]
    27E2: 08       PUSH  A
    27E3: 7C 37 53 LCALL 0x3753
    27E6: 18       POP   A
    27E7: 54 03    MOV   [X+3],A
    27E9: 18       POP   A
    27EA: 54 02    MOV   [X+2],A
    27EC: 18       POP   A
    27ED: 54 01    MOV   [X+1],A
    27EF: 18       POP   A
    27F0: 54 00    MOV   [X+0],A
    27F2: 38 FC    ADD   SP,0xFC
(0028) 	latemp = temp;
    27F4: 52 00    MOV   A,[X+0]
    27F6: 08       PUSH  A
    27F7: 52 01    MOV   A,[X+1]
    27F9: 08       PUSH  A
    27FA: 52 02    MOV   A,[X+2]
    27FC: 08       PUSH  A
    27FD: 52 03    MOV   A,[X+3]
    27FF: 08       PUSH  A
    2800: 7C 33 35 LCALL 0x3335
    2803: 18       POP   A
    2804: 54 05    MOV   [X+5],A
    2806: 18       POP   A
    2807: 54 04    MOV   [X+4],A
    2809: 38 FE    ADD   SP,0xFE
(0029) 	cprintf("Conversion: %d\n",latemp);
    280B: 52 04    MOV   A,[X+4]
    280D: 08       PUSH  A
    280E: 52 05    MOV   A,[X+5]
    2810: 08       PUSH  A
    2811: 50 02    MOV   A,0x2
    2813: 08       PUSH  A
    2814: 50 70    MOV   A,0x70
    2816: 08       PUSH  A
    2817: 7C 3C 82 LCALL _cprintf
    281A: 38 FC    ADD   SP,0xFC
(0030) 	
(0031) 	return latemp;
    281C: 62 D0 00 MOV   REG[0xD0],0x0
    281F: 52 05    MOV   A,[X+5]
    2821: 53 8F    MOV   [__r1],A
    2823: 52 04    MOV   A,[X+4]
    2825: 53 90    MOV   [__r0],A
    2827: 38 FA    ADD   SP,0xFA
    2829: 20       POP   X
    282A: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\tempview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "TempView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "TempSensor.h"
(0010) #include "BcdUtil.h"
(0011) #include <stdio.h>
(0012) 
(0013) extern CurrentView currentView;
(0014) 
(0015) void TempView_Start(void)
(0016) {
_TempView_Start:
    282B: 7F       RET   
(0017) 
(0018) }
(0019) 
(0020) void TempView_Callback(void)
(0021) {
_TempView_Callback:
  num                  --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  temp                 --> X+0
    282C: 10       PUSH  X
    282D: 4F       MOV   X,SP
    282E: 38 05    ADD   SP,0x5
(0022) 	int temp;
(0023) 	BYTE bcd10,bcd,num;
(0024) 	
(0025) 	currentView = TEMP;
    2830: 62 D0 00 MOV   REG[0xD0],0x0
    2833: 55 A6 05 MOV   [currentView],0x5
(0026) 	Menu_Clear();
    2836: 7C 20 68 LCALL _Menu_Clear
(0027) 	LCD_Position(0, 0);
    2839: 10       PUSH  X
    283A: 50 00    MOV   A,0x0
    283C: 57 00    MOV   X,0x0
    283E: 7C 09 71 LCALL _LCD_Position
(0028) 	LCD_PrCString("Temp Actual");
    2841: 50 02    MOV   A,0x2
    2843: 08       PUSH  A
    2844: 50 9A    MOV   A,0x9A
    2846: 5C       MOV   X,A
    2847: 18       POP   A
    2848: 7C 07 EC LCALL _LCD_PrCString
    284B: 20       POP   X
(0029) 		
(0030) 	temp = TempSensor_GetTemp();
    284C: 7C 26 64 LCALL _TempSensor_GetTemp
    284F: 62 D0 00 MOV   REG[0xD0],0x0
    2852: 51 8F    MOV   A,[__r1]
    2854: 54 01    MOV   [X+1],A
    2856: 51 90    MOV   A,[__r0]
    2858: 54 00    MOV   [X+0],A
(0031) 	
(0032) 	cprintf("Temperatura: %d\n", temp);
    285A: 52 00    MOV   A,[X+0]
    285C: 08       PUSH  A
    285D: 52 01    MOV   A,[X+1]
    285F: 08       PUSH  A
    2860: 50 02    MOV   A,0x2
    2862: 08       PUSH  A
    2863: 50 89    MOV   A,0x89
    2865: 08       PUSH  A
    2866: 7C 3C 82 LCALL _cprintf
(0033) 		
(0034) 	decToBcd(&bcd10,&bcd,temp);
    2869: 62 D0 00 MOV   REG[0xD0],0x0
    286C: 52 01    MOV   A,[X+1]
    286E: 08       PUSH  A
    286F: 5A 8F    MOV   [__r1],X
    2871: 06 8F 03 ADD   [__r1],0x3
    2874: 50 07    MOV   A,0x7
    2876: 08       PUSH  A
    2877: 51 8F    MOV   A,[__r1]
    2879: 08       PUSH  A
    287A: 5A 8F    MOV   [__r1],X
    287C: 06 8F 02 ADD   [__r1],0x2
    287F: 50 07    MOV   A,0x7
    2881: 08       PUSH  A
    2882: 51 8F    MOV   A,[__r1]
    2884: 08       PUSH  A
    2885: 7C 0E D1 LCALL _decToBcd
    2888: 38 F7    ADD   SP,0xF7
(0035) 	
(0036) 	//LCD_Position(0,14);
(0037) 	//LCD_PrHexByte(bcd);
(0038) 	LCD_Position(0,13);
    288A: 10       PUSH  X
    288B: 57 0D    MOV   X,0xD
    288D: 50 00    MOV   A,0x0
    288F: 7C 09 71 LCALL _LCD_Position
    2892: 20       POP   X
(0039) 	LCD_PrHexByte((bcd10<<4)|bcd);
    2893: 52 02    MOV   A,[X+2]
    2895: 62 D0 00 MOV   REG[0xD0],0x0
    2898: 64       ASL   A
    2899: 64       ASL   A
    289A: 64       ASL   A
    289B: 64       ASL   A
    289C: 53 90    MOV   [__r0],A
    289E: 52 03    MOV   A,[X+3]
    28A0: 2C 90    OR    [__r0],A
    28A2: 10       PUSH  X
    28A3: 51 90    MOV   A,[__r0]
    28A5: 7C 08 0E LCALL _LCD_PrHexByte
    28A8: 20       POP   X
    28A9: 38 FB    ADD   SP,0xFB
    28AB: 20       POP   X
    28AC: 7F       RET   
(0040) 	//LCD_Position(0,13);
(0041) 	//LCD_PrCString(" ");
(0042) 	
(0043) 	
(0044) 
(0045) 	
(0046) }
(0047) 
(0048) void TempView_Update(void)
(0049) {
_TempView_Update:
  num                  --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  temp                 --> X+0
    28AD: 10       PUSH  X
    28AE: 4F       MOV   X,SP
    28AF: 38 07    ADD   SP,0x7
(0050) 	int temp;
(0051) 	BYTE bcd10,bcd,num;
(0052) 	
(0053) 	if(Keypad_IsKeyStored())
    28B1: 7C 16 B7 LCALL _Keypad_IsKeyStored
    28B4: 62 D0 00 MOV   REG[0xD0],0x0
    28B7: 39 00    CMP   A,0x0
    28B9: A0 1D    JZ    0x28D7
(0054) 	{
(0055) 		switch(Keypad_GetKey())
    28BB: 7C 16 CF LCALL _Keypad_GetKey
    28BE: 62 D0 00 MOV   REG[0xD0],0x0
    28C1: 54 06    MOV   [X+6],A
    28C3: 56 05 00 MOV   [X+5],0x0
    28C6: 3D 05 00 CMP   [X+5],0x0
    28C9: B0 06    JNZ   0x28D0
    28CB: 3D 06 11 CMP   [X+6],0x11
    28CE: A0 03    JZ    0x28D2
    28D0: 80 06    JMP   0x28D7
(0056) 		{
(0057) 			case 0x11:
(0058) 				// "B"
(0059) 				MainView_Callback();
    28D2: 7C 1D 7E LCALL _MainView_Callback
(0060) 				return;
    28D5: 80 4C    JMP   0x2922
(0061) 				break;
(0062) 		}
(0063) 	}
(0064) 	
(0065) 	temp = TempSensor_GetTemp();
    28D7: 7C 26 64 LCALL _TempSensor_GetTemp
    28DA: 62 D0 00 MOV   REG[0xD0],0x0
    28DD: 51 8F    MOV   A,[__r1]
    28DF: 54 01    MOV   [X+1],A
    28E1: 51 90    MOV   A,[__r0]
    28E3: 54 00    MOV   [X+0],A
(0066) 	decToBcd(&bcd10,&bcd,temp);
    28E5: 52 01    MOV   A,[X+1]
    28E7: 08       PUSH  A
    28E8: 5A 8F    MOV   [__r1],X
    28EA: 06 8F 03 ADD   [__r1],0x3
    28ED: 50 07    MOV   A,0x7
    28EF: 08       PUSH  A
    28F0: 51 8F    MOV   A,[__r1]
    28F2: 08       PUSH  A
    28F3: 5A 8F    MOV   [__r1],X
    28F5: 06 8F 02 ADD   [__r1],0x2
    28F8: 50 07    MOV   A,0x7
    28FA: 08       PUSH  A
    28FB: 51 8F    MOV   A,[__r1]
    28FD: 08       PUSH  A
    28FE: 7C 0E D1 LCALL _decToBcd
    2901: 38 FB    ADD   SP,0xFB
(0067) 	LCD_Position(0,13);
    2903: 10       PUSH  X
    2904: 57 0D    MOV   X,0xD
    2906: 50 00    MOV   A,0x0
    2908: 7C 09 71 LCALL _LCD_Position
    290B: 20       POP   X
(0068) 	LCD_PrHexByte((bcd10<<4)|bcd);
    290C: 52 02    MOV   A,[X+2]
    290E: 62 D0 00 MOV   REG[0xD0],0x0
    2911: 64       ASL   A
    2912: 64       ASL   A
    2913: 64       ASL   A
    2914: 64       ASL   A
    2915: 53 90    MOV   [__r0],A
    2917: 52 03    MOV   A,[X+3]
    2919: 2C 90    OR    [__r0],A
    291B: 10       PUSH  X
    291C: 51 90    MOV   A,[__r0]
    291E: 7C 08 0E LCALL _LCD_PrHexByte
    2921: 20       POP   X
    2922: 38 F9    ADD   SP,0xF9
    2924: 20       POP   X
    2925: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\time.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Rtc.h"
(0004) #include "Time.h"
(0005) #include "BcdUtil.h"
(0006) #include "dateUtil.h"
(0007) 
(0008) void Time_Start(void)
(0009) {
(0010) 	datetime._00h.byte = 0x00;	// Hora: 00:00:00
_Time_Start:
    2926: 62 D0 00 MOV   REG[0xD0],0x0
    2929: 55 91 00 MOV   [datetime],0x0
(0011) 	datetime._01h.byte = 0x00;	 
    292C: 55 92 00 MOV   [datetime+1],0x0
(0012) 	datetime._02h.byte = 0x00;
    292F: 55 93 00 MOV   [datetime+2],0x0
(0013) 	datetime._03h.byte = 0x04;	// Dia: Miércoles
    2932: 55 94 04 MOV   [datetime+3],0x4
(0014) 	datetime._04h.byte = 0x01;	// Fecha: 01/Enero/2014
    2935: 55 95 01 MOV   [datetime+4],0x1
(0015) 	datetime._05h.byte = 0x01;
    2938: 55 96 01 MOV   [datetime+5],0x1
(0016) 	datetime._06h.byte = 0x14;
    293B: 55 97 14 MOV   [datetime+6],0x14
(0017) 	Rtc_Start();
    293E: 7C 24 8D LCALL _Rtc_Start
    2941: 7F       RET   
(0018) }
(0019) 
(0020) void Time_Stop(void)
(0021) {
(0022) 	Rtc_Stop();
_Time_Stop:
    2942: 7C 24 A1 LCALL _Rtc_Stop
    2945: 7F       RET   
(0023) }
(0024) 
(0025) void Time_Pause(BOOL isPaused)
(0026) {
_Time_Pause:
  isPaused             --> X-4
    2946: 10       PUSH  X
    2947: 4F       MOV   X,SP
(0027) 	// Starts or Stops RTC clock
(0028) 	Rtc_ReadFromRtc();
    2948: 7C 24 E8 LCALL _Rtc_ReadFromRtc
    294B: 62 D0 00 MOV   REG[0xD0],0x0
(0029) 	datetime._00h.bits.CH = isPaused;
    294E: 52 FC    MOV   A,[X-4]
    2950: 21 01    AND   A,0x1
    2952: 64       ASL   A
    2953: 64       ASL   A
    2954: 64       ASL   A
    2955: 64       ASL   A
    2956: 64       ASL   A
    2957: 64       ASL   A
    2958: 64       ASL   A
    2959: 53 90    MOV   [__r0],A
    295B: 26 90 80 AND   [__r0],0x80
    295E: 62 D0 00 MOV   REG[0xD0],0x0
    2961: 51 91    MOV   A,[datetime]
    2963: 21 7F    AND   A,0x7F
    2965: 62 D0 00 MOV   REG[0xD0],0x0
    2968: 2A 90    OR    A,[__r0]
    296A: 62 D0 00 MOV   REG[0xD0],0x0
    296D: 53 91    MOV   [datetime],A
(0030) 	Rtc_WriteToRtc();
    296F: 7C 24 D4 LCALL _Rtc_WriteToRtc
    2972: 62 D0 00 MOV   REG[0xD0],0x0
    2975: 20       POP   X
    2976: 7F       RET   
(0031) }
(0032) 
(0033) void Time_Adj_1224hrs(BOOL h12)
(0034) {
_Time_Adj_1224hrs:
  bcd                  --> X+2
  bcd10                --> X+1
  hours                --> X+0
  h12                  --> X-4
    2977: 10       PUSH  X
    2978: 4F       MOV   X,SP
    2979: 38 03    ADD   SP,0x3
(0035) 	BYTE hours, bcd10, bcd;
(0036) 
(0037) 	Time_Pause(TRUE);
    297B: 50 01    MOV   A,0x1
    297D: 08       PUSH  A
    297E: 9F C6    CALL  _Time_Pause
    2980: 38 FF    ADD   SP,0xFF
(0038) 	Rtc_ReadFromRtc();
    2982: 7C 24 E8 LCALL _Rtc_ReadFromRtc
(0039) 
(0040) 	if(datetime._02h.bits_24hrs._1224hr != h12)
    2985: 62 D0 00 MOV   REG[0xD0],0x0
    2988: 51 93    MOV   A,[datetime+2]
    298A: 62 D0 00 MOV   REG[0xD0],0x0
    298D: 67       ASR   A
    298E: 67       ASR   A
    298F: 67       ASR   A
    2990: 67       ASR   A
    2991: 67       ASR   A
    2992: 67       ASR   A
    2993: 21 03    AND   A,0x3
    2995: 53 90    MOV   [__r0],A
    2997: 26 90 01 AND   [__r0],0x1
    299A: 51 90    MOV   A,[__r0]
    299C: 3B FC    CMP   A,[X-4]
    299E: A1 7F    JZ    0x2B1E
(0041) 	{
(0042) 		if(h12)
    29A0: 3D FC 00 CMP   [X-4],0x0
    29A3: A0 B6    JZ    0x2A5A
(0043) 		{
(0044) 			// Convert from 24h to 12h
(0045) 			bcdToDec(datetime._02h.bits_24hrs.hours10, datetime._02h.bits_24hrs.hours, &hours);
    29A5: 50 07    MOV   A,0x7
    29A7: 08       PUSH  A
    29A8: 10       PUSH  X
    29A9: 62 D0 00 MOV   REG[0xD0],0x0
    29AC: 51 93    MOV   A,[datetime+2]
    29AE: 21 0F    AND   A,0xF
    29B0: 08       PUSH  A
    29B1: 51 93    MOV   A,[datetime+2]
    29B3: 62 D0 00 MOV   REG[0xD0],0x0
    29B6: 67       ASR   A
    29B7: 67       ASR   A
    29B8: 67       ASR   A
    29B9: 67       ASR   A
    29BA: 21 0F    AND   A,0xF
    29BC: 53 90    MOV   [__r0],A
    29BE: 26 90 03 AND   [__r0],0x3
    29C1: 51 90    MOV   A,[__r0]
    29C3: 08       PUSH  A
    29C4: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    29C7: 38 FC    ADD   SP,0xFC
(0046) 			if(hours >= 12)
    29C9: 3D 00 0C CMP   [X+0],0xC
    29CC: C0 1B    JC    0x29E8
(0047) 			{
(0048) 				datetime._02h.bits_ampm.ampm = 1;
    29CE: 62 D0 00 MOV   REG[0xD0],0x0
    29D1: 51 93    MOV   A,[datetime+2]
    29D3: 29 20    OR    A,0x20
    29D5: 53 93    MOV   [datetime+2],A
(0049) 				if(hours > 12) hours -= 12;
    29D7: 50 0C    MOV   A,0xC
    29D9: 3B 00    CMP   A,[X+0]
    29DB: D0 1D    JNC   0x29F9
    29DD: 62 D0 00 MOV   REG[0xD0],0x0
    29E0: 52 00    MOV   A,[X+0]
    29E2: 11 0C    SUB   A,0xC
    29E4: 54 00    MOV   [X+0],A
(0050) 			}
    29E6: 80 12    JMP   0x29F9
(0051) 			else
(0052) 			{
(0053) 				datetime._02h.bits_ampm.ampm = 0;
    29E8: 62 D0 00 MOV   REG[0xD0],0x0
    29EB: 51 93    MOV   A,[datetime+2]
    29ED: 21 DF    AND   A,0xDF
    29EF: 53 93    MOV   [datetime+2],A
(0054) 				if(hours == 0) hours = 12;
    29F1: 3D 00 00 CMP   [X+0],0x0
    29F4: B0 04    JNZ   0x29F9
    29F6: 56 00 0C MOV   [X+0],0xC
(0055) 			}
(0056) 			decToBcd(&bcd10 , &bcd, hours);
    29F9: 52 00    MOV   A,[X+0]
    29FB: 08       PUSH  A
    29FC: 62 D0 00 MOV   REG[0xD0],0x0
    29FF: 5A 8F    MOV   [__r1],X
    2A01: 06 8F 02 ADD   [__r1],0x2
    2A04: 50 07    MOV   A,0x7
    2A06: 08       PUSH  A
    2A07: 51 8F    MOV   A,[__r1]
    2A09: 08       PUSH  A
    2A0A: 5A 8F    MOV   [__r1],X
    2A0C: 06 8F 01 ADD   [__r1],0x1
    2A0F: 50 07    MOV   A,0x7
    2A11: 08       PUSH  A
    2A12: 51 8F    MOV   A,[__r1]
    2A14: 08       PUSH  A
    2A15: 7C 0E D1 LCALL _decToBcd
    2A18: 38 FB    ADD   SP,0xFB
(0057) 			datetime._02h.bits_ampm.hours10 = bcd10;
    2A1A: 62 D0 00 MOV   REG[0xD0],0x0
    2A1D: 52 01    MOV   A,[X+1]
    2A1F: 21 01    AND   A,0x1
    2A21: 64       ASL   A
    2A22: 64       ASL   A
    2A23: 64       ASL   A
    2A24: 64       ASL   A
    2A25: 53 90    MOV   [__r0],A
    2A27: 26 90 10 AND   [__r0],0x10
    2A2A: 62 D0 00 MOV   REG[0xD0],0x0
    2A2D: 51 93    MOV   A,[datetime+2]
    2A2F: 21 EF    AND   A,0xEF
    2A31: 62 D0 00 MOV   REG[0xD0],0x0
    2A34: 2A 90    OR    A,[__r0]
    2A36: 62 D0 00 MOV   REG[0xD0],0x0
    2A39: 53 93    MOV   [datetime+2],A
(0058) 			datetime._02h.bits_ampm.hours = bcd;
    2A3B: 62 D0 00 MOV   REG[0xD0],0x0
    2A3E: 52 02    MOV   A,[X+2]
    2A40: 21 0F    AND   A,0xF
    2A42: 53 90    MOV   [__r0],A
    2A44: 26 90 0F AND   [__r0],0xF
    2A47: 62 D0 00 MOV   REG[0xD0],0x0
    2A4A: 51 93    MOV   A,[datetime+2]
    2A4C: 21 F0    AND   A,0xF0
    2A4E: 62 D0 00 MOV   REG[0xD0],0x0
    2A51: 2A 90    OR    A,[__r0]
    2A53: 62 D0 00 MOV   REG[0xD0],0x0
    2A56: 53 93    MOV   [datetime+2],A
(0059) 		}
    2A58: 80 C5    JMP   0x2B1E
(0060) 		else
(0061) 		{
(0062) 			// Convert from 12h to 24h
(0063) 			bcdToDec(datetime._02h.bits_ampm.hours10, datetime._02h.bits_ampm.hours, &hours);
    2A5A: 50 07    MOV   A,0x7
    2A5C: 08       PUSH  A
    2A5D: 10       PUSH  X
    2A5E: 62 D0 00 MOV   REG[0xD0],0x0
    2A61: 51 93    MOV   A,[datetime+2]
    2A63: 21 0F    AND   A,0xF
    2A65: 08       PUSH  A
    2A66: 51 93    MOV   A,[datetime+2]
    2A68: 62 D0 00 MOV   REG[0xD0],0x0
    2A6B: 67       ASR   A
    2A6C: 67       ASR   A
    2A6D: 67       ASR   A
    2A6E: 67       ASR   A
    2A6F: 21 0F    AND   A,0xF
    2A71: 53 90    MOV   [__r0],A
    2A73: 26 90 01 AND   [__r0],0x1
    2A76: 51 90    MOV   A,[__r0]
    2A78: 08       PUSH  A
    2A79: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2A7C: 38 FC    ADD   SP,0xFC
(0064) 			if(datetime._02h.bits_ampm.ampm == 1 && hours != 12)
    2A7E: 62 D0 00 MOV   REG[0xD0],0x0
    2A81: 51 93    MOV   A,[datetime+2]
    2A83: 62 D0 00 MOV   REG[0xD0],0x0
    2A86: 67       ASR   A
    2A87: 67       ASR   A
    2A88: 67       ASR   A
    2A89: 67       ASR   A
    2A8A: 67       ASR   A
    2A8B: 21 07    AND   A,0x7
    2A8D: 53 90    MOV   [__r0],A
    2A8F: 26 90 01 AND   [__r0],0x1
    2A92: 3C 90 01 CMP   [__r0],0x1
    2A95: B0 0B    JNZ   0x2AA1
    2A97: 3D 00 0C CMP   [X+0],0xC
    2A9A: A0 06    JZ    0x2AA1
(0065) 			{
(0066) 				hours += 12;
    2A9C: 07 00 0C ADD   [X+0],0xC
(0067) 			}
    2A9F: 80 1F    JMP   0x2ABF
(0068) 			else if(datetime._02h.bits_ampm.ampm == 0 && hours == 12)
    2AA1: 62 D0 00 MOV   REG[0xD0],0x0
    2AA4: 51 93    MOV   A,[datetime+2]
    2AA6: 62 D0 00 MOV   REG[0xD0],0x0
    2AA9: 67       ASR   A
    2AAA: 67       ASR   A
    2AAB: 67       ASR   A
    2AAC: 67       ASR   A
    2AAD: 67       ASR   A
    2AAE: 21 07    AND   A,0x7
    2AB0: 53 90    MOV   [__r0],A
    2AB2: 26 90 01 AND   [__r0],0x1
    2AB5: B0 09    JNZ   0x2ABF
    2AB7: 3D 00 0C CMP   [X+0],0xC
    2ABA: B0 04    JNZ   0x2ABF
(0069) 			{
(0070) 				hours = 0;
    2ABC: 56 00 00 MOV   [X+0],0x0
(0071) 			}
(0072) 			decToBcd(&bcd10 , &bcd, hours);
    2ABF: 52 00    MOV   A,[X+0]
    2AC1: 08       PUSH  A
    2AC2: 62 D0 00 MOV   REG[0xD0],0x0
    2AC5: 5A 8F    MOV   [__r1],X
    2AC7: 06 8F 02 ADD   [__r1],0x2
    2ACA: 50 07    MOV   A,0x7
    2ACC: 08       PUSH  A
    2ACD: 51 8F    MOV   A,[__r1]
    2ACF: 08       PUSH  A
    2AD0: 5A 8F    MOV   [__r1],X
    2AD2: 06 8F 01 ADD   [__r1],0x1
    2AD5: 50 07    MOV   A,0x7
    2AD7: 08       PUSH  A
    2AD8: 51 8F    MOV   A,[__r1]
    2ADA: 08       PUSH  A
    2ADB: 7C 0E D1 LCALL _decToBcd
    2ADE: 38 FB    ADD   SP,0xFB
(0073) 			datetime._02h.bits_24hrs.hours10 = bcd10;
    2AE0: 62 D0 00 MOV   REG[0xD0],0x0
    2AE3: 52 01    MOV   A,[X+1]
    2AE5: 21 03    AND   A,0x3
    2AE7: 64       ASL   A
    2AE8: 64       ASL   A
    2AE9: 64       ASL   A
    2AEA: 64       ASL   A
    2AEB: 53 90    MOV   [__r0],A
    2AED: 26 90 30 AND   [__r0],0x30
    2AF0: 62 D0 00 MOV   REG[0xD0],0x0
    2AF3: 51 93    MOV   A,[datetime+2]
    2AF5: 21 CF    AND   A,0xCF
    2AF7: 62 D0 00 MOV   REG[0xD0],0x0
    2AFA: 2A 90    OR    A,[__r0]
    2AFC: 62 D0 00 MOV   REG[0xD0],0x0
    2AFF: 53 93    MOV   [datetime+2],A
(0074) 			datetime._02h.bits_24hrs.hours = bcd;
    2B01: 62 D0 00 MOV   REG[0xD0],0x0
    2B04: 52 02    MOV   A,[X+2]
    2B06: 21 0F    AND   A,0xF
    2B08: 53 90    MOV   [__r0],A
    2B0A: 26 90 0F AND   [__r0],0xF
    2B0D: 62 D0 00 MOV   REG[0xD0],0x0
    2B10: 51 93    MOV   A,[datetime+2]
    2B12: 21 F0    AND   A,0xF0
    2B14: 62 D0 00 MOV   REG[0xD0],0x0
    2B17: 2A 90    OR    A,[__r0]
    2B19: 62 D0 00 MOV   REG[0xD0],0x0
    2B1C: 53 93    MOV   [datetime+2],A
(0075) 		}
(0076) 	}
(0077) 
(0078) 	datetime._02h.bits_24hrs._1224hr = h12;
    2B1E: 62 D0 00 MOV   REG[0xD0],0x0
    2B21: 52 FC    MOV   A,[X-4]
    2B23: 21 01    AND   A,0x1
    2B25: 64       ASL   A
    2B26: 64       ASL   A
    2B27: 64       ASL   A
    2B28: 64       ASL   A
    2B29: 64       ASL   A
    2B2A: 64       ASL   A
    2B2B: 53 90    MOV   [__r0],A
    2B2D: 26 90 40 AND   [__r0],0x40
    2B30: 62 D0 00 MOV   REG[0xD0],0x0
    2B33: 51 93    MOV   A,[datetime+2]
    2B35: 21 BF    AND   A,0xBF
    2B37: 62 D0 00 MOV   REG[0xD0],0x0
    2B3A: 2A 90    OR    A,[__r0]
    2B3C: 62 D0 00 MOV   REG[0xD0],0x0
    2B3F: 53 93    MOV   [datetime+2],A
(0079) 
(0080) 	Rtc_WriteToRtc();
    2B41: 7C 24 D4 LCALL _Rtc_WriteToRtc
    2B44: 62 D0 00 MOV   REG[0xD0],0x0
(0081) 	Time_Pause(FALSE);
    2B47: 50 00    MOV   A,0x0
    2B49: 08       PUSH  A
    2B4A: 9D FA    CALL  _Time_Pause
    2B4C: 38 FF    ADD   SP,0xFF
    2B4E: 38 FD    ADD   SP,0xFD
    2B50: 20       POP   X
    2B51: 7F       RET   
(0082) }
(0083) 
(0084) void Time_Adj_S(BOOL direction)
(0085) {
_Time_Adj_S:
  bcd                  --> X+2
  bcd10                --> X+1
  seconds              --> X+0
  direction            --> X-4
    2B52: 10       PUSH  X
    2B53: 4F       MOV   X,SP
    2B54: 38 03    ADD   SP,0x3
(0086) 	BYTE seconds, bcd10, bcd;
(0087) 	
(0088) 	Time_Pause(TRUE);
    2B56: 50 01    MOV   A,0x1
    2B58: 08       PUSH  A
    2B59: 9D EB    CALL  _Time_Pause
(0089) 	Rtc_ReadFromRtc();
    2B5B: 7C 24 E8 LCALL _Rtc_ReadFromRtc
(0090) 
(0091) 	bcdToDec(datetime._00h.bits.seconds10, datetime._00h.bits.seconds, &seconds);
    2B5E: 50 07    MOV   A,0x7
    2B60: 08       PUSH  A
    2B61: 10       PUSH  X
    2B62: 62 D0 00 MOV   REG[0xD0],0x0
    2B65: 51 91    MOV   A,[datetime]
    2B67: 21 0F    AND   A,0xF
    2B69: 08       PUSH  A
    2B6A: 51 91    MOV   A,[datetime]
    2B6C: 62 D0 00 MOV   REG[0xD0],0x0
    2B6F: 67       ASR   A
    2B70: 67       ASR   A
    2B71: 67       ASR   A
    2B72: 67       ASR   A
    2B73: 21 0F    AND   A,0xF
    2B75: 53 90    MOV   [__r0],A
    2B77: 26 90 07 AND   [__r0],0x7
    2B7A: 51 90    MOV   A,[__r0]
    2B7C: 08       PUSH  A
    2B7D: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2B80: 38 FB    ADD   SP,0xFB
(0092) 
(0093) 	if(direction == TIME_UP)
    2B82: 3D FC 01 CMP   [X-4],0x1
    2B85: B0 0F    JNZ   0x2B95
(0094) 	{
(0095) 		if(seconds < 59) seconds++;
    2B87: 3D 00 3B CMP   [X+0],0x3B
    2B8A: D0 05    JNC   0x2B90
    2B8C: 77 00    INC   [X+0]
    2B8E: 80 13    JMP   0x2BA2
(0096) 		else seconds = 0;
    2B90: 56 00 00 MOV   [X+0],0x0
(0097) 	}
    2B93: 80 0E    JMP   0x2BA2
(0098) 	else
(0099) 	{
(0100) 		if(seconds > 0) seconds--;
    2B95: 50 00    MOV   A,0x0
    2B97: 3B 00    CMP   A,[X+0]
    2B99: D0 05    JNC   0x2B9F
    2B9B: 7B 00    DEC   [X+0]
    2B9D: 80 04    JMP   0x2BA2
(0101) 		else seconds = 59;
    2B9F: 56 00 3B MOV   [X+0],0x3B
(0102) 	}
(0103) 
(0104) 	decToBcd(&bcd10, &bcd, seconds);
    2BA2: 52 00    MOV   A,[X+0]
    2BA4: 08       PUSH  A
    2BA5: 62 D0 00 MOV   REG[0xD0],0x0
    2BA8: 5A 8F    MOV   [__r1],X
    2BAA: 06 8F 02 ADD   [__r1],0x2
    2BAD: 50 07    MOV   A,0x7
    2BAF: 08       PUSH  A
    2BB0: 51 8F    MOV   A,[__r1]
    2BB2: 08       PUSH  A
    2BB3: 5A 8F    MOV   [__r1],X
    2BB5: 06 8F 01 ADD   [__r1],0x1
    2BB8: 50 07    MOV   A,0x7
    2BBA: 08       PUSH  A
    2BBB: 51 8F    MOV   A,[__r1]
    2BBD: 08       PUSH  A
    2BBE: 7C 0E D1 LCALL _decToBcd
(0105) 
(0106) 	datetime._00h.bits.seconds = bcd;
    2BC1: 62 D0 00 MOV   REG[0xD0],0x0
    2BC4: 52 02    MOV   A,[X+2]
    2BC6: 21 0F    AND   A,0xF
    2BC8: 53 90    MOV   [__r0],A
    2BCA: 26 90 0F AND   [__r0],0xF
    2BCD: 62 D0 00 MOV   REG[0xD0],0x0
    2BD0: 51 91    MOV   A,[datetime]
    2BD2: 21 F0    AND   A,0xF0
    2BD4: 62 D0 00 MOV   REG[0xD0],0x0
    2BD7: 2A 90    OR    A,[__r0]
    2BD9: 62 D0 00 MOV   REG[0xD0],0x0
    2BDC: 53 91    MOV   [datetime],A
(0107) 	datetime._00h.bits.seconds10 = bcd10;
    2BDE: 62 D0 00 MOV   REG[0xD0],0x0
    2BE1: 52 01    MOV   A,[X+1]
    2BE3: 21 07    AND   A,0x7
    2BE5: 64       ASL   A
    2BE6: 64       ASL   A
    2BE7: 64       ASL   A
    2BE8: 64       ASL   A
    2BE9: 53 90    MOV   [__r0],A
    2BEB: 26 90 70 AND   [__r0],0x70
    2BEE: 62 D0 00 MOV   REG[0xD0],0x0
    2BF1: 51 91    MOV   A,[datetime]
    2BF3: 21 8F    AND   A,0x8F
    2BF5: 62 D0 00 MOV   REG[0xD0],0x0
    2BF8: 2A 90    OR    A,[__r0]
    2BFA: 62 D0 00 MOV   REG[0xD0],0x0
    2BFD: 53 91    MOV   [datetime],A
(0108) 
(0109) 	Rtc_WriteToRtc();
    2BFF: 7C 24 D4 LCALL _Rtc_WriteToRtc
    2C02: 62 D0 00 MOV   REG[0xD0],0x0
(0110) 	Time_Pause(FALSE);
    2C05: 50 00    MOV   A,0x0
    2C07: 08       PUSH  A
    2C08: 9D 3C    CALL  _Time_Pause
    2C0A: 38 FA    ADD   SP,0xFA
    2C0C: 38 FD    ADD   SP,0xFD
    2C0E: 20       POP   X
    2C0F: 7F       RET   
(0111) }
(0112) 
(0113) void Time_Adj_Mi(BOOL direction)
(0114) {
_Time_Adj_Mi:
  bcd                  --> X+2
  bcd10                --> X+1
  minutes              --> X+0
  direction            --> X-4
    2C10: 10       PUSH  X
    2C11: 4F       MOV   X,SP
    2C12: 38 03    ADD   SP,0x3
(0115) 	BYTE minutes, bcd10, bcd;
(0116) 
(0117) 	Time_Pause(TRUE);
    2C14: 50 01    MOV   A,0x1
    2C16: 08       PUSH  A
    2C17: 9D 2D    CALL  _Time_Pause
(0118) 	Rtc_ReadFromRtc();
    2C19: 7C 24 E8 LCALL _Rtc_ReadFromRtc
(0119) 
(0120) 	bcdToDec(datetime._01h.bits.minutes10, datetime._01h.bits.minutes, &minutes);
    2C1C: 50 07    MOV   A,0x7
    2C1E: 08       PUSH  A
    2C1F: 10       PUSH  X
    2C20: 62 D0 00 MOV   REG[0xD0],0x0
    2C23: 51 92    MOV   A,[datetime+1]
    2C25: 21 0F    AND   A,0xF
    2C27: 08       PUSH  A
    2C28: 51 92    MOV   A,[datetime+1]
    2C2A: 62 D0 00 MOV   REG[0xD0],0x0
    2C2D: 67       ASR   A
    2C2E: 67       ASR   A
    2C2F: 67       ASR   A
    2C30: 67       ASR   A
    2C31: 21 0F    AND   A,0xF
    2C33: 53 90    MOV   [__r0],A
    2C35: 26 90 07 AND   [__r0],0x7
    2C38: 51 90    MOV   A,[__r0]
    2C3A: 08       PUSH  A
    2C3B: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2C3E: 38 FB    ADD   SP,0xFB
(0121) 
(0122) 	if(direction == TIME_UP)
    2C40: 3D FC 01 CMP   [X-4],0x1
    2C43: B0 0F    JNZ   0x2C53
(0123) 	{
(0124) 		if(minutes < 59) minutes++;
    2C45: 3D 00 3B CMP   [X+0],0x3B
    2C48: D0 05    JNC   0x2C4E
    2C4A: 77 00    INC   [X+0]
    2C4C: 80 13    JMP   0x2C60
(0125) 		else minutes = 0;
    2C4E: 56 00 00 MOV   [X+0],0x0
(0126) 	}
    2C51: 80 0E    JMP   0x2C60
(0127) 	else
(0128) 	{
(0129) 		if(minutes > 0) minutes--;
    2C53: 50 00    MOV   A,0x0
    2C55: 3B 00    CMP   A,[X+0]
    2C57: D0 05    JNC   0x2C5D
    2C59: 7B 00    DEC   [X+0]
    2C5B: 80 04    JMP   0x2C60
(0130) 		else minutes = 59;
    2C5D: 56 00 3B MOV   [X+0],0x3B
(0131) 	}
(0132) 
(0133) 	decToBcd(&bcd10, &bcd, minutes);
    2C60: 52 00    MOV   A,[X+0]
    2C62: 08       PUSH  A
    2C63: 62 D0 00 MOV   REG[0xD0],0x0
    2C66: 5A 8F    MOV   [__r1],X
    2C68: 06 8F 02 ADD   [__r1],0x2
    2C6B: 50 07    MOV   A,0x7
    2C6D: 08       PUSH  A
    2C6E: 51 8F    MOV   A,[__r1]
    2C70: 08       PUSH  A
    2C71: 5A 8F    MOV   [__r1],X
    2C73: 06 8F 01 ADD   [__r1],0x1
    2C76: 50 07    MOV   A,0x7
    2C78: 08       PUSH  A
    2C79: 51 8F    MOV   A,[__r1]
    2C7B: 08       PUSH  A
    2C7C: 7C 0E D1 LCALL _decToBcd
(0134) 
(0135) 	datetime._01h.bits.minutes = bcd;
    2C7F: 62 D0 00 MOV   REG[0xD0],0x0
    2C82: 52 02    MOV   A,[X+2]
    2C84: 21 0F    AND   A,0xF
    2C86: 53 90    MOV   [__r0],A
    2C88: 26 90 0F AND   [__r0],0xF
    2C8B: 62 D0 00 MOV   REG[0xD0],0x0
    2C8E: 51 92    MOV   A,[datetime+1]
    2C90: 21 F0    AND   A,0xF0
    2C92: 62 D0 00 MOV   REG[0xD0],0x0
    2C95: 2A 90    OR    A,[__r0]
    2C97: 62 D0 00 MOV   REG[0xD0],0x0
    2C9A: 53 92    MOV   [datetime+1],A
(0136) 	datetime._01h.bits.minutes10 = bcd10;
    2C9C: 62 D0 00 MOV   REG[0xD0],0x0
    2C9F: 52 01    MOV   A,[X+1]
    2CA1: 21 07    AND   A,0x7
    2CA3: 64       ASL   A
    2CA4: 64       ASL   A
    2CA5: 64       ASL   A
    2CA6: 64       ASL   A
    2CA7: 53 90    MOV   [__r0],A
    2CA9: 26 90 70 AND   [__r0],0x70
    2CAC: 62 D0 00 MOV   REG[0xD0],0x0
    2CAF: 51 92    MOV   A,[datetime+1]
    2CB1: 21 8F    AND   A,0x8F
    2CB3: 62 D0 00 MOV   REG[0xD0],0x0
    2CB6: 2A 90    OR    A,[__r0]
    2CB8: 62 D0 00 MOV   REG[0xD0],0x0
    2CBB: 53 92    MOV   [datetime+1],A
(0137) 
(0138) 	Rtc_WriteToRtc();
    2CBD: 7C 24 D4 LCALL _Rtc_WriteToRtc
    2CC0: 62 D0 00 MOV   REG[0xD0],0x0
(0139) 	Time_Pause(FALSE);
    2CC3: 50 00    MOV   A,0x0
    2CC5: 08       PUSH  A
    2CC6: 9C 7E    CALL  _Time_Pause
    2CC8: 38 FA    ADD   SP,0xFA
    2CCA: 38 FD    ADD   SP,0xFD
    2CCC: 20       POP   X
    2CCD: 7F       RET   
(0140) }
(0141) 
(0142) void Time_Adj_H(BOOL direction)
(0143) {
_Time_Adj_H:
  maxVal               --> X+5
  minVal               --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  h12                  --> X+1
  hours                --> X+0
  direction            --> X-4
    2CCE: 10       PUSH  X
    2CCF: 4F       MOV   X,SP
    2CD0: 38 08    ADD   SP,0x8
(0144) 	BYTE hours, bcd10, bcd, minVal, maxVal;
(0145) 	BOOL h12;
(0146) 
(0147) 	Time_Pause(TRUE);
    2CD2: 50 01    MOV   A,0x1
    2CD4: 08       PUSH  A
    2CD5: 9C 6F    CALL  _Time_Pause
    2CD7: 38 FF    ADD   SP,0xFF
(0148) 	Rtc_ReadFromRtc();
    2CD9: 7C 24 E8 LCALL _Rtc_ReadFromRtc
(0149) 
(0150) 	h12 = datetime._02h.bits_24hrs._1224hr;
    2CDC: 62 D0 00 MOV   REG[0xD0],0x0
    2CDF: 51 93    MOV   A,[datetime+2]
    2CE1: 62 D0 00 MOV   REG[0xD0],0x0
    2CE4: 67       ASR   A
    2CE5: 67       ASR   A
    2CE6: 67       ASR   A
    2CE7: 67       ASR   A
    2CE8: 67       ASR   A
    2CE9: 67       ASR   A
    2CEA: 21 03    AND   A,0x3
    2CEC: 53 90    MOV   [__r0],A
    2CEE: 26 90 01 AND   [__r0],0x1
    2CF1: 51 90    MOV   A,[__r0]
    2CF3: 54 01    MOV   [X+1],A
(0151) 
(0152) 	// Check if ampm or 24h
(0153) 	if(h12)
    2CF5: 3D 01 00 CMP   [X+1],0x0
    2CF8: A0 2D    JZ    0x2D26
(0154) 	{
(0155) 		//12 hrs
(0156) 		bcdToDec(datetime._02h.bits_ampm.hours10, datetime._02h.bits_ampm.hours, &hours);
    2CFA: 50 07    MOV   A,0x7
    2CFC: 08       PUSH  A
    2CFD: 10       PUSH  X
    2CFE: 62 D0 00 MOV   REG[0xD0],0x0
    2D01: 51 93    MOV   A,[datetime+2]
    2D03: 21 0F    AND   A,0xF
    2D05: 08       PUSH  A
    2D06: 51 93    MOV   A,[datetime+2]
    2D08: 62 D0 00 MOV   REG[0xD0],0x0
    2D0B: 67       ASR   A
    2D0C: 67       ASR   A
    2D0D: 67       ASR   A
    2D0E: 67       ASR   A
    2D0F: 21 0F    AND   A,0xF
    2D11: 53 90    MOV   [__r0],A
    2D13: 26 90 01 AND   [__r0],0x1
    2D16: 51 90    MOV   A,[__r0]
    2D18: 08       PUSH  A
    2D19: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2D1C: 38 FC    ADD   SP,0xFC
(0157) 		maxVal = 12;
    2D1E: 56 05 0C MOV   [X+5],0xC
(0158) 		minVal = 1;
    2D21: 56 04 01 MOV   [X+4],0x1
(0159) 	}
    2D24: 80 2B    JMP   0x2D50
(0160) 	else
(0161) 	{
(0162) 		//24 hrs
(0163) 		bcdToDec(datetime._02h.bits_24hrs.hours10, datetime._02h.bits_24hrs.hours, &hours);
    2D26: 50 07    MOV   A,0x7
    2D28: 08       PUSH  A
    2D29: 10       PUSH  X
    2D2A: 62 D0 00 MOV   REG[0xD0],0x0
    2D2D: 51 93    MOV   A,[datetime+2]
    2D2F: 21 0F    AND   A,0xF
    2D31: 08       PUSH  A
    2D32: 51 93    MOV   A,[datetime+2]
    2D34: 62 D0 00 MOV   REG[0xD0],0x0
    2D37: 67       ASR   A
    2D38: 67       ASR   A
    2D39: 67       ASR   A
    2D3A: 67       ASR   A
    2D3B: 21 0F    AND   A,0xF
    2D3D: 53 90    MOV   [__r0],A
    2D3F: 26 90 03 AND   [__r0],0x3
    2D42: 51 90    MOV   A,[__r0]
    2D44: 08       PUSH  A
    2D45: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2D48: 38 FC    ADD   SP,0xFC
(0164) 		maxVal = 23;
    2D4A: 56 05 17 MOV   [X+5],0x17
(0165) 		minVal = 0;
    2D4D: 56 04 00 MOV   [X+4],0x0
(0166) 	}
(0167) 
(0168) 
(0169) 	if(direction == TIME_UP)
    2D50: 3D FC 01 CMP   [X-4],0x1
    2D53: B0 61    JNZ   0x2DB5
(0170) 	{
(0171) 		if(hours < maxVal) hours++;
    2D55: 52 00    MOV   A,[X+0]
    2D57: 3B 05    CMP   A,[X+5]
    2D59: D0 05    JNC   0x2D5F
    2D5B: 77 00    INC   [X+0]
    2D5D: 80 B5    JMP   0x2E13
(0172) 		else 
(0173) 		{
(0174) 			hours = minVal;
    2D5F: 52 04    MOV   A,[X+4]
    2D61: 54 00    MOV   [X+0],A
(0175) 			if(h12) datetime._02h.bits_ampm.ampm = !datetime._02h.bits_ampm.ampm;
    2D63: 3D 01 00 CMP   [X+1],0x0
    2D66: A0 AC    JZ    0x2E13
    2D68: 62 D0 00 MOV   REG[0xD0],0x0
    2D6B: 51 93    MOV   A,[datetime+2]
    2D6D: 62 D0 00 MOV   REG[0xD0],0x0
    2D70: 67       ASR   A
    2D71: 67       ASR   A
    2D72: 67       ASR   A
    2D73: 67       ASR   A
    2D74: 67       ASR   A
    2D75: 21 07    AND   A,0x7
    2D77: 53 90    MOV   [__r0],A
    2D79: 26 90 01 AND   [__r0],0x1
    2D7C: B0 09    JNZ   0x2D86
    2D7E: 56 07 01 MOV   [X+7],0x1
    2D81: 56 06 00 MOV   [X+6],0x0
    2D84: 80 07    JMP   0x2D8C
    2D86: 56 07 00 MOV   [X+7],0x0
    2D89: 56 06 00 MOV   [X+6],0x0
    2D8C: 62 D0 00 MOV   REG[0xD0],0x0
    2D8F: 52 07    MOV   A,[X+7]
    2D91: 53 90    MOV   [__r0],A
    2D93: 26 90 01 AND   [__r0],0x1
    2D96: 51 90    MOV   A,[__r0]
    2D98: 64       ASL   A
    2D99: 64       ASL   A
    2D9A: 64       ASL   A
    2D9B: 64       ASL   A
    2D9C: 64       ASL   A
    2D9D: 53 90    MOV   [__r0],A
    2D9F: 26 90 20 AND   [__r0],0x20
    2DA2: 62 D0 00 MOV   REG[0xD0],0x0
    2DA5: 51 93    MOV   A,[datetime+2]
    2DA7: 21 DF    AND   A,0xDF
    2DA9: 62 D0 00 MOV   REG[0xD0],0x0
    2DAC: 2A 90    OR    A,[__r0]
    2DAE: 62 D0 00 MOV   REG[0xD0],0x0
    2DB1: 53 93    MOV   [datetime+2],A
(0176) 		}
(0177) 	}
    2DB3: 80 5F    JMP   0x2E13
(0178) 	else
(0179) 	{
(0180) 		if(hours > minVal) hours--;
    2DB5: 52 04    MOV   A,[X+4]
    2DB7: 3B 00    CMP   A,[X+0]
    2DB9: D0 05    JNC   0x2DBF
    2DBB: 7B 00    DEC   [X+0]
    2DBD: 80 55    JMP   0x2E13
(0181) 		else 
(0182) 		{
(0183) 			hours = maxVal;
    2DBF: 52 05    MOV   A,[X+5]
    2DC1: 54 00    MOV   [X+0],A
(0184) 			if(h12) datetime._02h.bits_ampm.ampm = !datetime._02h.bits_ampm.ampm;
    2DC3: 3D 01 00 CMP   [X+1],0x0
    2DC6: A0 4C    JZ    0x2E13
    2DC8: 62 D0 00 MOV   REG[0xD0],0x0
    2DCB: 51 93    MOV   A,[datetime+2]
    2DCD: 62 D0 00 MOV   REG[0xD0],0x0
    2DD0: 67       ASR   A
    2DD1: 67       ASR   A
    2DD2: 67       ASR   A
    2DD3: 67       ASR   A
    2DD4: 67       ASR   A
    2DD5: 21 07    AND   A,0x7
    2DD7: 53 90    MOV   [__r0],A
    2DD9: 26 90 01 AND   [__r0],0x1
    2DDC: B0 09    JNZ   0x2DE6
    2DDE: 56 07 01 MOV   [X+7],0x1
    2DE1: 56 06 00 MOV   [X+6],0x0
    2DE4: 80 07    JMP   0x2DEC
    2DE6: 56 07 00 MOV   [X+7],0x0
    2DE9: 56 06 00 MOV   [X+6],0x0
    2DEC: 62 D0 00 MOV   REG[0xD0],0x0
    2DEF: 52 07    MOV   A,[X+7]
    2DF1: 53 90    MOV   [__r0],A
    2DF3: 26 90 01 AND   [__r0],0x1
    2DF6: 51 90    MOV   A,[__r0]
    2DF8: 64       ASL   A
    2DF9: 64       ASL   A
    2DFA: 64       ASL   A
    2DFB: 64       ASL   A
    2DFC: 64       ASL   A
    2DFD: 53 90    MOV   [__r0],A
    2DFF: 26 90 20 AND   [__r0],0x20
    2E02: 62 D0 00 MOV   REG[0xD0],0x0
    2E05: 51 93    MOV   A,[datetime+2]
    2E07: 21 DF    AND   A,0xDF
    2E09: 62 D0 00 MOV   REG[0xD0],0x0
    2E0C: 2A 90    OR    A,[__r0]
    2E0E: 62 D0 00 MOV   REG[0xD0],0x0
    2E11: 53 93    MOV   [datetime+2],A
(0185) 		}
(0186) 	}
(0187) 
(0188) 	decToBcd(&bcd10, &bcd, hours);
    2E13: 52 00    MOV   A,[X+0]
    2E15: 08       PUSH  A
    2E16: 62 D0 00 MOV   REG[0xD0],0x0
    2E19: 5A 8F    MOV   [__r1],X
    2E1B: 06 8F 03 ADD   [__r1],0x3
    2E1E: 50 07    MOV   A,0x7
    2E20: 08       PUSH  A
    2E21: 51 8F    MOV   A,[__r1]
    2E23: 08       PUSH  A
    2E24: 5A 8F    MOV   [__r1],X
    2E26: 06 8F 02 ADD   [__r1],0x2
    2E29: 50 07    MOV   A,0x7
    2E2B: 08       PUSH  A
    2E2C: 51 8F    MOV   A,[__r1]
    2E2E: 08       PUSH  A
    2E2F: 7C 0E D1 LCALL _decToBcd
    2E32: 38 FB    ADD   SP,0xFB
(0189) 
(0190) 	if(h12)
    2E34: 3D 01 00 CMP   [X+1],0x0
    2E37: A0 41    JZ    0x2E79
(0191) 	{
(0192) 		datetime._02h.bits_ampm.hours = bcd;
    2E39: 62 D0 00 MOV   REG[0xD0],0x0
    2E3C: 52 03    MOV   A,[X+3]
    2E3E: 21 0F    AND   A,0xF
    2E40: 53 90    MOV   [__r0],A
    2E42: 26 90 0F AND   [__r0],0xF
    2E45: 62 D0 00 MOV   REG[0xD0],0x0
    2E48: 51 93    MOV   A,[datetime+2]
    2E4A: 21 F0    AND   A,0xF0
    2E4C: 62 D0 00 MOV   REG[0xD0],0x0
    2E4F: 2A 90    OR    A,[__r0]
    2E51: 62 D0 00 MOV   REG[0xD0],0x0
    2E54: 53 93    MOV   [datetime+2],A
(0193) 		datetime._02h.bits_ampm.hours10 = bcd10;
    2E56: 62 D0 00 MOV   REG[0xD0],0x0
    2E59: 52 02    MOV   A,[X+2]
    2E5B: 21 01    AND   A,0x1
    2E5D: 64       ASL   A
    2E5E: 64       ASL   A
    2E5F: 64       ASL   A
    2E60: 64       ASL   A
    2E61: 53 90    MOV   [__r0],A
    2E63: 26 90 10 AND   [__r0],0x10
    2E66: 62 D0 00 MOV   REG[0xD0],0x0
    2E69: 51 93    MOV   A,[datetime+2]
    2E6B: 21 EF    AND   A,0xEF
    2E6D: 62 D0 00 MOV   REG[0xD0],0x0
    2E70: 2A 90    OR    A,[__r0]
    2E72: 62 D0 00 MOV   REG[0xD0],0x0
    2E75: 53 93    MOV   [datetime+2],A
(0194) 	}
    2E77: 80 3F    JMP   0x2EB7
(0195) 	else
(0196) 	{
(0197) 		datetime._02h.bits_24hrs.hours = bcd;
    2E79: 62 D0 00 MOV   REG[0xD0],0x0
    2E7C: 52 03    MOV   A,[X+3]
    2E7E: 21 0F    AND   A,0xF
    2E80: 53 90    MOV   [__r0],A
    2E82: 26 90 0F AND   [__r0],0xF
    2E85: 62 D0 00 MOV   REG[0xD0],0x0
    2E88: 51 93    MOV   A,[datetime+2]
    2E8A: 21 F0    AND   A,0xF0
    2E8C: 62 D0 00 MOV   REG[0xD0],0x0
    2E8F: 2A 90    OR    A,[__r0]
    2E91: 62 D0 00 MOV   REG[0xD0],0x0
    2E94: 53 93    MOV   [datetime+2],A
(0198) 		datetime._02h.bits_24hrs.hours10 = bcd10;
    2E96: 62 D0 00 MOV   REG[0xD0],0x0
    2E99: 52 02    MOV   A,[X+2]
    2E9B: 21 03    AND   A,0x3
    2E9D: 64       ASL   A
    2E9E: 64       ASL   A
    2E9F: 64       ASL   A
    2EA0: 64       ASL   A
    2EA1: 53 90    MOV   [__r0],A
    2EA3: 26 90 30 AND   [__r0],0x30
    2EA6: 62 D0 00 MOV   REG[0xD0],0x0
    2EA9: 51 93    MOV   A,[datetime+2]
    2EAB: 21 CF    AND   A,0xCF
    2EAD: 62 D0 00 MOV   REG[0xD0],0x0
    2EB0: 2A 90    OR    A,[__r0]
    2EB2: 62 D0 00 MOV   REG[0xD0],0x0
    2EB5: 53 93    MOV   [datetime+2],A
(0199) 	}
(0200) 	
(0201) 	Rtc_WriteToRtc();
    2EB7: 7C 24 D4 LCALL _Rtc_WriteToRtc
    2EBA: 62 D0 00 MOV   REG[0xD0],0x0
(0202) 	Time_Pause(FALSE);
    2EBD: 50 00    MOV   A,0x0
    2EBF: 08       PUSH  A
    2EC0: 9A 84    CALL  _Time_Pause
    2EC2: 38 FF    ADD   SP,0xFF
    2EC4: 38 F8    ADD   SP,0xF8
    2EC6: 20       POP   X
    2EC7: 7F       RET   
(0203) }
(0204) 
(0205) void Time_Adj_D(BOOL direction)
(0206) {
_Time_Adj_D:
  year                 --> X+4
  month                --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  date                 --> X+0
  direction            --> X-4
    2EC8: 10       PUSH  X
    2EC9: 4F       MOV   X,SP
    2ECA: 38 05    ADD   SP,0x5
(0207) 	BYTE date, month, year, bcd10, bcd;
(0208) 
(0209) 	Time_Pause(TRUE);
    2ECC: 50 01    MOV   A,0x1
    2ECE: 08       PUSH  A
    2ECF: 9A 75    CALL  _Time_Pause
(0210) 	Rtc_ReadFromRtc();
    2ED1: 7C 24 E8 LCALL _Rtc_ReadFromRtc
(0211) 
(0212) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    2ED4: 50 07    MOV   A,0x7
    2ED6: 08       PUSH  A
    2ED7: 10       PUSH  X
    2ED8: 62 D0 00 MOV   REG[0xD0],0x0
    2EDB: 51 95    MOV   A,[datetime+4]
    2EDD: 21 0F    AND   A,0xF
    2EDF: 08       PUSH  A
    2EE0: 51 95    MOV   A,[datetime+4]
    2EE2: 62 D0 00 MOV   REG[0xD0],0x0
    2EE5: 67       ASR   A
    2EE6: 67       ASR   A
    2EE7: 67       ASR   A
    2EE8: 67       ASR   A
    2EE9: 21 0F    AND   A,0xF
    2EEB: 53 90    MOV   [__r0],A
    2EED: 26 90 03 AND   [__r0],0x3
    2EF0: 51 90    MOV   A,[__r0]
    2EF2: 08       PUSH  A
    2EF3: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2EF6: 38 FB    ADD   SP,0xFB
(0213) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    2EF8: 62 D0 00 MOV   REG[0xD0],0x0
    2EFB: 5A 8F    MOV   [__r1],X
    2EFD: 06 8F 03 ADD   [__r1],0x3
    2F00: 50 07    MOV   A,0x7
    2F02: 08       PUSH  A
    2F03: 51 8F    MOV   A,[__r1]
    2F05: 08       PUSH  A
    2F06: 62 D0 00 MOV   REG[0xD0],0x0
    2F09: 51 96    MOV   A,[datetime+5]
    2F0B: 21 0F    AND   A,0xF
    2F0D: 08       PUSH  A
    2F0E: 51 96    MOV   A,[datetime+5]
    2F10: 62 D0 00 MOV   REG[0xD0],0x0
    2F13: 67       ASR   A
    2F14: 67       ASR   A
    2F15: 67       ASR   A
    2F16: 67       ASR   A
    2F17: 21 0F    AND   A,0xF
    2F19: 53 90    MOV   [__r0],A
    2F1B: 26 90 01 AND   [__r0],0x1
    2F1E: 51 90    MOV   A,[__r0]
    2F20: 08       PUSH  A
    2F21: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
(0214) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    2F24: 62 D0 00 MOV   REG[0xD0],0x0
    2F27: 5A 8F    MOV   [__r1],X
    2F29: 06 8F 04 ADD   [__r1],0x4
    2F2C: 50 07    MOV   A,0x7
    2F2E: 08       PUSH  A
    2F2F: 51 8F    MOV   A,[__r1]
    2F31: 08       PUSH  A
    2F32: 62 D0 00 MOV   REG[0xD0],0x0
    2F35: 51 97    MOV   A,[datetime+6]
    2F37: 21 0F    AND   A,0xF
    2F39: 08       PUSH  A
    2F3A: 51 97    MOV   A,[datetime+6]
    2F3C: 62 D0 00 MOV   REG[0xD0],0x0
    2F3F: 67       ASR   A
    2F40: 67       ASR   A
    2F41: 67       ASR   A
    2F42: 67       ASR   A
    2F43: 21 0F    AND   A,0xF
    2F45: 53 90    MOV   [__r0],A
    2F47: 26 90 0F AND   [__r0],0xF
    2F4A: 51 90    MOV   A,[__r0]
    2F4C: 08       PUSH  A
    2F4D: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2F50: 38 F8    ADD   SP,0xF8
(0215) 
(0216) 	bcd10 = datetime._04h.bits.date10;
    2F52: 62 D0 00 MOV   REG[0xD0],0x0
    2F55: 51 95    MOV   A,[datetime+4]
    2F57: 62 D0 00 MOV   REG[0xD0],0x0
    2F5A: 67       ASR   A
    2F5B: 67       ASR   A
    2F5C: 67       ASR   A
    2F5D: 67       ASR   A
    2F5E: 21 0F    AND   A,0xF
    2F60: 53 90    MOV   [__r0],A
    2F62: 26 90 03 AND   [__r0],0x3
    2F65: 51 90    MOV   A,[__r0]
    2F67: 54 01    MOV   [X+1],A
(0217) 	bcd = datetime._04h.bits.date;
    2F69: 62 D0 00 MOV   REG[0xD0],0x0
    2F6C: 51 95    MOV   A,[datetime+4]
    2F6E: 21 0F    AND   A,0xF
    2F70: 62 D0 00 MOV   REG[0xD0],0x0
    2F73: 54 02    MOV   [X+2],A
(0218) 
(0219) 	if(direction == TIME_UP)
    2F75: 3D FC 01 CMP   [X-4],0x1
    2F78: B0 38    JNZ   0x2FB1
(0220) 	{
(0221) 		date++;
    2F7A: 77 00    INC   [X+0]
(0222) 		if(isValidDate(date, month, year))
    2F7C: 52 04    MOV   A,[X+4]
    2F7E: 08       PUSH  A
    2F7F: 52 03    MOV   A,[X+3]
    2F81: 08       PUSH  A
    2F82: 52 00    MOV   A,[X+0]
    2F84: 08       PUSH  A
    2F85: 7C 13 5A LCALL _isValidDate
    2F88: 38 FD    ADD   SP,0xFD
    2F8A: 62 D0 00 MOV   REG[0xD0],0x0
    2F8D: 39 00    CMP   A,0x0
    2F8F: A0 56    JZ    0x2FE6
(0223) 		{
(0224) 			decToBcd(&bcd10, &bcd, date);
    2F91: 52 00    MOV   A,[X+0]
    2F93: 08       PUSH  A
    2F94: 5A 8F    MOV   [__r1],X
    2F96: 06 8F 02 ADD   [__r1],0x2
    2F99: 50 07    MOV   A,0x7
    2F9B: 08       PUSH  A
    2F9C: 51 8F    MOV   A,[__r1]
    2F9E: 08       PUSH  A
    2F9F: 5A 8F    MOV   [__r1],X
    2FA1: 06 8F 01 ADD   [__r1],0x1
    2FA4: 50 07    MOV   A,0x7
    2FA6: 08       PUSH  A
    2FA7: 51 8F    MOV   A,[__r1]
    2FA9: 08       PUSH  A
    2FAA: 7C 0E D1 LCALL _decToBcd
    2FAD: 38 FB    ADD   SP,0xFB
(0225) 		}
(0226) 	}
    2FAF: 80 36    JMP   0x2FE6
(0227) 	else
(0228) 	{
(0229) 		date--;
    2FB1: 7B 00    DEC   [X+0]
(0230) 		if(isValidDate(date, month, year))
    2FB3: 52 04    MOV   A,[X+4]
    2FB5: 08       PUSH  A
    2FB6: 52 03    MOV   A,[X+3]
    2FB8: 08       PUSH  A
    2FB9: 52 00    MOV   A,[X+0]
    2FBB: 08       PUSH  A
    2FBC: 7C 13 5A LCALL _isValidDate
    2FBF: 38 FD    ADD   SP,0xFD
    2FC1: 62 D0 00 MOV   REG[0xD0],0x0
    2FC4: 39 00    CMP   A,0x0
    2FC6: A0 1F    JZ    0x2FE6
(0231) 		{
(0232) 			decToBcd(&bcd10, &bcd, date);
    2FC8: 52 00    MOV   A,[X+0]
    2FCA: 08       PUSH  A
    2FCB: 5A 8F    MOV   [__r1],X
    2FCD: 06 8F 02 ADD   [__r1],0x2
    2FD0: 50 07    MOV   A,0x7
    2FD2: 08       PUSH  A
    2FD3: 51 8F    MOV   A,[__r1]
    2FD5: 08       PUSH  A
    2FD6: 5A 8F    MOV   [__r1],X
    2FD8: 06 8F 01 ADD   [__r1],0x1
    2FDB: 50 07    MOV   A,0x7
    2FDD: 08       PUSH  A
    2FDE: 51 8F    MOV   A,[__r1]
    2FE0: 08       PUSH  A
    2FE1: 7C 0E D1 LCALL _decToBcd
    2FE4: 38 FB    ADD   SP,0xFB
(0233) 		}
(0234) 	}
(0235) 
(0236) 	datetime._04h.bits.date10 = bcd10;
    2FE6: 62 D0 00 MOV   REG[0xD0],0x0
    2FE9: 52 01    MOV   A,[X+1]
    2FEB: 21 03    AND   A,0x3
    2FED: 64       ASL   A
    2FEE: 64       ASL   A
    2FEF: 64       ASL   A
    2FF0: 64       ASL   A
    2FF1: 53 90    MOV   [__r0],A
    2FF3: 26 90 30 AND   [__r0],0x30
    2FF6: 62 D0 00 MOV   REG[0xD0],0x0
    2FF9: 51 95    MOV   A,[datetime+4]
    2FFB: 21 CF    AND   A,0xCF
    2FFD: 62 D0 00 MOV   REG[0xD0],0x0
    3000: 2A 90    OR    A,[__r0]
    3002: 62 D0 00 MOV   REG[0xD0],0x0
    3005: 53 95    MOV   [datetime+4],A
(0237) 	datetime._04h.bits.date = bcd;
    3007: 62 D0 00 MOV   REG[0xD0],0x0
    300A: 52 02    MOV   A,[X+2]
    300C: 21 0F    AND   A,0xF
    300E: 53 90    MOV   [__r0],A
    3010: 26 90 0F AND   [__r0],0xF
    3013: 62 D0 00 MOV   REG[0xD0],0x0
    3016: 51 95    MOV   A,[datetime+4]
    3018: 21 F0    AND   A,0xF0
    301A: 62 D0 00 MOV   REG[0xD0],0x0
    301D: 2A 90    OR    A,[__r0]
    301F: 62 D0 00 MOV   REG[0xD0],0x0
    3022: 53 95    MOV   [datetime+4],A
(0238) 
(0239) 	Rtc_WriteToRtc();
    3024: 7C 24 D4 LCALL _Rtc_WriteToRtc
    3027: 62 D0 00 MOV   REG[0xD0],0x0
(0240) 	Time_Pause(FALSE);
    302A: 50 00    MOV   A,0x0
    302C: 08       PUSH  A
    302D: 99 17    CALL  _Time_Pause
    302F: 38 FF    ADD   SP,0xFF
    3031: 38 FB    ADD   SP,0xFB
    3033: 20       POP   X
    3034: 7F       RET   
(0241) }
(0242) 
(0243) void Time_Adj_Mo(BOOL direction)
(0244) {
_Time_Adj_Mo:
  year                 --> X+4
  date                 --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  month                --> X+0
  direction            --> X-4
    3035: 10       PUSH  X
    3036: 4F       MOV   X,SP
    3037: 38 05    ADD   SP,0x5
(0245) 	BYTE date, month, year, bcd10, bcd;
(0246) 
(0247) 	Time_Pause(TRUE);
    3039: 50 01    MOV   A,0x1
    303B: 08       PUSH  A
    303C: 99 08    CALL  _Time_Pause
(0248) 	Rtc_ReadFromRtc();
    303E: 7C 24 E8 LCALL _Rtc_ReadFromRtc
    3041: 62 D0 00 MOV   REG[0xD0],0x0
(0249) 
(0250) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    3044: 5A 8F    MOV   [__r1],X
    3046: 06 8F 03 ADD   [__r1],0x3
    3049: 50 07    MOV   A,0x7
    304B: 08       PUSH  A
    304C: 51 8F    MOV   A,[__r1]
    304E: 08       PUSH  A
    304F: 62 D0 00 MOV   REG[0xD0],0x0
    3052: 51 95    MOV   A,[datetime+4]
    3054: 21 0F    AND   A,0xF
    3056: 08       PUSH  A
    3057: 51 95    MOV   A,[datetime+4]
    3059: 62 D0 00 MOV   REG[0xD0],0x0
    305C: 67       ASR   A
    305D: 67       ASR   A
    305E: 67       ASR   A
    305F: 67       ASR   A
    3060: 21 0F    AND   A,0xF
    3062: 53 90    MOV   [__r0],A
    3064: 26 90 03 AND   [__r0],0x3
    3067: 51 90    MOV   A,[__r0]
    3069: 08       PUSH  A
    306A: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    306D: 38 FB    ADD   SP,0xFB
(0251) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    306F: 50 07    MOV   A,0x7
    3071: 08       PUSH  A
    3072: 10       PUSH  X
    3073: 62 D0 00 MOV   REG[0xD0],0x0
    3076: 51 96    MOV   A,[datetime+5]
    3078: 21 0F    AND   A,0xF
    307A: 08       PUSH  A
    307B: 51 96    MOV   A,[datetime+5]
    307D: 62 D0 00 MOV   REG[0xD0],0x0
    3080: 67       ASR   A
    3081: 67       ASR   A
    3082: 67       ASR   A
    3083: 67       ASR   A
    3084: 21 0F    AND   A,0xF
    3086: 53 90    MOV   [__r0],A
    3088: 26 90 01 AND   [__r0],0x1
    308B: 51 90    MOV   A,[__r0]
    308D: 08       PUSH  A
    308E: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
(0252) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    3091: 62 D0 00 MOV   REG[0xD0],0x0
    3094: 5A 8F    MOV   [__r1],X
    3096: 06 8F 04 ADD   [__r1],0x4
    3099: 50 07    MOV   A,0x7
    309B: 08       PUSH  A
    309C: 51 8F    MOV   A,[__r1]
    309E: 08       PUSH  A
    309F: 62 D0 00 MOV   REG[0xD0],0x0
    30A2: 51 97    MOV   A,[datetime+6]
    30A4: 21 0F    AND   A,0xF
    30A6: 08       PUSH  A
    30A7: 51 97    MOV   A,[datetime+6]
    30A9: 62 D0 00 MOV   REG[0xD0],0x0
    30AC: 67       ASR   A
    30AD: 67       ASR   A
    30AE: 67       ASR   A
    30AF: 67       ASR   A
    30B0: 21 0F    AND   A,0xF
    30B2: 53 90    MOV   [__r0],A
    30B4: 26 90 0F AND   [__r0],0xF
    30B7: 51 90    MOV   A,[__r0]
    30B9: 08       PUSH  A
    30BA: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    30BD: 38 F8    ADD   SP,0xF8
(0253) 
(0254) 	bcd10 = datetime._05h.bits.month10;
    30BF: 62 D0 00 MOV   REG[0xD0],0x0
    30C2: 51 96    MOV   A,[datetime+5]
    30C4: 62 D0 00 MOV   REG[0xD0],0x0
    30C7: 67       ASR   A
    30C8: 67       ASR   A
    30C9: 67       ASR   A
    30CA: 67       ASR   A
    30CB: 21 0F    AND   A,0xF
    30CD: 53 90    MOV   [__r0],A
    30CF: 26 90 01 AND   [__r0],0x1
    30D2: 51 90    MOV   A,[__r0]
    30D4: 54 01    MOV   [X+1],A
(0255) 	bcd = datetime._05h.bits.month;
    30D6: 62 D0 00 MOV   REG[0xD0],0x0
    30D9: 51 96    MOV   A,[datetime+5]
    30DB: 21 0F    AND   A,0xF
    30DD: 62 D0 00 MOV   REG[0xD0],0x0
    30E0: 54 02    MOV   [X+2],A
(0256) 
(0257) 	if(direction == TIME_UP)
    30E2: 3D FC 01 CMP   [X-4],0x1
    30E5: B0 38    JNZ   0x311E
(0258) 	{
(0259) 		month++;
    30E7: 77 00    INC   [X+0]
(0260) 		if(isValidDate(date, month, year))
    30E9: 52 04    MOV   A,[X+4]
    30EB: 08       PUSH  A
    30EC: 52 00    MOV   A,[X+0]
    30EE: 08       PUSH  A
    30EF: 52 03    MOV   A,[X+3]
    30F1: 08       PUSH  A
    30F2: 7C 13 5A LCALL _isValidDate
    30F5: 38 FD    ADD   SP,0xFD
    30F7: 62 D0 00 MOV   REG[0xD0],0x0
    30FA: 39 00    CMP   A,0x0
    30FC: A0 56    JZ    0x3153
(0261) 		{
(0262) 			decToBcd(&bcd10, &bcd, month);
    30FE: 52 00    MOV   A,[X+0]
    3100: 08       PUSH  A
    3101: 5A 8F    MOV   [__r1],X
    3103: 06 8F 02 ADD   [__r1],0x2
    3106: 50 07    MOV   A,0x7
    3108: 08       PUSH  A
    3109: 51 8F    MOV   A,[__r1]
    310B: 08       PUSH  A
    310C: 5A 8F    MOV   [__r1],X
    310E: 06 8F 01 ADD   [__r1],0x1
    3111: 50 07    MOV   A,0x7
    3113: 08       PUSH  A
    3114: 51 8F    MOV   A,[__r1]
    3116: 08       PUSH  A
    3117: 7C 0E D1 LCALL _decToBcd
    311A: 38 FB    ADD   SP,0xFB
(0263) 		}
(0264) 	}
    311C: 80 36    JMP   0x3153
(0265) 	else
(0266) 	{
(0267) 		month--;
    311E: 7B 00    DEC   [X+0]
(0268) 		if(isValidDate(date, month, year))
    3120: 52 04    MOV   A,[X+4]
    3122: 08       PUSH  A
    3123: 52 00    MOV   A,[X+0]
    3125: 08       PUSH  A
    3126: 52 03    MOV   A,[X+3]
    3128: 08       PUSH  A
    3129: 7C 13 5A LCALL _isValidDate
    312C: 38 FD    ADD   SP,0xFD
    312E: 62 D0 00 MOV   REG[0xD0],0x0
    3131: 39 00    CMP   A,0x0
    3133: A0 1F    JZ    0x3153
(0269) 		{
(0270) 			decToBcd(&bcd10, &bcd, month);
    3135: 52 00    MOV   A,[X+0]
    3137: 08       PUSH  A
    3138: 5A 8F    MOV   [__r1],X
    313A: 06 8F 02 ADD   [__r1],0x2
    313D: 50 07    MOV   A,0x7
    313F: 08       PUSH  A
    3140: 51 8F    MOV   A,[__r1]
    3142: 08       PUSH  A
    3143: 5A 8F    MOV   [__r1],X
    3145: 06 8F 01 ADD   [__r1],0x1
    3148: 50 07    MOV   A,0x7
    314A: 08       PUSH  A
    314B: 51 8F    MOV   A,[__r1]
    314D: 08       PUSH  A
    314E: 7C 0E D1 LCALL _decToBcd
    3151: 38 FB    ADD   SP,0xFB
(0271) 		}
(0272) 	}
(0273) 
(0274) 	datetime._05h.bits.month10 = bcd10;
    3153: 62 D0 00 MOV   REG[0xD0],0x0
    3156: 52 01    MOV   A,[X+1]
    3158: 21 01    AND   A,0x1
    315A: 64       ASL   A
    315B: 64       ASL   A
    315C: 64       ASL   A
    315D: 64       ASL   A
    315E: 53 90    MOV   [__r0],A
    3160: 26 90 10 AND   [__r0],0x10
    3163: 62 D0 00 MOV   REG[0xD0],0x0
    3166: 51 96    MOV   A,[datetime+5]
    3168: 21 EF    AND   A,0xEF
    316A: 62 D0 00 MOV   REG[0xD0],0x0
    316D: 2A 90    OR    A,[__r0]
    316F: 62 D0 00 MOV   REG[0xD0],0x0
    3172: 53 96    MOV   [datetime+5],A
(0275) 	datetime._05h.bits.month = bcd;
    3174: 62 D0 00 MOV   REG[0xD0],0x0
    3177: 52 02    MOV   A,[X+2]
    3179: 21 0F    AND   A,0xF
    317B: 53 90    MOV   [__r0],A
    317D: 26 90 0F AND   [__r0],0xF
    3180: 62 D0 00 MOV   REG[0xD0],0x0
    3183: 51 96    MOV   A,[datetime+5]
    3185: 21 F0    AND   A,0xF0
    3187: 62 D0 00 MOV   REG[0xD0],0x0
    318A: 2A 90    OR    A,[__r0]
    318C: 62 D0 00 MOV   REG[0xD0],0x0
    318F: 53 96    MOV   [datetime+5],A
(0276) 
(0277) 	Rtc_WriteToRtc();
    3191: 7C 24 D4 LCALL _Rtc_WriteToRtc
    3194: 62 D0 00 MOV   REG[0xD0],0x0
(0278) 	Time_Pause(FALSE);
    3197: 50 00    MOV   A,0x0
    3199: 08       PUSH  A
    319A: 7C 29 46 LCALL _Time_Pause
    319D: 38 FF    ADD   SP,0xFF
    319F: 38 FB    ADD   SP,0xFB
    31A1: 20       POP   X
    31A2: 7F       RET   
(0279) }
(0280) 
(0281) void Time_Adj_Y(BOOL direction)
(0282) {
_Time_Adj_Y:
  month                --> X+4
  date                 --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  year                 --> X+0
  direction            --> X-4
    31A3: 10       PUSH  X
    31A4: 4F       MOV   X,SP
    31A5: 38 05    ADD   SP,0x5
(0283) 	BYTE date, month, year, bcd10, bcd;
(0284) 
(0285) 	Time_Pause(TRUE);
    31A7: 50 01    MOV   A,0x1
    31A9: 08       PUSH  A
    31AA: 7C 29 46 LCALL _Time_Pause
(0286) 	Rtc_ReadFromRtc();
    31AD: 7C 24 E8 LCALL _Rtc_ReadFromRtc
    31B0: 62 D0 00 MOV   REG[0xD0],0x0
(0287) 
(0288) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    31B3: 5A 8F    MOV   [__r1],X
    31B5: 06 8F 03 ADD   [__r1],0x3
    31B8: 50 07    MOV   A,0x7
    31BA: 08       PUSH  A
    31BB: 51 8F    MOV   A,[__r1]
    31BD: 08       PUSH  A
    31BE: 62 D0 00 MOV   REG[0xD0],0x0
    31C1: 51 95    MOV   A,[datetime+4]
    31C3: 21 0F    AND   A,0xF
    31C5: 08       PUSH  A
    31C6: 51 95    MOV   A,[datetime+4]
    31C8: 62 D0 00 MOV   REG[0xD0],0x0
    31CB: 67       ASR   A
    31CC: 67       ASR   A
    31CD: 67       ASR   A
    31CE: 67       ASR   A
    31CF: 21 0F    AND   A,0xF
    31D1: 53 90    MOV   [__r0],A
    31D3: 26 90 03 AND   [__r0],0x3
    31D6: 51 90    MOV   A,[__r0]
    31D8: 08       PUSH  A
    31D9: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    31DC: 38 FB    ADD   SP,0xFB
(0289) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    31DE: 62 D0 00 MOV   REG[0xD0],0x0
    31E1: 5A 8F    MOV   [__r1],X
    31E3: 06 8F 04 ADD   [__r1],0x4
    31E6: 50 07    MOV   A,0x7
    31E8: 08       PUSH  A
    31E9: 51 8F    MOV   A,[__r1]
    31EB: 08       PUSH  A
    31EC: 62 D0 00 MOV   REG[0xD0],0x0
    31EF: 51 96    MOV   A,[datetime+5]
    31F1: 21 0F    AND   A,0xF
    31F3: 08       PUSH  A
    31F4: 51 96    MOV   A,[datetime+5]
    31F6: 62 D0 00 MOV   REG[0xD0],0x0
    31F9: 67       ASR   A
    31FA: 67       ASR   A
    31FB: 67       ASR   A
    31FC: 67       ASR   A
    31FD: 21 0F    AND   A,0xF
    31FF: 53 90    MOV   [__r0],A
    3201: 26 90 01 AND   [__r0],0x1
    3204: 51 90    MOV   A,[__r0]
    3206: 08       PUSH  A
    3207: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
(0290) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    320A: 50 07    MOV   A,0x7
    320C: 08       PUSH  A
    320D: 10       PUSH  X
    320E: 62 D0 00 MOV   REG[0xD0],0x0
    3211: 51 97    MOV   A,[datetime+6]
    3213: 21 0F    AND   A,0xF
    3215: 08       PUSH  A
    3216: 51 97    MOV   A,[datetime+6]
    3218: 62 D0 00 MOV   REG[0xD0],0x0
    321B: 67       ASR   A
    321C: 67       ASR   A
    321D: 67       ASR   A
    321E: 67       ASR   A
    321F: 21 0F    AND   A,0xF
    3221: 53 90    MOV   [__r0],A
    3223: 26 90 0F AND   [__r0],0xF
    3226: 51 90    MOV   A,[__r0]
    3228: 08       PUSH  A
    3229: 7C 0E A8 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    322C: 38 F8    ADD   SP,0xF8
(0291) 
(0292) 	bcd10 = datetime._06h.bits.year10;
    322E: 62 D0 00 MOV   REG[0xD0],0x0
    3231: 51 97    MOV   A,[datetime+6]
    3233: 62 D0 00 MOV   REG[0xD0],0x0
    3236: 67       ASR   A
    3237: 67       ASR   A
    3238: 67       ASR   A
    3239: 67       ASR   A
    323A: 21 0F    AND   A,0xF
    323C: 53 90    MOV   [__r0],A
    323E: 26 90 0F AND   [__r0],0xF
    3241: 51 90    MOV   A,[__r0]
    3243: 54 01    MOV   [X+1],A
(0293) 	bcd = datetime._06h.bits.year;
    3245: 62 D0 00 MOV   REG[0xD0],0x0
    3248: 51 97    MOV   A,[datetime+6]
    324A: 21 0F    AND   A,0xF
    324C: 62 D0 00 MOV   REG[0xD0],0x0
    324F: 54 02    MOV   [X+2],A
(0294) 
(0295) 	if(direction == TIME_UP)
    3251: 3D FC 01 CMP   [X-4],0x1
    3254: B0 38    JNZ   0x328D
(0296) 	{
(0297) 		year++;
    3256: 77 00    INC   [X+0]
(0298) 		if(isValidDate(date, month, year))
    3258: 52 00    MOV   A,[X+0]
    325A: 08       PUSH  A
    325B: 52 04    MOV   A,[X+4]
    325D: 08       PUSH  A
    325E: 52 03    MOV   A,[X+3]
    3260: 08       PUSH  A
    3261: 7C 13 5A LCALL _isValidDate
    3264: 38 FD    ADD   SP,0xFD
    3266: 62 D0 00 MOV   REG[0xD0],0x0
    3269: 39 00    CMP   A,0x0
    326B: A0 56    JZ    0x32C2
(0299) 		{
(0300) 			decToBcd(&bcd10, &bcd, year);
    326D: 52 00    MOV   A,[X+0]
    326F: 08       PUSH  A
    3270: 5A 8F    MOV   [__r1],X
    3272: 06 8F 02 ADD   [__r1],0x2
    3275: 50 07    MOV   A,0x7
    3277: 08       PUSH  A
    3278: 51 8F    MOV   A,[__r1]
    327A: 08       PUSH  A
    327B: 5A 8F    MOV   [__r1],X
    327D: 06 8F 01 ADD   [__r1],0x1
    3280: 50 07    MOV   A,0x7
    3282: 08       PUSH  A
    3283: 51 8F    MOV   A,[__r1]
    3285: 08       PUSH  A
    3286: 7C 0E D1 LCALL _decToBcd
    3289: 38 FB    ADD   SP,0xFB
(0301) 		}
(0302) 	}
    328B: 80 36    JMP   0x32C2
(0303) 	else
(0304) 	{
(0305) 		year--;
    328D: 7B 00    DEC   [X+0]
(0306) 		if(isValidDate(date, month, year))
    328F: 52 00    MOV   A,[X+0]
    3291: 08       PUSH  A
    3292: 52 04    MOV   A,[X+4]
    3294: 08       PUSH  A
    3295: 52 03    MOV   A,[X+3]
    3297: 08       PUSH  A
    3298: 7C 13 5A LCALL _isValidDate
    329B: 38 FD    ADD   SP,0xFD
    329D: 62 D0 00 MOV   REG[0xD0],0x0
    32A0: 39 00    CMP   A,0x0
    32A2: A0 1F    JZ    0x32C2
(0307) 		{
(0308) 			decToBcd(&bcd10, &bcd, year);
    32A4: 52 00    MOV   A,[X+0]
    32A6: 08       PUSH  A
    32A7: 5A 8F    MOV   [__r1],X
    32A9: 06 8F 02 ADD   [__r1],0x2
    32AC: 50 07    MOV   A,0x7
    32AE: 08       PUSH  A
    32AF: 51 8F    MOV   A,[__r1]
    32B1: 08       PUSH  A
    32B2: 5A 8F    MOV   [__r1],X
    32B4: 06 8F 01 ADD   [__r1],0x1
    32B7: 50 07    MOV   A,0x7
    32B9: 08       PUSH  A
    32BA: 51 8F    MOV   A,[__r1]
    32BC: 08       PUSH  A
    32BD: 7C 0E D1 LCALL _decToBcd
    32C0: 38 FB    ADD   SP,0xFB
(0309) 		}
(0310) 	}
(0311) 
(0312) 	datetime._06h.bits.year10 = bcd10;
    32C2: 62 D0 00 MOV   REG[0xD0],0x0
    32C5: 52 01    MOV   A,[X+1]
    32C7: 21 0F    AND   A,0xF
    32C9: 64       ASL   A
    32CA: 64       ASL   A
    32CB: 64       ASL   A
    32CC: 64       ASL   A
    32CD: 53 90    MOV   [__r0],A
    32CF: 26 90 F0 AND   [__r0],0xF0
    32D2: 62 D0 00 MOV   REG[0xD0],0x0
    32D5: 51 97    MOV   A,[datetime+6]
    32D7: 21 0F    AND   A,0xF
    32D9: 62 D0 00 MOV   REG[0xD0],0x0
    32DC: 2A 90    OR    A,[__r0]
    32DE: 62 D0 00 MOV   REG[0xD0],0x0
    32E1: 53 97    MOV   [datetime+6],A
(0313) 	datetime._06h.bits.year = bcd;
    32E3: 62 D0 00 MOV   REG[0xD0],0x0
    32E6: 52 02    MOV   A,[X+2]
    32E8: 21 0F    AND   A,0xF
    32EA: 53 90    MOV   [__r0],A
    32EC: 26 90 0F AND   [__r0],0xF
    32EF: 62 D0 00 MOV   REG[0xD0],0x0
    32F2: 51 97    MOV   A,[datetime+6]
    32F4: 21 F0    AND   A,0xF0
    32F6: 62 D0 00 MOV   REG[0xD0],0x0
    32F9: 2A 90    OR    A,[__r0]
    32FB: 62 D0 00 MOV   REG[0xD0],0x0
    32FE: 53 97    MOV   [datetime+6],A
(0314) 
(0315) 	Rtc_WriteToRtc();
    3300: 7C 24 D4 LCALL _Rtc_WriteToRtc
    3303: 62 D0 00 MOV   REG[0xD0],0x0
(0316) 	Time_Pause(FALSE);
    3306: 50 00    MOV   A,0x0
    3308: 08       PUSH  A
    3309: 7C 29 46 LCALL _Time_Pause
    330C: 38 FF    ADD   SP,0xFF
    330E: 38 FB    ADD   SP,0xFB
    3310: 20       POP   X
    3311: 7F       RET   
