FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 1B DD LJMP  _Keypad_GPIO_ISR   (0145)     ljmp _Keypad_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0E 35 LJMP  _ADCINC_ADConversion_ISR(0149)     ljmp	_ADCINC_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 08 00 LJMP  _TempBuf_ISR       (0153)     ljmp	_TempBuf_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 06 AE LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 11 2B LJMP  _Comm_Uart_RxInt   (0161)     ljmp _Comm_Uart_RxInt
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
0030: 7D 08 01 LJMP  _PWM8_ISR          (0165)     ljmp	_PWM8_ISR
0033: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [keypad.c:keyPressed+26],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [keypad.c:keyPressed+27],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 06 37 LCALL 0x0637             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 05    MOV   A,0x5              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 20    MOV   X,0x20             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 C3    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 C3    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 C3    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 C2    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F C3    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 C3 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A C2    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 C2    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F C3    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 C3 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A C2    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 02 MOV   REG[0xE0],0x2      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 21 C8 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
0532: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_rtc_Bank1
                                        (0019) export LoadConfigTBL_rtc_Bank0
                                        (0020) export LoadConfigTBL_rtc_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_rtc_Bank0:
                                        (0023) ;  Instance name ADCINC, User Module ADCINC
                                        (0024) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0025) 	db		88h, 90h		;ADCINC_AtoDcr0(ASC12CR0)
                                        (0026) 	db		89h, 00h		;ADCINC_AtoDcr1(ASC12CR1)
                                        (0027) 	db		8ah, 60h		;ADCINC_AtoDcr2(ASC12CR2)
                                        (0028) 	db		8bh, f0h		;ADCINC_AtoDcr3(ASC12CR3)
                                        (0029) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0030) 	db		23h, 00h		;ADCINC_PWMcr0(DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADCINC_PWMdr1(DBB00DR1)
                                        (0032) 	db		22h, 01h		;ADCINC_PWMdr2(DBB00DR2)
                                        (0033) ;  Instance name I2Cm, User Module I2Cm
                                        (0034) ;  Instance name LCD, User Module LCD
                                        (0035) ;  Instance name PGA, User Module PGA
                                        (0036) ;       Instance name PGA, Block Name GAIN(ACB02)
                                        (0037) 	db		79h, d6h		;PGA_GAIN_CR0(ACB02CR0)
                                        (0038) 	db		7ah, 21h		;PGA_GAIN_CR1(ACB02CR1)
                                        (0039) 	db		7bh, 20h		;PGA_GAIN_CR2(ACB02CR2)
                                        (0040) 	db		78h, 00h		;PGA_GAIN_CR3(ACB02CR3)
                                        (0041) ;  Instance name PWM8, User Module PWM8
                                        (0042) ;       Instance name PWM8, Block Name PWM8(DBB10)
                                        (0043) 	db		33h, 00h		;PWM8_CONTROL_REG(DBB10CR0)
                                        (0044) 	db		31h, 06h		;PWM8_PERIOD_REG(DBB10DR1)
                                        (0045) 	db		32h, 03h		;PWM8_COMPARE_REG(DBB10DR2)
                                        (0046) ;  Instance name SHADOWREGS, User Module SHADOWREGS
                                        (0047) ;  Instance name TempBuf, User Module DigBuf
                                        (0048) ;       Instance name TempBuf, Block Name DigBuf(DBB01)
                                        (0049) 	db		27h, 03h		;TempBuf_CONTROL_REG(DBB01CR0)
                                        (0050) 	db		25h, 00h		;TempBuf_DATA_1_REG(DBB01DR1)
                                        (0051) 	db		26h, 00h		;TempBuf_DATA_2_REG(DBB01DR2)
                                        (0052) ;  Instance name UART, User Module UART
                                        (0053) ;       Instance name UART, Block Name RX(DCB03)
                                        (0054) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0055) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0056) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0057) ;       Instance name UART, Block Name TX(DCB02)
                                        (0058) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0059) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0060) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0061) ;  Global Register values Bank 0
                                        (0062) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0063) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0064) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0065) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0066) 	db		e6h, 04h		; DecimatorControl_0 register (DEC_CR0)
                                        (0067) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0068) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0069) 	db		b0h, 10h		; Row_0_InputMux register (RDI0RI)
                                        (0070) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0071) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0072) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0073) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0074) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0075) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0076) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0077) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0078) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0079) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0080) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0081) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0082) 	db		beh, 01h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0083) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0084) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0085) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0086) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0087) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0088) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0089) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0090) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0091) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0092) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0093) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0094) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0095) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0096) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0097) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0098) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0099) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0100) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0101) 	db		ffh
                                        (0102) LoadConfigTBL_rtc_Bank1:
                                        (0103) ;  Instance name ADCINC, User Module ADCINC
                                        (0104) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0105) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0106) 	db		20h, 31h		;ADCINC_PWMfn(DBB00FN)
                                        (0107) 	db		21h, 16h		;ADCINC_PWMsl(DBB00IN)
                                        (0108) 	db		22h, 40h		;ADCINC_PWMos(DBB00OU)
                                        (0109) ;  Instance name I2Cm, User Module I2Cm
                                        (0110) ;  Instance name LCD, User Module LCD
                                        (0111) ;  Instance name PGA, User Module PGA
                                        (0112) ;       Instance name PGA, Block Name GAIN(ACB02)
                                        (0113) ;  Instance name PWM8, User Module PWM8
                                        (0114) ;       Instance name PWM8, Block Name PWM8(DBB10)
                                        (0115) 	db		30h, 21h		;PWM8_FUNC_REG(DBB10FN)
                                        (0116) 	db		31h, 17h		;PWM8_INPUT_REG(DBB10IN)
                                        (0117) 	db		32h, 46h		;PWM8_OUTPUT_REG(DBB10OU)
                                        (0118) ;  Instance name SHADOWREGS, User Module SHADOWREGS
                                        (0119) ;  Instance name TempBuf, User Module DigBuf
                                        (0120) ;       Instance name TempBuf, Block Name DigBuf(DBB01)
                                        (0121) 	db		24h, 22h		;TempBuf_FUNC_REG(DBB01FN)
                                        (0122) 	db		25h, 67h		;TempBuf_INPUT_REG(DBB01IN)
                                        (0123) 	db		26h, 45h		;TempBuf_OUTPUT_REG(DBB01OU)
                                        (0124) ;  Instance name UART, User Module UART
                                        (0125) ;       Instance name UART, Block Name RX(DCB03)
                                        (0126) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0127) 	db		2dh, e1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0128) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0129) ;       Instance name UART, Block Name TX(DCB02)
                                        (0130) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0131) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0132) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0133) ;  Global Register values Bank 1
                                        (0134) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0135) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0136) 	db		60h, 10h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0137) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0138) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0139) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0140) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0141) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0142) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0143) 	db		d3h, 80h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0144) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0145) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0146) 	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0147) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0148) 	db		dfh, 9bh		; OscillatorControl_3 register (OSC_CR3)
                                        (0149) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0150) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0151) 	db		e7h, 48h		; Type2Decimator_Control register (DEC_CR2)
                                        (0152) 	db		ffh
                                        (0153) AREA psoc_config(rom, rel)
                                        (0154) LoadConfigTBL_rtc_Ordered:
                                        (0155) ;  Ordered Global Register values
                                        (0156) 	M8C_SetBank0
0534: 62 00 00 MOV   REG[0x0],0x0       (0157) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0537: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
0539: 62 00 04 MOV   REG[0x0],0x4       (0159) 	mov	reg[00h], 04h		; Port_0_DriveMode_0 register (PRT0DM0)
053C: 62 01 FB MOV   REG[0x1],0xFB      (0160) 	mov	reg[01h], fbh		; Port_0_DriveMode_1 register (PRT0DM1)
053F: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
0541: 62 03 B8 MOV   REG[0x3],0xB8      (0162) 	mov	reg[03h], b8h		; Port_0_DriveMode_2 register (PRT0DM2)
0544: 62 02 44 MOV   REG[0x2],0x44      (0163) 	mov	reg[02h], 44h		; Port_0_GlobalSelect register (PRT0GS)
0547: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
0549: 62 02 00 MOV   REG[0x2],0x0       (0165) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
054C: 62 03 00 MOV   REG[0x3],0x0       (0166) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
054F: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
0551: 62 01 00 MOV   REG[0x1],0x0       (0168) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0554: 62 04 00 MOV   REG[0x4],0x0       (0169) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0557: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
0559: 62 04 00 MOV   REG[0x4],0x0       (0171) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
055C: 62 05 FF MOV   REG[0x5],0xFF      (0172) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
055F: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
0561: 62 07 FF MOV   REG[0x7],0xFF      (0174) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0564: 62 06 00 MOV   REG[0x6],0x0       (0175) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0567: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
0569: 62 06 00 MOV   REG[0x6],0x0       (0177) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
056C: 62 07 00 MOV   REG[0x7],0x0       (0178) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
056F: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
0571: 62 05 00 MOV   REG[0x5],0x0       (0180) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0574: 62 08 00 MOV   REG[0x8],0x0       (0181) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0577: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
0579: 62 08 FF MOV   REG[0x8],0xFF      (0183) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
057C: 62 09 00 MOV   REG[0x9],0x0       (0184) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
057F: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
0581: 62 0B 00 MOV   REG[0xB],0x0       (0186) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0584: 62 0A 80 MOV   REG[0xA],0x80      (0187) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
0587: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
0589: 62 0A 00 MOV   REG[0xA],0x0       (0189) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
058C: 62 0B 00 MOV   REG[0xB],0x0       (0190) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
058F: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
0591: 62 09 00 MOV   REG[0x9],0x0       (0192) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0594: 62 0C 00 MOV   REG[0xC],0x0       (0193) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0597: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0599: 62 0C 00 MOV   REG[0xC],0x0       (0195) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
059C: 62 0D 00 MOV   REG[0xD],0x0       (0196) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
059F: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
05A1: 62 0F 00 MOV   REG[0xF],0x0       (0198) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
05A4: 62 0E 00 MOV   REG[0xE],0x0       (0199) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
05A7: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
05A9: 62 0E 00 MOV   REG[0xE],0x0       (0201) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
05AC: 62 0F 00 MOV   REG[0xF],0x0       (0202) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
05AF: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
05B1: 62 0D 00 MOV   REG[0xD],0x0       (0204) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
05B4: 62 10 00 MOV   REG[0x10],0x0      (0205) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
05B7: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
05B9: 62 10 00 MOV   REG[0x10],0x0      (0207) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
05BC: 62 11 00 MOV   REG[0x11],0x0      (0208) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
05BF: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
05C1: 62 13 00 MOV   REG[0x13],0x0      (0210) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
05C4: 62 12 00 MOV   REG[0x12],0x0      (0211) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
05C7: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
05C9: 62 12 00 MOV   REG[0x12],0x0      (0213) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
05CC: 62 13 00 MOV   REG[0x13],0x0      (0214) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
05CF: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
05D1: 62 11 00 MOV   REG[0x11],0x0      (0216) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
05D4: 62 14 00 MOV   REG[0x14],0x0      (0217) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
05D7: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
05D9: 62 14 00 MOV   REG[0x14],0x0      (0219) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
05DC: 62 15 00 MOV   REG[0x15],0x0      (0220) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
05DF: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
05E1: 62 17 00 MOV   REG[0x17],0x0      (0222) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
05E4: 62 16 00 MOV   REG[0x16],0x0      (0223) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
05E7: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
05E9: 62 16 00 MOV   REG[0x16],0x0      (0225) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
05EC: 62 17 00 MOV   REG[0x17],0x0      (0226) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
05EF: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
05F1: 62 15 00 MOV   REG[0x15],0x0      (0228) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
05F4: 62 18 00 MOV   REG[0x18],0x0      (0229) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
05F7: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
05F9: 62 18 00 MOV   REG[0x18],0x0      (0231) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
05FC: 62 19 00 MOV   REG[0x19],0x0      (0232) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
05FF: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
0601: 62 1B 00 MOV   REG[0x1B],0x0      (0234) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0604: 62 1A 00 MOV   REG[0x1A],0x0      (0235) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
0607: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
0609: 62 1A 00 MOV   REG[0x1A],0x0      (0237) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
060C: 62 1B 00 MOV   REG[0x1B],0x0      (0238) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
060F: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
0611: 62 19 00 MOV   REG[0x19],0x0      (0240) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0614: 62 1C 00 MOV   REG[0x1C],0x0      (0241) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0617: 71 10    OR    F,0x10             
                                        (0242) 	M8C_SetBank1
0619: 62 1C 00 MOV   REG[0x1C],0x0      (0243) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
061C: 62 1D 00 MOV   REG[0x1D],0x0      (0244) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
061F: 70 EF    AND   F,0xEF             
                                        (0245) 	M8C_SetBank0
0621: 62 1F 00 MOV   REG[0x1F],0x0      (0246) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0624: 62 1E 00 MOV   REG[0x1E],0x0      (0247) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0627: 71 10    OR    F,0x10             
                                        (0248) 	M8C_SetBank1
0629: 62 1E 00 MOV   REG[0x1E],0x0      (0249) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
062C: 62 1F 00 MOV   REG[0x1F],0x0      (0250) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
062F: 70 EF    AND   F,0xEF             
                                        (0251) 	M8C_SetBank0
0631: 62 1D 00 MOV   REG[0x1D],0x0      (0252) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0634: 70 EF    AND   F,0xEF             
                                        (0253) 	M8C_SetBank0
0636: 7F       RET                      (0254) 	ret
                                        (0255) 
                                        (0256) 
                                        (0257) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_rtc
                                        (0026) export _LoadConfig_rtc
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_0_DriveMode_2_SHADE
                                        (0034) export _Port_0_DriveMode_2_SHADE
                                        (0035) export Port_2_Data_SHADE
                                        (0036) export _Port_2_Data_SHADE
                                        (0037) export Port_2_DriveMode_0_SHADE
                                        (0038) export _Port_2_DriveMode_0_SHADE
                                        (0039) export Port_2_DriveMode_1_SHADE
                                        (0040) export _Port_2_DriveMode_1_SHADE
                                        (0041) 
                                        (0042) 
                                        (0043) export NO_SHADOW
                                        (0044) export _NO_SHADOW
                                        (0045) 
                                        (0046) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0047) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0048) 
                                        (0049) AREA psoc_config(rom, rel)
                                        (0050) 
                                        (0051) ;---------------------------------------------------------------------------
                                        (0052) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0053) ;                  parameters handled by boot code, like CPU speed). This
                                        (0054) ;                  function can be called from user code, but typically it
                                        (0055) ;                  is only called from boot.
                                        (0056) ;
                                        (0057) ;       INPUTS: None.
                                        (0058) ;      RETURNS: Nothing.
                                        (0059) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0060) ;               In the large memory model currently only the page
                                        (0061) ;               pointer registers listed below are modified.  This does
                                        (0062) ;               not guarantee that in future implementations of this
                                        (0063) ;               function other page pointer registers will not be
                                        (0064) ;               modified.
                                        (0065) ;          
                                        (0066) ;               Page Pointer Registers Modified: 
                                        (0067) ;               CUR_PP
                                        (0068) ;
                                        (0069) _LoadConfigInit:
                                        (0070)  LoadConfigInit:
                                        (0071)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0072)     
0637: 55 00 00 MOV   [counter|previousSecond|elapsedSeconds],0x0(0073) 	mov		[Port_0_Data_SHADE], 0h
063A: 55 02 04 MOV   [counter|previousSecond|elapsedSeconds+2],0x4(0074) 	mov		[Port_0_DriveMode_0_SHADE], 4h
063D: 55 03 FB MOV   [counter|previousSecond|elapsedSeconds+3],0xFB(0075) 	mov		[Port_0_DriveMode_1_SHADE], fbh
0640: 55 04 B8 MOV   [counter|previousSecond|elapsedSeconds+4],0xB8(0076) 	mov		[Port_0_DriveMode_2_SHADE], b8h
0643: 55 01 00 MOV   [counter|previousSecond|elapsedSeconds+1],0x0(0077) 	mov		[Port_2_Data_SHADE], 0h
0646: 55 05 FF MOV   [counter|previousSecond|elapsedSeconds+5],0xFF(0078) 	mov		[Port_2_DriveMode_0_SHADE], ffh
0649: 55 06 00 MOV   [counter|previousSecond|elapsedSeconds+6],0x0(0079) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0080) 
064C: 7C 06 53 LCALL 0x0653             (0081) 	lcall	LoadConfig_rtc
064F: 7C 05 32 LCALL 0x0532             (0082) 	lcall	LoadConfigTBL_rtc_Ordered
                                        (0083) 
                                        (0084) 
                                        (0085)     RAM_EPILOGUE RAM_USE_CLASS_4
0652: 7F       RET                      (0086)     ret
                                        (0087) 
                                        (0088) ;---------------------------------------------------------------------------
                                        (0089) ; Load Configuration rtc
                                        (0090) ;
                                        (0091) ;    Load configuration registers for rtc.
                                        (0092) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0093) ;
                                        (0094) ;       INPUTS: None.
                                        (0095) ;      RETURNS: Nothing.
                                        (0096) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0097) ;               modified as may the Page Pointer registers!
                                        (0098) ;               In the large memory model currently only the page
                                        (0099) ;               pointer registers listed below are modified.  This does
                                        (0100) ;               not guarantee that in future implementations of this
                                        (0101) ;               function other page pointer registers will not be
                                        (0102) ;               modified.
                                        (0103) ;          
                                        (0104) ;               Page Pointer Registers Modified: 
                                        (0105) ;               CUR_PP
                                        (0106) ;
                                        (0107) _LoadConfig_rtc:
                                        (0108)  LoadConfig_rtc:
                                        (0109)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0110) 
0653: 10       PUSH  X                  (0111) 	push	x
0654: 70 EF    AND   F,0xEF             
                                        (0112)     M8C_SetBank0                    ; Force bank 0
0656: 50 00    MOV   A,0x0              (0113)     mov     a, 0                    ; Specify bank 0
0658: 67       ASR   A                  (0114)     asr     a                       ; Store in carry flag
                                        (0115)                                     ; Load bank 0 table:
0659: 50 02    MOV   A,0x2              (0116)     mov     A, >LoadConfigTBL_rtc_Bank0
065B: 57 EB    MOV   X,0xEB             (0117)     mov     X, <LoadConfigTBL_rtc_Bank0
065D: 7C 06 6E LCALL 0x066E             (0118)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0119) 
0660: 50 01    MOV   A,0x1              (0120)     mov     a, 1                    ; Specify bank 1
0662: 67       ASR   A                  (0121)     asr     a                       ; Store in carry flag
                                        (0122)                                     ; Load bank 1 table:
0663: 50 03    MOV   A,0x3              (0123)     mov     A, >LoadConfigTBL_rtc_Bank1
0665: 57 68    MOV   X,0x68             (0124)     mov     X, <LoadConfigTBL_rtc_Bank1
0667: 7C 06 6E LCALL 0x066E             (0125)     lcall   LoadConfig              ; Load the bank 1 values
066A: 70 EF    AND   F,0xEF             
                                        (0126) 
                                        (0127)     M8C_SetBank0                    ; Force return to bank 0
066C: 20       POP   X                  (0128) 	pop		x
                                        (0129) 
                                        (0130)     RAM_EPILOGUE RAM_USE_CLASS_4
066D: 7F       RET                      (0131)     ret
                                        (0132) 
                                        (0133) 
                                        (0134) 
                                        (0135) 
                                        (0136) ;---------------------------------------------------------------------------
                                        (0137) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0138) ;              pairs. Terminate on address=0xFF.
                                        (0139) ;
                                        (0140) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0141) ;           Flag Register Carry bit encodes the Register Bank
                                        (0142) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0143) ;
                                        (0144) ;  RETURNS: nothing.
                                        (0145) ;
                                        (0146) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0147) ;                X-3 Temporary store for register address
                                        (0148) ;                X-2 LSB of config table address
                                        (0149) ;                X-1 MSB of config table address
                                        (0150) ;
                                        (0151) LoadConfig:
                                        (0152)     RAM_PROLOGUE RAM_USE_CLASS_2
066E: 38 02    ADD   SP,0x2             (0153)     add     SP, 2                   ; Set up local vars
0670: 10       PUSH  X                  (0154)     push    X                       ; Save config table address on stack
0671: 08       PUSH  A                  (0155)     push    A
0672: 4F       MOV   X,SP               (0156)     mov     X, SP
0673: 56 FC 00 MOV   [X-4],0x0          (0157)     mov     [X-4], 0                ; Set default Destination to Bank 0
0676: D0 04    JNC   0x067B             (0158)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0678: 56 FC 01 MOV   [X-4],0x1          (0159)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0160) .BankSelectSaved:
067B: 18       POP   A                  (0161)     pop     A
067C: 20       POP   X                  (0162)     pop     X
067D: 70 EF    AND   F,0xEF             
067F: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0163) 
                                        (0164) LoadConfigLp:
                                        (0165)     M8C_SetBank0                    ; Switch to bank 0
                                        (0166)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0682: 10       PUSH  X                  (0167)     push    X                       ; Preserve the config table address
0683: 08       PUSH  A                  (0168)     push    A
0684: 28       ROMX                     (0169)     romx                            ; Load register address from table
0685: 39 FF    CMP   A,0xFF             (0170)     cmp     A, END_CONFIG_TABLE     ; End of table?
0687: A0 1F    JZ    0x06A7             (0171)     jz      EndLoadConfig           ;   Yes, go wrap it up
0689: 4F       MOV   X,SP               (0172)     mov     X, SP                   ;
068A: 48 FC 01 TST   [X-4],0x1          (0173)     tst     [X-4], 1                ; Loading IO Bank 1?
068D: A0 03    JZ    0x0691             (0174)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
068F: 71 10    OR    F,0x10             
                                        (0175)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0176) .IOBankNowSet:
0691: 54 FD    MOV   [X-3],A            (0177)     mov     [X-3], A                ; Stash the register address
0693: 18       POP   A                  (0178)     pop     A                       ; Retrieve the table address
0694: 20       POP   X                  (0179)     pop     X
0695: 75       INC   X                  (0180)     inc     X                       ; Advance to the data byte
0696: 09 00    ADC   A,0x0              (0181)     adc     A, 0
0698: 10       PUSH  X                  (0182)     push    X                       ; Save the config table address again
0699: 08       PUSH  A                  (0183)     push    A
069A: 28       ROMX                     (0184)     romx                            ; load config data from the table
069B: 4F       MOV   X,SP               (0185)     mov     X, SP                   ; retrieve the register address
069C: 59 FD    MOV   X,[X-3]            (0186)     mov     X, [X-3]
069E: 61 00    MOV   REG[X+0x0],A       (0187)     mov     reg[X], A               ; Configure the register
06A0: 18       POP   A                  (0188)     pop     A                       ; retrieve the table address
06A1: 20       POP   X                  (0189)     pop     X
06A2: 75       INC   X                  (0190)     inc     X                       ; advance to next table entry
06A3: 09 00    ADC   A,0x0              (0191)     adc     A, 0
06A5: 8F D7    JMP   0x067D             (0192)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0193) EndLoadConfig:
06A7: 38 FC    ADD   SP,0xFC            (0194)     add     SP, -4
06A9: 70 3F    AND   F,0x3F             
06AB: 71 C0    OR    F,0xC0             
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_2
06AD: 7F       RET                      (0196)     ret
                                        (0197) 
                                        (0198) AREA InterruptRAM(ram, rel)
                                        (0199) 
                                        (0200) NO_SHADOW:
                                        (0201) _NO_SHADOW:
                                        (0202) ; write only register shadows
                                        (0203) _Port_0_Data_SHADE:
                                        (0204) Port_0_Data_SHADE:	BLK	1
                                        (0205) _Port_2_Data_SHADE:
                                        (0206) Port_2_Data_SHADE:	BLK	1
                                        (0207) _Port_0_DriveMode_0_SHADE:
                                        (0208) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0209) _Port_0_DriveMode_1_SHADE:
                                        (0210) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0211) _Port_0_DriveMode_2_SHADE:
                                        (0212) Port_0_DriveMode_2_SHADE:	BLK	1
                                        (0213) _Port_2_DriveMode_0_SHADE:
                                        (0214) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0215) _Port_2_DriveMode_1_SHADE:
                                        (0216) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0217) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
06AE: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
06AF: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
06B0: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
06B3: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
06B6: 7F       RET                      (0182)    ret
06B7: 41 E1 FB AND   REG[0xE1],0xFB     
06BA: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
06BD: 7F       RET                      (0214)    ret
06BE: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
06C0: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
06C2: A0 07    JZ    0x06CA             (0249)    jz    .SetModeRegEmpty
06C4: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
06C7: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
06C9: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
06CA: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
06CD: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
06CF: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
06D0: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
06D2: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
06D4: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
06D6: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
06D7: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
06DA: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
06DD: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
06DE: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
06E0: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
06E1: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
06E3: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
06E4: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
06E6: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
06E7: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
06E9: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
06EA: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
06EC: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
06EE: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
06F0: A0 06    JZ    0x06F7             (0492)    jz   .SetTxCmpMode
                                        (0493) 
06F2: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
06F5: 80 04    JMP   0x06FA             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
06F7: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
06FA: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
06FC: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
06FD: 08       PUSH  A                  (0536)    push A
06FE: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
0700: A0 06    JZ    0x0707             (0538)    jz   .DisRxInt
0702: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0705: 80 04    JMP   0x070A             (0541)    jmp  .CheckTxInt
0707: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
070A: 18       POP   A                  (0547)    pop  A
070B: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
070D: A0 06    JZ    0x0714             (0549)    jz   .DisTxInt
070F: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
0712: 80 04    JMP   0x0717             (0552)    jmp  .End_IntCntl
0714: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
0717: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
0728: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0729: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
072A: 67       ASR   A                  (0603)    asr   A
072B: 67       ASR   A                  (0604)    asr   A
072C: 67       ASR   A                  (0605)    asr   A
072D: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
072F: FF E7    INDEX 0x0718             (0607)    index UART_HEX_STR                  ; Get Hex value
0731: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
0733: 18       POP   A                  (0609)    pop   A                             ; Restore value
0734: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
0736: FF E0    INDEX 0x0718             (0611)    index UART_HEX_STR                  ; Get Hex value
0738: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
073A: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
073B: 4B       SWAP  A,X                (0645)    swap  A,X
073C: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
073E: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
073F: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0741: 7F       RET                      (0650)    ret
0742: 49 2B 10 TST   REG[0x2B],0x10     
0745: AF FC    JZ    _UART_PutChar      
0747: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0749: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
074A: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
074D: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
074F: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0751: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0752: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0754: 08       PUSH  A                  (0756)    push A
0755: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0757: B0 04    JNZ   0x075C             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0759: 18       POP   A                  (0759)    pop  A
075A: 80 0B    JMP   0x0766             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
075C: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
075E: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
075F: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0760: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0762: B0 03    JNZ   0x0766             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0764: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0765: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0766: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
0768: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0769: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
076B: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
076D: 08       PUSH  A                  (0819)    push A
076E: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0770: B0 07    JNZ   0x0778             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0772: 18       POP   A                  (0822)    pop  A
0773: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0775: 4B       SWAP  A,X                (0824)    swap A,X
0776: 80 07    JMP   0x077E             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0778: 18       POP   A                  (0828)    pop  A
0779: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
077B: 4B       SWAP  A,X                (0830)    swap A,X
077C: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
077E: 7F       RET                      (0836)    ret
077F: 70 BF    AND   F,0xBF             
0781: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0783: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0785: A0 06    JZ    0x078C             (0872)    jz    End_PutString                           ; Check for end of string
0787: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0789: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
078A: 8F F8    JMP   0x0783             (0875)    jmp   .PutStringLoop                          ; Get next character
078C: 70 3F    AND   F,0x3F             
078E: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0790: 7F       RET                      (0879)    ret
0791: 70 BF    AND   F,0xBF             
0793: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0796: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0797: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0799: A0 1A    JZ    0x07B4             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
079B: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
079D: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
079F: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
07A1: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
07A3: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
07A5: 49 2B 10 TST   REG[0x2B],0x10     
07A8: AF FC    JZ    0x07A5             
07AA: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
07AC: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
07AD: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
07B0: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
07B2: 8F E4    JMP   0x0797             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
07B4: 70 3F    AND   F,0x3F             
07B6: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
07B8: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
07B9: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
07BA: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
07BD: B0 06    JNZ   0x07C4             (0980)    jnz   .CW_WRITEIT
07BF: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
07C2: A0 1D    JZ    0x07E0             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
07C4: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
07C5: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
07C7: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
07C9: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
07CA: 49 2B 10 TST   REG[0x2B],0x10     
07CD: AF FC    JZ    0x07CA             
07CF: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
07D1: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
07D2: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
07D5: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
07D8: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
07DB: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
07DE: 8F DB    JMP   0x07BA             (0995)    jmp   .CW_Loop
07E0: 70 3F    AND   F,0x3F             
07E2: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
07E4: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
07E5: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
07E6: 10       PUSH  X                  (1030)    push  X
07E7: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
07E8: A0 0B    JZ    0x07F4             (1032)    jz    .End_CPutString
07EA: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
07EC: 20       POP   X                  (1034)    pop   X
07ED: 18       POP   A                  (1035)    pop   A
07EE: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
07EF: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
07F1: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
07F2: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
07F4: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
07F6: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
07F7: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
07F9: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
07FB: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
07FD: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
07FF: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\tempbufint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TempBufINT.asm
                                        (0004) ;;   Version: 1.3, Updated on 2013/5/19 at 10:43:26
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigBuf Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) 
                                        (0016) ;-----------------------------------------------
                                        (0017) ;  Global Symbols
                                        (0018) ;-----------------------------------------------
                                        (0019) export  _TempBuf_ISR
                                        (0020) 
                                        (0021) 
                                        (0022) AREA InterruptRAM (RAM,REL,CON)
                                        (0023) 
                                        (0024) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0025) ;---------------------------------------------------
                                        (0026) ; Insert your custom declarations below this banner
                                        (0027) ;---------------------------------------------------
                                        (0028) 
                                        (0029) ;------------------------
                                        (0030) ; Includes
                                        (0031) ;------------------------
                                        (0032) 
                                        (0033) 	
                                        (0034) ;------------------------
                                        (0035) ;  Constant Definitions
                                        (0036) ;------------------------
                                        (0037) 
                                        (0038) 
                                        (0039) ;------------------------
                                        (0040) ; Variable Allocation
                                        (0041) ;------------------------
                                        (0042) 
                                        (0043) 
                                        (0044) ;---------------------------------------------------
                                        (0045) ; Insert your custom declarations above this banner
                                        (0046) ;---------------------------------------------------
                                        (0047) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: _TempBuf_ISR
                                        (0054) ;
                                        (0055) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0056) ;
                                        (0057) ;-----------------------------------------------------------------------------
                                        (0058) ;
                                        (0059) 
                                        (0060) _TempBuf_ISR:
                                        (0061) 
                                        (0062)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0063)    ;---------------------------------------------------
                                        (0064)    ; Insert your custom assembly code below this banner
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ;   NOTE: interrupt service routines must preserve
                                        (0067)    ;   the values of the A and X CPU registers.
                                        (0068)    
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
0800: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file TempBufINT.asm
FILE: lib\pwm8int.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8INT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0801: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8INT.asm
FILE: lib\pwm8.asm                      (0001) ;;*****************************************************************************
0802: 43 E1 10 OR    REG[0xE1],0x10     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8.asm
                                        (0004) ;;   Version: 2.60, Updated on 2013/5/19 at 10:44:7
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_EnableInt
                                        (0030) export _PWM8_EnableInt
                                        (0031) export  PWM8_DisableInt
                                        (0032) export _PWM8_DisableInt
                                        (0033) export  PWM8_Start
                                        (0034) export _PWM8_Start
                                        (0035) export  PWM8_Stop
                                        (0036) export _PWM8_Stop
                                        (0037) export  PWM8_WritePeriod
                                        (0038) export _PWM8_WritePeriod
                                        (0039) export  PWM8_WritePulseWidth
                                        (0040) export _PWM8_WritePulseWidth
                                        (0041) export  PWM8_bReadPulseWidth
                                        (0042) export _PWM8_bReadPulseWidth
                                        (0043) export  PWM8_bReadCounter
                                        (0044) export _PWM8_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA rtc_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_EnableInt:
                                        (0091) _PWM8_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0805: 7F       RET                      (0095)    ret
0806: 41 E1 EF AND   REG[0xE1],0xEF     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_DisableInt:
                                        (0119) _PWM8_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0809: 7F       RET                      (0123)    ret
080A: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_Start:
                                        (0148) _PWM8_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
080D: 7F       RET                      (0152)    ret
080E: 41 33 FE AND   REG[0x33],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_Stop:
                                        (0176) _PWM8_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0811: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_WritePeriod:
                                        (0206) _PWM8_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0812: 60 31    MOV   REG[0x31],A        (0208)    mov   reg[PWM8_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0814: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_WritePulseWidth:
                                        (0233) _PWM8_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0815: 60 32    MOV   REG[0x32],A        (0235)    mov   reg[PWM8_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0817: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_bReadPulseWidth:
                                        (0260) _PWM8_bReadPulseWidth:
                                        (0261)  bPWM8_ReadPulseWidth:                           ; this name deprecated
                                        (0262) _bPWM8_ReadPulseWidth:                           ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0818: 5D 32    MOV   A,REG[0x32]        (0264)    mov   A, reg[PWM8_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
081A: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_bReadCounter:
                                        (0293) _PWM8_bReadCounter:
                                        (0294)  bPWM8_ReadCounter:                              ; this name deprecated
                                        (0295) _bPWM8_ReadCounter:                              ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
081B: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
081C: 5D 32    MOV   A,REG[0x32]        (0304)    mov   A, reg[PWM8_COMPARE_REG]                ; Save the Compare register on the stack
081E: 08       PUSH  A                  (0305)    push  A                                       ;
081F: 41 33 FE AND   REG[0x33],0xFE     
0822: 71 10    OR    F,0x10             
                                        (0306)    PWM8_Stop_M                                   ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0824: 5D 31    MOV   A,REG[0x31]        (0308)    mov   A, reg[PWM8_INPUT_REG]                  ; save the clock input setting
0826: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0827: 62 31 00 MOV   REG[0x31],0x0      (0311)    mov   reg[PWM8_INPUT_REG], INPUT_REG_NULL
082A: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
082C: 5D 30    MOV   A,REG[0x30]        (0314)    mov   A, reg[PWM8_COUNTER_REG]                ; DR2 <- DR0
082E: 5D 32    MOV   A,REG[0x32]        (0315)    mov   A, reg[PWM8_COMPARE_REG]                ; Stash the Count on the stack
0830: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0831: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0833: 60 32    MOV   REG[0x32],A        (0318)    mov   reg[PWM8_COMPARE_REG], A
0835: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0837: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0839: 60 31    MOV   REG[0x31],A        (0321)    mov   reg[PWM8_INPUT_REG], A                  ;
083B: 70 EF    AND   F,0xEF             
083D: 43 33 01 OR    REG[0x33],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_Start_M                                  ;   then re-enable the PWM.
0840: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0841: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0843: 70 3F    AND   F,0x3F             
0845: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0847: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0848: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
084A: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
084B: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
084C: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
084E: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0850: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0852: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
0854: 18       POP   A                  (0124)    pop  A
0855: 70 3F    AND   F,0x3F             
0857: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0859: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
085A: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
085C: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
085D: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
085E: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
0860: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0862: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0865: B0 0E    JNZ   0x0874             (0164)    jnz  .SETHIGHGAIN
0867: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
086A: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
086C: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
086E: 18       POP   A                  (0168)    pop  A
086F: 70 3F    AND   F,0x3F             
0871: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0873: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0874: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
0877: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
0879: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
087B: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
087E: 18       POP   A                  (0177)    pop  A
087F: 70 3F    AND   F,0x3F             
0881: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
0883: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
0884: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
0887: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0888: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0889: 10       PUSH  X                  (0209)     push  X
088A: 28       ROMX                     (0210)     romx                               ; Get character from ROM
088B: B0 04    JNZ   0x0890             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
088D: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
088E: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
088F: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0890: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
0892: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
0893: 18       POP   A                  (0220)     pop   A
0894: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0895: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0897: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0898: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
08AA: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
08AB: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
08AC: 67       ASR   A                  (0262)     asr   A
08AD: 67       ASR   A                  (0263)     asr   A
08AE: 67       ASR   A                  (0264)     asr   A
08AF: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
08B1: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
08B3: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
08B5: 18       POP   A                  (0268)     pop   A                            ; Restore value
08B6: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
08B8: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
08BA: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
08BC: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
08BD: 4B       SWAP  A,X                (0305)     swap  A,X
08BE: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
08C0: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
08C1: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
08C3: 7F       RET                      (0310)     ret
08C4: 70 BF    AND   F,0xBF             
08C6: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
08C8: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
08CA: A0 06    JZ    0x08D1             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
08CC: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
08CE: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
08CF: 8F F8    JMP   0x08C8             (0351)     jmp   .Loop_PrString               ; Go get next character
08D1: 70 3F    AND   F,0x3F             
08D3: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
08D5: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
08D6: 90 65    CALL  0x093D             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
08D8: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
08D9: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
08DA: 67       ASR   A                  (0390)     asr   A
08DB: 67       ASR   A                  (0391)     asr   A
08DC: 67       ASR   A                  (0392)     asr   A
08DD: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
08DF: 90 3B    CALL  0x091C             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
08E1: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
08E2: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
08E4: 40       NOP                      (0397)     nop
08E5: 40       NOP                      (0398)     nop
08E6: 40       NOP                      (0399)     nop
08E7: 90 33    CALL  0x091C             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
08E9: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
08EA: 90 51    CALL  0x093D             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
08EC: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
08ED: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
08EE: 67       ASR   A                  (0436)     asr   A
08EF: 67       ASR   A                  (0437)     asr   A
08F0: 67       ASR   A                  (0438)     asr   A
08F1: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
08F3: 90 09    CALL  0x08FE             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
08F5: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
08F6: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
08F8: 40       NOP                      (0443)     nop
08F9: 40       NOP                      (0444)     nop
08FA: 40       NOP                      (0445)     nop
08FB: 90 01    CALL  0x08FE             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
08FD: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
08FE: 08       PUSH  A                  (0477)     push  A
08FF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0902: 26 01 80 AND   [counter|previousSecond|elapsedSeconds+1],0x80(0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0905: 51 01    MOV   A,[counter|previousSecond|elapsedSeconds+1](0480)     mov   A,[Port_2_Data_SHADE]
0907: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0909: 18       POP   A                  (0483)     pop   A
090A: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
090C: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
090E: 2A 01    OR    A,[counter|previousSecond|elapsedSeconds+1](0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0910: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0912: 53 01    MOV   [counter|previousSecond|elapsedSeconds+1],A(0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0914: 40       NOP                      (0489)     nop
0915: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0917: 53 01    MOV   [counter|previousSecond|elapsedSeconds+1],A(0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0919: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
091B: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
091C: 08       PUSH  A                  (0523)     push  A
091D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0920: 26 01 80 AND   [counter|previousSecond|elapsedSeconds+1],0x80(0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0923: 2E 01 20 OR    [counter|previousSecond|elapsedSeconds+1],0x20(0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0926: 51 01    MOV   A,[counter|previousSecond|elapsedSeconds+1](0527)     mov   A,[Port_2_Data_SHADE]
0928: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
092A: 18       POP   A                  (0530)     pop   A
092B: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
092D: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
092F: 2A 01    OR    A,[counter|previousSecond|elapsedSeconds+1](0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0931: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0933: 53 01    MOV   [counter|previousSecond|elapsedSeconds+1],A(0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0935: 40       NOP                      (0536)     NOP
0936: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0938: 53 01    MOV   [counter|previousSecond|elapsedSeconds+1],A(0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
093A: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
093C: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
093D: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
093E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0941: 26 01 80 AND   [counter|previousSecond|elapsedSeconds+1],0x80(0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0944: 51 01    MOV   A,[counter|previousSecond|elapsedSeconds+1](0574)     mov   A,[Port_2_Data_SHADE]
0946: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0948: 26 05 F0 AND   [counter|previousSecond|elapsedSeconds+5],0xF0(0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
094B: 51 05    MOV   A,[counter|previousSecond|elapsedSeconds+5](0578)     mov   A,[Port_2_DriveMode_0_SHADE]
094D: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
094F: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0951: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0953: 2E 01 40 OR    [counter|previousSecond|elapsedSeconds+1],0x40(0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0956: 51 01    MOV   A,[counter|previousSecond|elapsedSeconds+1](0584)     mov   A,[Port_2_Data_SHADE]
0958: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
095A: 40       NOP                      (0586)     NOP
                                        (0587) 
095B: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
095C: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
095E: 2E 01 50 OR    [counter|previousSecond|elapsedSeconds+1],0x50(0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0961: 51 01    MOV   A,[counter|previousSecond|elapsedSeconds+1](0593)     mov   A,[Port_2_Data_SHADE]
0963: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0965: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
0966: 40       NOP                      (0597)     nop
0967: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0969: 08       PUSH  A                  (0610)     push  A
096A: 26 01 C0 AND   [counter|previousSecond|elapsedSeconds+1],0xC0(0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
096D: 51 01    MOV   A,[counter|previousSecond|elapsedSeconds+1](0612)     mov   A,[Port_2_Data_SHADE]
096F: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0971: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0972: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0973: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0974: 2E 01 50 OR    [counter|previousSecond|elapsedSeconds+1],0x50(0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0977: 51 01    MOV   A,[counter|previousSecond|elapsedSeconds+1](0620)     mov   A,[Port_2_Data_SHADE]
0979: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
097B: 40       NOP                      (0623)     nop
097C: 40       NOP                      (0624)     nop
                                        (0625) 
097D: 26 01 C0 AND   [counter|previousSecond|elapsedSeconds+1],0xC0(0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0980: 51 01    MOV   A,[counter|previousSecond|elapsedSeconds+1](0627)     mov   A,[Port_2_Data_SHADE]
0982: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
0984: 18       POP   A                  (0630)     pop   A
0985: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0987: A0 04    JZ    0x098C             (0633)     jz    .UNLOCK
0989: 79       DEC   X                  (0634)     dec   X
098A: BF D3    JNZ   0x095E             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
098C: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
098D: 2E 05 7F OR    [counter|previousSecond|elapsedSeconds+5],0x7F(0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0990: 51 05    MOV   A,[counter|previousSecond|elapsedSeconds+5](0640)     mov   A,[Port_2_DriveMode_0_SHADE]
0992: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0994: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0996: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0998: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0999: 7F       RET                      (0646)     ret
099A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
099D: 26 05 80 AND   [counter|previousSecond|elapsedSeconds+5],0x80(0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
09A0: 2E 05 7F OR    [counter|previousSecond|elapsedSeconds+5],0x7F(0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
09A3: 26 06 80 AND   [counter|previousSecond|elapsedSeconds+6],0x80(0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
09A6: 51 05    MOV   A,[counter|previousSecond|elapsedSeconds+5](0689)     mov   A,[Port_2_DriveMode_0_SHADE]
09A8: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
09AA: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
09AC: 51 06    MOV   A,[counter|previousSecond|elapsedSeconds+6](0692)     mov   A,[Port_2_DriveMode_1_SHADE]
09AE: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
09B0: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
09B2: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
09B4: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
09B6: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
09B8: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
09BA: 50 03    MOV   A,0x3              (0701)     mov   A,03h
09BC: 9F 40    CALL  0x08FE             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
09BE: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
09C0: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
09C2: 50 03    MOV   A,0x3              (0707)     mov   A,03h
09C4: 9F 38    CALL  0x08FE             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
09C6: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
09C8: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
09CA: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
09CC: 50 03    MOV   A,0x3              (0714)     mov   A,03h
09CE: 9F 2E    CALL  0x08FE             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
09D0: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09D2: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
09D4: 50 02    MOV   A,0x2              (0720)     mov   A,02h
09D6: 9F 26    CALL  0x08FE             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
09D8: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09DA: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
09DC: 50 08    MOV   A,0x8              (0726)     mov   A,08h
09DE: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
09E0: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09E2: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
09E4: 50 01    MOV   A,0x1              (0731)     mov   A,01h
09E6: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
09E8: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09EA: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
09EC: 50 06    MOV   A,0x6              (0736)     mov   A,06h
09EE: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
09F0: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
09F2: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
09F4: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
09F6: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
09F8: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
09FA: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
09FC: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
09FE: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0A00: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0A02: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0A04: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A06: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0A08: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0A0D: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0A0F: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0A10: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0A12: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0A13: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0A15: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0A16: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0A18: 70 3F    AND   F,0x3F             
0A1A: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0A1C: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0A1D: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0A1F: 78       DEC   A                  (0828)     dec   A
0A20: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0A22: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0A2B: 08       PUSH  A                  (0871)     push  A
0A2C: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0A2E: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0A30: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0A32: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0A34: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0A36: D0 06    JNC   0x0A3D             (0877)     jnc   .Delay50u_End
0A38: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0A3A: 78       DEC   A                  (0880)     dec   A                              ; [4]
0A3B: BF FE    JNZ   0x0A3A             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0A3D: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0A3E: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0A3F: 4F       MOV   X,SP               (1015)     mov   X, SP
0A40: 10       PUSH  X                  (1016)     push  X
0A41: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
0A43: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
0A45: 70 3F    AND   F,0x3F             
0A47: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0A49: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0A4B: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0A4C: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0A4F: B0 05    JNZ   0x0A55             (1026)     jnz   .LCD_CHECK1
0A51: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
0A53: 80 11    JMP   0x0A65             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
0A55: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0A58: D0 07    JNC   0x0A60             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0A5A: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0A5C: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0A5E: 80 06    JMP   0x0A65             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0A60: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
0A62: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
0A65: 9E 6F    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0A67: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0A69: BF E2    JNZ   0x0A4C             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
0A6B: 70 3F    AND   F,0x3F             
0A6D: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0A6F: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0A70: 4F       MOV   X,SP               (1168)     mov   X, SP
0A71: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
0A73: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
0A75: 08       PUSH  A                  (1172)     push  A
0A76: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0A78: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0A7A: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
0A7C: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0A7F: B0 05    JNZ   0x0A85             (1177)     jnz   .VBG_NZ_SEG
0A81: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
0A83: 80 13    JMP   0x0A97             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
0A85: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0A88: D0 09    JNC   0x0A92             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0A8A: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0A8C: 78       DEC   A                  (1185)     dec   A
0A8D: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0A90: 80 06    JMP   0x0A97             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
0A92: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0A95: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0A97: 9E 3D    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1194)     call  LCD_WriteData                ; Write value
0A99: 18       POP   A                  (1195)     pop   A
0A9A: 78       DEC   A                  (1196)     dec   A
0A9B: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0A9D: BF D7    JNZ   0x0A75             (1198)     jnz   .VBG_LOOP
0A9F: 70 3F    AND   F,0x3F             
0AA1: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0AA3: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0AA4: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0AA5: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0AA6: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0AA7: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0AA9: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0AAB: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0AAE: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0AB1: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0AB3: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0AB5: D0 05    JNC   0x0ABB             (1251)     jnc   .VBG_SOLID
0AB7: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0AB9: 80 03    JMP   0x0ABD             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0ABB: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0ABD: 9E 17    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1257)     call  LCD_WriteData                ; character data
0ABF: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0AC1: BF EF    JNZ   0x0AB1             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0AC3: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0AC5: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0AC8: BF E5    JNZ   0x0AAE             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0ACA: 18       POP   A                  (1264)     pop  A
0ACB: 18       POP   A                  (1265)     pop  A
0ACC: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0ACE: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
0AD0: 70 3F    AND   F,0x3F             
0AD2: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0AD4: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0AE3: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0AE4: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0AE6: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0AE8: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0AEA: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0AEC: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0AEF: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0AF2: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0AF4: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0AF7: B0 05    JNZ   0x0AFD             (1332)     jnz   .BG_OTHER
0AF9: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0AFB: 80 03    JMP   0x0AFF             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0AFD: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0AFF: 9D D5    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(1338)     call  LCD_WriteData
0B01: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0B03: BF EE    JNZ   0x0AF2             (1340)     jnz   .BG_Loop2
0B05: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0B07: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0B0A: BF E4    JNZ   0x0AEF             (1343)     jnz   .BG_Loop1
                                        (1344) 
0B0C: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0B0E: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0B10: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
0B12: 70 3F    AND   F,0x3F             
0B14: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0B16: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0B17: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2Cm.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2Cm.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2Cm_Start
                                        (0031) export  _I2Cm_Start
                                        (0032) export   I2Cm_Stop
                                        (0033) export  _I2Cm_Stop
                                        (0034) export   I2Cm_fSendRepeatStart
                                        (0035) export  _I2Cm_fSendRepeatStart
                                        (0036) export   I2Cm_fSendStart
                                        (0037) export  _I2Cm_fSendStart
                                        (0038) export   I2Cm_SendStop
                                        (0039) export  _I2Cm_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2Cm_fReadBytes
                                        (0042) export  _I2Cm_bWriteBytes
                                        (0043) export  _I2Cm_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2Cm_fWrite
                                        (0046) export  _I2Cm_fWrite
                                        (0047) 
                                        (0048) export   I2Cm_bRead
                                        (0049) export  _I2Cm_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2Cm_fReadBytes
                                        (0054) export   I2Cm_bWriteBytes
                                        (0055) export   I2Cm_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2Cm_bStatus
                                        (0064) export _I2Cm_bStatus
                                        (0065) export  I2Cm_bData
                                        (0066) export _I2Cm_bData
                                        (0067) export  I2Cm_bAddr
                                        (0068) export _I2Cm_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area rtc_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2Cm_bStatus:
                                        (0076)  I2Cm_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2Cm_bData:
                                        (0078)  I2Cm_bData:                           blk   1  ; Data transfered
                                        (0079) _I2Cm_bXferCnt:
                                        (0080)  I2Cm_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2Cm_bAddr:                                     ; Bytes
                                        (0082)  I2Cm_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2Cm_bit_count:
                                        (0084)  I2Cm_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2Cm_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2Cm_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2Cm_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2Cm_Start:
                                        (0121) _I2Cm_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_0_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
0B1A: 2E 03 03 OR    [counter|previousSecond|elapsedSeconds+3],0x3(0125)     or   [Port_0_DriveMode_1_SHADE],I2Cm_SDA_pin|I2Cm_SCL_pin
0B1D: 26 02 FC AND   [counter|previousSecond|elapsedSeconds+2],0xFC(0126)     and  [Port_0_DriveMode_0_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
                                        (0127) 
                                        (0128) IF(I2Cm_DriveMode2)            
0B20: 26 04 FC AND   [counter|previousSecond|elapsedSeconds+4],0xFC(0129)     and  [Port_0_DriveMode_2_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0B23: 51 04    MOV   A,[counter|previousSecond|elapsedSeconds+4](0130)     mov  A,[Port_0_DriveMode_2_SHADE]
0B25: 60 03    MOV   REG[0x3],A         (0131)     mov  reg[I2Cm_I2CPRTDM2],A
0B27: 71 10    OR    F,0x10             
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 	M8C_SetBank1
0B29: 51 03    MOV   A,[counter|previousSecond|elapsedSeconds+3](0135)     mov  A,[Port_0_DriveMode_1_SHADE]
0B2B: 60 01    MOV   REG[0x1],A         (0136)     mov  reg[I2Cm_I2CPRTDM1],A
0B2D: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0137)     mov  A,[Port_0_DriveMode_0_SHADE]
0B2F: 60 00    MOV   REG[0x0],A         (0138)     mov  reg[I2Cm_I2CPRTDM0],A
0B31: 70 EF    AND   F,0xEF             
                                        (0139)     M8C_SetBank0
                                        (0140)                                                      ; Set both pins, low so that only the port
                                        (0141)                                                      ; mode has to be changed from a 0 to a 1
0B33: 26 00 FC AND   [counter|previousSecond|elapsedSeconds],0xFC(0142)     and  [Port_0_Data_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0B36: 51 00    MOV   A,[counter|previousSecond|elapsedSeconds](0143)     mov  A,[Port_0_Data_SHADE]
0B38: 60 00    MOV   REG[0x0],A         (0144)     mov  reg[I2Cm_I2CPRTDR],A
                                        (0145)     RAM_EPILOGUE RAM_USE_CLASS_4
0B3A: 7F       RET                      (0146)     ret
                                        (0147) .ENDSECTION
                                        (0148) 
                                        (0149) .SECTION
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;  FUNCTION NAME: I2Cm_Stop
                                        (0152) ;
                                        (0153) ;  DESCRIPTION:
                                        (0154) ;    This function performs no operation and is used for future
                                        (0155) ;    module compatibility.
                                        (0156) ;
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;
                                        (0159) ;  ARGUMENTS: none
                                        (0160) ;
                                        (0161) ;  RETURNS: none
                                        (0162) ;
                                        (0163) ;  SIDE EFFECTS:
                                        (0164) ;    The A and X registers may be modified by this or future implementations
                                        (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0168) ;    functions.
                                        (0169) ;          
                                        (0170)  I2Cm_Stop:
                                        (0171) _I2Cm_Stop:
                                        (0172)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0173)     RAM_EPILOGUE RAM_USE_CLASS_1
0B3B: 7F       RET                      (0174)     ret
0B3C: 70 BF    AND   F,0xBF             
0B3E: 62 D3 07 MOV   REG[0xD3],0x7      
0B41: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;
                                        (0185) ;  ARGUMENTS:
                                        (0186) ;  [SP-3]=> Address of slave
                                        (0187) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0188) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0189) ;  [SP-6]=> Count of bytes to read.
                                        (0190) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0191) ;           to determine if:
                                        (0192) ;             0x01 => Use RepeatStart instead of Start
                                        (0193) ;             0x02 => Don't send Stop
                                        (0194) ;
                                        (0195) ;  RETURNS:
                                        (0196) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0197) ;
                                        (0198) ;  SIDE EFFECTS:
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;          
                                        (0205) ;    Currently only the page pointer registers listed below are modified: 
                                        (0206) ;          CUR_PP
                                        (0207) ;		   IDX_PP
                                        (0208) ;
                                        (0209) SlaveAdr:     equ  -3
                                        (0210) RxArrayLSB:   equ  -4
                                        (0211) RxArrayMSB:   equ  -5
                                        (0212) RxByteCount:  equ  -6
                                        (0213) RxMode:       equ  -7
                                        (0214) 
                                        (0215) _I2Cm_fReadBytes:
                                        (0216)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0217)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0218)     RAM_SETPAGE_IDX2STK
                                        (0219)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B44: 4F       MOV   X,SP               (0220)     mov   X, SP
                                        (0221)     
0B45: 52 FD    MOV   A,[X-3]            (0222)     mov   A, [X+SlaveAdr]
0B47: 64       ASL   A                  (0223)     asl   A                                                ; Shift address to the left to make
                                        (0224)                                                            ; a complete byte with the R/W bit.
0B48: 29 01    OR    A,0x1              (0225)     or    A,0x01                                           ; OR the address with the Read bit.
0B4A: 55 D0 00 MOV   [menu+4],0x0       (0226)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
0B4D: 48 F9 01 TST   [X-7],0x1          (0227)     tst   [x+RxMode],I2Cm_RepStart
0B50: B0 05    JNZ   0x0B56             (0228)     jnz   DoRestartRx
0B52: 91 3B    CALL  0x0C8F             (0229)     call  I2C_DoStart                                      ; Send a start and address.
0B54: 80 03    JMP   0x0B58             (0230)     jmp   CheckRxAck
                                        (0231) DoRestartRx:
0B56: 91 01    CALL  0x0C59             (0232)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
0B58: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0233) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0234)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B5B: 47 D0 01 TST   [menu+4],0x1       (0235)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B5E: A0 2A    JZ    0x0B89             (0236)     jz    End_RD_Loop
                                        (0237)                                                            ; Send ACK until last byte
0B60: 2E D0 10 OR    [menu+4],0x10      (0238)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0239) RD_Loop:                                                   ; Loop through bytes
0B63: 10       PUSH  X                  (0240)     push  x                                                ; Save X for later
0B64: 7B FA    DEC   [X-6]              (0241)     dec   [x+RxByteCount]                                  ; Decrement data counter
0B66: B0 04    JNZ   0x0B6B             (0242)     jnz   I2C_READ
0B68: 26 D0 EF AND   [menu+4],0xEF      (0243)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0244) I2C_READ:
0B6B: 91 F7    CALL  0x0D64             (0245)     call  I2Cm_read                                        ; Read a byte
0B6D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0246)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B70: 20       POP   X                  (0247)     pop   x                                                ; Restore x
0B71: 10       PUSH  X                  (0248)     push  x
0B72: 52 FC    MOV   A,[X-4]            (0249)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
0B74: 08       PUSH  A                  (0250)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0251) IF SYSTEM_LARGE_MEMORY_MODEL
0B75: 52 FB    MOV   A,[X-5]            (0252)     mov   A,[x+RxArrayMSB]
0B77: 60 D3    MOV   REG[0xD3],A        
                                        (0253)     RAM_SETPAGE_IDX A
                                        (0254) ENDIF
0B79: 20       POP   X                  (0255)     pop   x                                                ; restores the index pointer pushed a few lines above
0B7A: 51 D1    MOV   A,[menu+5]         (0256)     mov   a,[I2Cm_bData]                                   ; Save data in data array
0B7C: 54 00    MOV   [X+0],A            (0257)     mov   [x],a                                            ; Put read data in array
0B7E: 20       POP   X                  (0258)     pop   x                                                ; Restore the original pointer (for the subrtn params)
0B7F: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0259)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
0B82: 77 FC    INC   [X-4]              (0260)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
0B84: 48 FA FF TST   [X-6],0xFF         (0261)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
0B87: BF DB    JNZ   0x0B63             (0262)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0263) End_RD_Loop:                                               ; Endloop
0B89: 48 F9 02 TST   [X-7],0x2          (0264)     tst   [x+RxMode],I2Cm_NoStop
0B8C: B0 03    JNZ   0x0B90             (0265)     jnz   SkipRxStop
0B8E: 92 6F    CALL  _I2Cm_SendStop     (0266)     call  I2Cm_SendStop
0B90: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0267) SkipRxStop:
                                        (0268)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B93: 50 00    MOV   A,0x0              (0269)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0B95: 47 D0 01 TST   [menu+4],0x1       (0270)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
0B98: A0 03    JZ    0x0B9C             (0271)     jz    End_ReadBytes
0B9A: 50 01    MOV   A,0x1              (0272)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
0B9C: 70 3F    AND   F,0x3F             
0B9E: 71 C0    OR    F,0xC0             
                                        (0273) End_ReadBytes:
                                        (0274)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0275)     RAM_EPILOGUE RAM_USE_CLASS_4
0BA0: 7F       RET                      (0276)     ret
0BA1: 70 BF    AND   F,0xBF             
0BA3: 62 D3 07 MOV   REG[0xD3],0x7      
0BA6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      A => Address of slave
                                        (0290) ;      X => Pointer to other arguments.
                                        (0291) ;    [x] => LSB of Array address to put data in.
                                        (0292) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0293) ;  [X-2] => Count of bytes to read.
                                        (0294) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0295) ;           to determine if:
                                        (0296) ;             0x01 => Use RepeatStart instead of Start
                                        (0297) ;             0x02 => Don't send Stop
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309) RxArray_X:      equ   0
                                        (0310) RxByteCount_X:  equ  -2
                                        (0311) RxMode_X:       equ  -3
                                        (0312) 
                                        (0313)  I2Cm_fReadBytes:		                 
                                        (0314)     asl   A                                            ; Shift address to the left to make
                                        (0315)                                                        ; a complete byte with the R/W bit.
                                        (0316)     or    A,0x01                                       ; OR the address with the Read bit.
                                        (0317)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
                                        (0318)     tst   [x+RxMode_X],I2Cm_RepStart
                                        (0319)     jnz   DoRestartRxSmm
                                        (0320)     call  I2C_DoStart                                      ; Send a start and address.
                                        (0321)     jmp   CheckRxAckSmm
                                        (0322) DoRestartRxSmm:
                                        (0323)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0324) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (0325)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0326)     jz    End_RD_LoopSmm
                                        (0327)                                                            ; Send ACK until last byte
                                        (0328)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0329) RD_LoopSmm:                                                   ; Loop through bytes
                                        (0330)     push  x                                                ; Save X for later
                                        (0331)     dec   [x+RxByteCount_X]                                ; Decrement data counter
                                        (0332)     jnz   I2C_READSmm
                                        (0333)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0334) I2C_READSmm:
                                        (0335)     call  I2Cm_read                                        ; Read a byte
                                        (0336)     pop   x                                                ; Restore x
                                        (0337)     push  x                                                ; Store x
                                        (0338)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
                                        (0339)     mov   a,[I2Cm_bData]                                   ; Save data in data array
                                        (0340)     mov   [x+RxArray_X],a                                  ; Put read data in array
                                        (0341)     pop   x                                                ; Restore the original pointer
                                        (0342)     inc   [x+RxArray_X]                                    ; Advance data pointer
                                        (0343)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
                                        (0344)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0345) End_RD_LoopSmm:                                            ; Endloop
                                        (0346)     tst   [x+RxMode_X],I2Cm_NoStop
                                        (0347)     jnz   SkipRxStopSmm
                                        (0348)     call  I2Cm_SendStop
                                        (0349) SkipRxStopSmm:
                                        (0350)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
                                        (0351)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
                                        (0352)     jz    End_ReadBytesSmm
                                        (0353)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0354) End_ReadBytesSmm:
                                        (0355)     ret
                                        (0356) .ENDSECTION
                                        (0357) ENDIF
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    Write multiple data bits to slave device.
                                        (0365) ;
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;
                                        (0368) ;  ARGUMENTS:
                                        (0369) ; [SP-3] => Address of slave
                                        (0370) ; [SP-4] => LSB of Array address to put data in.
                                        (0371) ; [SP-5] => MSB of Array address to put data in.
                                        (0372) ; [SP-6] => Count of bytes to write.
                                        (0373) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0374) ;           to determine if:
                                        (0375) ;              0x01 => Use RePeatStart instead of Start
                                        (0376) ;              0x02 => Don't send Stop
                                        (0377) ;
                                        (0378) ;
                                        (0379) ;  RETURNS:
                                        (0380) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0381) ;
                                        (0382) ;  SIDE EFFECTS:
                                        (0383) ;    The A and X registers may be modified by this or future implementations
                                        (0384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0387) ;    functions.
                                        (0388) ;          
                                        (0389) ;    Currently only the page pointer registers listed below are modified: 
                                        (0390) ;          CUR_PP
                                        (0391) ;		   IDX_PP
                                        (0392) ;
                                        (0393) TxSlaveAdr:   equ  -3
                                        (0394) TxArrayLSB:   equ  -4
                                        (0395) TxArrayMSB:   equ  -5
                                        (0396) TxByteCount:  equ  -6
                                        (0397) TxMode:       equ  -7
                                        (0398) 
                                        (0399) _I2Cm_bWriteBytes:
                                        (0400)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0401)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0402)     RAM_SETPAGE_IDX2STK
                                        (0403)     RAM_SETPAGE_CUR >I2Cm_bStatus
0BA9: 4F       MOV   X,SP               (0404)     mov   X, SP
                                        (0405)     
0BAA: 52 FD    MOV   A,[X-3]            (0406)     mov   A,[x+TxSlaveAdr]
0BAC: 64       ASL   A                  (0407)     asl   A                                           ; Shift address to the left to make
                                        (0408)                                                       ; a complete byte with the R/W bit.
                                        (0409)                                                       ; The ASL takes care of clearing bit 0.
0BAD: 55 D0 00 MOV   [menu+4],0x0       (0410)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0411) 
                                        (0412) 
0BB0: 48 F9 01 TST   [X-7],0x1          (0413)     tst   [x+TxMode],I2Cm_RepStart
0BB3: B0 05    JNZ   0x0BB9             (0414)     jnz   DoRestartTx
0BB5: 90 D8    CALL  0x0C8F             (0415)     call  I2C_DoStart                                 ; Send a start and address.
0BB7: 80 03    JMP   0x0BBB             (0416)     jmp   DoTxAck
                                        (0417) DoRestartTx:
0BB9: 90 9E    CALL  0x0C59             (0418)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0BBB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0419) DoTxAck:
                                        (0420)     RAM_SETPAGE_CUR >I2Cm_bStatus
0BBE: 55 D2 00 MOV   [menu+6],0x0       (0421)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
0BC1: 47 D0 01 TST   [menu+4],0x1       (0422)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
0BC4: A0 27    JZ    0x0BEC             (0423)     jz    End_WR_Loop
0BC6: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0424) WR_Loop:                                              ; Loop through bytes
                                        (0425)     RAM_SETPAGE_IDX2STK
0BC9: 10       PUSH  X                  (0426)     push  x                                           ; Save X for later
0BCA: 52 FC    MOV   A,[X-4]            (0427)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
0BCC: 08       PUSH  A                  (0428) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0429) IF SYSTEM_LARGE_MEMORY_MODEL
0BCD: 52 FB    MOV   A,[X-5]            (0430)     mov   a,[x+TxArrayMSB]
0BCF: 60 D3    MOV   REG[0xD3],A        
                                        (0431)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0432) ENDIF
0BD1: 20       POP   X                  (0433)     pop   x                                           ; this recovers the address previously stoed on teh stack
0BD2: 52 00    MOV   A,[X+0]            (0434)     mov   a,[x]                                       ; Get data pointer to by X
0BD4: 53 D1    MOV   [menu+5],A         (0435)     mov   [I2Cm_bData],a                              ; Save data in temp location
0BD6: 90 ED    CALL  0x0CC5             (0436)     call  I2Cm_write                                  ; Write the data
0BD8: 62 D0 00 MOV   REG[0xD0],0x0      
0BDB: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0437) 	RAM_SETPAGE_CUR >I2Cm_bStatus
                                        (0438)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
0BDE: 20       POP   X                  (0439)     pop   x
0BDF: 47 D0 01 TST   [menu+4],0x1       (0440)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0BE2: A0 0E    JZ    0x0BF1             (0441)     jz    DoWBstop                                    ; Stop transfer if NAKed
0BE4: 76 D2    INC   [menu+6]           (0442)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0BE6: 77 FC    INC   [X-4]              (0443)     inc   [x+TxArrayLSB]                              ; Advance pointer
0BE8: 7B FA    DEC   [X-6]              (0444)     dec   [x+TxByteCount]                             ; Decrement byte counter
0BEA: BF DB    JNZ   0x0BC6             (0445)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0446) End_WR_Loop:                                          ; Endloop
0BEC: 48 F9 02 TST   [X-7],0x2          (0447)     tst   [x+TxMode],I2Cm_NoStop
0BEF: B0 03    JNZ   0x0BF3             (0448)     jnz   SkipTxStop
                                        (0449) DoWBstop:
0BF1: 92 0C    CALL  _I2Cm_SendStop     (0450)     call  I2Cm_SendStop
0BF3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0451) SkipTxStop:
                                        (0452) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0BF6: 51 D2    MOV   A,[menu+6]         (0453)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
0BF8: 70 3F    AND   F,0x3F             
0BFA: 71 C0    OR    F,0xC0             
                                        (0454) End_WriteBytes:
                                        (0455)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0456)     RAM_EPILOGUE RAM_USE_CLASS_4
0BFC: 7F       RET                      (0457)     ret
0BFD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0458) .ENDSECTION
                                        (0459) 
                                        (0460) 
                                        (0461) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;    Write multiple data bits to slave device.
                                        (0468) ;
                                        (0469) ;-----------------------------------------------------------------------------
                                        (0470) ;
                                        (0471) ;  ARGUMENTS:
                                        (0472) ;     A => Address of slave
                                        (0473) ;     X => Pointer to other arguments.
                                        (0474) ;   [x] => LSB of Array address to put data in.
                                        (0475) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0476) ; [X-2] => Count of bytes to write.
                                        (0477) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0478) ;          to determine if:
                                        (0479) ;              0x01 => Use RePeatStart instead of Start
                                        (0480) ;              0x02 => Don't send Stop
                                        (0481) ;
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) TxArray_X:      equ   0
                                        (0494) TxByteCount_X:  equ  -2
                                        (0495) TxMode_X:       equ  -3
                                        (0496) 
                                        (0497)  I2Cm_bWriteBytes:						       
                                        (0498)     asl   A                                           ; Shift address to the left to make
                                        (0499)                                                       ; a complete byte with the R/W bit.
                                        (0500)                                                       ; The ASL takes care of clearing bit 0.
                                        (0501)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0502) 
                                        (0503) 
                                        (0504)     tst   [x+TxMode_X],I2Cm_RepStart
                                        (0505)     jnz   DoRestartTxSmm
                                        (0506)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0507)     jmp   DoTxAckSmm
                                        (0508) DoRestartTxSmm:
                                        (0509)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0510) DoTxAckSmm:
                                        (0511)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
                                        (0512)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
                                        (0513)     jz    End_WR_LoopSmm
                                        (0514) WR_LoopSmm:                                              ; Loop through bytes
                                        (0515)     push  x                                           ; Save X for later
                                        (0516)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
                                        (0517)     mov   a,[x]                                       ; Get data pointer to by X
                                        (0518)     mov   [I2Cm_bData],a                              ; Save data in temp location
                                        (0519)     call  I2Cm_write                                  ; Write the data
                                        (0520)     pop   x
                                        (0521)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0522)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
                                        (0523)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
                                        (0524)     inc   [x+TxArray_X]                                 ; Advance pointer
                                        (0525)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
                                        (0526)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0527) End_WR_LoopSmm:                                          ; Endloop
                                        (0528)     tst   [x+TxMode_X],I2Cm_NoStop
                                        (0529)     jnz   SkipTxStopSmm
                                        (0530) DoWBstopSmm:
                                        (0531)     call  I2Cm_SendStop
                                        (0532) SkipTxStopSmm:
                                        (0533)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0534) End_WriteBytesSmm:
                                        (0535)     ret
                                        (0536) .ENDSECTION
                                        (0537) ENDIF
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;    Write multiple data bits to slave device from ROM
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547) ;
                                        (0548) ;  ARGUMENTS:
                                        (0549) ;   [SP-3] => Address of slave
                                        (0550) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0551) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0552) ;   [SP-6] => Count of bytes to write.
                                        (0553) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0554) ;            to determine if:
                                        (0555) ;               0x01 => Use RepeatStart instead of Start
                                        (0556) ;               0x02 => Don't send Stop
                                        (0557) ;
                                        (0558) ;  RETURNS:
                                        (0559) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0560) ;
                                        (0561) ;  SIDE EFFECTS:
                                        (0562) ;    The A and X registers may be modified by this or future implementations
                                        (0563) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0564) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0565) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0566) ;    functions.
                                        (0567) ;          
                                        (0568) ;    Currently only the page pointer registers listed below are modified: 
                                        (0569) ;          CUR_PP
                                        (0570) ;
                                        (0571) TxCSlaveAdr:   equ  -3
                                        (0572) TxCArrayLSB:   equ  -4
                                        (0573) TxCArrayMSB:   equ  -5
                                        (0574) TxCByteCount:  equ  -6
                                        (0575) TxCMode:       equ  -7
                                        (0576) 
                                        (0577) _I2Cm_bWriteCBytes:
                                        (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0579)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0580)     RAM_SETPAGE_CUR >I2Cm_bStatus
0C00: 4F       MOV   X,SP               (0581)     mov   X, SP
                                        (0582) 
0C01: 52 FD    MOV   A,[X-3]            (0583)     mov   A,[x+TxCSlaveAdr]
0C03: 64       ASL   A                  (0584)     asl   A                                           ; Shift address to the left to make
                                        (0585)                                                       ; a complete byte with the R/W bit.
                                        (0586)                                                       ; The ASL takes care of clearing bit 0.
0C04: 55 D0 00 MOV   [menu+4],0x0       (0587)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0588) 
                                        (0589) 
0C07: 48 F9 01 TST   [X-7],0x1          (0590)     tst   [x+TxCMode],I2Cm_RepStart                   ; Check if a Start or RepeatStart
0C0A: B0 05    JNZ   0x0C10             (0591)     jnz   DoCRestartTx                                ; should executed.
0C0C: 90 81    CALL  0x0C8F             (0592)     call  I2C_DoStart                                 ; Send a start and address.
0C0E: 80 03    JMP   0x0C12             (0593)     jmp   DoCTxAck
                                        (0594) DoCRestartTx:
0C10: 90 47    CALL  0x0C59             (0595)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0C12: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0596) 
                                        (0597) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0598) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0C15: 55 D2 00 MOV   [menu+6],0x0       (0599)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
0C18: 47 D0 01 TST   [menu+4],0x1       (0600)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0C1B: A0 20    JZ    0x0C3C             (0601)     jz    End_WRC_Loop
                                        (0602) WRC_Loop:                                             ; Loop through bytes
0C1D: 10       PUSH  X                  (0603)     push  x                                           ; Save X for later
                                        (0604) 
0C1E: 52 FB    MOV   A,[X-5]            (0605)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
0C20: 59 FC    MOV   X,[X-4]            (0606)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
0C22: 28       ROMX                     (0607)     romx                                              ; Put ROM Data in a
0C23: 53 D1    MOV   [menu+5],A         (0608)     mov   [I2Cm_bData],a                              ; Save data in temp location
0C25: 90 9E    CALL  0x0CC5             (0609)     call  I2Cm_write                                  ; Write the data
0C27: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0610)     RAM_SETPAGE_CUR >I2Cm_bStatus
0C2A: 20       POP   X                  (0611)     pop   x
0C2B: 47 D0 01 TST   [menu+4],0x1       (0612)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0C2E: A0 12    JZ    0x0C41             (0613)     jz    DoWCBstop                                    ; Stop transfer if NAKed
0C30: 76 D2    INC   [menu+6]           (0614)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0C32: 77 FC    INC   [X-4]              (0615)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
0C34: D0 03    JNC   0x0C38             (0616)     jnc   DecBCnt
0C36: 77 FB    INC   [X-5]              (0617)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0618) 
                                        (0619) DecBCnt:
0C38: 7B FA    DEC   [X-6]              (0620)     dec   [x+TxCByteCount]                            ; Decrement byte counter
0C3A: BF E2    JNZ   0x0C1D             (0621)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0622) End_WRC_Loop:                                         ; Endloop
0C3C: 48 F9 02 TST   [X-7],0x2          (0623)     tst   [x+TxCMode],I2Cm_NoStop
0C3F: B0 03    JNZ   0x0C43             (0624)     jnz   SkipTxCStop
                                        (0625) DoWCBstop:
0C41: 91 BC    CALL  _I2Cm_SendStop     (0626)     call  I2Cm_SendStop
0C43: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0627) SkipTxCStop:
                                        (0628)     RAM_SETPAGE_CUR >I2Cm_bStatus
0C46: 51 D2    MOV   A,[menu+6]         (0629)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
0C48: 70 3F    AND   F,0x3F             
0C4A: 71 C0    OR    F,0xC0             
                                        (0630) End_WriteCBytes:
                                        (0631)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
0C4C: 7F       RET                      (0633)     ret
                                        (0634) .ENDSECTION
                                        (0635) 
                                        (0636) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0637) .SECTION
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0640) ;
                                        (0641) ;  DESCRIPTION:
                                        (0642) ;    Write multiple data bits to slave device from ROM
                                        (0643) ;
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;      A => Address of slave
                                        (0648) ;      X => Pointer to other arguments.
                                        (0649) ;     [x] => LSB of ROM Array address to put data in.
                                        (0650) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0651) ;   [X-2] => Count of bytes to write.
                                        (0652) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0653) ;            to determine if:
                                        (0654) ;               0x01 => Use RepeatStart instead of Start
                                        (0655) ;               0x02 => Don't send Stop
                                        (0656) ;
                                        (0657) ;  RETURNS:
                                        (0658) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0659) ;
                                        (0660) ;  SIDE EFFECTS:
                                        (0661) ;    The A and X registers may be modified by this or future implementations
                                        (0662) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0663) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0664) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0665) ;    functions.
                                        (0666) ;          
                                        (0667) TxCArrayLSB_x:   equ   0
                                        (0668) TxCArrayMSB_x:   equ  -1
                                        (0669) TxCByteCount_x:  equ  -2
                                        (0670) TxCMode_x:       equ  -3
                                        (0671) 
                                        (0672)  I2Cm_bWriteCBytes:					        
                                        (0673)     asl   A                                           ; Shift address to the left to make
                                        (0674)                                                       ; a complete byte with the R/W bit.
                                        (0675)                                                       ; The ASL takes care of clearing bit 0.
                                        (0676)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0677) 
                                        (0678) 
                                        (0679)     tst   [x+TxCMode_x],I2Cm_RepStart                 ; Check if a Start or RepeatStart
                                        (0680)     jnz   DoCRestartTxSmm                                ; should executed.
                                        (0681)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0682)     jmp   DoCTxAckSmm
                                        (0683) DoCRestartTxSmm:
                                        (0684)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0685) 
                                        (0686) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
                                        (0687)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
                                        (0688)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0689)     jz    End_WRC_LoopSmm
                                        (0690) WRC_LoopSmm:                                             ; Loop through bytes
                                        (0691)     push  x                                           ; Save X for later
                                        (0692) 
                                        (0693)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
                                        (0694)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
                                        (0695)     romx                                              ; Put ROM Data in a
                                        (0696)     mov   [I2Cm_bData],a                              ; Save data in temp location
                                        (0697)     call  I2Cm_write                                  ; Write the data
                                        (0698)     pop   x
                                        (0699)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0700)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
                                        (0701)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
                                        (0702)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
                                        (0703)     jnc   DecBCntSmm
                                        (0704)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0705) 
                                        (0706) DecBCntSmm:
                                        (0707)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
                                        (0708)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0709) End_WRC_LoopSmm:                                         ; Endloop
                                        (0710)     tst   [x+TxCMode_x],I2Cm_NoStop
                                        (0711)     jnz   SkipTxCStopSmm
                                        (0712) DoWCBstopSmm:
                                        (0713)     call  I2Cm_SendStop
                                        (0714) SkipTxCStopSmm:
                                        (0715)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0716) End_WriteCBytesSmm:
                                        (0717)     ret
                                        (0718) .ENDSECTION
                                        (0719) ENDIF
                                        (0720) 
                                        (0721) .SECTION
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;  FUNCTION NAME: I2Cm_fSendRepeatStart
                                        (0724) ;
                                        (0725) ;  DESCRIPTION:
                                        (0726) ;    Send repeated start condition and send slave address.
                                        (0727) ;
                                        (0728) ;-----------------------------------------------------------------------------
                                        (0729) ;
                                        (0730) ;  ARGUMENTS:
                                        (0731) ;    I2Cm_bAddr - Contains the slave address and transfer direction.
                                        (0732) ;
                                        (0733) ;  RETURNS:
                                        (0734) ;    I2Cm_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0735) ;
                                        (0736) ;  SIDE EFFECTS:
                                        (0737) ;    The A and X registers may be modified by this or future implementations
                                        (0738) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0739) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0740) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0741) ;    functions.
                                        (0742) ;          
                                        (0743) ;    Currently only the page pointer registers listed below are modified: 
                                        (0744) ;          CUR_PP
                                        (0745) ;
                                        (0746) ;  THEORY of OPERATION or PROCEDURE:
                                        (0747) ;    Prepare to send start by setting SCl and SDA high.
                                        (0748) ;    must be followed directly by I2Cm_start.
                                        (0749) ;
                                        (0750)  I2Cm_fSendRepeatStart:
                                        (0751) _I2Cm_fSendRepeatStart:
                                        (0752)     RAM_PROLOGUE RAM_USE_CLASS_4
0C4D: 64       ASL   A                  (0753)     asl   a                                                ; Shift address to the left
0C4E: 79       DEC   X                  (0754)     dec   x                                                ; If zero, C flag will be set
0C4F: D0 04    JNC   0x0C54             (0755)     jnc   .setRead                                ; Do a write if zero
0C51: 90 06    CALL  0x0C59             (0756)     call  I2C_DoRepeatStart
                                        (0757)     RAM_EPILOGUE RAM_USE_CLASS_4
0C53: 7F       RET                      (0758)     ret
                                        (0759) .setRead:
0C54: 29 01    OR    A,0x1              (0760)     or    a,0x01                                           ; Set Read flag
0C56: 90 01    CALL  0x0C59             (0761)     call  I2C_DoRepeatStart
                                        (0762)     RAM_EPILOGUE RAM_USE_CLASS_4
0C58: 7F       RET                      (0763)     ret  
0C59: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0764) 
                                        (0765) I2C_DoRepeatStart:
                                        (0766)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0767)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
0C5C: 08       PUSH  A                  (0768)     push  a
0C5D: 71 10    OR    F,0x10             
                                        (0769)     M8C_SetBank1
0C5F: 2E 02 02 OR    [counter|previousSecond|elapsedSeconds+2],0x2(0770)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin          ; Assert SCL low
0C62: 26 02 FE AND   [counter|previousSecond|elapsedSeconds+2],0xFE(0771)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0C65: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0772)     mov   A,[Port_0_DriveMode_0_SHADE]
0C67: 60 00    MOV   REG[0x0],A         (0773)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0774) 
                                        (0775)                                                            ; Delay 3/4 period
0C69: 50 0C    MOV   A,0xC              (0776)     mov   A,I2Cm_delay3qtr
0C6B: 91 C4    CALL  0x0E31             (0777)     call  I2Cm_delay
                                        (0778)                                                            ; Release SCL high
0C6D: 26 02 FD AND   [counter|previousSecond|elapsedSeconds+2],0xFD(0779)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C70: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0780)     mov   A,[Port_0_DriveMode_0_SHADE]
0C72: 60 00    MOV   REG[0x0],A         (0781)     mov   reg[I2Cm_I2CPRTDM0],A
0C74: 70 EF    AND   F,0xEF             
                                        (0782) 
                                        (0783)     M8C_SetBank0
                                        (0784) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0785)                                                            ; states adde by slave
0C76: 49 00 02 TST   REG[0x0],0x2       (0786)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0C79: AF FC    JZ    0x0C76             (0787)     jz    clockstretch1
                                        (0788) 
0C7B: 50 0C    MOV   A,0xC              (0789)     mov   A,I2Cm_delay3qtr                                 ; Delay 1/2 period
0C7D: 91 B2    CALL  0x0E31             (0790)     call  I2Cm_delay
0C7F: 18       POP   A                  (0791)     pop   a
0C80: 90 0D    CALL  0x0C8F             (0792)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0793)     RAM_EPILOGUE RAM_USE_CLASS_4
0C82: 7F       RET                      (0794)     ret
                                        (0795) .ENDSECTION
                                        (0796) 
                                        (0797) .SECTION
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;  FUNCTION NAME: I2Cm_fSendStart
                                        (0800) ;
                                        (0801) ;  DESCRIPTION:
                                        (0802) ;    Generates start condition and sends slave address.
                                        (0803) ;
                                        (0804) ;-----------------------------------------------------------------------------
                                        (0805) ;
                                        (0806) ;  ARGUMENTS:
                                        (0807) ;    A => Contains the slave address.
                                        (0808) ;
                                        (0809) ;  RETURNS:
                                        (0810) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0811) ;
                                        (0812) ;  SIDE EFFECTS:
                                        (0813) ;    The A and X registers may be modified by this or future implementations
                                        (0814) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0815) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0816) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0817) ;    functions.
                                        (0818) ;          
                                        (0819) ;    Currently only the page pointer registers listed below are modified: 
                                        (0820) ;          CUR_PP
                                        (0821) ;
                                        (0822) ;  THEORY of OPERATION or PROCEDURE:
                                        (0823) ;   Send start by setting SDA low while SCL is high. Set
                                        (0824) ;   SCL low in preparation to send address. Must be followed
                                        (0825) ;   by I2Cm_write.
                                        (0826) ;
                                        (0827)  I2Cm_fSendStart:
                                        (0828) _I2Cm_fSendStart:
                                        (0829)     RAM_PROLOGUE RAM_USE_CLASS_4
0C83: 64       ASL   A                  (0830)     asl   a                                                     ; Shift address to the left
0C84: 79       DEC   X                  (0831)     dec   x                                                     ; If zero, C flag will be set
0C85: D0 04    JNC   0x0C8A             (0832)     jnc   .SetRead
0C87: 90 06    CALL  0x0C8F             (0833)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0834)     RAM_EPILOGUE RAM_USE_CLASS_4
0C89: 7F       RET                      (0835)     ret
                                        (0836) .SetRead:
0C8A: 29 01    OR    A,0x1              (0837)     or    a,0x01                                                ; Set Read flag
0C8C: 90 01    CALL  0x0C8F             (0838)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0C8E: 7F       RET                      (0840)     ret
0C8F: 62 D0 00 MOV   REG[0xD0],0x0      
0C92: 71 10    OR    F,0x10             
                                        (0841) 
                                        (0842) I2C_DoStart:
                                        (0843)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0844)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0845)     M8C_SetBank1
0C94: 08       PUSH  A                  (0846)     push  A                                                     ; Save the slave address
0C95: 2E 02 01 OR    [counter|previousSecond|elapsedSeconds+2],0x1(0847)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin               ; Assert SDA low
0C98: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0848)     mov   A,[Port_0_DriveMode_0_SHADE]
0C9A: 60 00    MOV   REG[0x0],A         (0849)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0850) 
0C9C: 50 05    MOV   A,0x5              (0851)     mov   A,I2Cm_delayhalf                                      ; Delay 1/2 period
0C9E: 91 91    CALL  0x0E31             (0852)     call  I2Cm_delay
0CA0: 18       POP   A                  (0853)     pop   A                                                     ; Restore slave address to A
0CA1: 70 EF    AND   F,0xEF             
0CA3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0854)     M8C_SetBank0
                                        (0855)     RAM_SETPAGE_CUR >I2Cm_bData
0CA6: 53 D1    MOV   [menu+5],A         (0856)     mov   [I2Cm_bData],A
0CA8: 62 D0 00 MOV   REG[0xD0],0x0      
0CAB: 71 10    OR    F,0x10             
                                        (0857) 
                                        (0858)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0859)     M8C_SetBank1
0CAD: 2E 02 02 OR    [counter|previousSecond|elapsedSeconds+2],0x2(0860)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin               ; Set SCL low
0CB0: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0861)     mov   A,[Port_0_DriveMode_0_SHADE]
0CB2: 60 00    MOV   REG[0x0],A         (0862)     mov   reg[I2Cm_I2CPRTDM0],A
0CB4: 70 EF    AND   F,0xEF             
                                        (0863)     M8C_SetBank0
                                        (0864) 
0CB6: 50 02    MOV   A,0x2              (0865)     mov   A,I2Cm_delayqtr                                       ; Delay 1/4 period
0CB8: 91 77    CALL  0x0E31             (0866)     call  I2Cm_delay
0CBA: 90 09    CALL  0x0CC5             (0867)     call   I2Cm_write                                           ; Write the byte.
                                        (0868)     RAM_EPILOGUE RAM_USE_CLASS_4
0CBC: 7F       RET                      (0869)     ret
0CBD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0870) .ENDSECTION
                                        (0871) 
                                        (0872) .SECTION
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;  FUNCTION NAME: I2Cm_fWrite
                                        (0875) ;
                                        (0876) ;  DESCRIPTION:
                                        (0877) ;    Writes a byte to the I2C master bus.
                                        (0878) ;
                                        (0879) ;-----------------------------------------------------------------------------
                                        (0880) ;
                                        (0881) ;  ARGUMENTS:
                                        (0882) ;    A contains Data to be written to I2C slave.
                                        (0883) ;
                                        (0884) ;  RETURNS:
                                        (0885) ;    1 If ACKed, else 0
                                        (0886) ;
                                        (0887) ;  SIDE EFFECTS:
                                        (0888) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0889) ;
                                        (0890) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0891) ;
                                        (0892) ;  FUNCTION NAME: I2Cm_write
                                        (0893) ;
                                        (0894) ;  DESCRIPTION:
                                        (0895) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0896) ;
                                        (0897) ;  ARGUMENTS:
                                        (0898) ;    Reg A contains slave address.
                                        (0899) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Send data byte to slave. Must be followed by I2Cm_get_ack.
                                        (0915) ;
                                        (0916) I2Cm_fWrite:
                                        (0917) _I2Cm_fWrite:
                                        (0918)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0919)     RAM_SETPAGE_CUR >I2Cm_bData
0CC0: 53 D1    MOV   [menu+5],A         (0920)     mov   [I2Cm_bData],A                                   ; Put data in bData
0CC2: 90 01    CALL  0x0CC5             (0921)     call  I2Cm_write
                                        (0922)     RAM_EPILOGUE RAM_USE_CLASS_4
0CC4: 7F       RET                      (0923)     ret
0CC5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0924) 
                                        (0925) I2Cm_write:
                                        (0926) _I2Cm_write:
                                        (0927)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0928)     RAM_SETPAGE_CUR >I2Cm_bit_count
                                        (0929)     
0CC8: 55 D3 08 MOV   [menu+7],0x8       (0930)     mov   [I2Cm_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0931) writenextbit:
0CCB: 7A D3    DEC   [menu+7]           (0932)     dec   [I2Cm_bit_count]
0CCD: 62 D0 00 MOV   REG[0xD0],0x0      
0CD0: 71 10    OR    F,0x10             
                                        (0933) 
                                        (0934)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0935)                                                            ; Assert SCL low
                                        (0936)     M8C_SetBank1
0CD2: 2E 02 02 OR    [counter|previousSecond|elapsedSeconds+2],0x2(0937)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0CD5: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0938)     mov   A,[Port_0_DriveMode_0_SHADE]
0CD7: 60 00    MOV   REG[0x0],A         (0939)     mov   reg[I2Cm_I2CPRTDM0],A
0CD9: 70 EF    AND   F,0xEF             
0CDB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0940)     M8C_SetBank0
                                        (0941) 
                                        (0942)     RAM_SETPAGE_CUR >I2Cm_bit_count
0CDE: 6B D1    RLC   [menu+5]           (0943)     rlc   [I2Cm_bData]
0CE0: 62 D0 00 MOV   REG[0xD0],0x0      
0CE3: 71 10    OR    F,0x10             
                                        (0944)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0945)     M8C_SetBank1
0CE5: C0 0A    JC    0x0CF0             (0946)     jc    write_bit                                        ; Assert SDA low for data 0    
0CE7: 2E 02 01 OR    [counter|previousSecond|elapsedSeconds+2],0x1(0947)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0CEA: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0948)     mov   A,[Port_0_DriveMode_0_SHADE]
0CEC: 60 00    MOV   REG[0x0],A         (0949)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0950) 
0CEE: 80 08    JMP   0x0CF7             (0951)     jmp   writestartclock
                                        (0952) write_bit:                                                 ; Release SDA high for data 1
0CF0: 26 02 FE AND   [counter|previousSecond|elapsedSeconds+2],0xFE(0953)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin      
0CF3: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0954)     mov   A,[Port_0_DriveMode_0_SHADE]
0CF5: 60 00    MOV   REG[0x0],A         (0955)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0956) 
                                        (0957) writestartclock:
0CF7: 50 05    MOV   A,0x5              (0958)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0CF9: 91 36    CALL  0x0E31             (0959)     call  I2Cm_delay
                                        (0960)                                                            ; Release SCL High
0CFB: 26 02 FD AND   [counter|previousSecond|elapsedSeconds+2],0xFD(0961)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0CFE: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](0962)     mov   A,[Port_0_DriveMode_0_SHADE]
0D00: 60 00    MOV   REG[0x0],A         (0963)     mov   reg[I2Cm_I2CPRTDM0],A
0D02: 70 EF    AND   F,0xEF             
                                        (0964) 
                                        (0965)     M8C_SetBank0
                                        (0966) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0967)                                                            ; are added by slave.
0D04: 49 00 02 TST   REG[0x0],0x2       (0968)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D07: AF FC    JZ    0x0D04             (0969)     jz    clockstretch2
                                        (0970)                                                            ; Delay for 1/2 period
0D09: 50 05    MOV   A,0x5              (0971)     mov   A,I2Cm_delayhalf
0D0B: 91 24    CALL  0x0E31             (0972)     call  I2Cm_delay
0D0D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0973) 
                                        (0974)     RAM_SETPAGE_CUR >I2Cm_bit_count
0D10: 3C D3 00 CMP   [menu+7],0x0       (0975)     cmp   [I2Cm_bit_count],0
0D13: BF B7    JNZ   0x0CCB             (0976)     jnz   writenextbit
0D15: 90 01    CALL  0x0D18             (0977)     call  I2Cm_get_ack                
                                        (0978) 
                                        (0979)     RAM_EPILOGUE RAM_USE_CLASS_4
0D17: 7F       RET                      (0980)     ret
0D18: 62 D0 00 MOV   REG[0xD0],0x0      
0D1B: 71 10    OR    F,0x10             
                                        (0981) .ENDSECTION
                                        (0982) 
                                        (0983) .SECTION
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;  FUNCTION NAME: I2Cm_get_ack
                                        (0986) ;
                                        (0987) ;  DESCRIPTION:
                                        (0988) ;    Get slave acknowledge response. Used only by I2Cm_write.
                                        (0989) ;
                                        (0990) ;-----------------------------------------------------------------------------
                                        (0991) ;
                                        (0992) ;  ARGUMENTS:
                                        (0993) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0994) ;
                                        (0995) ;  RETURNS:
                                        (0996) ;    Sets flag in I2Cm_bStatus if ACKed by Slave.
                                        (0997) ;
                                        (0998) ;  SIDE EFFECTS:
                                        (0999) ;    The A and X registers may be modified by this or future implementations
                                        (1000) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1001) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1002) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1003) ;    functions.
                                        (1004) ;          
                                        (1005) ;    Currently only the page pointer registers listed below are modified: 
                                        (1006) ;          CUR_PP
                                        (1007) ;
                                        (1008) I2Cm_get_ack:
                                        (1009) _I2Cm_get_ack:
                                        (1010)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1011)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1012)     M8C_SetBank1
0D1D: 2E 02 02 OR    [counter|previousSecond|elapsedSeconds+2],0x2(1013)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0D20: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1014)     mov   A,[Port_0_DriveMode_0_SHADE]
0D22: 60 00    MOV   REG[0x0],A         (1015)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1016)                                                            ; Release SDA high so slave may ACK
0D24: 26 02 FE AND   [counter|previousSecond|elapsedSeconds+2],0xFE(1017)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0D27: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1018)     mov   A,[Port_0_DriveMode_0_SHADE]
0D29: 60 00    MOV   REG[0x0],A         (1019)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1020)                                                            ; Delay 3/4 period
0D2B: 50 0C    MOV   A,0xC              (1021)     mov   A,I2Cm_delay3qtr
0D2D: 91 02    CALL  0x0E31             (1022)     call  I2Cm_delay
                                        (1023)                                                            ; Release SCL high
0D2F: 26 02 FD AND   [counter|previousSecond|elapsedSeconds+2],0xFD(1024)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0D32: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1025)     mov   A,[Port_0_DriveMode_0_SHADE]
0D34: 60 00    MOV   REG[0x0],A         (1026)     mov   reg[I2Cm_I2CPRTDM0],A
0D36: 70 EF    AND   F,0xEF             
                                        (1027) 
                                        (1028)     M8C_SetBank0
                                        (1029) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1030)                                                            ; are added my slave.
0D38: 49 00 02 TST   REG[0x0],0x2       (1031)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D3B: AF FC    JZ    0x0D38             (1032)     jz    clockstretch3
0D3D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1033)     
                                        (1034)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1035)                                                        ; Clear ACK bit
0D40: 26 D0 FE AND   [menu+4],0xFE      (1036)     and   [I2Cm_bStatus],~I2Cm_SLAVE_ACKed
0D43: 49 00 01 TST   REG[0x0],0x1       (1037)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0D46: B0 04    JNZ   0x0D4B             (1038)     jnz    getack2                                         ; If ACKed, set flag
0D48: 2E D0 01 OR    [menu+4],0x1       (1039)     or    [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (1040) 
                                        (1041) getack2:
0D4B: 50 05    MOV   A,0x5              (1042)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0D4D: 90 E2    CALL  0x0E31             (1043)     call  I2Cm_delay
                                        (1044) 
0D4F: 51 D0    MOV   A,[menu+4]         (1045)     mov   A,[I2Cm_bStatus]                                 ; Get result and put it in A
0D51: 21 01    AND   A,0x1              (1046)     and   A,I2Cm_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1047)     RAM_EPILOGUE RAM_USE_CLASS_4
0D53: 7F       RET                      (1048)     ret
0D54: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1049) .ENDSECTION
                                        (1050) 
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: I2Cm_bRead
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;    Reads 1 data byte from the I2C master bus.
                                        (1057) ;
                                        (1058) ;-----------------------------------------------------------------------------
                                        (1059) ;
                                        (1060) ;  ARGUMENTS:
                                        (1061) ;    Reg A Contains the Slave Address.
                                        (1062) ;    I2Cm_bStatus - Set for no ack to be followed by stop.
                                        (1063) ;    Clear for ack to indicate more data to follow.
                                        (1064) ;
                                        (1065) ;  RETURNS:
                                        (1066) ;    I2Cm_bData - Contains received data.
                                        (1067) ;
                                        (1068) ;  SIDE EFFECTS:
                                        (1069) ;    The A and X registers may be modified by this or future implementations
                                        (1070) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1071) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1072) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1073) ;    functions.
                                        (1074) ;          
                                        (1075) ;    Currently only the page pointer registers listed below are modified: 
                                        (1076) ;          CUR_PP
                                        (1077) ;
                                        (1078) ;    Must be followed by I2Cm_put_ack.
                                        (1079) ;
                                        (1080) I2Cm_bRead:
                                        (1081) _I2Cm_bRead:
                                        (1082)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1083)     RAM_SETPAGE_CUR >I2Cm_bStatus
0D57: 55 D0 00 MOV   [menu+4],0x0       (1084)     mov   [I2Cm_bStatus],0x00                              ; Clear ACK flag
0D5A: 21 FF    AND   A,0xFF             (1085)     and   A,0xFF                                           ; Is Ack flag set"
0D5C: A0 07    JZ    0x0D64             (1086)     jz    I2Cm_read                                        ; Don't ACK
0D5E: 2E D0 10 OR    [menu+4],0x10      (1087)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Set ACK flag
0D61: 90 01    CALL  0x0D64             (1088)     call  I2Cm_read
                                        (1089)     RAM_EPILOGUE RAM_USE_CLASS_4
0D63: 7F       RET                      (1090)     ret
0D64: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1091) 
                                        (1092) I2Cm_read:
                                        (1093) _I2Cm_read:
                                        (1094)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1095)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0D67: 55 D3 08 MOV   [menu+7],0x8       (1096)     mov   [I2Cm_bit_count],8                               ; Count and prepare bits to read
                                        (1097) readnextbit:
0D6A: 7A D3    DEC   [menu+7]           (1098)     dec   [I2Cm_bit_count]
0D6C: 6B D1    RLC   [menu+5]           (1099)     rlc   [I2Cm_bData]
0D6E: 62 D0 00 MOV   REG[0xD0],0x0      
0D71: 71 10    OR    F,0x10             
                                        (1100)     
                                        (1101)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1102)     M8C_SetBank1                                           ; Asser SCL low
0D73: 2E 02 02 OR    [counter|previousSecond|elapsedSeconds+2],0x2(1103)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0D76: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1104)     mov   A,[Port_0_DriveMode_0_SHADE]
0D78: 60 00    MOV   REG[0x0],A         (1105)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1106)                                                            ; Delay 1/2 period
0D7A: 50 05    MOV   A,0x5              (1107)     mov   A,I2Cm_delayhalf
0D7C: 90 B3    CALL  0x0E31             (1108)     call  I2Cm_delay
                                        (1109)                                                            ; Release SCL high
0D7E: 26 02 FD AND   [counter|previousSecond|elapsedSeconds+2],0xFD(1110)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0D81: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1111)     mov   A,[Port_0_DriveMode_0_SHADE]
0D83: 60 00    MOV   REG[0x0],A         (1112)     mov   reg[I2Cm_I2CPRTDM0],A
0D85: 70 EF    AND   F,0xEF             
0D87: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1113) 
                                        (1114)     M8C_SetBank0
                                        (1115)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1116) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1117)                                                            ; addes wait states.
                                        (1118) 
0D8A: 49 00 02 TST   REG[0x0],0x2       (1119)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D8D: AF FC    JZ    0x0D8A             (1120)     jz    clockstretch4
                                        (1121)                                                            ; Delay 1/4 period
0D8F: 50 02    MOV   A,0x2              (1122)     mov   A,I2Cm_delayqtr
0D91: 90 9E    CALL  0x0E31             (1123)     call  I2Cm_delay
                                        (1124) 
0D93: 26 D1 FE AND   [menu+5],0xFE      (1125)     and   [I2Cm_bData],~01h                                ; Record bit received
0D96: 49 00 01 TST   REG[0x0],0x1       (1126)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0D99: A0 04    JZ    0x0D9E             (1127)     jz    readnobit
0D9B: 2E D1 01 OR    [menu+5],0x1       (1128)     or    [I2Cm_bData],01h
                                        (1129) readnobit:
0D9E: 3C D3 00 CMP   [menu+7],0x0       (1130)     cmp   [I2Cm_bit_count],0
0DA1: BF C8    JNZ   0x0D6A             (1131)     jnz   readnextbit                                      ; Check for byte complete
                                        (1132) 
0DA3: 90 01    CALL  0x0DA6             (1133)     call   I2Cm_put_ack                
                                        (1134)     RAM_EPILOGUE RAM_USE_CLASS_4
0DA5: 7F       RET                      (1135)     ret
0DA6: 62 D0 00 MOV   REG[0xD0],0x0      
0DA9: 71 10    OR    F,0x10             
                                        (1136) .ENDSECTION
                                        (1137)                                                          
                                        (1138) .SECTION
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;  FUNCTION NAME: I2Cm_put_ack
                                        (1141) ;
                                        (1142) ;  DESCRIPTION:
                                        (1143) ;    Send acknowledge to slave. Used only by I2Cm_read
                                        (1144) ;
                                        (1145) ;-----------------------------------------------------------------------------
                                        (1146) ;
                                        (1147) ;  ARGUMENTS:
                                        (1148) ;    I2Cm_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1149) ;    to indicate more data to follow.
                                        (1150) ;
                                        (1151) ;  RETURNS:
                                        (1152) ;    I2Cm_bData - Contains received data.
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS:
                                        (1155) ;    The A and X registers may be modified by this or future implementations
                                        (1156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1159) ;    functions.
                                        (1160) ;          
                                        (1161) ;    Currently only the page pointer registers listed below are modified: 
                                        (1162) ;          CUR_PP
                                        (1163) ;
                                        (1164) ;    Send ack if more data will follow.
                                        (1165) ;
                                        (1166) I2Cm_put_ack:
                                        (1167) _I2Cm_put_ack:
                                        (1168)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1169)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1170)     M8C_SetBank1                                           ; Assert SCL low
0DAB: 2E 02 02 OR    [counter|previousSecond|elapsedSeconds+2],0x2(1171)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0DAE: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1172)     mov   A,[Port_0_DriveMode_0_SHADE]
0DB0: 60 00    MOV   REG[0x0],A         (1173)     mov   reg[I2Cm_I2CPRTDM0],A
0DB2: 70 EF    AND   F,0xEF             
0DB4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1174)     M8C_SetBank0
                                        (1175) 
                                        (1176)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1177)                                                        ; Check if ack is to be transmitted
0DB7: 47 D0 10 TST   [menu+4],0x10      (1178)     tst   [I2Cm_bStatus],I2Cm_SEND_ACK
0DBA: 62 D0 00 MOV   REG[0xD0],0x0      
0DBD: 71 10    OR    F,0x10             
                                        (1179) 
                                        (1180)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1181)     M8C_SetBank1
                                        (1182) 
0DBF: A0 0A    JZ    0x0DCA             (1183)     jz    noputack
                                        (1184)                                                            ; Assert SDA low
0DC1: 2E 02 01 OR    [counter|previousSecond|elapsedSeconds+2],0x1(1185)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0DC4: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1186)     mov   A,[Port_0_DriveMode_0_SHADE]
0DC6: 60 00    MOV   REG[0x0],A         (1187)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1188) 
0DC8: 80 08    JMP   0x0DD1             (1189)     jmp   putack1
                                        (1190) noputack:                                                  ; Release SDA high
0DCA: 26 02 FE AND   [counter|previousSecond|elapsedSeconds+2],0xFE(1191)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0DCD: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1192)     mov   A,[Port_0_DriveMode_0_SHADE]
0DCF: 60 00    MOV   REG[0x0],A         (1193)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1194) 
                                        (1195) putack1:
0DD1: 50 02    MOV   A,0x2              (1196)     mov   A,I2Cm_delayqtr                                  ; Delay 1/4 period
0DD3: 90 5C    CALL  0x0E31             (1197)     call  I2Cm_delay
                                        (1198)                                                            ; Release SCL high
0DD5: 26 02 FD AND   [counter|previousSecond|elapsedSeconds+2],0xFD(1199)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0DD8: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1200)     mov   A,[Port_0_DriveMode_0_SHADE]
0DDA: 60 00    MOV   REG[0x0],A         (1201)     mov   reg[I2Cm_I2CPRTDM0],A
0DDC: 70 EF    AND   F,0xEF             
                                        (1202) 
                                        (1203)     M8C_SetBank0
                                        (1204) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1205)                                                            ; adds wait states.
0DDE: 49 00 02 TST   REG[0x0],0x2       (1206)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0DE1: AF FC    JZ    0x0DDE             (1207)     jz    clockstretch5
                                        (1208)                                                            ; delay for the high half of the clock.
0DE3: 50 05    MOV   A,0x5              (1209)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0DE5: 90 4A    CALL  0x0E31             (1210)     call  I2Cm_delay
0DE7: 71 10    OR    F,0x10             
                                        (1211) 
                                        (1212)     M8C_SetBank1                                           ; Assert SCL low
0DE9: 2E 02 02 OR    [counter|previousSecond|elapsedSeconds+2],0x2(1213)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0DEC: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1214)     mov   A,[Port_0_DriveMode_0_SHADE]
0DEE: 60 00    MOV   REG[0x0],A         (1215)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1216)                                                            ; If there is another read pending
                                        (1217)                                                            ; must release SDA for slave
0DF0: 26 02 FE AND   [counter|previousSecond|elapsedSeconds+2],0xFE(1218)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0DF3: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1219)     mov   A,[Port_0_DriveMode_0_SHADE]
0DF5: 60 00    MOV   REG[0x0],A         (1220)     mov   reg[I2Cm_I2CPRTDM0],A
0DF7: 70 EF    AND   F,0xEF             
0DF9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1221)     M8C_SetBank0
                                        (1222) 
                                        (1223)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0DFC: 51 D1    MOV   A,[menu+5]         (1224)     mov   A, [I2Cm_bData]
                                        (1225)     RAM_EPILOGUE RAM_USE_CLASS_4
0DFE: 7F       RET                      (1226)     ret
0DFF: 62 D0 00 MOV   REG[0xD0],0x0      
0E02: 71 10    OR    F,0x10             
                                        (1227) .ENDSECTION
                                        (1228) 
                                        (1229) .SECTION
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;  FUNCTION NAME: I2Cm_SendStop
                                        (1232) ;
                                        (1233) ;  DESCRIPTION:
                                        (1234) ;    Assert stop condition.
                                        (1235) ;
                                        (1236) ;-----------------------------------------------------------------------------
                                        (1237) ;
                                        (1238) ;  ARGUMENTS: none
                                        (1239) ;
                                        (1240) ;  RETURNS: none
                                        (1241) ;
                                        (1242) ;  SIDE EFFECTS:
                                        (1243) ;    The A and X registers may be modified by this or future implementations
                                        (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1247) ;    functions.
                                        (1248) ;          
                                        (1249) ;    Currently only the page pointer registers listed below are modified: 
                                        (1250) ;          CUR_PP
                                        (1251) ;
                                        (1252) ;  THEORY of OPERATION or PROCEDURE:
                                        (1253) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1254) ;
                                        (1255)  I2Cm_SendStop:
                                        (1256) _I2Cm_SendStop:
                                        (1257)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1258)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1259)     M8C_SetBank1                                           ; Assert ACK and SDA low
0E04: 2E 02 03 OR    [counter|previousSecond|elapsedSeconds+2],0x3(1260)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin|I2Cm_SDA_pin
0E07: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1261)     mov   A,[Port_0_DriveMode_0_SHADE]
0E09: 60 00    MOV   REG[0x0],A         (1262)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1263) 
0E0B: 50 0C    MOV   A,0xC              (1264)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0E0D: 90 22    CALL  0x0E31             (1265)     call  I2Cm_delay
                                        (1266)                                                            ; Release SCL high
0E0F: 26 02 FD AND   [counter|previousSecond|elapsedSeconds+2],0xFD(1267)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0E12: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1268)     mov   A,[Port_0_DriveMode_0_SHADE]
0E14: 60 00    MOV   REG[0x0],A         (1269)     mov   reg[I2Cm_I2CPRTDM0],A
0E16: 70 EF    AND   F,0xEF             
                                        (1270) 
                                        (1271)     M8C_SetBank0
                                        (1272) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1273)                                                            ; has added wait states.
0E18: 49 00 02 TST   REG[0x0],0x2       (1274)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0E1B: AF FC    JZ    0x0E18             (1275)     jz    clockstretch6
0E1D: 71 10    OR    F,0x10             
                                        (1276)     M8C_SetBank1
                                        (1277) 
0E1F: 50 0C    MOV   A,0xC              (1278)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0E21: 90 0E    CALL  0x0E31             (1279)     call  I2Cm_delay
                                        (1280) 
                                        (1281)                                                            ; Release SDA high
0E23: 26 02 FE AND   [counter|previousSecond|elapsedSeconds+2],0xFE(1282)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0E26: 51 02    MOV   A,[counter|previousSecond|elapsedSeconds+2](1283)     mov   A,[Port_0_DriveMode_0_SHADE]
0E28: 60 00    MOV   REG[0x0],A         (1284)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1285) 
0E2A: 50 05    MOV   A,0x5              (1286)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0E2C: 90 03    CALL  0x0E31             (1287)     call  I2Cm_delay
0E2E: 70 EF    AND   F,0xEF             
                                        (1288)     M8C_SetBank0
                                        (1289)     
                                        (1290)     RAM_EPILOGUE RAM_USE_CLASS_4
0E30: 7F       RET                      (1291)     ret
                                        (1292) .ENDSECTION
                                        (1293) 
                                        (1294) .SECTION
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;  FUNCTION NAME: I2Cm_delay
                                        (1297) ;
                                        (1298) ;  DESCRIPTION:
                                        (1299) ;    Create delays for I2Cm routines.
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) ;
                                        (1303) ;  ARGUMENTS: none
                                        (1304) ;
                                        (1305) ;  RETURNS: none
                                        (1306) ;
                                        (1307) ;  SIDE EFFECTS:
                                        (1308) ;    The A and X registers may be modified by this or future implementations
                                        (1309) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1310) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1312) ;    functions.
                                        (1313) ;          
                                        (1314) I2Cm_delay:                                      ; 11 cycles for call. 32 total.
                                        (1315) I2Cmdelay1:                                      ; Delay 1/4 period at 100 kHz
0E31: 78       DEC   A                  (1316)      dec  A                                      ; 4 cycles
0E32: BF FE    JNZ   0x0E31             (1317)      jnz  I2Cmdelay1                             ; 5 cycles for jump, 4 no jump.     
0E34: 7F       RET                      (1318)      ret                                         ; 8 cycles
                                        (1319)   
                                        (1320) .ENDSECTION
                                        (1321) 
                                        (1322) 
                                        (1323) 
                                        (1324) ; End of File I2Cm.asm
                                        (1325) 
                                        (1326) 
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
0E35: 7A 0C    DEC   [counter|previousSecond|elapsedSeconds+12](0093)     dec  [ADCINC_bState]
                                        (0094) if1:
0E37: C0 02    JC    0x0E3A             (0095)     jc endif1 ; no underflow
0E39: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
0E3A: 3C 0D 00 CMP   [counter|previousSecond|elapsedSeconds+13],0x0(0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
0E3D: B0 12    JNZ   0x0E50             (0100)     jnz endif2  ;leaving reset mode
0E3F: 08       PUSH  A                  (0101)     push A                            ;read decimator
0E40: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
0E42: 53 0A    MOV   [counter|previousSecond|elapsedSeconds+10],A(0103)     mov  [iTemp + LowByte],A
0E44: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
0E46: 53 09    MOV   [counter|previousSecond|elapsedSeconds+9],A(0105)     mov  [iTemp + HighByte], A
0E48: 18       POP   A                  (0106)     pop A
0E49: 55 0D 01 MOV   [counter|previousSecond|elapsedSeconds+13],0x1(0107)     mov [ADCINC_fMode],1
0E4C: 55 0C 0F MOV   [counter|previousSecond|elapsedSeconds+12],0xF(0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
0E4F: 7E       RETI                     (0109)     reti
0E50: 43 8A 20 OR    REG[0x8A],0x20     
0E53: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
0E56: 08       PUSH  A                  (0113)     push A
0E57: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
0E59: 12 0A    SUB   A,[counter|previousSecond|elapsedSeconds+10](0115)     sub  A,[iTemp + LowByte]
0E5B: 53 0A    MOV   [counter|previousSecond|elapsedSeconds+10],A(0116)     mov  [iTemp +LowByte],A
0E5D: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0E5F: 1A 09    SBB   A,[counter|previousSecond|elapsedSeconds+9](0118)     sbb  A,[iTemp + HighByte]
                                        (0119) 
                                        (0120)        ;check for overflow
                                        (0121) IF     ADCINC_8_OR_MORE_BITS
0E61: 39 04    CMP   A,0x4              (0122)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0123) if3: 
0E63: B0 05    JNZ   0x0E69             (0124)     jnz endif3 ;overflow
0E65: 78       DEC   A                  (0125)     dec A
0E66: 55 0A FF MOV   [counter|previousSecond|elapsedSeconds+10],0xFF(0126)     mov [iTemp + LowByte],ffh
                                        (0127) endif3:
                                        (0128) ELSE
                                        (0129)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0130) if4: 
                                        (0131)     jnz endif4 ;overflow
                                        (0132)     dec [iTemp + LowByte]
                                        (0133) endif4:
                                        (0134) ENDIF
                                        (0135) IF ADCINC_SIGNED_DATA
                                        (0136) IF ADCINC_9_OR_MORE_BITS
                                        (0137)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0138) ELSE
                                        (0139)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0140)     sbb A,0
                                        (0141) ENDIF
                                        (0142) ENDIF
0E69: 5F 08 0A MOV   [counter|previousSecond|elapsedSeconds+8],[counter|previousSecond|elapsedSeconds+10](0143)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
0E6C: 53 07    MOV   [counter|previousSecond|elapsedSeconds+7],A(0144)     mov  [ADCINC_iResult + HighByte],A
0E6E: 55 0B 01 MOV   [counter|previousSecond|elapsedSeconds+11],0x1(0145)     mov  [ADCINC_fStatus],1
                                        (0146) ConversionReady:
                                        (0147)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0148)     ;---------------------------------------------------
                                        (0149)     ; Insert your custom code below this banner
                                        (0150)     ;---------------------------------------------------
                                        (0151)     ;  Sample data is now in iResult
                                        (0152)     ;
                                        (0153)     ;  NOTE: This interrupt service routine has already
                                        (0154)     ;  preserved the values of the A CPU register. If
                                        (0155)     ;  you need to use the X register you must preserve
                                        (0156)     ;  its value and restore it before the return from
                                        (0157)     ;  interrupt.
                                        (0158)     ;---------------------------------------------------
                                        (0159)     ; Insert your custom code above this banner
                                        (0160)     ;---------------------------------------------------
                                        (0161)     ;@PSoC_UserCode_END@ (Do not change this line.)
0E71: 18       POP   A                  (0162)     pop A
0E72: 3C 0E 00 CMP   [counter|previousSecond|elapsedSeconds+14],0x0(0163)     cmp [ADCINC_bNumSamples],0
                                        (0164) if5: 
0E75: B0 0E    JNZ   0x0E84             (0165)     jnz endif5 ; Number of samples is zero
0E77: 55 0D 00 MOV   [counter|previousSecond|elapsedSeconds+13],0x0(0166)     mov [ADCINC_fMode],0
0E7A: 55 0C 00 MOV   [counter|previousSecond|elapsedSeconds+12],0x0(0167)     mov [ADCINC_bState],0
0E7D: 41 8B EF AND   REG[0x8B],0xEF     
0E80: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0168)     ADCINC_ENABLE_INTEGRATOR_M
0E83: 7E       RETI                     (0169)     reti       
                                        (0170) endif5:
0E84: 7A 0E    DEC   [counter|previousSecond|elapsedSeconds+14](0171)     dec [ADCINC_bNumSamples]
                                        (0172) if6:
0E86: A0 0E    JZ    0x0E95             (0173)     jz endif6  ; count not zero
0E88: 55 0D 00 MOV   [counter|previousSecond|elapsedSeconds+13],0x0(0174)     mov [ADCINC_fMode],0
0E8B: 55 0C 00 MOV   [counter|previousSecond|elapsedSeconds+12],0x0(0175)     mov [ADCINC_bState],0
0E8E: 41 8B EF AND   REG[0x8B],0xEF     
0E91: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0176)     ADCINC_ENABLE_INTEGRATOR_M
0E94: 7E       RETI                     (0177)     reti       
0E95: 71 10    OR    F,0x10             
                                        (0178) endif6:
                                        (0179)     ;All samples done
                                        (0180)     M8C_SetBank1
0E97: 41 E7 3F AND   REG[0xE7],0x3F     (0181)     and reg[E7h], 3Fh            ; if we are in 29xxx or 24x94   
0E9A: 43 E7 80 OR    REG[0xE7],0x80     (0182)     or  reg[E7h], 80h            ; then set to incremental Mode
0E9D: 70 EF    AND   F,0xEF             
0E9F: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0183)     M8C_SetBank0
                                        (0184)     ADCINC_STOPADC_M
0EA2: 7E       RETI                     (0185)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.
                                        (0093) ;
                                        (0094)  ADCINC_Start:
                                        (0095) _ADCINC_Start:
                                        (0096)    RAM_PROLOGUE RAM_USE_CLASS_1
0EA3: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
0EA5: 43 8A 20 OR    REG[0x8A],0x20     
0EA8: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
0EAB: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
0EAE: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0EB1: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0118) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0119) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0120) ;    functions.
                                        (0121) ;
                                        (0122)  ADCINC_SetPower:
                                        (0123) _ADCINC_SetPower:
                                        (0124)    RAM_PROLOGUE RAM_USE_CLASS_2
0EB2: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
0EB3: 21 03    AND   A,0x3              (0126)    and  A,03h                                    ; Ensure value is legal
0EB5: 08       PUSH  A                  (0127)    push A
0EB6: 5D 8B    MOV   A,REG[0x8B]        (0128)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
0EB8: 21 FC    AND   A,0xFC             (0129)    and  A,~03h                                   ;   clear power bits to zero
0EBA: 2B 00    OR    A,[X+0]            (0130)    or   A,[ X ]                                  ;   establish new value
0EBC: 60 8B    MOV   REG[0x8B],A        (0131)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
0EBE: 18       POP   A                  (0132)    pop  A
0EBF: 70 3F    AND   F,0x3F             
0EC1: 71 C0    OR    F,0xC0             
                                        (0133)    RAM_EPILOGUE RAM_USE_CLASS_2
0EC3: 7F       RET                      (0134)    ret
0EC4: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0135) .ENDSECTION
                                        (0136) 
                                        (0137) .SECTION
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;  FUNCTION NAME: ADCINC_Stop
                                        (0140) ;
                                        (0141) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0142) ;                 and turns off PWM
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;
                                        (0145) ;  ARGUMENTS:     None.
                                        (0146) ;  RETURNS:       Nothing.
                                        (0147) ;  SIDE EFFECTS:
                                        (0148) ;    The A and X registers may be modified by this or future implementations
                                        (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0152) ;    functions.
                                        (0153) ;
                                        (0154)  ADCINC_Stop:
                                        (0155) _ADCINC_Stop:
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0157)    ADCINC_STOPADC_M
0EC7: 41 8B FC AND   REG[0x8B],0xFC     (0158)    and  reg[ADCINC_AtoDcr3], ~03h
0ECA: 41 23 FE AND   REG[0x23],0xFE     (0159)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0ECD: 7F       RET                      (0161)    ret
0ECE: 62 D0 00 MOV   REG[0xD0],0x0      
0ED1: 41 8B EF AND   REG[0x8B],0xEF     
0ED4: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) 
                                        (0165) .SECTION
                                        (0166) ;-----------------------------------------------------------------------------
                                        (0167) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0168) ;
                                        (0169) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    A register contain number of samples
                                        (0173) ;  RETURNS:      Nothing.
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;          
                                        (0181) ;    Currently only the page pointer registers listed below are modified: 
                                        (0182) ;          CUR_PP
                                        (0183) ;
                                        (0184)  ADCINC_GetSamples:
                                        (0185) _ADCINC_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0188)    ADCINC_ENABLE_INTEGRATOR_M
0ED7: 55 0D 00 MOV   [counter|previousSecond|elapsedSeconds+13],0x0(0189)    mov [ADCINC_fMode],0
0EDA: 55 0C 00 MOV   [counter|previousSecond|elapsedSeconds+12],0x0(0190)    mov [ADCINC_bState],0
0EDD: 53 0E    MOV   [counter|previousSecond|elapsedSeconds+14],A(0191)    mov [ADCINC_bNumSamples],A
0EDF: 5D 22    MOV   A,REG[0x22]        (0192)    mov A, reg[ADCINC_PWMdr2]
0EE1: B0 04    JNZ   0x0EE6             (0193)    jnz  .SkipPulseWrite
0EE3: 62 22 01 MOV   REG[0x22],0x1      (0194)    mov reg[ADCINC_PWMdr2], 1
0EE6: 71 10    OR    F,0x10             
                                        (0195) .SkipPulseWrite:
                                        (0196) 
                                        (0197)    M8C_SetBank1
0EE8: 41 E7 3F AND   REG[0xE7],0x3F     (0198)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0EEB: 43 E7 40 OR    REG[0xE7],0x40     (0199)    or  reg[E7h], 40h             ; then set to incremental Mode
0EEE: 70 EF    AND   F,0xEF             
0EF0: 62 DB FE MOV   REG[0xDB],0xFE     
0EF3: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0200)    M8C_SetBank0
                                        (0201) 
                                        (0202)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0203)    RAM_EPILOGUE RAM_USE_CLASS_4 
0EF6: 7F       RET                      (0204)    ret
0EF7: 71 10    OR    F,0x10             
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) 
                                        (0208) .SECTION
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0211) ;
                                        (0212) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0213) ;               is disabled but the PWM output is still active.
                                        (0214) ;               Integrator is reset
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS:    None.
                                        (0218) ;  RETURNS:      Nothing.
                                        (0219) ;  SIDE EFFECTS:
                                        (0220) ;    The A and X registers may be modified by this or future implementations
                                        (0221) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0222) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0223) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0224) ;    functions.
                                        (0225) ;
                                        (0226)  ADCINC_StopADC:
                                        (0227) _ADCINC_StopADC:
                                        (0228)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0229)    M8C_SetBank1
0EF9: 41 E7 3F AND   REG[0xE7],0x3F     (0230)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0EFC: 43 E7 80 OR    REG[0xE7],0x80     (0231)    or  reg[E7h], 80h             ; then set to incremental Mode
0EFF: 70 EF    AND   F,0xEF             
0F01: 41 E1 FE AND   REG[0xE1],0xFE     
0F04: 43 8A 20 OR    REG[0x8A],0x20     
0F07: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0232)    M8C_SetBank0
                                        (0233)    ADCINC_STOPADC_M
                                        (0234)    ADCINC_RESET_INTEGRATOR_M
                                        (0235)    RAM_EPILOGUE RAM_USE_CLASS_1 
0F0A: 7F       RET                      (0236)    ret
0F0B: 62 D0 00 MOV   REG[0xD0],0x0      
0F0E: 51 0B    MOV   A,[counter|previousSecond|elapsedSeconds+11]
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0243) ;
                                        (0244) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  ARGUMENTS:    None.
                                        (0247) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0248) ;  SIDE EFFECTS:
                                        (0249) ;    The A and X registers may be modified by this or future implementations
                                        (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0253) ;    functions.
                                        (0254) ;          
                                        (0255) ;    Currently only the page pointer registers listed below are modified: 
                                        (0256) ;          CUR_PP
                                        (0257) ;
                                        (0258)  ADCINC_fIsDataAvailable:
                                        (0259) _ADCINC_fIsDataAvailable:
                                        (0260)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0261)    ADCINC_fIsDataAvailable_M   
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
0F10: 7F       RET                      (0263)    ret
0F11: 62 D0 00 MOV   REG[0xD0],0x0      
0F14: 55 0B 00 MOV   [counter|previousSecond|elapsedSeconds+11],0x0
0F17: 58 07    MOV   X,[counter|previousSecond|elapsedSeconds+7]
0F19: 51 08    MOV   A,[counter|previousSecond|elapsedSeconds+8]
0F1B: 3C 0B 00 CMP   [counter|previousSecond|elapsedSeconds+11],0x0
0F1E: BF F5    JNZ   0x0F14             
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0270) ;                  ADCINC_wClearFlagGetData
                                        (0271) ;
                                        (0272) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0273) ;                  Flag is checked after trandfer to insure valid data.
                                        (0274) ;                  available. Also clears the DATA_READY flag. 
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  ARGUMENTS:    None.
                                        (0277) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;          
                                        (0285) ;    Currently only the page pointer registers listed below are modified: 
                                        (0286) ;          CUR_PP
                                        (0287) ;
                                        (0288)  ADCINC_iClearFlagGetData:
                                        (0289) _ADCINC_iClearFlagGetData:
                                        (0290)  ADCINC_wClearFlagGetData:
                                        (0291) _ADCINC_wClearFlagGetData:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0293)    ADCINC_iClearFlagGetData_M   
                                        (0294)    RAM_EPILOGUE RAM_USE_CLASS_4
0F20: 7F       RET                      (0295)    ret
0F21: 62 D0 00 MOV   REG[0xD0],0x0      
0F24: 55 0B 00 MOV   [counter|previousSecond|elapsedSeconds+11],0x0
0F27: 51 08    MOV   A,[counter|previousSecond|elapsedSeconds+8]
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) 
                                        (0299) .SECTION
                                        (0300) ;-----------------------------------------------------------------------------
                                        (0301) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0302) ;                  ADCINC_bClearFlagGetData
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315) ;    Currently only the page pointer registers listed below are modified: 
                                        (0316) ;          CUR_PP
                                        (0317) ;
                                        (0318)  ADCINC_cClearFlagGetData:
                                        (0319) _ADCINC_cClearFlagGetData:
                                        (0320)  ADCINC_bClearFlagGetData:
                                        (0321) _ADCINC_bClearFlagGetData:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0323)    ADCINC_bClearFlagGetData_M     
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0F29: 7F       RET                      (0325)    ret
0F2A: 62 D0 00 MOV   REG[0xD0],0x0      
0F2D: 58 07    MOV   X,[counter|previousSecond|elapsedSeconds+7]
0F2F: 51 08    MOV   A,[counter|previousSecond|elapsedSeconds+8]
                                        (0326) .ENDSECTION
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0330) ;				   ADCINC_wGetData
                                        (0331) ;
                                        (0332) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0333) ;                   available.
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;  ARGUMENTS:    None.
                                        (0336) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0337) ;  SIDE EFFECTS:
                                        (0338) ;    The A and X registers may be modified by this or future implementations
                                        (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0342) ;    functions.
                                        (0343) ;          
                                        (0344) ;    Currently only the page pointer registers listed below are modified: 
                                        (0345) ;          CUR_PP
                                        (0346) ;
                                        (0347)  ADCINC_iGetData:
                                        (0348) _ADCINC_iGetData:
                                        (0349)  ADCINC_wGetData:
                                        (0350) _ADCINC_wGetData:
                                        (0351)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0352)    ADCINC_wGetData_M          
                                        (0353)    RAM_EPILOGUE RAM_USE_CLASS_4
0F31: 7F       RET                      (0354)    ret
0F32: 62 D0 00 MOV   REG[0xD0],0x0      
0F35: 51 08    MOV   A,[counter|previousSecond|elapsedSeconds+8]
                                        (0355) .ENDSECTION
                                        (0356) .SECTION
                                        (0357) ;-----------------------------------------------------------------------------
                                        (0358) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0359) ;                  ADCINC_cGetData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0362) ;                   available.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  ARGUMENTS:    None.
                                        (0365) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0366) ;  SIDE EFFECTS:
                                        (0367) ;    The A and X registers may be modified by this or future implementations
                                        (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0371) ;    functions.
                                        (0372) ;          
                                        (0373) ;    Currently only the page pointer registers listed below are modified: 
                                        (0374) ;          CUR_PP
                                        (0375) ;
                                        (0376)  ADCINC_bGetData:
                                        (0377) _ADCINC_bGetData:
                                        (0378)  ADCINC_cGetData:
                                        (0379) _ADCINC_cGetData:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0381)    ADCINC_cGetData_M        
                                        (0382)    RAM_EPILOGUE RAM_USE_CLASS_4
0F37: 7F       RET                      (0383)    ret
0F38: 62 D0 00 MOV   REG[0xD0],0x0      
0F3B: 51 0B    MOV   A,[counter|previousSecond|elapsedSeconds+11]
0F3D: 55 0B 00 MOV   [counter|previousSecond|elapsedSeconds+11],0x0
                                        (0384) .ENDSECTION
                                        (0385) 
                                        (0386) 
                                        (0387) .SECTION
                                        (0388) ;-----------------------------------------------------------------------------
                                        (0389) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0390) ;
                                        (0391) ;  DESCRIPTION: Clears the data ready flag.
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  ARGUMENTS:    None.
                                        (0394) ;  RETURNS:      Nothing.
                                        (0395) ;  SIDE EFFECTS: 
                                        (0396) ;    The DATA_READY flag is cleared.
                                        (0397) ;    
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;          
                                        (0404) ;    Currently only the page pointer registers listed below are modified: 
                                        (0405) ;          CUR_PP
                                        (0406) ;
                                        (0407)  ADCINC_fClearFlag:
                                        (0408) _ADCINC_fClearFlag:
                                        (0409)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0410)    ADCINC_fClearFlag_M    
                                        (0411)    RAM_EPILOGUE RAM_USE_CLASS_4
0F40: 7F       RET                      (0412)    ret
0F41: 60 22    MOV   REG[0x22],A        
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;
                                        (0424) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0425) ;  RETURNS:   Nothing
                                        (0426) ;  SIDE EFFECTS:
                                        (0427) ;    The A and X registers may be modified by this or future implementations
                                        (0428) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0429) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0430) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0431) ;    functions.
                                        (0432) ;
                                        (0433)  ADCINC_WritePulseWidth:
                                        (0434) _ADCINC_WritePulseWidth:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0436)    ADCINC_WritePulseWidth_M  
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
0F43: 7F       RET                      (0438)    ret
                                        (0439) .ENDSECTION
                                        (0440) 
                                        (0441) ; End of File ADCINC.asm
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\bcdutil.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "BcdUtil.h"
(0004) 
(0005) void bcdToDec(BYTE bcd10, BYTE bcd, BYTE *dec)
(0006) {
__UserModules_end|_bcdToDec|__text_start|_bcdToDec:
  dec                  --> X-7
  bcd                  --> X-5
  bcd10                --> X-4
    0F44: 10       PUSH  X
    0F45: 4F       MOV   X,SP
(0007) 	*dec = (bcd10 & 0xf) * 10 + (bcd & 0xf);
    0F46: 62 D0 00 MOV   REG[0xD0],0x0
    0F49: 52 FB    MOV   A,[X-5]
    0F4B: 21 0F    AND   A,0xF
    0F4D: 53 C3    MOV   [__r0],A
    0F4F: 52 FC    MOV   A,[X-4]
    0F51: 21 0F    AND   A,0xF
    0F53: 60 E8    MOV   REG[0xE8],A
    0F55: 62 E9 0A MOV   REG[0xE9],0xA
    0F58: 40       NOP   
    0F59: 5D EB    MOV   A,REG[0xEB]
    0F5B: 02 C3    ADD   A,[__r0]
    0F5D: 53 C3    MOV   [__r0],A
    0F5F: 52 FA    MOV   A,[X-6]
    0F61: 53 C0    MOV   [__r3],A
    0F63: 52 F9    MOV   A,[X-7]
    0F65: 60 D5    MOV   REG[0xD5],A
    0F67: 51 C3    MOV   A,[__r0]
    0F69: 3F C0    MVI   [__r3],A
    0F6B: 20       POP   X
    0F6C: 7F       RET   
(0008) }
(0009) 
(0010) void decToBcd(BYTE *bcd10, BYTE *bcd, BYTE dec)
(0011) {
_decToBcd:
  dec                  --> X-8
  bcd                  --> X-7
  bcd10                --> X-5
    0F6D: 10       PUSH  X
    0F6E: 4F       MOV   X,SP
(0012) 	*bcd10 = dec/10;
    0F6F: 62 D0 00 MOV   REG[0xD0],0x0
    0F72: 50 0A    MOV   A,0xA
    0F74: 08       PUSH  A
    0F75: 52 F8    MOV   A,[X-8]
    0F77: 08       PUSH  A
    0F78: 7C 39 32 LCALL 0x3932
    0F7B: 18       POP   A
    0F7C: 53 C3    MOV   [__r0],A
    0F7E: 38 FF    ADD   SP,0xFF
    0F80: 52 FC    MOV   A,[X-4]
    0F82: 53 C0    MOV   [__r3],A
    0F84: 52 FB    MOV   A,[X-5]
    0F86: 60 D5    MOV   REG[0xD5],A
    0F88: 51 C3    MOV   A,[__r0]
    0F8A: 3F C0    MVI   [__r3],A
(0013) 	*bcd = dec - (*bcd10 * 10);
    0F8C: 52 FC    MOV   A,[X-4]
    0F8E: 53 C2    MOV   [__r1],A
    0F90: 52 FB    MOV   A,[X-5]
    0F92: 60 D4    MOV   REG[0xD4],A
    0F94: 3E C2    MVI   A,[__r1]
    0F96: 60 E8    MOV   REG[0xE8],A
    0F98: 62 E9 0A MOV   REG[0xE9],0xA
    0F9B: 40       NOP   
    0F9C: 5D EB    MOV   A,REG[0xEB]
    0F9E: 53 C3    MOV   [__r0],A
    0FA0: 52 F8    MOV   A,[X-8]
    0FA2: 12 C3    SUB   A,[__r0]
    0FA4: 53 C3    MOV   [__r0],A
    0FA6: 52 FA    MOV   A,[X-6]
    0FA8: 53 C0    MOV   [__r3],A
    0FAA: 52 F9    MOV   A,[X-7]
    0FAC: 60 D5    MOV   REG[0xD5],A
    0FAE: 51 C3    MOV   A,[__r0]
    0FB0: 3F C0    MVI   [__r3],A
    0FB2: 20       POP   X
    0FB3: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\comm.c
(0001) 
(0002) #include <m8c.h>        // part specific constants and macros
(0003) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0004) #include <string.h>
(0005) #include "Comm.h"
(0006) #include <stdio.h>
(0007) 
(0008) // PACKET
(0009) // BYTE 0 --> [COMM_PACKET_HEADER_1ST]
(0010) // BYTE 1 --> [COMM_PACKET_HEADER_2ND]
(0011) // BYTE 2 --> { USER CUSTOM COMMAND }
(0012) // BYTE 3 --> { USER DATA SIZE = N }
(0013) // BYTE 4 --> { USER DATA }
(0014) // ...    --> { USER DATA }
(0015) // BYTE 4 + (N-1) --> { USER DATA }
(0016) // BYTE 4 + (N) --> [CHECKSUM]
(0017) 
(0018) BOOL comm_packet_received = FALSE;
(0019) BYTE comm_error = COMM_ERROR_NONE;
(0020) 
(0021) static BYTE rxbuffer[COMM_MAX_DATA_SIZE + 5];
(0022) 
(0023) void Comm_Start(void)
(0024) {
(0025) 	UART_Start(UART_PARITY_NONE);
_Comm_Start:
    0FB4: 10       PUSH  X
    0FB5: 50 00    MOV   A,0x0
    0FB7: 7C 06 D0 LCALL _UART_Start
(0026) 	UART_IntCntl(UART_ENABLE_RX_INT);
    0FBA: 50 01    MOV   A,0x1
    0FBC: 7C 06 FD LCALL _UART_IntCntl
    0FBF: 20       POP   X
    0FC0: 7F       RET   
(0027) }
(0028) 
(0029) void Comm_Stop(void)
(0030) {
(0031) 	UART_IntCntl(UART_DISABLE_RX_INT);
_Comm_Stop:
    0FC1: 10       PUSH  X
    0FC2: 50 00    MOV   A,0x0
    0FC4: 7C 06 FD LCALL _UART_IntCntl
(0032) 	UART_Stop();
    0FC7: 7C 06 D7 LCALL _UART_Stop
    0FCA: 20       POP   X
    0FCB: 7F       RET   
(0033) }
(0034) 
(0035) static BYTE Comm_CalculateChecksum(BYTE* pBuffer, BYTE length)
(0036) {
comm.c:Comm_CalculateChecksum:
  sum                  --> X+1
  i                    --> X+0
  length               --> X-6
  pBuffer              --> X-5
    0FCC: 10       PUSH  X
    0FCD: 4F       MOV   X,SP
    0FCE: 38 02    ADD   SP,0x2
(0037) 	BYTE i = 0;
    0FD0: 56 00 00 MOV   [X+0],0x0
(0038) 	BYTE sum = 0;
    0FD3: 56 01 00 MOV   [X+1],0x0
(0039) 	for (i = 0; i < length; i++)
    0FD6: 56 00 00 MOV   [X+0],0x0
    0FD9: 80 1D    JMP   0x0FF7
(0040) 	{
(0041) 		sum += pBuffer[i];
    0FDB: 62 D0 00 MOV   REG[0xD0],0x0
    0FDE: 52 00    MOV   A,[X+0]
    0FE0: 53 C2    MOV   [__r1],A
    0FE2: 55 C3 00 MOV   [__r0],0x0
    0FE5: 52 FC    MOV   A,[X-4]
    0FE7: 04 C2    ADD   [__r1],A
    0FE9: 52 FB    MOV   A,[X-5]
    0FEB: 0C C3    ADC   [__r0],A
    0FED: 51 C3    MOV   A,[__r0]
    0FEF: 60 D4    MOV   REG[0xD4],A
    0FF1: 3E C2    MVI   A,[__r1]
    0FF3: 05 01    ADD   [X+1],A
(0042) 	}
    0FF5: 77 00    INC   [X+0]
    0FF7: 52 00    MOV   A,[X+0]
    0FF9: 3B FA    CMP   A,[X-6]
    0FFB: CF DF    JC    0x0FDB
(0043) 	
(0044) 	return sum;
    0FFD: 52 01    MOV   A,[X+1]
    0FFF: 62 D0 00 MOV   REG[0xD0],0x0
    1002: 38 FE    ADD   SP,0xFE
    1004: 20       POP   X
    1005: 7F       RET   
(0045) }
(0046) 
(0047) void Comm_WriteCommand(BYTE command, CONST BYTE* pData, BYTE length)
(0048) {
_Comm_WriteCommand:
  txbuffer             --> X+0
  length               --> X-7
  pData                --> X-6
  command              --> X-4
    1006: 10       PUSH  X
    1007: 4F       MOV   X,SP
    1008: 38 0F    ADD   SP,0xF
(0049) 	BYTE txbuffer[COMM_MAX_DATA_SIZE + 5];
(0050) 	txbuffer[0] = COMM_PACKET_HEADER_1ST;
    100A: 56 00 55 MOV   [X+0],0x55
(0051) 	txbuffer[1] = COMM_PACKET_HEADER_2ND;
    100D: 56 01 AA MOV   [X+1],0xAA
(0052) 	txbuffer[2] = command;
    1010: 52 FC    MOV   A,[X-4]
    1012: 54 02    MOV   [X+2],A
(0053) 	txbuffer[3] = length;
    1014: 52 F9    MOV   A,[X-7]
    1016: 54 03    MOV   [X+3],A
(0054) 	
(0055) 	if (length > 0)
    1018: 50 00    MOV   A,0x0
    101A: 3B F9    CMP   A,[X-7]
    101C: D0 24    JNC   0x1041
(0056) 	{
(0057) 		memcpy(&txbuffer[4], pData, length);
    101E: 62 D0 00 MOV   REG[0xD0],0x0
    1021: 52 F9    MOV   A,[X-7]
    1023: 53 C2    MOV   [__r1],A
    1025: 50 00    MOV   A,0x0
    1027: 08       PUSH  A
    1028: 51 C2    MOV   A,[__r1]
    102A: 08       PUSH  A
    102B: 52 FA    MOV   A,[X-6]
    102D: 08       PUSH  A
    102E: 52 FB    MOV   A,[X-5]
    1030: 08       PUSH  A
    1031: 5A C2    MOV   [__r1],X
    1033: 06 C2 04 ADD   [__r1],0x4
    1036: 50 07    MOV   A,0x7
    1038: 08       PUSH  A
    1039: 51 C2    MOV   A,[__r1]
    103B: 08       PUSH  A
    103C: 7C 3E A1 LCALL _memcpyLMM
    103F: 38 FA    ADD   SP,0xFA
(0058) 	}
(0059) 	
(0060) 	txbuffer[4 + length] = Comm_CalculateChecksum(txbuffer, 4 + length);
    1041: 62 D0 00 MOV   REG[0xD0],0x0
    1044: 52 F9    MOV   A,[X-7]
    1046: 01 04    ADD   A,0x4
    1048: 08       PUSH  A
    1049: 50 07    MOV   A,0x7
    104B: 08       PUSH  A
    104C: 10       PUSH  X
    104D: 9F 7D    CALL  comm.c:Comm_CalculateChecksum
    104F: 38 FD    ADD   SP,0xFD
    1051: 62 D0 00 MOV   REG[0xD0],0x0
    1054: 53 C3    MOV   [__r0],A
    1056: 55 C1 07 MOV   [__r2],0x7
    1059: 5A C0    MOV   [__r3],X
    105B: 06 C0 04 ADD   [__r3],0x4
    105E: 52 F9    MOV   A,[X-7]
    1060: 02 C0    ADD   A,[__r3]
    1062: 53 C0    MOV   [__r3],A
    1064: 50 00    MOV   A,0x0
    1066: 0A C1    ADC   A,[__r2]
    1068: 60 D5    MOV   REG[0xD5],A
    106A: 51 C3    MOV   A,[__r0]
    106C: 3F C0    MVI   [__r3],A
(0061) 	
(0062) 	UART_Write(txbuffer, length + 5);
    106E: 52 F9    MOV   A,[X-7]
    1070: 01 05    ADD   A,0x5
    1072: 10       PUSH  X
    1073: 08       PUSH  A
    1074: 50 07    MOV   A,0x7
    1076: 08       PUSH  A
    1077: 10       PUSH  X
    1078: 7C 07 91 LCALL _UART_Write
    107B: 38 FD    ADD   SP,0xFD
    107D: 20       POP   X
    107E: 38 F1    ADD   SP,0xF1
    1080: 20       POP   X
    1081: 7F       RET   
(0063) }
(0064) 
(0065) void Comm_WritePacket(COMMPACKET* pPacket)
(0066) {
_Comm_WritePacket:
  pPacket              --> X-5
    1082: 10       PUSH  X
    1083: 4F       MOV   X,SP
(0067) 	Comm_WriteCommand(pPacket->cmd, pPacket->pData, pPacket->length);
    1084: 62 D0 00 MOV   REG[0xD0],0x0
    1087: 52 FC    MOV   A,[X-4]
    1089: 01 01    ADD   A,0x1
    108B: 53 C2    MOV   [__r1],A
    108D: 52 FB    MOV   A,[X-5]
    108F: 09 00    ADC   A,0x0
    1091: 60 D4    MOV   REG[0xD4],A
    1093: 3E C2    MVI   A,[__r1]
    1095: 08       PUSH  A
    1096: 52 FC    MOV   A,[X-4]
    1098: 01 02    ADD   A,0x2
    109A: 53 C2    MOV   [__r1],A
    109C: 52 FB    MOV   A,[X-5]
    109E: 09 00    ADC   A,0x0
    10A0: 60 D4    MOV   REG[0xD4],A
    10A2: 3E C2    MVI   A,[__r1]
    10A4: 53 C3    MOV   [__r0],A
    10A6: 3E C2    MVI   A,[__r1]
    10A8: 53 C2    MOV   [__r1],A
    10AA: 51 C3    MOV   A,[__r0]
    10AC: 08       PUSH  A
    10AD: 51 C2    MOV   A,[__r1]
    10AF: 08       PUSH  A
    10B0: 52 FC    MOV   A,[X-4]
    10B2: 53 C2    MOV   [__r1],A
    10B4: 52 FB    MOV   A,[X-5]
    10B6: 60 D4    MOV   REG[0xD4],A
    10B8: 3E C2    MVI   A,[__r1]
    10BA: 08       PUSH  A
    10BB: 9F 49    CALL  _Comm_WriteCommand
    10BD: 38 FC    ADD   SP,0xFC
    10BF: 20       POP   X
    10C0: 7F       RET   
(0068) }
(0069) 
(0070) void Comm_ReadPacket(COMMPACKET* pPacket)
(0071) {
_Comm_ReadPacket:
  pPacket              --> X-5
    10C1: 10       PUSH  X
    10C2: 4F       MOV   X,SP
(0072) 	pPacket->cmd = rxbuffer[2];
    10C3: 62 D0 00 MOV   REG[0xD0],0x0
    10C6: 52 FC    MOV   A,[X-4]
    10C8: 53 C2    MOV   [__r1],A
    10CA: 52 FB    MOV   A,[X-5]
    10CC: 60 D5    MOV   REG[0xD5],A
    10CE: 62 D0 00 MOV   REG[0xD0],0x0
    10D1: 51 A8    MOV   A,[comm.c:rxbuffer+2]
    10D3: 62 D0 00 MOV   REG[0xD0],0x0
    10D6: 3F C2    MVI   [__r1],A
(0073) 	pPacket->length = rxbuffer[3];
    10D8: 52 FC    MOV   A,[X-4]
    10DA: 01 01    ADD   A,0x1
    10DC: 53 C2    MOV   [__r1],A
    10DE: 52 FB    MOV   A,[X-5]
    10E0: 09 00    ADC   A,0x0
    10E2: 60 D5    MOV   REG[0xD5],A
    10E4: 62 D0 00 MOV   REG[0xD0],0x0
    10E7: 51 A9    MOV   A,[comm.c:rxbuffer+3]
    10E9: 62 D0 00 MOV   REG[0xD0],0x0
    10EC: 3F C2    MVI   [__r1],A
(0074) 	memcpy(pPacket->pData, &rxbuffer[4], rxbuffer[3]);
    10EE: 62 D0 00 MOV   REG[0xD0],0x0
    10F1: 51 A9    MOV   A,[comm.c:rxbuffer+3]
    10F3: 62 D0 00 MOV   REG[0xD0],0x0
    10F6: 53 C2    MOV   [__r1],A
    10F8: 50 00    MOV   A,0x0
    10FA: 08       PUSH  A
    10FB: 51 C2    MOV   A,[__r1]
    10FD: 08       PUSH  A
    10FE: 50 00    MOV   A,0x0
    1100: 08       PUSH  A
    1101: 50 AA    MOV   A,0xAA
    1103: 08       PUSH  A
    1104: 52 FC    MOV   A,[X-4]
    1106: 01 02    ADD   A,0x2
    1108: 53 C2    MOV   [__r1],A
    110A: 52 FB    MOV   A,[X-5]
    110C: 09 00    ADC   A,0x0
    110E: 60 D4    MOV   REG[0xD4],A
    1110: 3E C2    MVI   A,[__r1]
    1112: 53 C3    MOV   [__r0],A
    1114: 3E C2    MVI   A,[__r1]
    1116: 53 C2    MOV   [__r1],A
    1118: 51 C3    MOV   A,[__r0]
    111A: 08       PUSH  A
    111B: 51 C2    MOV   A,[__r1]
    111D: 08       PUSH  A
    111E: 7C 3E A1 LCALL _memcpyLMM
    1121: 38 FA    ADD   SP,0xFA
(0075) 	
(0076) 	comm_packet_received = FALSE;
    1123: 62 D0 00 MOV   REG[0xD0],0x0
    1126: 55 DC 00 MOV   [comm_packet_received],0x0
    1129: 20       POP   X
    112A: 7F       RET   
(0077) }
(0078) 
(0079) #pragma interrupt_handler Comm_Uart_RxInt
(0080) void Comm_Uart_RxInt(void)
(0081) {
_Comm_Uart_RxInt:
    112B: 71 C0    OR    F,0xC0
    112D: 08       PUSH  A
    112E: 5D D0    MOV   A,REG[0xD0]
    1130: 08       PUSH  A
    1131: 5D D3    MOV   A,REG[0xD3]
    1133: 08       PUSH  A
    1134: 5D D4    MOV   A,REG[0xD4]
    1136: 08       PUSH  A
    1137: 5D D5    MOV   A,REG[0xD5]
    1139: 08       PUSH  A
    113A: 62 D0 00 MOV   REG[0xD0],0x0
    113D: 51 C3    MOV   A,[__r0]
    113F: 08       PUSH  A
    1140: 51 C2    MOV   A,[__r1]
    1142: 08       PUSH  A
    1143: 51 C1    MOV   A,[__r2]
    1145: 08       PUSH  A
    1146: 51 C0    MOV   A,[__r3]
    1148: 08       PUSH  A
    1149: 51 BF    MOV   A,[__r4]
    114B: 08       PUSH  A
    114C: 51 BE    MOV   A,[__r5]
    114E: 08       PUSH  A
    114F: 51 BD    MOV   A,[__r6]
    1151: 08       PUSH  A
    1152: 51 BC    MOV   A,[__r7]
    1154: 08       PUSH  A
    1155: 51 BB    MOV   A,[__r8]
    1157: 08       PUSH  A
    1158: 51 BA    MOV   A,[__r9]
    115A: 08       PUSH  A
    115B: 51 B9    MOV   A,[__r10]
    115D: 08       PUSH  A
    115E: 51 B8    MOV   A,[__r11]
    1160: 08       PUSH  A
    1161: 51 B7    MOV   A,[__rX]
    1163: 08       PUSH  A
    1164: 51 B6    MOV   A,[__rY]
    1166: 08       PUSH  A
    1167: 51 B5    MOV   A,[__rZ]
    1169: 08       PUSH  A
(0082) 	static BYTE counter = 0;
(0083) 	
(0084) 	if (comm_packet_received) // don't receive new packets until current is read
    116A: 62 D0 00 MOV   REG[0xD0],0x0
    116D: 3C DC 00 CMP   [comm_packet_received],0x0
    1170: A0 03    JZ    0x1174
(0085) 	{
(0086) 		return;
    1172: 81 10    JMP   0x1283
(0087) 	}
(0088) 	
(0089) 	if (bUART_ReadRxStatus() & UART_RX_ERROR) // check for UART errors
    1174: 10       PUSH  X
    1175: 7C 06 E7 LCALL bUART_ReadRxStatus|UART_bReadRxStatus|_UART_bReadRxStatus|_bUART_ReadRxStatus
    1178: 20       POP   X
    1179: 62 D0 00 MOV   REG[0xD0],0x0
    117C: 53 C3    MOV   [__r0],A
    117E: 47 C3 E0 TST   [__r0],0xE0
    1181: A0 1F    JZ    0x11A1
(0090) 	{
(0091) 		comm_error = bUART_ReadRxStatus() & UART_RX_ERROR;
    1183: 10       PUSH  X
    1184: 7C 06 E7 LCALL bUART_ReadRxStatus|UART_bReadRxStatus|_UART_bReadRxStatus|_bUART_ReadRxStatus
    1187: 20       POP   X
    1188: 21 E0    AND   A,0xE0
    118A: 62 D0 00 MOV   REG[0xD0],0x0
    118D: 53 DA    MOV   [comm_error],A
(0092) 		counter = 0;
    118F: 62 D0 00 MOV   REG[0xD0],0x0
    1192: 55 D9 00 MOV   [keypad.c:keyStillPressed+3],0x0
(0093) 		
(0094) 		UART_bReadRxData();
    1195: 10       PUSH  X
    1196: 7C 06 E4 LCALL _UART_bReadRxData|bUART_ReadRxData|_bUART_ReadRxData|UART_bReadRxData
    1199: 20       POP   X
    119A: 62 D0 00 MOV   REG[0xD0],0x0
    119D: 53 C3    MOV   [__r0],A
(0095) 		//cprintf("RX error %x\n", comm_error);
(0096) 		return;
    119F: 80 E3    JMP   0x1283
(0097) 	}
(0098) 	
(0099) 	rxbuffer[counter] = UART_bReadRxData(); // read received byte
    11A1: 10       PUSH  X
    11A2: 7C 06 E4 LCALL _UART_bReadRxData|bUART_ReadRxData|_bUART_ReadRxData|UART_bReadRxData
    11A5: 20       POP   X
    11A6: 62 D0 00 MOV   REG[0xD0],0x0
    11A9: 53 C3    MOV   [__r0],A
    11AB: 62 D0 00 MOV   REG[0xD0],0x0
    11AE: 51 D9    MOV   A,[keypad.c:keyStillPressed+3]
    11B0: 62 D0 00 MOV   REG[0xD0],0x0
    11B3: 53 C0    MOV   [__r3],A
    11B5: 55 C1 00 MOV   [__r2],0x0
    11B8: 06 C0 A6 ADD   [__r3],0xA6
    11BB: 0E C1 00 ADC   [__r2],0x0
    11BE: 51 C1    MOV   A,[__r2]
    11C0: 60 D5    MOV   REG[0xD5],A
    11C2: 51 C3    MOV   A,[__r0]
    11C4: 3F C0    MVI   [__r3],A
(0100) 	//cprintf("got byte %x\n", rxbuffer[counter]);
(0101) 	
(0102) 	if (counter == 0)
    11C6: 62 D0 00 MOV   REG[0xD0],0x0
    11C9: 3C D9 00 CMP   [keypad.c:keyStillPressed+3],0x0
    11CC: B0 11    JNZ   0x11DE
(0103) 	{
(0104) 		if (rxbuffer[0] != COMM_PACKET_HEADER_1ST)
    11CE: 62 D0 00 MOV   REG[0xD0],0x0
    11D1: 3C A6 55 CMP   [comm.c:rxbuffer],0x55
    11D4: A0 A9    JZ    0x127E
(0105) 		{
(0106) 			counter = 0;
    11D6: 62 D0 00 MOV   REG[0xD0],0x0
    11D9: 55 D9 00 MOV   [keypad.c:keyStillPressed+3],0x0
(0107) 			return;
    11DC: 80 A6    JMP   0x1283
(0108) 		}
(0109) 	}
(0110) 	else if (counter == 1)
    11DE: 62 D0 00 MOV   REG[0xD0],0x0
    11E1: 3C D9 01 CMP   [keypad.c:keyStillPressed+3],0x1
    11E4: B0 11    JNZ   0x11F6
(0111) 	{
(0112) 		if (rxbuffer[1] != COMM_PACKET_HEADER_2ND)
    11E6: 62 D0 00 MOV   REG[0xD0],0x0
    11E9: 3C A7 AA CMP   [comm.c:rxbuffer+1],0xAA
    11EC: A0 91    JZ    0x127E
(0113) 		{
(0114) 			counter = 0;
    11EE: 62 D0 00 MOV   REG[0xD0],0x0
    11F1: 55 D9 00 MOV   [keypad.c:keyStillPressed+3],0x0
(0115) 			return;
    11F4: 80 8E    JMP   0x1283
(0116) 		}
(0117) 	}
(0118) 	else if (counter == 3)
    11F6: 62 D0 00 MOV   REG[0xD0],0x0
    11F9: 3C D9 03 CMP   [keypad.c:keyStillPressed+3],0x3
    11FC: B0 18    JNZ   0x1215
(0119) 	{
(0120) 		if (rxbuffer[3] > COMM_MAX_DATA_SIZE)
    11FE: 62 D0 00 MOV   REG[0xD0],0x0
    1201: 50 0A    MOV   A,0xA
    1203: 3A A9    CMP   A,[comm.c:rxbuffer+3]
    1205: D0 78    JNC   0x127E
(0121) 		{
(0122) 			comm_error = COMM_PACKET_RX_OVERRUN_ERROR;
    1207: 62 D0 00 MOV   REG[0xD0],0x0
    120A: 55 DA 10 MOV   [comm_error],0x10
(0123) 			counter = 0;
    120D: 62 D0 00 MOV   REG[0xD0],0x0
    1210: 55 D9 00 MOV   [keypad.c:keyStillPressed+3],0x0
(0124) 			return;
    1213: 80 6F    JMP   0x1283
(0125) 		}
(0126) 	}
(0127) 	else if (counter == rxbuffer[3] + 4) // CHECKSUM BYTE
    1215: 62 D0 00 MOV   REG[0xD0],0x0
    1218: 51 A9    MOV   A,[comm.c:rxbuffer+3]
    121A: 01 04    ADD   A,0x4
    121C: 62 D0 00 MOV   REG[0xD0],0x0
    121F: 53 C3    MOV   [__r0],A
    1221: 62 D0 00 MOV   REG[0xD0],0x0
    1224: 51 D9    MOV   A,[keypad.c:keyStillPressed+3]
    1226: 62 D0 00 MOV   REG[0xD0],0x0
    1229: 3A C3    CMP   A,[__r0]
    122B: B0 52    JNZ   0x127E
(0128) 	{
(0129) 		if (Comm_CalculateChecksum(rxbuffer, rxbuffer[3]+4) == rxbuffer[rxbuffer[3] + 4])
    122D: 62 D0 00 MOV   REG[0xD0],0x0
    1230: 51 A9    MOV   A,[comm.c:rxbuffer+3]
    1232: 01 04    ADD   A,0x4
    1234: 62 D0 00 MOV   REG[0xD0],0x0
    1237: 08       PUSH  A
    1238: 50 00    MOV   A,0x0
    123A: 08       PUSH  A
    123B: 50 A6    MOV   A,0xA6
    123D: 08       PUSH  A
    123E: 9D 8C    CALL  comm.c:Comm_CalculateChecksum
    1240: 38 FD    ADD   SP,0xFD
    1242: 62 D0 00 MOV   REG[0xD0],0x0
    1245: 53 C3    MOV   [__r0],A
    1247: 62 D0 00 MOV   REG[0xD0],0x0
    124A: 51 A9    MOV   A,[comm.c:rxbuffer+3]
    124C: 62 D0 00 MOV   REG[0xD0],0x0
    124F: 53 C0    MOV   [__r3],A
    1251: 55 C1 00 MOV   [__r2],0x0
    1254: 06 C0 AA ADD   [__r3],0xAA
    1257: 0E C1 00 ADC   [__r2],0x0
    125A: 51 C1    MOV   A,[__r2]
    125C: 60 D4    MOV   REG[0xD4],A
    125E: 3E C0    MVI   A,[__r3]
    1260: 53 C1    MOV   [__r2],A
    1262: 51 C3    MOV   A,[__r0]
    1264: 3A C1    CMP   A,[__r2]
    1266: B0 09    JNZ   0x1270
(0130) 		{
(0131) 			comm_packet_received = TRUE;
    1268: 62 D0 00 MOV   REG[0xD0],0x0
    126B: 55 DC 01 MOV   [comm_packet_received],0x1
(0132) 		}
    126E: 80 07    JMP   0x1276
(0133) 		else
(0134) 		{
(0135) 			comm_error = COMM_PACKET_RX_CHECKSUM_ERROR;
    1270: 62 D0 00 MOV   REG[0xD0],0x0
    1273: 55 DA 08 MOV   [comm_error],0x8
(0136) 		}
(0137) 		
(0138) 		counter = 0;
    1276: 62 D0 00 MOV   REG[0xD0],0x0
    1279: 55 D9 00 MOV   [keypad.c:keyStillPressed+3],0x0
(0139) 		return;
    127C: 80 06    JMP   0x1283
(0140) 	}
(0141) 		
(0142) 	counter++;
    127E: 62 D0 00 MOV   REG[0xD0],0x0
    1281: 76 D9    INC   [keypad.c:keyStillPressed+3]
    1283: 62 D0 00 MOV   REG[0xD0],0x0
    1286: 18       POP   A
    1287: 53 B5    MOV   [__rZ],A
    1289: 18       POP   A
    128A: 53 B6    MOV   [__rY],A
    128C: 18       POP   A
    128D: 53 B7    MOV   [__rX],A
    128F: 18       POP   A
    1290: 53 B8    MOV   [__r11],A
    1292: 18       POP   A
    1293: 53 B9    MOV   [__r10],A
    1295: 18       POP   A
    1296: 53 BA    MOV   [__r9],A
    1298: 18       POP   A
    1299: 53 BB    MOV   [__r8],A
    129B: 18       POP   A
    129C: 53 BC    MOV   [__r7],A
    129E: 18       POP   A
    129F: 53 BD    MOV   [__r6],A
    12A1: 18       POP   A
    12A2: 53 BE    MOV   [__r5],A
    12A4: 18       POP   A
    12A5: 53 BF    MOV   [__r4],A
    12A7: 18       POP   A
    12A8: 53 C0    MOV   [__r3],A
    12AA: 18       POP   A
    12AB: 53 C1    MOV   [__r2],A
    12AD: 18       POP   A
    12AE: 53 C2    MOV   [__r1],A
    12B0: 18       POP   A
    12B1: 53 C3    MOV   [__r0],A
    12B3: 18       POP   A
    12B4: 60 D5    MOV   REG[0xD5],A
    12B6: 18       POP   A
    12B7: 60 D4    MOV   REG[0xD4],A
    12B9: 18       POP   A
    12BA: 60 D3    MOV   REG[0xD3],A
    12BC: 18       POP   A
    12BD: 60 D0    MOV   REG[0xD0],A
    12BF: 18       POP   A
    12C0: 7E       RETI  
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\configview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "configView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void ConfigView_Start(void)
(0014) {
_ConfigView_Start:
    12C1: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void ConfigView_Callback(void)
(0019) {
_ConfigView_Callback:
  conf                 --> X+0
    12C2: 10       PUSH  X
    12C3: 4F       MOV   X,SP
    12C4: 38 0B    ADD   SP,0xB
(0020) 	Config conf;
(0021) 	Persist_LoadConfig(&conf);
    12C6: 62 D0 00 MOV   REG[0xD0],0x0
    12C9: 50 07    MOV   A,0x7
    12CB: 08       PUSH  A
    12CC: 10       PUSH  X
    12CD: 7C 28 0C LCALL _Persist_LoadConfig
    12D0: 38 FE    ADD   SP,0xFE
(0022) 
(0023) 	currentView = CONFIG;
    12D2: 62 D0 00 MOV   REG[0xD0],0x0
    12D5: 55 DD 04 MOV   [currentView],0x4
(0024) 	Menu_Clear();
    12D8: 7C 26 30 LCALL _Menu_Clear
(0025) 	LCD_Position(0, 0);
    12DB: 10       PUSH  X
    12DC: 50 00    MOV   A,0x0
    12DE: 57 00    MOV   X,0x0
    12E0: 7C 0A 0D LCALL _LCD_Position
    12E3: 20       POP   X
(0026) 	if(conf.flags.registerEnabled)
    12E4: 52 00    MOV   A,[X+0]
    12E6: 62 D0 00 MOV   REG[0xD0],0x0
    12E9: 67       ASR   A
    12EA: 67       ASR   A
    12EB: 67       ASR   A
    12EC: 67       ASR   A
    12ED: 67       ASR   A
    12EE: 67       ASR   A
    12EF: 67       ASR   A
    12F0: 21 01    AND   A,0x1
    12F2: 53 C3    MOV   [__r0],A
    12F4: 26 C3 01 AND   [__r0],0x1
    12F7: A0 0F    JZ    0x1307
(0027) 	{
(0028) 		LCD_PrCString("Registrar: Si");
    12F9: 10       PUSH  X
    12FA: 50 01    MOV   A,0x1
    12FC: 08       PUSH  A
    12FD: 50 CA    MOV   A,0xCA
    12FF: 5C       MOV   X,A
    1300: 18       POP   A
    1301: 7C 08 88 LCALL _LCD_PrCString
    1304: 20       POP   X
(0029) 	}
    1305: 80 0D    JMP   0x1313
(0030) 	else
(0031) 	{
(0032) 		LCD_PrCString("Registrar: No");
    1307: 10       PUSH  X
    1308: 50 01    MOV   A,0x1
    130A: 08       PUSH  A
    130B: 50 BC    MOV   A,0xBC
    130D: 5C       MOV   X,A
    130E: 18       POP   A
    130F: 7C 08 88 LCALL _LCD_PrCString
    1312: 20       POP   X
(0033) 
(0034) 	}
(0035) 	LCD_Position(1,0);
    1313: 10       PUSH  X
    1314: 57 00    MOV   X,0x0
    1316: 50 01    MOV   A,0x1
    1318: 7C 0A 0D LCALL _LCD_Position
    131B: 20       POP   X
(0036) 	if(conf.flags.alarmEnabled)
    131C: 52 00    MOV   A,[X+0]
    131E: 62 D0 00 MOV   REG[0xD0],0x0
    1321: 67       ASR   A
    1322: 67       ASR   A
    1323: 67       ASR   A
    1324: 67       ASR   A
    1325: 67       ASR   A
    1326: 67       ASR   A
    1327: 21 03    AND   A,0x3
    1329: 53 C3    MOV   [__r0],A
    132B: 26 C3 01 AND   [__r0],0x1
    132E: A0 0F    JZ    0x133E
(0037) 	{
(0038) 		LCD_PrCString("Alarma:    Si");
    1330: 10       PUSH  X
    1331: 50 01    MOV   A,0x1
    1333: 08       PUSH  A
    1334: 50 AE    MOV   A,0xAE
    1336: 5C       MOV   X,A
    1337: 18       POP   A
    1338: 7C 08 88 LCALL _LCD_PrCString
    133B: 20       POP   X
(0039) 	}
    133C: 80 0D    JMP   0x134A
(0040) 	else
(0041) 	{
(0042) 		LCD_PrCString("Alarma:    No");
    133E: 10       PUSH  X
    133F: 50 01    MOV   A,0x1
    1341: 08       PUSH  A
    1342: 50 A0    MOV   A,0xA0
    1344: 5C       MOV   X,A
    1345: 18       POP   A
    1346: 7C 08 88 LCALL _LCD_PrCString
    1349: 20       POP   X
(0043) 	}
    134A: 38 F5    ADD   SP,0xF5
    134C: 20       POP   X
    134D: 7F       RET   
(0044) }
(0045) 
(0046) void ConfigView_Update(void)
(0047) {
_ConfigView_Update:
  conf                 --> X+0
    134E: 10       PUSH  X
    134F: 4F       MOV   X,SP
    1350: 38 11    ADD   SP,0x11
(0048) 	if(Keypad_IsKeyStored())
    1352: 7C 1B BC LCALL _Keypad_IsKeyStored
    1355: 62 D0 00 MOV   REG[0xD0],0x0
    1358: 39 00    CMP   A,0x0
    135A: A1 5D    JZ    0x14B8
(0049) 	{
(0050) 		Config conf;
(0051) 		Persist_LoadConfig(&conf);
    135C: 50 07    MOV   A,0x7
    135E: 08       PUSH  A
    135F: 10       PUSH  X
    1360: 7C 28 0C LCALL _Persist_LoadConfig
    1363: 38 FE    ADD   SP,0xFE
    1365: 62 D0 00 MOV   REG[0xD0],0x0
(0052) 
(0053) 		switch(Keypad_GetKey())
    1368: 7C 1B D4 LCALL _Keypad_GetKey
    136B: 62 D0 00 MOV   REG[0xD0],0x0
    136E: 54 0C    MOV   [X+12],A
    1370: 56 0B 00 MOV   [X+11],0x0
    1373: 52 0C    MOV   A,[X+12]
    1375: 11 48    SUB   A,0x48
    1377: 53 B6    MOV   [__rY],A
    1379: 52 0B    MOV   A,[X+11]
    137B: 31 80    XOR   A,0x80
    137D: 19 80    SBB   A,0x80
    137F: 2A B6    OR    A,[__rY]
    1381: A0 6E    JZ    0x13F0
    1383: D0 0D    JNC   0x1391
    1385: 3D 0B 00 CMP   [X+11],0x0
    1388: B0 06    JNZ   0x138F
    138A: 3D 0C 11 CMP   [X+12],0x11
    138D: A0 B3    JZ    0x1441
    138F: 80 B6    JMP   0x1446
    1391: 3D 0B 00 CMP   [X+11],0x0
    1394: B0 06    JNZ   0x139B
    1396: 3D 0C 88 CMP   [X+12],0x88
    1399: A0 03    JZ    0x139D
    139B: 80 AA    JMP   0x1446
(0054) 		{
(0055) 			case 0x88:
(0056) 				// "1"
(0057) 				conf.flags.registerEnabled = !conf.flags.registerEnabled;
    139D: 52 00    MOV   A,[X+0]
    139F: 62 D0 00 MOV   REG[0xD0],0x0
    13A2: 67       ASR   A
    13A3: 67       ASR   A
    13A4: 67       ASR   A
    13A5: 67       ASR   A
    13A6: 67       ASR   A
    13A7: 67       ASR   A
    13A8: 67       ASR   A
    13A9: 21 01    AND   A,0x1
    13AB: 53 C3    MOV   [__r0],A
    13AD: 26 C3 01 AND   [__r0],0x1
    13B0: B0 09    JNZ   0x13BA
    13B2: 56 0E 01 MOV   [X+14],0x1
    13B5: 56 0D 00 MOV   [X+13],0x0
    13B8: 80 07    JMP   0x13C0
    13BA: 56 0E 00 MOV   [X+14],0x0
    13BD: 56 0D 00 MOV   [X+13],0x0
    13C0: 62 D0 00 MOV   REG[0xD0],0x0
    13C3: 52 0E    MOV   A,[X+14]
    13C5: 53 C3    MOV   [__r0],A
    13C7: 26 C3 01 AND   [__r0],0x1
    13CA: 51 C3    MOV   A,[__r0]
    13CC: 64       ASL   A
    13CD: 64       ASL   A
    13CE: 64       ASL   A
    13CF: 64       ASL   A
    13D0: 64       ASL   A
    13D1: 64       ASL   A
    13D2: 64       ASL   A
    13D3: 53 C3    MOV   [__r0],A
    13D5: 26 C3 80 AND   [__r0],0x80
    13D8: 52 00    MOV   A,[X+0]
    13DA: 21 7F    AND   A,0x7F
    13DC: 2A C3    OR    A,[__r0]
    13DE: 54 00    MOV   [X+0],A
(0058) 				Persist_SaveConfig(&conf);
    13E0: 50 07    MOV   A,0x7
    13E2: 08       PUSH  A
    13E3: 10       PUSH  X
    13E4: 7C 27 E6 LCALL _Persist_SaveConfig
    13E7: 38 FE    ADD   SP,0xFE
    13E9: 62 D0 00 MOV   REG[0xD0],0x0
    13EC: 53 C3    MOV   [__r0],A
(0059) 				break;
    13EE: 80 57    JMP   0x1446
(0060) 			case 0x48:
(0061) 				// "4"
(0062) 				conf.flags.alarmEnabled = !conf.flags.alarmEnabled;
    13F0: 52 00    MOV   A,[X+0]
    13F2: 62 D0 00 MOV   REG[0xD0],0x0
    13F5: 67       ASR   A
    13F6: 67       ASR   A
    13F7: 67       ASR   A
    13F8: 67       ASR   A
    13F9: 67       ASR   A
    13FA: 67       ASR   A
    13FB: 21 03    AND   A,0x3
    13FD: 53 C3    MOV   [__r0],A
    13FF: 26 C3 01 AND   [__r0],0x1
    1402: B0 09    JNZ   0x140C
    1404: 56 10 01 MOV   [X+16],0x1
    1407: 56 0F 00 MOV   [X+15],0x0
    140A: 80 07    JMP   0x1412
    140C: 56 10 00 MOV   [X+16],0x0
    140F: 56 0F 00 MOV   [X+15],0x0
    1412: 62 D0 00 MOV   REG[0xD0],0x0
    1415: 52 10    MOV   A,[X+16]
    1417: 53 C3    MOV   [__r0],A
    1419: 26 C3 01 AND   [__r0],0x1
    141C: 51 C3    MOV   A,[__r0]
    141E: 64       ASL   A
    141F: 64       ASL   A
    1420: 64       ASL   A
    1421: 64       ASL   A
    1422: 64       ASL   A
    1423: 64       ASL   A
    1424: 53 C3    MOV   [__r0],A
    1426: 26 C3 40 AND   [__r0],0x40
    1429: 52 00    MOV   A,[X+0]
    142B: 21 BF    AND   A,0xBF
    142D: 2A C3    OR    A,[__r0]
    142F: 54 00    MOV   [X+0],A
(0063) 				Persist_SaveConfig(&conf);
    1431: 50 07    MOV   A,0x7
    1433: 08       PUSH  A
    1434: 10       PUSH  X
    1435: 7C 27 E6 LCALL _Persist_SaveConfig
    1438: 38 FE    ADD   SP,0xFE
    143A: 62 D0 00 MOV   REG[0xD0],0x0
    143D: 53 C3    MOV   [__r0],A
(0064) 				break;
    143F: 80 06    JMP   0x1446
(0065) 			case 0x11:
(0066) 				// "D"
(0067) 				MainView_Callback();
    1441: 7C 23 46 LCALL _MainView_Callback
(0068) 				return;
    1444: 80 73    JMP   0x14B8
(0069) 				break;
(0070) 		}
(0071) 
(0072) 		Menu_Clear();
    1446: 7C 26 30 LCALL _Menu_Clear
(0073) 		LCD_Position(0, 0);
    1449: 10       PUSH  X
    144A: 50 00    MOV   A,0x0
    144C: 57 00    MOV   X,0x0
    144E: 7C 0A 0D LCALL _LCD_Position
    1451: 20       POP   X
(0074) 		if(conf.flags.registerEnabled)
    1452: 52 00    MOV   A,[X+0]
    1454: 62 D0 00 MOV   REG[0xD0],0x0
    1457: 67       ASR   A
    1458: 67       ASR   A
    1459: 67       ASR   A
    145A: 67       ASR   A
    145B: 67       ASR   A
    145C: 67       ASR   A
    145D: 67       ASR   A
    145E: 21 01    AND   A,0x1
    1460: 53 C3    MOV   [__r0],A
    1462: 26 C3 01 AND   [__r0],0x1
    1465: A0 0F    JZ    0x1475
(0075) 		{
(0076) 			LCD_PrCString("Registrar: Si");
    1467: 10       PUSH  X
    1468: 50 01    MOV   A,0x1
    146A: 08       PUSH  A
    146B: 50 CA    MOV   A,0xCA
    146D: 5C       MOV   X,A
    146E: 18       POP   A
    146F: 7C 08 88 LCALL _LCD_PrCString
    1472: 20       POP   X
(0077) 		}
    1473: 80 0D    JMP   0x1481
(0078) 		else
(0079) 		{
(0080) 			LCD_PrCString("Registrar: No");
    1475: 10       PUSH  X
    1476: 50 01    MOV   A,0x1
    1478: 08       PUSH  A
    1479: 50 BC    MOV   A,0xBC
    147B: 5C       MOV   X,A
    147C: 18       POP   A
    147D: 7C 08 88 LCALL _LCD_PrCString
    1480: 20       POP   X
(0081) 
(0082) 		}
(0083) 		LCD_Position(1,0);
    1481: 10       PUSH  X
    1482: 57 00    MOV   X,0x0
    1484: 50 01    MOV   A,0x1
    1486: 7C 0A 0D LCALL _LCD_Position
    1489: 20       POP   X
(0084) 		if(conf.flags.alarmEnabled)
    148A: 52 00    MOV   A,[X+0]
    148C: 62 D0 00 MOV   REG[0xD0],0x0
    148F: 67       ASR   A
    1490: 67       ASR   A
    1491: 67       ASR   A
    1492: 67       ASR   A
    1493: 67       ASR   A
    1494: 67       ASR   A
    1495: 21 03    AND   A,0x3
    1497: 53 C3    MOV   [__r0],A
    1499: 26 C3 01 AND   [__r0],0x1
    149C: A0 0F    JZ    0x14AC
(0085) 		{
(0086) 			LCD_PrCString("Alarma:    Si");
    149E: 10       PUSH  X
    149F: 50 01    MOV   A,0x1
    14A1: 08       PUSH  A
    14A2: 50 AE    MOV   A,0xAE
    14A4: 5C       MOV   X,A
    14A5: 18       POP   A
    14A6: 7C 08 88 LCALL _LCD_PrCString
    14A9: 20       POP   X
(0087) 		}
    14AA: 80 0D    JMP   0x14B8
(0088) 		else
(0089) 		{
(0090) 			LCD_PrCString("Alarma:    No");
    14AC: 10       PUSH  X
    14AD: 50 01    MOV   A,0x1
    14AF: 08       PUSH  A
    14B0: 50 A0    MOV   A,0xA0
    14B2: 5C       MOV   X,A
    14B3: 18       POP   A
    14B4: 7C 08 88 LCALL _LCD_PrCString
    14B7: 20       POP   X
(0091) 		}
(0092) 	}
    14B8: 38 EF    ADD   SP,0xEF
    14BA: 20       POP   X
    14BB: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\datetimeview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "dateTimeView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "Time.h"
(0007) #include "Rtc.h"
(0008) #include "viewManager.h"
(0009) #include "Keypad.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void DateTimeView_Start(void)
(0014) {
_DateTimeView_Start:
    14BC: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void DateTimeView_Callback(void)
(0019) {
(0020) 	currentView = DATETIME_CONFIG;
_DateTimeView_Callback:
    14BD: 62 D0 00 MOV   REG[0xD0],0x0
    14C0: 55 DD 01 MOV   [currentView],0x1
(0021) 	Menu_Clear();
    14C3: 7C 26 30 LCALL _Menu_Clear
(0022) 	LCD_Position(0, 0);
    14C6: 10       PUSH  X
    14C7: 50 00    MOV   A,0x0
    14C9: 57 00    MOV   X,0x0
    14CB: 7C 0A 0D LCALL _LCD_Position
(0023) 	LCD_PrCString("00/00/00");
    14CE: 50 01    MOV   A,0x1
    14D0: 08       PUSH  A
    14D1: 50 E1    MOV   A,0xE1
    14D3: 5C       MOV   X,A
    14D4: 18       POP   A
    14D5: 7C 08 88 LCALL _LCD_PrCString
(0024) 	LCD_Position(1,0);
    14D8: 57 00    MOV   X,0x0
    14DA: 50 01    MOV   A,0x1
    14DC: 7C 0A 0D LCALL _LCD_Position
(0025) 	LCD_PrCString("00:00:00");
    14DF: 50 01    MOV   A,0x1
    14E1: 08       PUSH  A
    14E2: 50 D8    MOV   A,0xD8
    14E4: 5C       MOV   X,A
    14E5: 18       POP   A
    14E6: 7C 08 88 LCALL _LCD_PrCString
    14E9: 20       POP   X
    14EA: 7F       RET   
(0026) }
(0027) 
(0028) void DateTimeView_Update(void)
(0029) {
_DateTimeView_Update:
    14EB: 10       PUSH  X
    14EC: 4F       MOV   X,SP
    14ED: 38 02    ADD   SP,0x2
(0030) 	if(Keypad_IsKeyStored())
    14EF: 7C 1B BC LCALL _Keypad_IsKeyStored
    14F2: 62 D0 00 MOV   REG[0xD0],0x0
    14F5: 39 00    CMP   A,0x0
    14F7: A1 32    JZ    0x162A
(0031) 	{
(0032) 		switch(Keypad_GetKey())
    14F9: 7C 1B D4 LCALL _Keypad_GetKey
    14FC: 62 D0 00 MOV   REG[0xD0],0x0
    14FF: 54 01    MOV   [X+1],A
    1501: 56 00 00 MOV   [X+0],0x0
    1504: 3D 00 00 CMP   [X+0],0x0
    1507: B0 06    JNZ   0x150E
    1509: 3D 01 42 CMP   [X+1],0x42
    150C: A0 DE    JZ    0x15EB
    150E: 52 01    MOV   A,[X+1]
    1510: 11 44    SUB   A,0x44
    1512: 62 D0 00 MOV   REG[0xD0],0x0
    1515: 53 B6    MOV   [__rY],A
    1517: 52 00    MOV   A,[X+0]
    1519: 31 80    XOR   A,0x80
    151B: 19 80    SBB   A,0x80
    151D: 2A B6    OR    A,[__rY]
    151F: A0 C1    JZ    0x15E1
    1521: D0 56    JNC   0x1578
    1523: 3D 00 00 CMP   [X+0],0x0
    1526: B0 06    JNZ   0x152D
    1528: 3D 01 22 CMP   [X+1],0x22
    152B: A0 DD    JZ    0x1609
    152D: 52 01    MOV   A,[X+1]
    152F: 11 24    SUB   A,0x24
    1531: 62 D0 00 MOV   REG[0xD0],0x0
    1534: 53 B6    MOV   [__rY],A
    1536: 52 00    MOV   A,[X+0]
    1538: 31 80    XOR   A,0x80
    153A: 19 80    SBB   A,0x80
    153C: 2A B6    OR    A,[__rY]
    153E: A0 C0    JZ    0x15FF
    1540: D0 2B    JNC   0x156C
    1542: 3D 00 00 CMP   [X+0],0x0
    1545: B0 06    JNZ   0x154C
    1547: 3D 01 11 CMP   [X+1],0x11
    154A: A0 C8    JZ    0x1613
    154C: 3D 00 00 CMP   [X+0],0x0
    154F: B0 06    JNZ   0x1556
    1551: 3D 01 12 CMP   [X+1],0x12
    1554: A0 CD    JZ    0x1622
    1556: 3D 00 00 CMP   [X+0],0x0
    1559: B0 06    JNZ   0x1560
    155B: 3D 01 14 CMP   [X+1],0x14
    155E: A0 50    JZ    0x15AF
    1560: 3D 00 00 CMP   [X+0],0x0
    1563: B0 06    JNZ   0x156A
    1565: 3D 01 18 CMP   [X+1],0x18
    1568: A0 AF    JZ    0x1618
    156A: 80 BF    JMP   0x162A
    156C: 3D 00 00 CMP   [X+0],0x0
    156F: B0 06    JNZ   0x1576
    1571: 3D 01 28 CMP   [X+1],0x28
    1574: A0 80    JZ    0x15F5
    1576: 80 B3    JMP   0x162A
    1578: 3D 00 00 CMP   [X+0],0x0
    157B: B0 06    JNZ   0x1582
    157D: 3D 01 82 CMP   [X+1],0x82
    1580: A0 4C    JZ    0x15CD
    1582: 52 01    MOV   A,[X+1]
    1584: 11 84    SUB   A,0x84
    1586: 62 D0 00 MOV   REG[0xD0],0x0
    1589: 53 B6    MOV   [__rY],A
    158B: 52 00    MOV   A,[X+0]
    158D: 31 80    XOR   A,0x80
    158F: 19 80    SBB   A,0x80
    1591: 2A B6    OR    A,[__rY]
    1593: A0 2F    JZ    0x15C3
    1595: D0 0D    JNC   0x15A3
    1597: 3D 00 00 CMP   [X+0],0x0
    159A: B0 06    JNZ   0x15A1
    159C: 3D 01 48 CMP   [X+1],0x48
    159F: A0 37    JZ    0x15D7
    15A1: 80 88    JMP   0x162A
    15A3: 3D 00 00 CMP   [X+0],0x0
    15A6: B0 06    JNZ   0x15AD
    15A8: 3D 01 88 CMP   [X+1],0x88
    15AB: A0 0D    JZ    0x15B9
    15AD: 80 7C    JMP   0x162A
(0033) 		{
(0034) 			case 0x14:
(0035) 					// "0"
(0036) 					Time_Adj_Mi(TIME_DOWN);
    15AF: 50 00    MOV   A,0x0
    15B1: 08       PUSH  A
    15B2: 7C 32 25 LCALL _Time_Adj_Mi
    15B5: 38 FF    ADD   SP,0xFF
(0037) 					break;
    15B7: 80 72    JMP   0x162A
(0038) 				case 0x88:
(0039) 					// "1"
(0040) 					Time_Adj_D(TIME_UP);
    15B9: 50 01    MOV   A,0x1
    15BB: 08       PUSH  A
    15BC: 7C 34 DD LCALL _Time_Adj_D
    15BF: 38 FF    ADD   SP,0xFF
(0041) 					break;
    15C1: 80 68    JMP   0x162A
(0042) 				case 0x84:
(0043) 					// "2"
(0044) 					Time_Adj_Mo(TIME_UP);
    15C3: 50 01    MOV   A,0x1
    15C5: 08       PUSH  A
    15C6: 7C 36 4A LCALL _Time_Adj_Mo
    15C9: 38 FF    ADD   SP,0xFF
(0045) 					break;
    15CB: 80 5E    JMP   0x162A
(0046) 				case 0x82:
(0047) 					// "3"
(0048) 					Time_Adj_Y(TIME_UP);
    15CD: 50 01    MOV   A,0x1
    15CF: 08       PUSH  A
    15D0: 7C 37 B8 LCALL _Time_Adj_Y
    15D3: 38 FF    ADD   SP,0xFF
(0049) 					break;
    15D5: 80 54    JMP   0x162A
(0050) 				case 0x48:
(0051) 					// "4"
(0052) 					Time_Adj_D(TIME_DOWN);
    15D7: 50 00    MOV   A,0x0
    15D9: 08       PUSH  A
    15DA: 7C 34 DD LCALL _Time_Adj_D
    15DD: 38 FF    ADD   SP,0xFF
(0053) 					break;
    15DF: 80 4A    JMP   0x162A
(0054) 				case 0x44:
(0055) 					// "5"
(0056) 					Time_Adj_Mo(TIME_DOWN);
    15E1: 50 00    MOV   A,0x0
    15E3: 08       PUSH  A
    15E4: 7C 36 4A LCALL _Time_Adj_Mo
    15E7: 38 FF    ADD   SP,0xFF
(0057) 					break;
    15E9: 80 40    JMP   0x162A
(0058) 				case 0x42:
(0059) 					// "6"
(0060) 					Time_Adj_Y(TIME_DOWN);
    15EB: 50 00    MOV   A,0x0
    15ED: 08       PUSH  A
    15EE: 7C 37 B8 LCALL _Time_Adj_Y
    15F1: 38 FF    ADD   SP,0xFF
(0061) 					break;
    15F3: 80 36    JMP   0x162A
(0062) 				case 0x28:
(0063) 					// "7"
(0064) 					Time_Adj_H(TIME_UP);
    15F5: 50 01    MOV   A,0x1
    15F7: 08       PUSH  A
    15F8: 7C 32 E3 LCALL _Time_Adj_H
    15FB: 38 FF    ADD   SP,0xFF
(0065) 					break;
    15FD: 80 2C    JMP   0x162A
(0066) 				case 0x24:
(0067) 					// "8"
(0068) 					Time_Adj_Mi(TIME_UP);
    15FF: 50 01    MOV   A,0x1
    1601: 08       PUSH  A
    1602: 7C 32 25 LCALL _Time_Adj_Mi
    1605: 38 FF    ADD   SP,0xFF
(0069) 					break;
    1607: 80 22    JMP   0x162A
(0070) 				case 0x22:
(0071) 					// "9"
(0072) 					Time_Adj_S(TIME_UP);
    1609: 50 01    MOV   A,0x1
    160B: 08       PUSH  A
    160C: 7C 31 67 LCALL _Time_Adj_S
    160F: 38 FF    ADD   SP,0xFF
(0073) 					break;
    1611: 80 18    JMP   0x162A
(0074) 				case 0x11:
(0075) 					// "D"
(0076) 					MainView_Callback();
    1613: 7C 23 46 LCALL _MainView_Callback
(0077) 					return;
    1616: 80 75    JMP   0x168C
(0078) 					break;
(0079) 				case 0x18:
(0080) 					// "*"
(0081) 					Time_Adj_H(TIME_DOWN);
    1618: 50 00    MOV   A,0x0
    161A: 08       PUSH  A
    161B: 7C 32 E3 LCALL _Time_Adj_H
    161E: 38 FF    ADD   SP,0xFF
(0082) 					break;
    1620: 80 09    JMP   0x162A
(0083) 				case 0x12:
(0084) 					// "#"
(0085) 					Time_Adj_S(TIME_DOWN);
    1622: 50 00    MOV   A,0x0
    1624: 08       PUSH  A
    1625: 7C 31 67 LCALL _Time_Adj_S
    1628: 38 FF    ADD   SP,0xFF
(0086) 					break;
(0087) 		}
(0088) 	}
(0089) 
(0090) 	Rtc_ReadFromRtc();
    162A: 7C 2B 23 LCALL _Rtc_ReadFromRtc
    162D: 62 D0 00 MOV   REG[0xD0],0x0
(0091) 	
(0092) 	LCD_Position(0, 0);
    1630: 10       PUSH  X
    1631: 50 00    MOV   A,0x0
    1633: 57 00    MOV   X,0x0
    1635: 7C 0A 0D LCALL _LCD_Position
(0093) 	LCD_PrHexByte(datetime._04h.byte);
    1638: 62 D0 00 MOV   REG[0xD0],0x0
    163B: 51 C8    MOV   A,[datetime+4]
    163D: 7C 08 AA LCALL _LCD_PrHexByte
(0094) 	LCD_Position(0, 3);
    1640: 57 03    MOV   X,0x3
    1642: 50 00    MOV   A,0x0
    1644: 7C 0A 0D LCALL _LCD_Position
(0095) 	LCD_PrHexByte(datetime._05h.byte);
    1647: 62 D0 00 MOV   REG[0xD0],0x0
    164A: 51 C9    MOV   A,[datetime+5]
    164C: 7C 08 AA LCALL _LCD_PrHexByte
(0096) 	LCD_Position(0, 6);
    164F: 57 06    MOV   X,0x6
    1651: 50 00    MOV   A,0x0
    1653: 7C 0A 0D LCALL _LCD_Position
(0097) 	LCD_PrHexByte(datetime._06h.byte);
    1656: 62 D0 00 MOV   REG[0xD0],0x0
    1659: 51 CA    MOV   A,[datetime+6]
    165B: 7C 08 AA LCALL _LCD_PrHexByte
(0098) 
(0099) 	LCD_Position(1, 0);
    165E: 57 00    MOV   X,0x0
    1660: 50 01    MOV   A,0x1
    1662: 7C 0A 0D LCALL _LCD_Position
(0100) 	/*if(is12h)
(0101) 	{
(0102) 		LCD_PrHexByte(datetime._02h.bits_ampm.hours | (datetime._02h.bits_ampm.hours10 << 4));
(0103) 	}
(0104) 	else
(0105) 	{*/
(0106) 		LCD_PrHexByte(datetime._02h.byte);
    1665: 62 D0 00 MOV   REG[0xD0],0x0
    1668: 51 C6    MOV   A,[datetime+2]
    166A: 7C 08 AA LCALL _LCD_PrHexByte
(0107) 	//}
(0108) 	LCD_Position(1, 3);
    166D: 57 03    MOV   X,0x3
    166F: 50 01    MOV   A,0x1
    1671: 7C 0A 0D LCALL _LCD_Position
(0109) 	LCD_PrHexByte(datetime._01h.byte);
    1674: 62 D0 00 MOV   REG[0xD0],0x0
    1677: 51 C5    MOV   A,[datetime+1]
    1679: 7C 08 AA LCALL _LCD_PrHexByte
(0110) 	LCD_Position(1, 6);
    167C: 57 06    MOV   X,0x6
    167E: 50 01    MOV   A,0x1
    1680: 7C 0A 0D LCALL _LCD_Position
(0111) 	LCD_PrHexByte(datetime._00h.byte);
    1683: 62 D0 00 MOV   REG[0xD0],0x0
    1686: 51 C4    MOV   A,[datetime]
    1688: 7C 08 AA LCALL _LCD_PrHexByte
    168B: 20       POP   X
    168C: 38 FE    ADD   SP,0xFE
    168E: 20       POP   X
    168F: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\dateutil.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "dateUtil.h"
(0004) 
(0005) BOOL isLeapYear(unsigned short year)
(0006) {
_isLeapYear:
  year                 --> X-5
    1690: 10       PUSH  X
    1691: 4F       MOV   X,SP
    1692: 38 02    ADD   SP,0x2
(0007) 	return (!(year%4) && (year%100) || !(year%400));
    1694: 62 D0 00 MOV   REG[0xD0],0x0
    1697: 52 FC    MOV   A,[X-4]
    1699: 21 03    AND   A,0x3
    169B: 53 C2    MOV   [__r1],A
    169D: 52 FB    MOV   A,[X-5]
    169F: 21 00    AND   A,0x0
    16A1: 39 00    CMP   A,0x0
    16A3: B0 27    JNZ   0x16CB
    16A5: 3C C2 00 CMP   [__r1],0x0
    16A8: B0 22    JNZ   0x16CB
    16AA: 62 D0 00 MOV   REG[0xD0],0x0
    16AD: 50 00    MOV   A,0x0
    16AF: 08       PUSH  A
    16B0: 50 64    MOV   A,0x64
    16B2: 08       PUSH  A
    16B3: 52 FB    MOV   A,[X-5]
    16B5: 08       PUSH  A
    16B6: 52 FC    MOV   A,[X-4]
    16B8: 08       PUSH  A
    16B9: 7C 39 27 LCALL 0x3927
    16BC: 38 FE    ADD   SP,0xFE
    16BE: 18       POP   A
    16BF: 53 C2    MOV   [__r1],A
    16C1: 18       POP   A
    16C2: 39 00    CMP   A,0x0
    16C4: B0 27    JNZ   0x16EC
    16C6: 3C C2 00 CMP   [__r1],0x0
    16C9: B0 22    JNZ   0x16EC
    16CB: 62 D0 00 MOV   REG[0xD0],0x0
    16CE: 50 01    MOV   A,0x1
    16D0: 08       PUSH  A
    16D1: 50 90    MOV   A,0x90
    16D3: 08       PUSH  A
    16D4: 52 FB    MOV   A,[X-5]
    16D6: 08       PUSH  A
    16D7: 52 FC    MOV   A,[X-4]
    16D9: 08       PUSH  A
    16DA: 7C 39 27 LCALL 0x3927
    16DD: 38 FE    ADD   SP,0xFE
    16DF: 18       POP   A
    16E0: 53 C2    MOV   [__r1],A
    16E2: 18       POP   A
    16E3: 39 00    CMP   A,0x0
    16E5: B0 0E    JNZ   0x16F4
    16E7: 3C C2 00 CMP   [__r1],0x0
    16EA: B0 09    JNZ   0x16F4
    16EC: 56 01 01 MOV   [X+1],0x1
    16EF: 56 00 00 MOV   [X+0],0x0
    16F2: 80 07    JMP   0x16FA
    16F4: 56 01 00 MOV   [X+1],0x0
    16F7: 56 00 00 MOV   [X+0],0x0
    16FA: 62 D0 00 MOV   REG[0xD0],0x0
    16FD: 52 01    MOV   A,[X+1]
    16FF: 38 FE    ADD   SP,0xFE
    1701: 20       POP   X
    1702: 7F       RET   
(0008) }
(0009) 
(0010) BOOL isValidDate(BYTE day, BYTE month, BYTE year)
(0011) {
_isValidDate:
  monthLen             --> X+2
  fullYear             --> X+0
  year                 --> X-6
  month                --> X-5
  day                  --> X-4
    1703: 10       PUSH  X
    1704: 4F       MOV   X,SP
    1705: 38 0E    ADD   SP,0xE
(0012) 	unsigned short fullYear = 2000 + year;
    1707: 62 D0 00 MOV   REG[0xD0],0x0
    170A: 52 FA    MOV   A,[X-6]
    170C: 53 C2    MOV   [__r1],A
    170E: 55 C3 00 MOV   [__r0],0x0
    1711: 06 C2 D0 ADD   [__r1],0xD0
    1714: 0E C3 07 ADC   [__r0],0x7
    1717: 51 C2    MOV   A,[__r1]
    1719: 54 01    MOV   [X+1],A
    171B: 51 C3    MOV   A,[__r0]
    171D: 54 00    MOV   [X+0],A
(0013) 	BYTE monthLen[]={31,28,31,30,31,30,31,31,30,31,30,31};
    171F: 55 C2 EA MOV   [__r1],0xEA
    1722: 55 C3 01 MOV   [__r0],0x1
    1725: 5A C0    MOV   [__r3],X
    1727: 06 C0 02 ADD   [__r3],0x2
    172A: 62 D5 07 MOV   REG[0xD5],0x7
    172D: 10       PUSH  X
    172E: 55 B7 00 MOV   [__rX],0x0
    1731: 51 C3    MOV   A,[__r0]
    1733: 58 C2    MOV   X,[__r1]
    1735: 08       PUSH  A
    1736: 28       ROMX  
    1737: 62 D0 00 MOV   REG[0xD0],0x0
    173A: 3F C0    MVI   [__r3],A
    173C: 18       POP   A
    173D: 75       INC   X
    173E: 09 00    ADC   A,0x0
    1740: 76 B7    INC   [__rX]
    1742: 3C B7 0C CMP   [__rX],0xC
    1745: BF EF    JNZ   0x1735
    1747: 20       POP   X
(0014) 	
(0015) 	if(year > 99) return FALSE;
    1748: 50 63    MOV   A,0x63
    174A: 3B FA    CMP   A,[X-6]
    174C: D0 08    JNC   0x1755
    174E: 62 D0 00 MOV   REG[0xD0],0x0
    1751: 50 00    MOV   A,0x0
    1753: 80 63    JMP   0x17B7
(0016) 
(0017) 	if (!fullYear || !month || !day || month>12)
    1755: 3D 00 00 CMP   [X+0],0x0
    1758: B0 06    JNZ   0x175F
    175A: 3D 01 00 CMP   [X+1],0x0
    175D: A0 11    JZ    0x176F
    175F: 3D FB 00 CMP   [X-5],0x0
    1762: A0 0C    JZ    0x176F
    1764: 3D FC 00 CMP   [X-4],0x0
    1767: A0 07    JZ    0x176F
    1769: 50 0C    MOV   A,0xC
    176B: 3B FB    CMP   A,[X-5]
    176D: D0 08    JNC   0x1776
(0018) 		return FALSE;
    176F: 62 D0 00 MOV   REG[0xD0],0x0
    1772: 50 00    MOV   A,0x0
    1774: 80 42    JMP   0x17B7
(0019) 	if (isLeapYear(fullYear) && month==2)
    1776: 52 00    MOV   A,[X+0]
    1778: 08       PUSH  A
    1779: 52 01    MOV   A,[X+1]
    177B: 08       PUSH  A
    177C: 9F 12    CALL  _isLeapYear
    177E: 38 FE    ADD   SP,0xFE
    1780: 62 D0 00 MOV   REG[0xD0],0x0
    1783: 39 00    CMP   A,0x0
    1785: A0 08    JZ    0x178E
    1787: 3D FB 02 CMP   [X-5],0x2
    178A: B0 03    JNZ   0x178E
(0020) 		monthLen[1]++;
    178C: 77 03    INC   [X+3]
(0021) 	if (day > monthLen[month-1])
    178E: 62 D0 00 MOV   REG[0xD0],0x0
    1791: 55 C3 07 MOV   [__r0],0x7
    1794: 5A C2    MOV   [__r1],X
    1796: 06 C2 01 ADD   [__r1],0x1
    1799: 52 FB    MOV   A,[X-5]
    179B: 02 C2    ADD   A,[__r1]
    179D: 53 C2    MOV   [__r1],A
    179F: 50 00    MOV   A,0x0
    17A1: 0A C3    ADC   A,[__r0]
    17A3: 60 D4    MOV   REG[0xD4],A
    17A5: 3E C2    MVI   A,[__r1]
    17A7: 3B FC    CMP   A,[X-4]
    17A9: D0 08    JNC   0x17B2
(0022) 		return FALSE;
    17AB: 62 D0 00 MOV   REG[0xD0],0x0
    17AE: 50 00    MOV   A,0x0
    17B0: 80 06    JMP   0x17B7
(0023) 	return TRUE;
    17B2: 62 D0 00 MOV   REG[0xD0],0x0
    17B5: 50 01    MOV   A,0x1
    17B7: 38 F2    ADD   SP,0xF2
    17B9: 20       POP   X
    17BA: 7F       RET   
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
17BB: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
17BC: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
17BE: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
17C0: 78       DEC   A                  (0062)     dec   A
17C1: BF FC    JNZ   0x17BE             (0063)     jnz   DELAY50US
                                        (0064) 
17C3: 18       POP   A                  (0065) 	pop A
17C4: 78       DEC   A                  (0066) 	dec   A
17C5: BF F5    JNZ   _Delay10msTimes    (0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
17C7: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
17C8: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
17CA: 78       DEC   A                  (0104) 	dec A
17CB: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
17CD: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
17D6: 08       PUSH  A                  (0149)     push  A
17D7: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
17D9: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
17DB: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
17DD: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
17DF: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
17E1: D0 06    JNC   0x17E8             (0155)     jnc   Delay50u_End
17E3: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
17E5: 78       DEC   A                  (0158)     dec   A                            ; [4]
17E6: BF FE    JNZ   0x17E5             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
17E8: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
17E9: 7F       RET                      (0163)     ret
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\deletview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "DeletView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void DeletView_Start(void)
(0014) {
_DeletView_Start:
    17EA: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void DeletView_Callback(void)
(0019) {	
(0020) 	currentView = DELET;
_DeletView_Callback:
    17EB: 62 D0 00 MOV   REG[0xD0],0x0
    17EE: 55 DD 06 MOV   [currentView],0x6
(0021) 	Menu_Clear();
    17F1: 7C 26 30 LCALL _Menu_Clear
(0022) 	Persist_Clear();
    17F4: 7C 26 B8 LCALL _Persist_Clear
(0023) 	LCD_Position(0, 0);
    17F7: 10       PUSH  X
    17F8: 50 00    MOV   A,0x0
    17FA: 57 00    MOV   X,0x0
    17FC: 7C 0A 0D LCALL _LCD_Position
(0024) 	LCD_PrCString("¡Datos Borrados!");
    17FF: 50 01    MOV   A,0x1
    1801: 08       PUSH  A
    1802: 50 F6    MOV   A,0xF6
    1804: 5C       MOV   X,A
    1805: 18       POP   A
    1806: 7C 08 88 LCALL _LCD_PrCString
    1809: 20       POP   X
    180A: 7F       RET   
(0025) }
(0026) 
(0027) void DeletView_Update(void)
(0028) {	
_DeletView_Update:
    180B: 10       PUSH  X
    180C: 4F       MOV   X,SP
    180D: 38 02    ADD   SP,0x2
(0029) 	if(Keypad_IsKeyStored())
    180F: 7C 1B BC LCALL _Keypad_IsKeyStored
    1812: 62 D0 00 MOV   REG[0xD0],0x0
    1815: 39 00    CMP   A,0x0
    1817: A0 1B    JZ    0x1833
(0030) 	{
(0031) 		switch(Keypad_GetKey())
    1819: 7C 1B D4 LCALL _Keypad_GetKey
    181C: 62 D0 00 MOV   REG[0xD0],0x0
    181F: 54 01    MOV   [X+1],A
    1821: 56 00 00 MOV   [X+0],0x0
    1824: 3D 00 00 CMP   [X+0],0x0
    1827: B0 06    JNZ   0x182E
    1829: 3D 01 11 CMP   [X+1],0x11
    182C: A0 03    JZ    0x1830
    182E: 80 04    JMP   0x1833
(0032) 		{
(0033) 			case 0x11:
(0034) 				// "B"
(0035) 				MainView_Callback();
    1830: 7C 23 46 LCALL _MainView_Callback
(0036) 				return;
(0037) 				break;
(0038) 		}
(0039) 	}
    1833: 38 FE    ADD   SP,0xFE
    1835: 20       POP   X
    1836: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\devcontrol.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Comm.h"
(0004) #include "DevControl.h"
(0005) #include "TempSensor.h"
(0006) #include "Persist.h"
(0007) 
(0008) /* Comandos:
(0009) 0 - Ping
(0010) 	responde con el mismo mensaje
(0011) 1 - Borrar memoria
(0012) 	responde con el mismo mensaje
(0013) 2 - Obtener número de entradas
(0014) 	responde con un byte en datos del número de entradas
(0015) 3 - Obtener entrada N (n en datos)
(0016) 	responde con todos los bytes de la entrada en datos
(0017) 4 - Obtener hora
(0018) 5 - Configurar hora
(0019) 6 - Obtener alarma 1
(0020) 7 - Configurar alarma 1
(0021) 8 - Obtener alarma 2
(0022) 9 - Configurar alarma 2
(0023) 10 - Leer temperatura actual
(0024) responde con un byte en datos de la temperatura*/
(0025) 
(0026) #define CMD_PING			0x00
(0027) #define CMD_EREASE_MEMORY	0x01
(0028) #define CMD_N_ENTRIES		0x02
(0029) #define CMD_ENTRY			0x03
(0030) #define CMD_GET_TIME		0x04
(0031) #define CMD_SET_TIME		0x05
(0032) #define CMD_GET_H_ALARM		0x06
(0033) #define CMD_SET_H_ALARM		0x07
(0034) #define CMD_GET_L_ALARM 	0x08
(0035) #define CMD_SET_L_ALARM		0x09
(0036) #define CMD_TEMP			0x0a
(0037) 
(0038) 
(0039) void DevControl_Start(void)
(0040) {
(0041) 	Comm_Start(); // initialize comm
_DevControl_Start:
    1837: 7C 0F B4 LCALL _Comm_Start
    183A: 7F       RET   
(0042) }
(0043) 
(0044) void DevControl_Stop(void)
(0045) {
(0046) 	Comm_Stop();
_DevControl_Stop:
    183B: 7C 0F C1 LCALL _Comm_Stop
    183E: 7F       RET   
(0047) }
(0048) 
(0049) void DevControl_Check(void)
(0050) {
_DevControl_Check:
  packet               --> X+20
  buffer               --> X+0
    183F: 10       PUSH  X
    1840: 4F       MOV   X,SP
    1841: 38 1A    ADD   SP,0x1A
(0051) 	BYTE buffer[20] = { 0 };
    1843: 62 D0 00 MOV   REG[0xD0],0x0
    1846: 55 C2 08 MOV   [__r1],0x8
    1849: 55 C3 02 MOV   [__r0],0x2
    184C: 5A C0    MOV   [__r3],X
    184E: 62 D5 07 MOV   REG[0xD5],0x7
    1851: 10       PUSH  X
    1852: 55 B7 00 MOV   [__rX],0x0
    1855: 51 C3    MOV   A,[__r0]
    1857: 58 C2    MOV   X,[__r1]
    1859: 08       PUSH  A
    185A: 28       ROMX  
    185B: 62 D0 00 MOV   REG[0xD0],0x0
    185E: 3F C0    MVI   [__r3],A
    1860: 18       POP   A
    1861: 75       INC   X
    1862: 09 00    ADC   A,0x0
    1864: 76 B7    INC   [__rX]
    1866: 3C B7 14 CMP   [__rX],0x14
    1869: BF EF    JNZ   0x1859
    186B: 20       POP   X
(0052) 	COMMPACKET packet;
(0053) 
(0054) 	if (comm_packet_received == TRUE)
    186C: 62 D0 00 MOV   REG[0xD0],0x0
    186F: 3C DC 01 CMP   [comm_packet_received],0x1
    1872: B0 CF    JNZ   0x1942
(0055) 	{	
(0056) 		Comm_ReadPacket(&packet);
    1874: 62 D0 00 MOV   REG[0xD0],0x0
    1877: 5A C2    MOV   [__r1],X
    1879: 06 C2 14 ADD   [__r1],0x14
    187C: 50 07    MOV   A,0x7
    187E: 08       PUSH  A
    187F: 51 C2    MOV   A,[__r1]
    1881: 08       PUSH  A
    1882: 7C 10 C1 LCALL _Comm_ReadPacket
    1885: 38 FE    ADD   SP,0xFE
(0057) 		switch (packet.cmd) 
    1887: 52 14    MOV   A,[X+20]
    1889: 54 19    MOV   [X+25],A
    188B: 56 18 00 MOV   [X+24],0x0
    188E: 3D 18 00 CMP   [X+24],0x0
    1891: B0 06    JNZ   0x1898
    1893: 3D 19 00 CMP   [X+25],0x0
    1896: A0 67    JZ    0x18FE
    1898: 3D 18 00 CMP   [X+24],0x0
    189B: B0 06    JNZ   0x18A2
    189D: 3D 19 01 CMP   [X+25],0x1
    18A0: A0 71    JZ    0x1912
    18A2: 3D 18 00 CMP   [X+24],0x0
    18A5: B0 06    JNZ   0x18AC
    18A7: 3D 19 02 CMP   [X+25],0x2
    18AA: A0 97    JZ    0x1942
    18AC: 3D 18 00 CMP   [X+24],0x0
    18AF: B0 06    JNZ   0x18B6
    18B1: 3D 19 03 CMP   [X+25],0x3
    18B4: A0 8D    JZ    0x1942
    18B6: 3D 18 00 CMP   [X+24],0x0
    18B9: B0 06    JNZ   0x18C0
    18BB: 3D 19 04 CMP   [X+25],0x4
    18BE: A0 83    JZ    0x1942
    18C0: 3D 18 00 CMP   [X+24],0x0
    18C3: B0 06    JNZ   0x18CA
    18C5: 3D 19 05 CMP   [X+25],0x5
    18C8: A0 79    JZ    0x1942
    18CA: 3D 18 00 CMP   [X+24],0x0
    18CD: B0 06    JNZ   0x18D4
    18CF: 3D 19 06 CMP   [X+25],0x6
    18D2: A0 6F    JZ    0x1942
    18D4: 3D 18 00 CMP   [X+24],0x0
    18D7: B0 06    JNZ   0x18DE
    18D9: 3D 19 07 CMP   [X+25],0x7
    18DC: A0 65    JZ    0x1942
    18DE: 3D 18 00 CMP   [X+24],0x0
    18E1: B0 06    JNZ   0x18E8
    18E3: 3D 19 08 CMP   [X+25],0x8
    18E6: A0 5B    JZ    0x1942
    18E8: 3D 18 00 CMP   [X+24],0x0
    18EB: B0 06    JNZ   0x18F2
    18ED: 3D 19 09 CMP   [X+25],0x9
    18F0: A0 51    JZ    0x1942
    18F2: 3D 18 00 CMP   [X+24],0x0
    18F5: B0 06    JNZ   0x18FC
    18F7: 3D 19 0A CMP   [X+25],0xA
    18FA: A0 2E    JZ    0x1929
    18FC: 80 45    JMP   0x1942
(0058) 		{
(0059) 			case CMD_PING:
(0060) 				Comm_WriteCommand(CMD_PING,&buffer[0],0);
    18FE: 50 00    MOV   A,0x0
    1900: 08       PUSH  A
    1901: 62 D0 00 MOV   REG[0xD0],0x0
    1904: 50 07    MOV   A,0x7
    1906: 08       PUSH  A
    1907: 10       PUSH  X
    1908: 50 00    MOV   A,0x0
    190A: 08       PUSH  A
    190B: 7C 10 06 LCALL _Comm_WriteCommand
    190E: 38 FC    ADD   SP,0xFC
(0061) 				break;
    1910: 80 31    JMP   0x1942
(0062) 
(0063) 			case CMD_EREASE_MEMORY:
(0064) 				Persist_Clear();
    1912: 7C 26 B8 LCALL _Persist_Clear
(0065) 				Comm_WriteCommand(CMD_EREASE_MEMORY,&buffer[0],0);
    1915: 50 00    MOV   A,0x0
    1917: 08       PUSH  A
    1918: 62 D0 00 MOV   REG[0xD0],0x0
    191B: 50 07    MOV   A,0x7
    191D: 08       PUSH  A
    191E: 10       PUSH  X
    191F: 50 01    MOV   A,0x1
    1921: 08       PUSH  A
    1922: 7C 10 06 LCALL _Comm_WriteCommand
    1925: 38 FC    ADD   SP,0xFC
(0066) 				break;
    1927: 80 1A    JMP   0x1942
(0067) 
(0068) 			case CMD_N_ENTRIES:
(0069) 
(0070) 				break;
(0071) 
(0072) 			case CMD_ENTRY:	
(0073) 
(0074) 				break;
(0075) 
(0076) 			case CMD_GET_TIME:	
(0077) 
(0078) 				break;
(0079) 
(0080) 			case CMD_SET_TIME:	
(0081) 
(0082) 				break;
(0083) 
(0084) 			case CMD_GET_H_ALARM:	
(0085) 
(0086) 				break;
(0087) 
(0088) 			case CMD_SET_H_ALARM:
(0089) 
(0090) 				break;
(0091) 
(0092) 			case CMD_GET_L_ALARM:
(0093) 
(0094) 				break;
(0095) 
(0096) 			case CMD_SET_L_ALARM:
(0097) 				break;
(0098) 
(0099) 			case CMD_TEMP:
(0100) 				buffer[0] = TempSensor_GetTemp();
    1929: 7C 2C 9F LCALL _TempSensor_GetTemp
    192C: 62 D0 00 MOV   REG[0xD0],0x0
    192F: 51 C2    MOV   A,[__r1]
    1931: 54 00    MOV   [X+0],A
(0101) 				Comm_WriteCommand(CMD_TEMP, &buffer[0],1);
    1933: 50 01    MOV   A,0x1
    1935: 08       PUSH  A
    1936: 50 07    MOV   A,0x7
    1938: 08       PUSH  A
    1939: 10       PUSH  X
    193A: 50 0A    MOV   A,0xA
    193C: 08       PUSH  A
    193D: 7C 10 06 LCALL _Comm_WriteCommand
    1940: 38 FC    ADD   SP,0xFC
(0102) 				break;
(0103) 
(0104) 			default:
(0105) 				//¡UNKNOWN CMD!
(0106) 				break;
(0107) 		}
(0108) 	}
    1942: 38 E6    ADD   SP,0xE6
(0109) }
(0110) 
(0111) 
(0112) 
(0113) 
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\eeprom.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "EEPROM.h"
(0004) #include "delay.h"
(0005) 
(0006) extern BYTE data;
(0007) void EEPROM_Start(void)
(0008) {
(0009) 	I2Cm_Start();
_EEPROM_Start:
    1946: 10       PUSH  X
    1947: 7C 0B 17 LCALL _I2Cm_Start
    194A: 20       POP   X
    194B: 7F       RET   
(0010) }
(0011) void EEPROM_Stop(void)
(0012) {
(0013) 	I2Cm_Stop();
_EEPROM_Stop:
    194C: 10       PUSH  X
    194D: 7C 0B 3B LCALL _I2Cm_Stop
    1950: 20       POP   X
    1951: 7F       RET   
(0014) }
(0015) 
(0016) BYTE EEPROM_Write(void* buffer, WORD address, BYTE count)
(0017) {
_EEPROM_Write:
  error                --> X+1
  i                    --> X+0
  count                --> X-8
  address              --> X-7
  buffer               --> X-5
    1952: 10       PUSH  X
    1953: 4F       MOV   X,SP
    1954: 38 02    ADD   SP,0x2
(0018) 	BYTE error = EEPROM_NOERROR;
    1956: 56 01 00 MOV   [X+1],0x0
(0019) 	BYTE i=0;
    1959: 56 00 00 MOV   [X+0],0x0
(0020) 	
(0021) 	if(I2Cm_fSendStart(EEPROM_I2C_ADD, I2Cm_WRITE) != 0)
    195C: 10       PUSH  X
    195D: 57 00    MOV   X,0x0
    195F: 50 50    MOV   A,0x50
    1961: 7C 0C 83 LCALL _I2Cm_fSendStart
    1964: 20       POP   X
    1965: 62 D0 00 MOV   REG[0xD0],0x0
    1968: 39 00    CMP   A,0x0
    196A: A0 5F    JZ    0x19CA
(0022) 	{
(0023) 		if(I2Cm_fWrite(address >> 8) != 0)
    196C: 52 F9    MOV   A,[X-7]
    196E: 10       PUSH  X
    196F: 7C 0C BD LCALL _I2Cm_fWrite
    1972: 20       POP   X
    1973: 62 D0 00 MOV   REG[0xD0],0x0
    1976: 39 00    CMP   A,0x0
    1978: A0 4C    JZ    0x19C5
(0024) 		{
(0025) 			if(I2Cm_fWrite(address & 0xFF) != 0)
    197A: 52 FA    MOV   A,[X-6]
    197C: 10       PUSH  X
    197D: 7C 0C BD LCALL _I2Cm_fWrite
    1980: 20       POP   X
    1981: 62 D0 00 MOV   REG[0xD0],0x0
    1984: 39 00    CMP   A,0x0
    1986: A0 39    JZ    0x19C0
(0026) 			{
(0027) 				for (i=0; i<count; i++)
    1988: 56 00 00 MOV   [X+0],0x0
    198B: 80 2C    JMP   0x19B8
(0028) 				{
(0029) 					if(I2Cm_fWrite(*((BYTE*)buffer+i)) == 0)
    198D: 62 D0 00 MOV   REG[0xD0],0x0
    1990: 52 00    MOV   A,[X+0]
    1992: 53 C2    MOV   [__r1],A
    1994: 55 C3 00 MOV   [__r0],0x0
    1997: 52 FC    MOV   A,[X-4]
    1999: 04 C2    ADD   [__r1],A
    199B: 52 FB    MOV   A,[X-5]
    199D: 0C C3    ADC   [__r0],A
    199F: 51 C3    MOV   A,[__r0]
    19A1: 60 D4    MOV   REG[0xD4],A
    19A3: 3E C2    MVI   A,[__r1]
    19A5: 10       PUSH  X
    19A6: 7C 0C BD LCALL _I2Cm_fWrite
    19A9: 20       POP   X
    19AA: 62 D0 00 MOV   REG[0xD0],0x0
    19AD: 39 00    CMP   A,0x0
    19AF: B0 06    JNZ   0x19B6
(0030) 					{	
(0031) 						error= EEPROM_SLAVENOTACKDATA;
    19B1: 56 01 02 MOV   [X+1],0x2
(0032) 						break;
    19B4: 80 18    JMP   0x19CD
(0033) 					}
(0034) 				}
    19B6: 77 00    INC   [X+0]
    19B8: 52 00    MOV   A,[X+0]
    19BA: 3B F8    CMP   A,[X-8]
    19BC: CF D0    JC    0x198D
(0035) 			}
    19BE: 80 0E    JMP   0x19CD
(0036) 			else
(0037) 			{
(0038) 				error = EEPROM_SLAVENOTACKADDRESS;
    19C0: 56 01 01 MOV   [X+1],0x1
(0039) 			}
(0040) 		}
    19C3: 80 09    JMP   0x19CD
(0041) 		else
(0042) 		{
(0043) 		error = EEPROM_SLAVENOTACKADDRESS;
    19C5: 56 01 01 MOV   [X+1],0x1
(0044) 		}
(0045) 	}
    19C8: 80 04    JMP   0x19CD
(0046) 	else
(0047) 	{
(0048) 		error = EEPROM_SLAVENOTACKADDRESS;
    19CA: 56 01 01 MOV   [X+1],0x1
(0049) 	}
(0050)     
(0051) 	I2Cm_SendStop();
    19CD: 10       PUSH  X
    19CE: 7C 0D FF LCALL _I2Cm_SendStop
(0052) 	
(0053) 	Delay50uTimes(0x64);
    19D1: 50 64    MOV   A,0x64
    19D3: 7C 17 C8 LCALL _Delay50uTimes
    19D6: 20       POP   X
(0054) 
(0055) 	return error;
    19D7: 52 01    MOV   A,[X+1]
    19D9: 62 D0 00 MOV   REG[0xD0],0x0
    19DC: 38 FE    ADD   SP,0xFE
    19DE: 20       POP   X
    19DF: 7F       RET   
(0056) }
(0057) BYTE EEPROM_Read(void* buffer, WORD address, BYTE count)
(0058) {
_EEPROM_Read:
  error                --> X+1
  i                    --> X+0
  count                --> X-8
  address              --> X-7
  buffer               --> X-5
    19E0: 10       PUSH  X
    19E1: 4F       MOV   X,SP
    19E2: 38 02    ADD   SP,0x2
(0059) 	BYTE error = EEPROM_NOERROR;
    19E4: 56 01 00 MOV   [X+1],0x0
(0060) 	BYTE i=0;
    19E7: 56 00 00 MOV   [X+0],0x0
(0061) 	
(0062) 	if(I2Cm_fSendStart(EEPROM_I2C_ADD, I2Cm_WRITE) != 0)
    19EA: 10       PUSH  X
    19EB: 57 00    MOV   X,0x0
    19ED: 50 50    MOV   A,0x50
    19EF: 7C 0C 83 LCALL _I2Cm_fSendStart
    19F2: 20       POP   X
    19F3: 62 D0 00 MOV   REG[0xD0],0x0
    19F6: 39 00    CMP   A,0x0
    19F8: A0 93    JZ    0x1A8C
(0063) 	{
(0064) 		if(I2Cm_fWrite(address >> 8) != 0)
    19FA: 52 F9    MOV   A,[X-7]
    19FC: 10       PUSH  X
    19FD: 7C 0C BD LCALL _I2Cm_fWrite
    1A00: 20       POP   X
    1A01: 62 D0 00 MOV   REG[0xD0],0x0
    1A04: 39 00    CMP   A,0x0
    1A06: A0 80    JZ    0x1A87
(0065) 		{
(0066) 			if (I2Cm_fWrite(address & 0xFF) != 0)
    1A08: 52 FA    MOV   A,[X-6]
    1A0A: 10       PUSH  X
    1A0B: 7C 0C BD LCALL _I2Cm_fWrite
    1A0E: 20       POP   X
    1A0F: 62 D0 00 MOV   REG[0xD0],0x0
    1A12: 39 00    CMP   A,0x0
    1A14: A0 6D    JZ    0x1A82
(0067) 			{
(0068) 				if (I2Cm_fSendRepeatStart(EEPROM_I2C_ADD,I2Cm_READ) != 0)
    1A16: 10       PUSH  X
    1A17: 57 01    MOV   X,0x1
    1A19: 50 50    MOV   A,0x50
    1A1B: 7C 0C 4D LCALL _I2Cm_fSendRepeatStart
    1A1E: 20       POP   X
    1A1F: 62 D0 00 MOV   REG[0xD0],0x0
    1A22: 39 00    CMP   A,0x0
    1A24: A0 58    JZ    0x1A7D
(0069) 				{
(0070) 					count--;
    1A26: 7B F8    DEC   [X-8]
(0071) 					for (i=0;i<count;i++)
    1A28: 56 00 00 MOV   [X+0],0x0
    1A2B: 80 26    JMP   0x1A52
(0072) 					{
(0073) 						*((BYTE*)buffer+i) =I2Cm_bRead(I2Cm_ACKslave);
    1A2D: 10       PUSH  X
    1A2E: 50 01    MOV   A,0x1
    1A30: 7C 0D 54 LCALL _I2Cm_bRead
    1A33: 20       POP   X
    1A34: 62 D0 00 MOV   REG[0xD0],0x0
    1A37: 53 C3    MOV   [__r0],A
    1A39: 52 00    MOV   A,[X+0]
    1A3B: 53 C0    MOV   [__r3],A
    1A3D: 55 C1 00 MOV   [__r2],0x0
    1A40: 52 FC    MOV   A,[X-4]
    1A42: 04 C0    ADD   [__r3],A
    1A44: 52 FB    MOV   A,[X-5]
    1A46: 0C C1    ADC   [__r2],A
    1A48: 51 C1    MOV   A,[__r2]
    1A4A: 60 D5    MOV   REG[0xD5],A
    1A4C: 51 C3    MOV   A,[__r0]
    1A4E: 3F C0    MVI   [__r3],A
(0074) 					}
    1A50: 77 00    INC   [X+0]
    1A52: 52 00    MOV   A,[X+0]
    1A54: 3B F8    CMP   A,[X-8]
    1A56: CF D6    JC    0x1A2D
(0075) 					*((BYTE*)buffer+i) =I2Cm_bRead(I2Cm_NAKslave);
    1A58: 10       PUSH  X
    1A59: 50 00    MOV   A,0x0
    1A5B: 7C 0D 54 LCALL _I2Cm_bRead
    1A5E: 20       POP   X
    1A5F: 62 D0 00 MOV   REG[0xD0],0x0
    1A62: 53 C3    MOV   [__r0],A
    1A64: 52 00    MOV   A,[X+0]
    1A66: 53 C0    MOV   [__r3],A
    1A68: 55 C1 00 MOV   [__r2],0x0
    1A6B: 52 FC    MOV   A,[X-4]
    1A6D: 04 C0    ADD   [__r3],A
    1A6F: 52 FB    MOV   A,[X-5]
    1A71: 0C C1    ADC   [__r2],A
    1A73: 51 C1    MOV   A,[__r2]
    1A75: 60 D5    MOV   REG[0xD5],A
    1A77: 51 C3    MOV   A,[__r0]
    1A79: 3F C0    MVI   [__r3],A
(0076) 				}
    1A7B: 80 13    JMP   0x1A8F
(0077) 				else
(0078) 				{
(0079) 				error = EEPROM_SLAVENOTACKDATA;
    1A7D: 56 01 02 MOV   [X+1],0x2
(0080) 				}
(0081) 			}
    1A80: 80 0E    JMP   0x1A8F
(0082) 			else
(0083) 			{
(0084) 			error = EEPROM_SLAVENOTACKDATA;
    1A82: 56 01 02 MOV   [X+1],0x2
(0085) 			}
(0086) 		}
    1A85: 80 09    JMP   0x1A8F
(0087) 		else
(0088) 		{
(0089) 		error = EEPROM_SLAVENOTACKADDRESS;
    1A87: 56 01 01 MOV   [X+1],0x1
(0090) 		}
(0091) 	}
    1A8A: 80 04    JMP   0x1A8F
(0092) 	else
(0093) 	{
(0094) 		error = EEPROM_SLAVENOTACKADDRESS;
    1A8C: 56 01 01 MOV   [X+1],0x1
(0095) 	}
(0096) 	
(0097) 	I2Cm_SendStop();
    1A8F: 10       PUSH  X
    1A90: 7C 0D FF LCALL _I2Cm_SendStop
    1A93: 20       POP   X
(0098) 	
(0099) 	return error;
    1A94: 52 01    MOV   A,[X+1]
    1A96: 62 D0 00 MOV   REG[0xD0],0x0
    1A99: 38 FE    ADD   SP,0xFE
    1A9B: 20       POP   X
    1A9C: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\keypad.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h" 
(0003) #include "Keypad.h"
(0004) 
(0005) #if KEYPAD_PORT == 0
(0006) 	#define PRTxDM2 PRT0DM2
(0007) 	#define PRTxDM1 PRT0DM1
(0008) 	#define PRTxDM0 PRT0DM0
(0009) 	#define PRTxDR 	PRT0DR
(0010) 	
(0011) 	#define PRTxIC1 PRT0IC1
(0012) 	#define PRTxIC0 PRT0IC0
(0013) 	#define PRTxIE 	PRT0IE
(0014) 		
(0015) #elif KEYPAD_PORT == 1
(0016) 	#define PRTxDM2 PRT1DM2
(0017) 	#define PRTxDM1 PRT1DM1
(0018) 	#define PRTxDM0 PRT1DM0
(0019) 	#define PRTxDR 	PRT1DR
(0020) 	
(0021) 	#define PRTxIC1 PRT1IC1
(0022) 	#define PRTxIC0 PRT1IC0
(0023) 	#define PRTxIE 	PRT1IE
(0024) 		
(0025) #elif KEYPAD_PORT == 2
(0026) 	#define PRTxDM2 PRT2DM2
(0027) 	#define PRTxDM1 PRT2DM1
(0028) 	#define PRTxDM0 PRT2DM0
(0029) 	#define PRTxDR 	PRT2DR
(0030) 	
(0031) 	#define PRTxIC1 PRT2IC1
(0032) 	#define PRTxIC0 PRT2IC0
(0033) 	#define PRTxIE 	PRT2IE
(0034) 		
(0035) #else 
(0036) 	#error "Keypad port is invalid!"
(0037) #endif
(0038) 		
(0039) static BOOL keyStillPressed = FALSE;
(0040) static BYTE keypadMask = 0x0F;
(0041) static BYTE pressedKey = 0x00;
(0042) static BOOL keyPressed = FALSE;
(0043) 
(0044) void Keypad_Start(void)
(0045) {
(0046) 	PRTxDM2 &= ~keypadMask;	// initialize button
_Keypad_Start:
    1A9D: 62 D0 00 MOV   REG[0xD0],0x0
    1AA0: 51 D4    MOV   A,[keypad.c:keypadMask]
    1AA2: 73       CPL   A
    1AA3: 62 D0 00 MOV   REG[0xD0],0x0
    1AA6: 53 C3    MOV   [__r0],A
    1AA8: 5D 07    MOV   A,REG[0x7]
    1AAA: 22 C3    AND   A,[__r0]
    1AAC: 60 07    MOV   REG[0x7],A
(0047) 	PRTxDM1 &= ~keypadMask;
    1AAE: 62 D0 00 MOV   REG[0xD0],0x0
    1AB1: 51 D4    MOV   A,[keypad.c:keypadMask]
    1AB3: 73       CPL   A
    1AB4: 62 D0 00 MOV   REG[0xD0],0x0
    1AB7: 53 C3    MOV   [__r0],A
    1AB9: 71 10    OR    F,0x10
    1ABB: 5D 05    MOV   A,REG[0x5]
    1ABD: 22 C3    AND   A,[__r0]
    1ABF: 60 05    MOV   REG[0x5],A
(0048) 	PRTxDM0 &= ~keypadMask;
    1AC1: 70 CF    AND   F,0xCF
    1AC3: 62 D0 00 MOV   REG[0xD0],0x0
    1AC6: 51 D4    MOV   A,[keypad.c:keypadMask]
    1AC8: 73       CPL   A
    1AC9: 62 D0 00 MOV   REG[0xD0],0x0
    1ACC: 53 C3    MOV   [__r0],A
    1ACE: 71 10    OR    F,0x10
    1AD0: 5D 04    MOV   A,REG[0x4]
    1AD2: 22 C3    AND   A,[__r0]
    1AD4: 60 04    MOV   REG[0x4],A
(0049) 	
(0050) 	PRTxDM2 &= keypadMask;	// initialize button
    1AD6: 70 CF    AND   F,0xCF
    1AD8: 5D 07    MOV   A,REG[0x7]
    1ADA: 53 C3    MOV   [__r0],A
    1ADC: 62 D0 00 MOV   REG[0xD0],0x0
    1ADF: 51 D4    MOV   A,[keypad.c:keypadMask]
    1AE1: 62 D0 00 MOV   REG[0xD0],0x0
    1AE4: 24 C3    AND   [__r0],A
    1AE6: 51 C3    MOV   A,[__r0]
    1AE8: 60 07    MOV   REG[0x7],A
(0051) 	PRTxDM1 &= keypadMask;
    1AEA: 71 10    OR    F,0x10
    1AEC: 5D 05    MOV   A,REG[0x5]
    1AEE: 53 C3    MOV   [__r0],A
    1AF0: 70 CF    AND   F,0xCF
    1AF2: 62 D0 00 MOV   REG[0xD0],0x0
    1AF5: 51 D4    MOV   A,[keypad.c:keypadMask]
    1AF7: 62 D0 00 MOV   REG[0xD0],0x0
    1AFA: 24 C3    AND   [__r0],A
    1AFC: 51 C3    MOV   A,[__r0]
    1AFE: 71 10    OR    F,0x10
    1B00: 60 05    MOV   REG[0x5],A
(0052) 	PRTxDM0 &= keypadMask;
    1B02: 5D 04    MOV   A,REG[0x4]
    1B04: 53 C3    MOV   [__r0],A
    1B06: 70 CF    AND   F,0xCF
    1B08: 62 D0 00 MOV   REG[0xD0],0x0
    1B0B: 51 D4    MOV   A,[keypad.c:keypadMask]
    1B0D: 62 D0 00 MOV   REG[0xD0],0x0
    1B10: 24 C3    AND   [__r0],A
    1B12: 51 C3    MOV   A,[__r0]
    1B14: 71 10    OR    F,0x10
    1B16: 60 04    MOV   REG[0x4],A
(0053) 	
(0054) 	PRTxDR = ~keypadMask;	// Setup pull-down resistor
    1B18: 70 CF    AND   F,0xCF
    1B1A: 62 D0 00 MOV   REG[0xD0],0x0
    1B1D: 51 D4    MOV   A,[keypad.c:keypadMask]
    1B1F: 73       CPL   A
    1B20: 62 D0 00 MOV   REG[0xD0],0x0
    1B23: 60 04    MOV   REG[0x4],A
(0055) 	
(0056) 	PRTxIC1 |= keypadMask; // setup interrupt mode
    1B25: 71 10    OR    F,0x10
    1B27: 5D 07    MOV   A,REG[0x7]
    1B29: 53 C3    MOV   [__r0],A
    1B2B: 70 CF    AND   F,0xCF
    1B2D: 62 D0 00 MOV   REG[0xD0],0x0
    1B30: 51 D4    MOV   A,[keypad.c:keypadMask]
    1B32: 62 D0 00 MOV   REG[0xD0],0x0
    1B35: 2C C3    OR    [__r0],A
    1B37: 51 C3    MOV   A,[__r0]
    1B39: 71 10    OR    F,0x10
    1B3B: 60 07    MOV   REG[0x7],A
(0057) 	PRTxIC0 &= ~keypadMask;
    1B3D: 70 CF    AND   F,0xCF
    1B3F: 62 D0 00 MOV   REG[0xD0],0x0
    1B42: 51 D4    MOV   A,[keypad.c:keypadMask]
    1B44: 73       CPL   A
    1B45: 62 D0 00 MOV   REG[0xD0],0x0
    1B48: 53 C3    MOV   [__r0],A
    1B4A: 71 10    OR    F,0x10
    1B4C: 5D 06    MOV   A,REG[0x6]
    1B4E: 22 C3    AND   A,[__r0]
    1B50: 60 06    MOV   REG[0x6],A
(0058) 	
(0059) 	PRTxIE |= keypadMask; //Enable GPIO port interrupt bits
    1B52: 70 CF    AND   F,0xCF
    1B54: 5D 05    MOV   A,REG[0x5]
    1B56: 53 C3    MOV   [__r0],A
    1B58: 62 D0 00 MOV   REG[0xD0],0x0
    1B5B: 51 D4    MOV   A,[keypad.c:keypadMask]
    1B5D: 62 D0 00 MOV   REG[0xD0],0x0
    1B60: 2C C3    OR    [__r0],A
    1B62: 51 C3    MOV   A,[__r0]
    1B64: 60 05    MOV   REG[0x5],A
(0060) 	
(0061) 	INT_MSK0 |= INT_MSK0_GPIO; //Enable global GPIO interrupt
    1B66: 43 E0 20 OR    REG[0xE0],0x20
    1B69: 7F       RET   
(0062) 	
(0063) }
(0064) 
(0065) BOOL KeyPad_Test(void)
(0066) {
_KeyPad_Test:
  cont                 --> X+1
  i                    --> X+0
    1B6A: 10       PUSH  X
    1B6B: 4F       MOV   X,SP
    1B6C: 38 02    ADD   SP,0x2
(0067) 	BYTE i, cont;
(0068) 	cont = 0;
    1B6E: 56 01 00 MOV   [X+1],0x0
(0069) 	
(0070) 	for (i = 0; i<50 ;i++)
    1B71: 56 00 00 MOV   [X+0],0x0
    1B74: 80 39    JMP   0x1BAE
(0071) 	{
(0072) 		if ((PRTxDR & keypadMask) != 0x00)
    1B76: 5D 04    MOV   A,REG[0x4]
    1B78: 62 D0 00 MOV   REG[0xD0],0x0
    1B7B: 53 C3    MOV   [__r0],A
    1B7D: 62 D0 00 MOV   REG[0xD0],0x0
    1B80: 51 D4    MOV   A,[keypad.c:keypadMask]
    1B82: 62 D0 00 MOV   REG[0xD0],0x0
    1B85: 24 C3    AND   [__r0],A
    1B87: A0 1B    JZ    0x1BA3
(0073) 		{
(0074) 			cont ++;
    1B89: 77 01    INC   [X+1]
(0075) 			if ( (cont > 20) && !keyStillPressed )
    1B8B: 50 14    MOV   A,0x14
    1B8D: 3B 01    CMP   A,[X+1]
    1B8F: D0 1C    JNC   0x1BAC
    1B91: 62 D0 00 MOV   REG[0xD0],0x0
    1B94: 3C D6 00 CMP   [keypad.c:keyStillPressed],0x0
    1B97: B0 14    JNZ   0x1BAC
(0076) 			{
(0077) 				keyStillPressed = TRUE;
    1B99: 55 D6 01 MOV   [keypad.c:keyStillPressed],0x1
(0078) 				return TRUE;
    1B9C: 62 D0 00 MOV   REG[0xD0],0x0
    1B9F: 50 01    MOV   A,0x1
    1BA1: 80 16    JMP   0x1BB8
(0079) 			}
(0080) 		}
(0081) 		else 
(0082) 		{
(0083) 			keyStillPressed = FALSE;
    1BA3: 62 D0 00 MOV   REG[0xD0],0x0
    1BA6: 55 D6 00 MOV   [keypad.c:keyStillPressed],0x0
(0084) 			cont = 0;
    1BA9: 56 01 00 MOV   [X+1],0x0
(0085) 		}
(0086) 	}
    1BAC: 77 00    INC   [X+0]
    1BAE: 3D 00 32 CMP   [X+0],0x32
    1BB1: CF C4    JC    0x1B76
(0087) 	return FALSE;
    1BB3: 62 D0 00 MOV   REG[0xD0],0x0
    1BB6: 50 00    MOV   A,0x0
    1BB8: 38 FE    ADD   SP,0xFE
    1BBA: 20       POP   X
    1BBB: 7F       RET   
(0088) }
(0089) 
(0090) BOOL Keypad_IsKeyStored(void)
(0091) {
(0092) 	if(keyPressed == TRUE)
_Keypad_IsKeyStored:
    1BBC: 62 D0 00 MOV   REG[0xD0],0x0
    1BBF: 3C DE 01 CMP   [keypad.c:keyPressed],0x1
    1BC2: B0 0B    JNZ   0x1BCE
(0093) 	{
(0094) 		keyPressed = FALSE;
    1BC4: 55 DE 00 MOV   [keypad.c:keyPressed],0x0
(0095) 		return TRUE;
    1BC7: 62 D0 00 MOV   REG[0xD0],0x0
    1BCA: 50 01    MOV   A,0x1
    1BCC: 80 06    JMP   0x1BD3
(0096) 	}
(0097) 	else
(0098) 	{
(0099) 		return FALSE;
    1BCE: 62 D0 00 MOV   REG[0xD0],0x0
    1BD1: 50 00    MOV   A,0x0
    1BD3: 7F       RET   
(0100) 	}
(0101) }
(0102) 
(0103) BYTE Keypad_GetKey(void)
(0104) {
(0105) 	return pressedKey;
_Keypad_GetKey:
    1BD4: 62 D0 00 MOV   REG[0xD0],0x0
    1BD7: 51 D5    MOV   A,[keypad.c:pressedKey]
    1BD9: 62 D0 00 MOV   REG[0xD0],0x0
    1BDC: 7F       RET   
(0106) }
(0107) 
(0108) #pragma interrupt_handler Keypad_GPIO_ISR
(0109) void Keypad_GPIO_ISR(void)
(0110) {	
_Keypad_GPIO_ISR:
    1BDD: 71 C0    OR    F,0xC0
    1BDF: 08       PUSH  A
    1BE0: 5D D0    MOV   A,REG[0xD0]
    1BE2: 08       PUSH  A
    1BE3: 5D D3    MOV   A,REG[0xD3]
    1BE5: 08       PUSH  A
    1BE6: 5D D4    MOV   A,REG[0xD4]
    1BE8: 08       PUSH  A
    1BE9: 5D D5    MOV   A,REG[0xD5]
    1BEB: 08       PUSH  A
    1BEC: 62 D0 00 MOV   REG[0xD0],0x0
    1BEF: 51 C3    MOV   A,[__r0]
    1BF1: 08       PUSH  A
    1BF2: 51 C2    MOV   A,[__r1]
    1BF4: 08       PUSH  A
    1BF5: 51 C1    MOV   A,[__r2]
    1BF7: 08       PUSH  A
    1BF8: 51 C0    MOV   A,[__r3]
    1BFA: 08       PUSH  A
    1BFB: 51 BF    MOV   A,[__r4]
    1BFD: 08       PUSH  A
    1BFE: 51 BE    MOV   A,[__r5]
    1C00: 08       PUSH  A
    1C01: 51 BD    MOV   A,[__r6]
    1C03: 08       PUSH  A
    1C04: 51 BC    MOV   A,[__r7]
    1C06: 08       PUSH  A
    1C07: 51 BB    MOV   A,[__r8]
    1C09: 08       PUSH  A
    1C0A: 51 BA    MOV   A,[__r9]
    1C0C: 08       PUSH  A
    1C0D: 51 B9    MOV   A,[__r10]
    1C0F: 08       PUSH  A
    1C10: 51 B8    MOV   A,[__r11]
    1C12: 08       PUSH  A
    1C13: 51 B7    MOV   A,[__rX]
    1C15: 08       PUSH  A
    1C16: 51 B6    MOV   A,[__rY]
    1C18: 08       PUSH  A
    1C19: 51 B5    MOV   A,[__rZ]
    1C1B: 08       PUSH  A
(0111) 	if (KeyPad_Test())
    1C1C: 9F 4C    CALL  _KeyPad_Test
    1C1E: 39 00    CMP   A,0x0
    1C20: A0 33    JZ    0x1C54
(0112) 	{
(0113) 		//nos aseguramos de solo tomar los 4 bits menos significativos
(0114) 		pressedKey = (PRTxDR & keypadMask);
    1C22: 5D 04    MOV   A,REG[0x4]
    1C24: 62 D0 00 MOV   REG[0xD0],0x0
    1C27: 22 D4    AND   A,[keypad.c:keypadMask]
    1C29: 62 D0 00 MOV   REG[0xD0],0x0
    1C2C: 53 D5    MOV   [keypad.c:pressedKey],A
(0115) 		
(0116) 		//Invierte los puertos 
(0117) 		
(0118) 		PRTxDR = keypadMask;	// Setup pull-down resistor
    1C2E: 62 D0 00 MOV   REG[0xD0],0x0
    1C31: 51 D4    MOV   A,[keypad.c:keypadMask]
    1C33: 60 04    MOV   REG[0x4],A
(0119) 		
(0120) 		//tomamos ahora los 4 bits mas significativos y obtenemos el byte completo
(0121) 		pressedKey |= (PRTxDR & ~keypadMask); 
    1C35: 51 D4    MOV   A,[keypad.c:keypadMask]
    1C37: 73       CPL   A
    1C38: 62 D0 00 MOV   REG[0xD0],0x0
    1C3B: 53 C3    MOV   [__r0],A
    1C3D: 5D 04    MOV   A,REG[0x4]
    1C3F: 22 C3    AND   A,[__r0]
    1C41: 62 D0 00 MOV   REG[0xD0],0x0
    1C44: 2C D5    OR    [keypad.c:pressedKey],A
(0122) 		
(0123) 		//los regresa a la normalidad
(0124) 		
(0125) 		PRTxDR = ~keypadMask;
    1C46: 62 D0 00 MOV   REG[0xD0],0x0
    1C49: 51 D4    MOV   A,[keypad.c:keypadMask]
    1C4B: 73       CPL   A
    1C4C: 60 04    MOV   REG[0x4],A
(0126) 		
(0127) 		keyPressed = TRUE;
    1C4E: 62 D0 00 MOV   REG[0xD0],0x0
    1C51: 55 DE 01 MOV   [keypad.c:keyPressed],0x1
(0128) 	}
    1C54: 62 D0 00 MOV   REG[0xD0],0x0
    1C57: 18       POP   A
    1C58: 53 B5    MOV   [__rZ],A
    1C5A: 18       POP   A
    1C5B: 53 B6    MOV   [__rY],A
    1C5D: 18       POP   A
    1C5E: 53 B7    MOV   [__rX],A
    1C60: 18       POP   A
    1C61: 53 B8    MOV   [__r11],A
    1C63: 18       POP   A
    1C64: 53 B9    MOV   [__r10],A
    1C66: 18       POP   A
    1C67: 53 BA    MOV   [__r9],A
    1C69: 18       POP   A
    1C6A: 53 BB    MOV   [__r8],A
    1C6C: 18       POP   A
    1C6D: 53 BC    MOV   [__r7],A
    1C6F: 18       POP   A
    1C70: 53 BD    MOV   [__r6],A
    1C72: 18       POP   A
    1C73: 53 BE    MOV   [__r5],A
    1C75: 18       POP   A
    1C76: 53 BF    MOV   [__r4],A
    1C78: 18       POP   A
    1C79: 53 C0    MOV   [__r3],A
    1C7B: 18       POP   A
    1C7C: 53 C1    MOV   [__r2],A
    1C7E: 18       POP   A
    1C7F: 53 C2    MOV   [__r1],A
    1C81: 18       POP   A
    1C82: 53 C3    MOV   [__r0],A
    1C84: 18       POP   A
    1C85: 60 D5    MOV   REG[0xD5],A
    1C87: 18       POP   A
    1C88: 60 D4    MOV   REG[0xD4],A
    1C8A: 18       POP   A
    1C8B: 60 D3    MOV   REG[0xD3],A
    1C8D: 18       POP   A
    1C8E: 60 D0    MOV   REG[0xD0],A
    1C90: 18       POP   A
    1C91: 7E       RETI  
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\ledarray.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "LedArray.h"
(0004) 
(0005) #if LEDS_PORT == 0
(0006) 	#define PRTxDM2 PRT0DM2
(0007) 	#define PRTxDM1 PRT0DM1
(0008) 	#define PRTxDM0 PRT0DM0
(0009) 	#define PRTxDR PRT0DR
(0010) 	
(0011) 	#if LEDS_SHADOWREG == 1
(0012) 		extern BYTE Port_0_Data_SHADE;
(0013) 		#define Port_Data_SHADE Port_0_Data_SHADE
(0014) 	#endif 
(0015) 		
(0016) #elif LEDS_PORT == 1
(0017) 	#define PRTxDM2 PRT1DM2
(0018) 	#define PRTxDM1 PRT1DM1
(0019) 	#define PRTxDM0 PRT1DM0
(0020) 	#define PRTxDR PRT1DR
(0021) 		
(0022) 	#if LEDS_SHADOWREG == 1
(0023) 		extern BYTE Port_1_Data_SHADE;
(0024) 		#define Port_Data_SHADE Port_1_Data_SHADE
(0025) 	#endif 
(0026) 		
(0027) #elif LEDS_PORT == 2
(0028) 	#define PRTxDM2 PRT2DM2
(0029) 	#define PRTxDM1 PRT2DM1
(0030) 	#define PRTxDM0 PRT2DM0
(0031) 	#define PRTxDR PRT2DR
(0032) 		
(0033) 	#if LEDS_SHADOWREG == 1
(0034) 		extern BYTE Port_2_Data_SHADE;
(0035) 		#define Port_Data_SHADE Port_2_Data_SHADE
(0036) 	#endif 
(0037) 		
(0038) #else 
(0039) 	#error "Led port is invalid!"
(0040) #endif
(0041) 
(0042) //inicialize LED driver
(0043) void Leds_Start(void)
(0044) {
(0045) 	PRTxDM2 &= ~LEDS_MASK;	//initialize led
_Leds_Start:
    1C92: 41 03 E7 AND   REG[0x3],0xE7
(0046) 	PRTxDM1 &= ~LEDS_MASK;
    1C95: 71 10    OR    F,0x10
    1C97: 41 01 E7 AND   REG[0x1],0xE7
(0047) 	PRTxDM0 |= LEDS_MASK;
    1C9A: 43 00 18 OR    REG[0x0],0x18
(0048) 	
(0049) 	#if LEDS_SHADOWREG == 1
(0050) 		Port_Data_SHADE &= ~LEDS_MASK;
    1C9D: 70 CF    AND   F,0xCF
    1C9F: 62 D0 00 MOV   REG[0xD0],0x0
    1CA2: 26 00 E7 AND   [counter|previousSecond|elapsedSeconds],0xE7
(0051) 		PRTxDR = Port_Data_SHADE;	//turn off led
    1CA5: 51 00    MOV   A,[counter|previousSecond|elapsedSeconds]
    1CA7: 60 00    MOV   REG[0x0],A
    1CA9: 7F       RET   
(0052) 	#else 
(0053) 		PRTxDR &= ~LEDS_MASK;
(0054) 	#endif
(0055) }
(0056) 
(0057) //Turn on led
(0058) void Leds_TurnOn(BYTE leds)
(0059) {
_Leds_TurnOn:
  leds                 --> X-4
    1CAA: 10       PUSH  X
    1CAB: 4F       MOV   X,SP
(0060) 	leds &= LEDS_MASK;
    1CAC: 27 FC 18 AND   [X-4],0x18
(0061) 	#if LEDS_SHADOWREG == 1
(0062) 		Port_Data_SHADE |= leds;
    1CAF: 62 D0 00 MOV   REG[0xD0],0x0
    1CB2: 52 FC    MOV   A,[X-4]
    1CB4: 2C 00    OR    [counter|previousSecond|elapsedSeconds],A
(0063) 		PRTxDR = Port_Data_SHADE;	//turn on led
    1CB6: 51 00    MOV   A,[counter|previousSecond|elapsedSeconds]
    1CB8: 60 00    MOV   REG[0x0],A
    1CBA: 20       POP   X
    1CBB: 7F       RET   
(0064) 	#else 
(0065) 		PRTxDR |= leds;
(0066) 	#endif
(0067) }
(0068) 
(0069) //Turn off led
(0070) void Leds_TurnOff(BYTE leds)
(0071) {
_Leds_TurnOff:
  leds                 --> X-4
    1CBC: 10       PUSH  X
    1CBD: 4F       MOV   X,SP
(0072) 	leds &= LEDS_MASK;
    1CBE: 27 FC 18 AND   [X-4],0x18
(0073) 	#if LEDS_SHADOWREG == 1
(0074) 		Port_Data_SHADE &= ~leds;
    1CC1: 52 FC    MOV   A,[X-4]
    1CC3: 73       CPL   A
    1CC4: 62 D0 00 MOV   REG[0xD0],0x0
    1CC7: 24 00    AND   [counter|previousSecond|elapsedSeconds],A
(0075) 		PRTxDR = Port_Data_SHADE;	//turn off led
    1CC9: 51 00    MOV   A,[counter|previousSecond|elapsedSeconds]
    1CCB: 60 00    MOV   REG[0x0],A
    1CCD: 20       POP   X
    1CCE: 7F       RET   
(0076) 	#else 
(0077) 		PRTxDR &= ~leds;
(0078) 	#endif
(0079) }
(0080) 
(0081) //Toggle led
(0082) void Leds_Toggle(BYTE leds)
(0083) {
_Leds_Toggle:
  leds                 --> X-4
    1CCF: 10       PUSH  X
    1CD0: 4F       MOV   X,SP
(0084) 	leds &= LEDS_MASK;
    1CD1: 27 FC 18 AND   [X-4],0x18
(0085) 	#if LEDS_SHADOWREG == 1
(0086) 		Port_Data_SHADE ^= leds;
    1CD4: 62 D0 00 MOV   REG[0xD0],0x0
    1CD7: 51 00    MOV   A,[counter|previousSecond|elapsedSeconds]
    1CD9: 33 FC    XOR   A,[X-4]
    1CDB: 53 00    MOV   [counter|previousSecond|elapsedSeconds],A
(0087) 		PRTxDR = Port_Data_SHADE;	//turn off led
    1CDD: 51 00    MOV   A,[counter|previousSecond|elapsedSeconds]
(0088) 	#else 
(0089) 		PRTxDR ^= leds;
(0090) 	#endif
(0091) }	
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\levelview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "mainView.h"
(0004) #include "menu.h"
(0005) #include "BcdUtil.h"
(0006) #include "viewManager.h"
(0007) #include "Keypad.h"
(0008) #include "levelView.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void LevelView_Start(void)
(0014) {
_LevelView_Start:
    1CE3: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void LevelView_Callback(void)
(0019) {
_LevelView_Callback:
  bcdmin               --> X+14
  bcd10min             --> X+13
  bcdmax               --> X+12
  bcd10max             --> X+11
  conf                 --> X+0
    1CE4: 10       PUSH  X
    1CE5: 4F       MOV   X,SP
    1CE6: 38 0F    ADD   SP,0xF
(0020) 	BYTE bcd10max, bcdmax, bcd10min, bcdmin;
(0021) 	Config conf;
(0022) 	Persist_LoadConfig(&conf);
    1CE8: 62 D0 00 MOV   REG[0xD0],0x0
    1CEB: 50 07    MOV   A,0x7
    1CED: 08       PUSH  A
    1CEE: 10       PUSH  X
    1CEF: 7C 28 0C LCALL _Persist_LoadConfig
    1CF2: 38 FE    ADD   SP,0xFE
    1CF4: 62 D0 00 MOV   REG[0xD0],0x0
(0023) 
(0024) 	decToBcd(&bcd10max, &bcdmax, conf.maxTemp);
    1CF7: 52 05    MOV   A,[X+5]
    1CF9: 08       PUSH  A
    1CFA: 5A C2    MOV   [__r1],X
    1CFC: 06 C2 0C ADD   [__r1],0xC
    1CFF: 50 07    MOV   A,0x7
    1D01: 08       PUSH  A
    1D02: 51 C2    MOV   A,[__r1]
    1D04: 08       PUSH  A
    1D05: 5A C2    MOV   [__r1],X
    1D07: 06 C2 0B ADD   [__r1],0xB
    1D0A: 50 07    MOV   A,0x7
    1D0C: 08       PUSH  A
    1D0D: 51 C2    MOV   A,[__r1]
    1D0F: 08       PUSH  A
    1D10: 7C 0F 6D LCALL _decToBcd
(0025) 	decToBcd(&bcd10min, &bcdmin, conf.minTemp);
    1D13: 52 06    MOV   A,[X+6]
    1D15: 08       PUSH  A
    1D16: 62 D0 00 MOV   REG[0xD0],0x0
    1D19: 5A C2    MOV   [__r1],X
    1D1B: 06 C2 0E ADD   [__r1],0xE
    1D1E: 50 07    MOV   A,0x7
    1D20: 08       PUSH  A
    1D21: 51 C2    MOV   A,[__r1]
    1D23: 08       PUSH  A
    1D24: 5A C2    MOV   [__r1],X
    1D26: 06 C2 0D ADD   [__r1],0xD
    1D29: 50 07    MOV   A,0x7
    1D2B: 08       PUSH  A
    1D2C: 51 C2    MOV   A,[__r1]
    1D2E: 08       PUSH  A
    1D2F: 7C 0F 6D LCALL _decToBcd
    1D32: 38 F6    ADD   SP,0xF6
(0026) 
(0027) 	currentView = LEVEL_CONFIG;
    1D34: 62 D0 00 MOV   REG[0xD0],0x0
    1D37: 55 DD 03 MOV   [currentView],0x3
(0028) 	Menu_Clear();
    1D3A: 7C 26 30 LCALL _Menu_Clear
(0029) 	LCD_Position(0, 0);
    1D3D: 10       PUSH  X
    1D3E: 50 00    MOV   A,0x0
    1D40: 57 00    MOV   X,0x0
    1D42: 7C 0A 0D LCALL _LCD_Position
(0030) 	LCD_PrCString("Max: ");
    1D45: 50 02    MOV   A,0x2
    1D47: 08       PUSH  A
    1D48: 50 22    MOV   A,0x22
    1D4A: 5C       MOV   X,A
    1D4B: 18       POP   A
    1D4C: 7C 08 88 LCALL _LCD_PrCString
    1D4F: 20       POP   X
(0031) 	LCD_PrHexByte( (bcd10max << 4)|bcdmax );
    1D50: 52 0B    MOV   A,[X+11]
    1D52: 62 D0 00 MOV   REG[0xD0],0x0
    1D55: 64       ASL   A
    1D56: 64       ASL   A
    1D57: 64       ASL   A
    1D58: 64       ASL   A
    1D59: 53 C3    MOV   [__r0],A
    1D5B: 52 0C    MOV   A,[X+12]
    1D5D: 2C C3    OR    [__r0],A
    1D5F: 10       PUSH  X
    1D60: 51 C3    MOV   A,[__r0]
    1D62: 7C 08 AA LCALL _LCD_PrHexByte
(0032) 	LCD_Position(1,0);
    1D65: 57 00    MOV   X,0x0
    1D67: 50 01    MOV   A,0x1
    1D69: 7C 0A 0D LCALL _LCD_Position
(0033) 	LCD_PrCString("Min: ");
    1D6C: 50 02    MOV   A,0x2
    1D6E: 08       PUSH  A
    1D6F: 50 1C    MOV   A,0x1C
    1D71: 5C       MOV   X,A
    1D72: 18       POP   A
    1D73: 7C 08 88 LCALL _LCD_PrCString
    1D76: 20       POP   X
(0034) 	LCD_PrHexByte( (bcd10min << 4)|bcdmin );
    1D77: 52 0D    MOV   A,[X+13]
    1D79: 62 D0 00 MOV   REG[0xD0],0x0
    1D7C: 64       ASL   A
    1D7D: 64       ASL   A
    1D7E: 64       ASL   A
    1D7F: 64       ASL   A
    1D80: 53 C3    MOV   [__r0],A
    1D82: 52 0E    MOV   A,[X+14]
    1D84: 2C C3    OR    [__r0],A
    1D86: 10       PUSH  X
    1D87: 51 C3    MOV   A,[__r0]
    1D89: 7C 08 AA LCALL _LCD_PrHexByte
    1D8C: 20       POP   X
    1D8D: 38 F1    ADD   SP,0xF1
    1D8F: 20       POP   X
    1D90: 7F       RET   
(0035) }
(0036) 
(0037) void LevelView_Update(void)
(0038) {
_LevelView_Update:
  bcd10min             --> X+14
  bcd10max             --> X+13
  conf                 --> X+2
  bcdmin               --> X+1
  bcdmax               --> X+0
    1D91: 10       PUSH  X
    1D92: 4F       MOV   X,SP
    1D93: 38 11    ADD   SP,0x11
(0039) 	if(Keypad_IsKeyStored())
    1D95: 7C 1B BC LCALL _Keypad_IsKeyStored
    1D98: 62 D0 00 MOV   REG[0xD0],0x0
    1D9B: 39 00    CMP   A,0x0
    1D9D: A1 81    JZ    0x1F1F
(0040) 	{
(0041) 		BYTE bcd10max, bcdmax, bcd10min, bcdmin;
(0042) 		Config conf;
(0043) 		Persist_LoadConfig(&conf);
    1D9F: 5A C2    MOV   [__r1],X
    1DA1: 06 C2 02 ADD   [__r1],0x2
    1DA4: 50 07    MOV   A,0x7
    1DA6: 08       PUSH  A
    1DA7: 51 C2    MOV   A,[__r1]
    1DA9: 08       PUSH  A
    1DAA: 7C 28 0C LCALL _Persist_LoadConfig
    1DAD: 38 FE    ADD   SP,0xFE
    1DAF: 62 D0 00 MOV   REG[0xD0],0x0
(0044) 
(0045) 		decToBcd(&bcd10max, &bcdmax, conf.maxTemp);
    1DB2: 52 07    MOV   A,[X+7]
    1DB4: 08       PUSH  A
    1DB5: 50 07    MOV   A,0x7
    1DB7: 08       PUSH  A
    1DB8: 10       PUSH  X
    1DB9: 5A C2    MOV   [__r1],X
    1DBB: 06 C2 0D ADD   [__r1],0xD
    1DBE: 08       PUSH  A
    1DBF: 51 C2    MOV   A,[__r1]
    1DC1: 08       PUSH  A
    1DC2: 7C 0F 6D LCALL _decToBcd
(0046) 		decToBcd(&bcd10min, &bcdmin, conf.minTemp);
    1DC5: 52 08    MOV   A,[X+8]
    1DC7: 08       PUSH  A
    1DC8: 62 D0 00 MOV   REG[0xD0],0x0
    1DCB: 5A C2    MOV   [__r1],X
    1DCD: 06 C2 01 ADD   [__r1],0x1
    1DD0: 50 07    MOV   A,0x7
    1DD2: 08       PUSH  A
    1DD3: 51 C2    MOV   A,[__r1]
    1DD5: 08       PUSH  A
    1DD6: 5A C2    MOV   [__r1],X
    1DD8: 06 C2 0E ADD   [__r1],0xE
    1DDB: 50 07    MOV   A,0x7
    1DDD: 08       PUSH  A
    1DDE: 51 C2    MOV   A,[__r1]
    1DE0: 08       PUSH  A
    1DE1: 7C 0F 6D LCALL _decToBcd
    1DE4: 38 F6    ADD   SP,0xF6
(0047) 
(0048) 		switch(Keypad_GetKey())
    1DE6: 7C 1B D4 LCALL _Keypad_GetKey
    1DE9: 62 D0 00 MOV   REG[0xD0],0x0
    1DEC: 54 10    MOV   [X+16],A
    1DEE: 56 0F 00 MOV   [X+15],0x0
    1DF1: 52 10    MOV   A,[X+16]
    1DF3: 11 28    SUB   A,0x28
    1DF5: 53 B6    MOV   [__rY],A
    1DF7: 52 0F    MOV   A,[X+15]
    1DF9: 31 80    XOR   A,0x80
    1DFB: 19 80    SBB   A,0x80
    1DFD: 2A B6    OR    A,[__rY]
    1DFF: A0 88    JZ    0x1E88
    1E01: D0 22    JNC   0x1E24
    1E03: 52 10    MOV   A,[X+16]
    1E05: 11 11    SUB   A,0x11
    1E07: 62 D0 00 MOV   REG[0xD0],0x0
    1E0A: 53 B6    MOV   [__rY],A
    1E0C: 52 0F    MOV   A,[X+15]
    1E0E: 31 80    XOR   A,0x80
    1E10: 19 80    SBB   A,0x80
    1E12: C0 BD    JC    0x1ED0
    1E14: 2A B6    OR    A,[__rY]
    1E16: A0 B4    JZ    0x1ECB
    1E18: 3D 0F 00 CMP   [X+15],0x0
    1E1B: B0 06    JNZ   0x1E22
    1E1D: 3D 10 18 CMP   [X+16],0x18
    1E20: A0 88    JZ    0x1EA9
    1E22: 80 AD    JMP   0x1ED0
    1E24: 52 10    MOV   A,[X+16]
    1E26: 11 48    SUB   A,0x48
    1E28: 62 D0 00 MOV   REG[0xD0],0x0
    1E2B: 53 B6    MOV   [__rY],A
    1E2D: 52 0F    MOV   A,[X+15]
    1E2F: 31 80    XOR   A,0x80
    1E31: 19 80    SBB   A,0x80
    1E33: C0 9C    JC    0x1ED0
    1E35: 2A B6    OR    A,[__rY]
    1E37: A0 2E    JZ    0x1E66
    1E39: 3D 0F 00 CMP   [X+15],0x0
    1E3C: B0 06    JNZ   0x1E43
    1E3E: 3D 10 88 CMP   [X+16],0x88
    1E41: A0 03    JZ    0x1E45
    1E43: 80 8C    JMP   0x1ED0
(0049) 		{
(0050) 			case 0x88:
(0051) 				// "1"
(0052) 				if(conf.maxTemp < 99) conf.maxTemp++;
    1E45: 3D 07 63 CMP   [X+7],0x63
    1E48: D0 03    JNC   0x1E4C
    1E4A: 77 07    INC   [X+7]
(0053) 				Persist_SaveConfig(&conf);
    1E4C: 62 D0 00 MOV   REG[0xD0],0x0
    1E4F: 5A C2    MOV   [__r1],X
    1E51: 06 C2 02 ADD   [__r1],0x2
    1E54: 50 07    MOV   A,0x7
    1E56: 08       PUSH  A
    1E57: 51 C2    MOV   A,[__r1]
    1E59: 08       PUSH  A
    1E5A: 7C 27 E6 LCALL _Persist_SaveConfig
    1E5D: 38 FE    ADD   SP,0xFE
    1E5F: 62 D0 00 MOV   REG[0xD0],0x0
    1E62: 53 C3    MOV   [__r0],A
(0054) 				break;
    1E64: 80 6B    JMP   0x1ED0
(0055) 			case 0x48:
(0056) 				if(conf.maxTemp > 0) conf.maxTemp--;
    1E66: 50 00    MOV   A,0x0
    1E68: 3B 07    CMP   A,[X+7]
    1E6A: D0 03    JNC   0x1E6E
    1E6C: 7B 07    DEC   [X+7]
(0057) 				Persist_SaveConfig(&conf);
    1E6E: 62 D0 00 MOV   REG[0xD0],0x0
    1E71: 5A C2    MOV   [__r1],X
    1E73: 06 C2 02 ADD   [__r1],0x2
    1E76: 50 07    MOV   A,0x7
    1E78: 08       PUSH  A
    1E79: 51 C2    MOV   A,[__r1]
    1E7B: 08       PUSH  A
    1E7C: 7C 27 E6 LCALL _Persist_SaveConfig
    1E7F: 38 FE    ADD   SP,0xFE
    1E81: 62 D0 00 MOV   REG[0xD0],0x0
    1E84: 53 C3    MOV   [__r0],A
(0058) 				// "4"
(0059) 				break;
    1E86: 80 49    JMP   0x1ED0
(0060) 			case 0x28:
(0061) 				// "7"
(0062) 				if(conf.maxTemp < 99) conf.minTemp++;
    1E88: 3D 07 63 CMP   [X+7],0x63
    1E8B: D0 03    JNC   0x1E8F
    1E8D: 77 08    INC   [X+8]
(0063) 				Persist_SaveConfig(&conf);
    1E8F: 62 D0 00 MOV   REG[0xD0],0x0
    1E92: 5A C2    MOV   [__r1],X
    1E94: 06 C2 02 ADD   [__r1],0x2
    1E97: 50 07    MOV   A,0x7
    1E99: 08       PUSH  A
    1E9A: 51 C2    MOV   A,[__r1]
    1E9C: 08       PUSH  A
    1E9D: 7C 27 E6 LCALL _Persist_SaveConfig
    1EA0: 38 FE    ADD   SP,0xFE
    1EA2: 62 D0 00 MOV   REG[0xD0],0x0
    1EA5: 53 C3    MOV   [__r0],A
(0064) 				break;
    1EA7: 80 28    JMP   0x1ED0
(0065) 			case 0x18:
(0066) 				// "*"
(0067) 				if(conf.maxTemp > 0) conf.minTemp--;
    1EA9: 50 00    MOV   A,0x0
    1EAB: 3B 07    CMP   A,[X+7]
    1EAD: D0 03    JNC   0x1EB1
    1EAF: 7B 08    DEC   [X+8]
(0068) 				Persist_SaveConfig(&conf);
    1EB1: 62 D0 00 MOV   REG[0xD0],0x0
    1EB4: 5A C2    MOV   [__r1],X
    1EB6: 06 C2 02 ADD   [__r1],0x2
    1EB9: 50 07    MOV   A,0x7
    1EBB: 08       PUSH  A
    1EBC: 51 C2    MOV   A,[__r1]
    1EBE: 08       PUSH  A
    1EBF: 7C 27 E6 LCALL _Persist_SaveConfig
    1EC2: 38 FE    ADD   SP,0xFE
    1EC4: 62 D0 00 MOV   REG[0xD0],0x0
    1EC7: 53 C3    MOV   [__r0],A
(0069) 				break;
    1EC9: 80 06    JMP   0x1ED0
(0070) 			case 0x11:
(0071) 				// "D"
(0072) 				MainView_Callback();
    1ECB: 7C 23 46 LCALL _MainView_Callback
(0073) 				return;
    1ECE: 80 50    JMP   0x1F1F
(0074) 				break;
(0075) 		}
(0076) 
(0077) 		Menu_Clear();
    1ED0: 7C 26 30 LCALL _Menu_Clear
(0078) 		LCD_Position(0, 0);
    1ED3: 10       PUSH  X
    1ED4: 50 00    MOV   A,0x0
    1ED6: 57 00    MOV   X,0x0
    1ED8: 7C 0A 0D LCALL _LCD_Position
(0079) 		LCD_PrCString("Max: ");
    1EDB: 50 02    MOV   A,0x2
    1EDD: 08       PUSH  A
    1EDE: 50 22    MOV   A,0x22
    1EE0: 5C       MOV   X,A
    1EE1: 18       POP   A
    1EE2: 7C 08 88 LCALL _LCD_PrCString
    1EE5: 20       POP   X
(0080) 		bcdmax = (bcd10max << 4) | bcdmax;
    1EE6: 52 0D    MOV   A,[X+13]
    1EE8: 62 D0 00 MOV   REG[0xD0],0x0
    1EEB: 64       ASL   A
    1EEC: 64       ASL   A
    1EED: 64       ASL   A
    1EEE: 64       ASL   A
    1EEF: 2B 00    OR    A,[X+0]
    1EF1: 54 00    MOV   [X+0],A
(0081) 		LCD_PrHexByte(bcdmax);
    1EF3: 10       PUSH  X
    1EF4: 52 00    MOV   A,[X+0]
    1EF6: 7C 08 AA LCALL _LCD_PrHexByte
(0082) 		LCD_Position(1,0);
    1EF9: 57 00    MOV   X,0x0
    1EFB: 50 01    MOV   A,0x1
    1EFD: 7C 0A 0D LCALL _LCD_Position
(0083) 		LCD_PrCString("Min: ");
    1F00: 50 02    MOV   A,0x2
    1F02: 08       PUSH  A
    1F03: 50 1C    MOV   A,0x1C
    1F05: 5C       MOV   X,A
    1F06: 18       POP   A
    1F07: 7C 08 88 LCALL _LCD_PrCString
    1F0A: 20       POP   X
(0084) 		bcdmin = (bcd10min << 4) | bcdmin;
    1F0B: 52 0E    MOV   A,[X+14]
    1F0D: 62 D0 00 MOV   REG[0xD0],0x0
    1F10: 64       ASL   A
    1F11: 64       ASL   A
    1F12: 64       ASL   A
    1F13: 64       ASL   A
    1F14: 2B 01    OR    A,[X+1]
    1F16: 54 01    MOV   [X+1],A
(0085) 		LCD_PrHexByte(bcdmin);
    1F18: 10       PUSH  X
    1F19: 52 01    MOV   A,[X+1]
    1F1B: 7C 08 AA LCALL _LCD_PrHexByte
    1F1E: 20       POP   X
(0086) 	}
    1F1F: 38 EF    ADD   SP,0xEF
(0087) 
(0088) 	
(0089) }FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\logger.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Logger.h"
(0004) #include "TempSensor.h"
(0005) #include "Persist.h"
(0006) #include "Rtc.h"
(0007) #include "BcdUtil.h"
(0008) #include "LedArray.h"
(0009) //#include <stdio.h>
(0010) 
(0011) void Logger_Start(void)
(0012) {
_Logger_Start:
    1F23: 7F       RET   
(0013) 	
(0014) }
(0015) 
(0016) void Logger_End(void)
(0017) {
_Logger_End:
    1F24: 7F       RET   
(0018) 	
(0019) }
(0020) 
(0021) void Logger_Loop(void)
(0022) {
_Logger_Loop:
  now                  --> X+30
  currentYear          --> X+29
  currentMonth         --> X+28
  currentDate          --> X+27
  timestampEnd         --> X+25
  timestampStart       --> X+23
  currentMin           --> X+22
  currentHour          --> X+21
  timestampNow         --> X+19
  record               --> X+13
  currentTemp          --> X+12
  currentSecond        --> X+11
  conf                 --> X+0
    1F25: 10       PUSH  X
    1F26: 4F       MOV   X,SP
    1F27: 38 20    ADD   SP,0x20
(0023) 	static BYTE elapsedSeconds, previousSecond;
(0024) 	BYTE currentTemp, currentSecond;
(0025) 	BYTE currentHour, currentMin, currentDate, currentMonth, currentYear;
(0026) 	int timestampNow, timestampStart, timestampEnd;
(0027) 	Time now;
(0028) 	Config conf;
(0029) 	Record record;
(0030) 	
(0031) 	Rtc_ReadFromRtc();
    1F29: 7C 2B 23 LCALL _Rtc_ReadFromRtc
(0032) 	
(0033) 	// Only proceed once in a second
(0034) 	currentSecond = datetime._00h.bits.seconds;
    1F2C: 62 D0 00 MOV   REG[0xD0],0x0
    1F2F: 51 C4    MOV   A,[datetime]
    1F31: 21 0F    AND   A,0xF
    1F33: 54 0B    MOV   [X+11],A
(0035) 	if (currentSecond != previousSecond)
    1F35: 62 D0 00 MOV   REG[0xD0],0x0
    1F38: 52 0B    MOV   A,[X+11]
    1F3A: 3A D8    CMP   A,[keypad.c:keyStillPressed+2]
    1F3C: A2 7C    JZ    0x21B9
(0036) 	{
(0037) 		//cprintf("Tick\n");
(0038) 		
(0039) 		previousSecond = currentSecond;
    1F3E: 52 0B    MOV   A,[X+11]
    1F40: 53 D8    MOV   [keypad.c:keyStillPressed+2],A
(0040) 		elapsedSeconds++;
    1F42: 62 D0 00 MOV   REG[0xD0],0x0
    1F45: 76 D7    INC   [keypad.c:keyStillPressed+1]
(0041) 		
(0042) 		Persist_LoadConfig(&conf);
    1F47: 62 D0 00 MOV   REG[0xD0],0x0
    1F4A: 50 07    MOV   A,0x7
    1F4C: 08       PUSH  A
    1F4D: 10       PUSH  X
    1F4E: 7C 28 0C LCALL _Persist_LoadConfig
    1F51: 38 FE    ADD   SP,0xFE
    1F53: 62 D0 00 MOV   REG[0xD0],0x0
(0043) 		currentTemp = TempSensor_GetTemp();
    1F56: 7C 2C 9F LCALL _TempSensor_GetTemp
    1F59: 62 D0 00 MOV   REG[0xD0],0x0
    1F5C: 51 C2    MOV   A,[__r1]
    1F5E: 54 0C    MOV   [X+12],A
(0044) 		
(0045) 		// Get max and min temperatures
(0046) //		if (currentTemp > conf.maxRegisteredTemp)
(0047) //		{
(0048) //			conf.maxRegisteredTemp = currentTemp;
(0049) //			Persist_SaveConfig(&conf);
(0050) //		}
(0051) //		if (currentTemp < conf.minRegisteredTemp)
(0052) //		{
(0053) //			conf.minRegisteredTemp = currentTemp;
(0054) //			Persist_SaveConfig(&conf);
(0055) //		}
(0056) 	
(0057) 		// Once in a minute
(0058) 		if(conf.flags.registerEnabled && elapsedSeconds > 59)
    1F60: 52 00    MOV   A,[X+0]
    1F62: 67       ASR   A
    1F63: 67       ASR   A
    1F64: 67       ASR   A
    1F65: 67       ASR   A
    1F66: 67       ASR   A
    1F67: 67       ASR   A
    1F68: 67       ASR   A
    1F69: 21 01    AND   A,0x1
    1F6B: 53 C3    MOV   [__r0],A
    1F6D: 26 C3 01 AND   [__r0],0x1
    1F70: A1 D4    JZ    0x2145
    1F72: 62 D0 00 MOV   REG[0xD0],0x0
    1F75: 50 3B    MOV   A,0x3B
    1F77: 3A D7    CMP   A,[keypad.c:keyStillPressed+1]
    1F79: D1 CB    JNC   0x2145
(0059) 		{
(0060) 			//cprintf("Tock\n");
(0061) 			
(0062) 			elapsedSeconds = 0;
    1F7B: 62 D0 00 MOV   REG[0xD0],0x0
    1F7E: 55 D7 00 MOV   [keypad.c:keyStillPressed+1],0x0
(0063) 			
(0064) 			bcdToDec((datetime._02h.bits_24hrs.hours10), (datetime._02h.bits_24hrs.hours), &currentHour);
    1F81: 62 D0 00 MOV   REG[0xD0],0x0
    1F84: 5A C2    MOV   [__r1],X
    1F86: 06 C2 15 ADD   [__r1],0x15
    1F89: 50 07    MOV   A,0x7
    1F8B: 08       PUSH  A
    1F8C: 51 C2    MOV   A,[__r1]
    1F8E: 08       PUSH  A
    1F8F: 62 D0 00 MOV   REG[0xD0],0x0
    1F92: 51 C6    MOV   A,[datetime+2]
    1F94: 21 0F    AND   A,0xF
    1F96: 08       PUSH  A
    1F97: 51 C6    MOV   A,[datetime+2]
    1F99: 62 D0 00 MOV   REG[0xD0],0x0
    1F9C: 67       ASR   A
    1F9D: 67       ASR   A
    1F9E: 67       ASR   A
    1F9F: 67       ASR   A
    1FA0: 21 0F    AND   A,0xF
    1FA2: 53 C3    MOV   [__r0],A
    1FA4: 26 C3 03 AND   [__r0],0x3
    1FA7: 51 C3    MOV   A,[__r0]
    1FA9: 08       PUSH  A
    1FAA: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    1FAD: 38 FC    ADD   SP,0xFC
(0065) 			bcdToDec((datetime._01h.bits.minutes10), (datetime._01h.bits.minutes), &currentMin);
    1FAF: 62 D0 00 MOV   REG[0xD0],0x0
    1FB2: 5A C2    MOV   [__r1],X
    1FB4: 06 C2 16 ADD   [__r1],0x16
    1FB7: 50 07    MOV   A,0x7
    1FB9: 08       PUSH  A
    1FBA: 51 C2    MOV   A,[__r1]
    1FBC: 08       PUSH  A
    1FBD: 62 D0 00 MOV   REG[0xD0],0x0
    1FC0: 51 C5    MOV   A,[datetime+1]
    1FC2: 21 0F    AND   A,0xF
    1FC4: 08       PUSH  A
    1FC5: 51 C5    MOV   A,[datetime+1]
    1FC7: 62 D0 00 MOV   REG[0xD0],0x0
    1FCA: 67       ASR   A
    1FCB: 67       ASR   A
    1FCC: 67       ASR   A
    1FCD: 67       ASR   A
    1FCE: 21 0F    AND   A,0xF
    1FD0: 53 C3    MOV   [__r0],A
    1FD2: 26 C3 07 AND   [__r0],0x7
    1FD5: 51 C3    MOV   A,[__r0]
    1FD7: 08       PUSH  A
    1FD8: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0066) 			bcdToDec((datetime._04h.bits.date10), (datetime._04h.bits.date), &currentDate);
    1FDB: 62 D0 00 MOV   REG[0xD0],0x0
    1FDE: 5A C2    MOV   [__r1],X
    1FE0: 06 C2 1B ADD   [__r1],0x1B
    1FE3: 50 07    MOV   A,0x7
    1FE5: 08       PUSH  A
    1FE6: 51 C2    MOV   A,[__r1]
    1FE8: 08       PUSH  A
    1FE9: 62 D0 00 MOV   REG[0xD0],0x0
    1FEC: 51 C8    MOV   A,[datetime+4]
    1FEE: 21 0F    AND   A,0xF
    1FF0: 08       PUSH  A
    1FF1: 51 C8    MOV   A,[datetime+4]
    1FF3: 62 D0 00 MOV   REG[0xD0],0x0
    1FF6: 67       ASR   A
    1FF7: 67       ASR   A
    1FF8: 67       ASR   A
    1FF9: 67       ASR   A
    1FFA: 21 0F    AND   A,0xF
    1FFC: 53 C3    MOV   [__r0],A
    1FFE: 26 C3 03 AND   [__r0],0x3
    2001: 51 C3    MOV   A,[__r0]
    2003: 08       PUSH  A
    2004: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2007: 38 F8    ADD   SP,0xF8
(0067) 			bcdToDec((datetime._05h.bits.month10), (datetime._05h.bits.month), &currentMonth);
    2009: 62 D0 00 MOV   REG[0xD0],0x0
    200C: 5A C2    MOV   [__r1],X
    200E: 06 C2 1C ADD   [__r1],0x1C
    2011: 50 07    MOV   A,0x7
    2013: 08       PUSH  A
    2014: 51 C2    MOV   A,[__r1]
    2016: 08       PUSH  A
    2017: 62 D0 00 MOV   REG[0xD0],0x0
    201A: 51 C9    MOV   A,[datetime+5]
    201C: 21 0F    AND   A,0xF
    201E: 08       PUSH  A
    201F: 51 C9    MOV   A,[datetime+5]
    2021: 62 D0 00 MOV   REG[0xD0],0x0
    2024: 67       ASR   A
    2025: 67       ASR   A
    2026: 67       ASR   A
    2027: 67       ASR   A
    2028: 21 0F    AND   A,0xF
    202A: 53 C3    MOV   [__r0],A
    202C: 26 C3 01 AND   [__r0],0x1
    202F: 51 C3    MOV   A,[__r0]
    2031: 08       PUSH  A
    2032: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0068) 			bcdToDec((datetime._06h.bits.year10), (datetime._06h.bits.year), &currentYear);
    2035: 62 D0 00 MOV   REG[0xD0],0x0
    2038: 5A C2    MOV   [__r1],X
    203A: 06 C2 1D ADD   [__r1],0x1D
    203D: 50 07    MOV   A,0x7
    203F: 08       PUSH  A
    2040: 51 C2    MOV   A,[__r1]
    2042: 08       PUSH  A
    2043: 62 D0 00 MOV   REG[0xD0],0x0
    2046: 51 CA    MOV   A,[datetime+6]
    2048: 21 0F    AND   A,0xF
    204A: 08       PUSH  A
    204B: 51 CA    MOV   A,[datetime+6]
    204D: 62 D0 00 MOV   REG[0xD0],0x0
    2050: 67       ASR   A
    2051: 67       ASR   A
    2052: 67       ASR   A
    2053: 67       ASR   A
    2054: 21 0F    AND   A,0xF
    2056: 53 C3    MOV   [__r0],A
    2058: 26 C3 0F AND   [__r0],0xF
    205B: 51 C3    MOV   A,[__r0]
    205D: 08       PUSH  A
    205E: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2061: 38 F8    ADD   SP,0xF8
(0069) 			
(0070) 			timestampNow = (int)(currentHour)*60 + currentMin;
    2063: 62 D0 00 MOV   REG[0xD0],0x0
    2066: 52 16    MOV   A,[X+22]
    2068: 53 C2    MOV   [__r1],A
    206A: 55 C3 00 MOV   [__r0],0x0
    206D: 52 15    MOV   A,[X+21]
    206F: 53 C0    MOV   [__r3],A
    2071: 50 00    MOV   A,0x0
    2073: 08       PUSH  A
    2074: 51 C0    MOV   A,[__r3]
    2076: 08       PUSH  A
    2077: 50 00    MOV   A,0x0
    2079: 08       PUSH  A
    207A: 50 3C    MOV   A,0x3C
    207C: 08       PUSH  A
    207D: 7C 3E 63 LCALL 0x3E63
    2080: 38 FC    ADD   SP,0xFC
    2082: 51 B7    MOV   A,[__rX]
    2084: 53 C0    MOV   [__r3],A
    2086: 51 B6    MOV   A,[__rY]
    2088: 53 C1    MOV   [__r2],A
    208A: 51 C0    MOV   A,[__r3]
    208C: 02 C2    ADD   A,[__r1]
    208E: 54 14    MOV   [X+20],A
    2090: 51 C1    MOV   A,[__r2]
    2092: 0A C3    ADC   A,[__r0]
    2094: 54 13    MOV   [X+19],A
(0071) 			timestampStart = (int)(conf.registerStart.hour)*60 + conf.registerStart.min;
    2096: 52 02    MOV   A,[X+2]
    2098: 53 C2    MOV   [__r1],A
    209A: 52 01    MOV   A,[X+1]
    209C: 53 C0    MOV   [__r3],A
    209E: 50 00    MOV   A,0x0
    20A0: 08       PUSH  A
    20A1: 51 C0    MOV   A,[__r3]
    20A3: 08       PUSH  A
    20A4: 50 00    MOV   A,0x0
    20A6: 08       PUSH  A
    20A7: 50 3C    MOV   A,0x3C
    20A9: 08       PUSH  A
    20AA: 7C 3E 63 LCALL 0x3E63
    20AD: 38 FC    ADD   SP,0xFC
    20AF: 51 B7    MOV   A,[__rX]
    20B1: 53 C0    MOV   [__r3],A
    20B3: 51 B6    MOV   A,[__rY]
    20B5: 53 C1    MOV   [__r2],A
    20B7: 51 C0    MOV   A,[__r3]
    20B9: 02 C2    ADD   A,[__r1]
    20BB: 54 18    MOV   [X+24],A
    20BD: 51 C1    MOV   A,[__r2]
    20BF: 0A C3    ADC   A,[__r0]
    20C1: 54 17    MOV   [X+23],A
(0072) 			timestampEnd = (int)(conf.registerEnd.hour)*60 + conf.registerEnd.min;
    20C3: 52 04    MOV   A,[X+4]
    20C5: 53 C2    MOV   [__r1],A
    20C7: 52 03    MOV   A,[X+3]
    20C9: 53 C0    MOV   [__r3],A
    20CB: 50 00    MOV   A,0x0
    20CD: 08       PUSH  A
    20CE: 51 C0    MOV   A,[__r3]
    20D0: 08       PUSH  A
    20D1: 50 00    MOV   A,0x0
    20D3: 08       PUSH  A
    20D4: 50 3C    MOV   A,0x3C
    20D6: 08       PUSH  A
    20D7: 7C 3E 63 LCALL 0x3E63
    20DA: 38 FC    ADD   SP,0xFC
    20DC: 51 B7    MOV   A,[__rX]
    20DE: 53 C0    MOV   [__r3],A
    20E0: 51 B6    MOV   A,[__rY]
    20E2: 53 C1    MOV   [__r2],A
    20E4: 51 C0    MOV   A,[__r3]
    20E6: 02 C2    ADD   A,[__r1]
    20E8: 54 1A    MOV   [X+26],A
    20EA: 51 C1    MOV   A,[__r2]
    20EC: 0A C3    ADC   A,[__r0]
    20EE: 54 19    MOV   [X+25],A
(0073) 			
(0074) 			//cprintf("Horas: %d:%d - %d:%d\n", conf.registerStart.hour, conf.registerStart.min, conf.registerEnd.hour, conf.registerEnd.min);
(0075) 			
(0076) 			//cprintf("Tiempos: %d %d %d\n", timestampNow, timestampStart, timestampEnd);
(0077) 			
(0078) 			if(timestampNow >= timestampStart && timestampNow < timestampEnd)
    20F0: 52 14    MOV   A,[X+20]
    20F2: 13 18    SUB   A,[X+24]
    20F4: 52 17    MOV   A,[X+23]
    20F6: 31 80    XOR   A,0x80
    20F8: 53 B7    MOV   [__rX],A
    20FA: 52 13    MOV   A,[X+19]
    20FC: 31 80    XOR   A,0x80
    20FE: 1A B7    SBB   A,[__rX]
    2100: C0 44    JC    0x2145
    2102: 52 14    MOV   A,[X+20]
    2104: 13 1A    SUB   A,[X+26]
    2106: 52 19    MOV   A,[X+25]
    2108: 31 80    XOR   A,0x80
    210A: 62 D0 00 MOV   REG[0xD0],0x0
    210D: 53 B7    MOV   [__rX],A
    210F: 52 13    MOV   A,[X+19]
    2111: 31 80    XOR   A,0x80
    2113: 1A B7    SBB   A,[__rX]
    2115: D0 2F    JNC   0x2145
(0079) 			{
(0080) 				// Log
(0081) 				record.temp = currentTemp;
    2117: 52 0C    MOV   A,[X+12]
    2119: 54 12    MOV   [X+18],A
(0082) 				record.time.hour = currentHour;
    211B: 52 15    MOV   A,[X+21]
    211D: 54 10    MOV   [X+16],A
(0083) 				record.time.min = currentMin;
    211F: 52 16    MOV   A,[X+22]
    2121: 54 11    MOV   [X+17],A
(0084) 				record.date.date = currentDate;
    2123: 52 1B    MOV   A,[X+27]
    2125: 54 0D    MOV   [X+13],A
(0085) 				record.date.month = currentMonth;
    2127: 52 1C    MOV   A,[X+28]
    2129: 54 0E    MOV   [X+14],A
(0086) 				record.date.year = currentYear;
    212B: 52 1D    MOV   A,[X+29]
    212D: 54 0F    MOV   [X+15],A
(0087) 				Persist_SaveRecord(&record);
    212F: 62 D0 00 MOV   REG[0xD0],0x0
    2132: 5A C2    MOV   [__r1],X
    2134: 06 C2 0D ADD   [__r1],0xD
    2137: 50 07    MOV   A,0x7
    2139: 08       PUSH  A
    213A: 51 C2    MOV   A,[__r1]
    213C: 08       PUSH  A
    213D: 7C 26 F8 LCALL _Persist_SaveRecord
    2140: 38 FE    ADD   SP,0xFE
    2142: 62 D0 00 MOV   REG[0xD0],0x0
(0088) 			}
(0089) 			
(0090) 		}
(0091) 	
(0092) 		if(conf.flags.alarmEnabled)
    2145: 52 00    MOV   A,[X+0]
    2147: 62 D0 00 MOV   REG[0xD0],0x0
    214A: 67       ASR   A
    214B: 67       ASR   A
    214C: 67       ASR   A
    214D: 67       ASR   A
    214E: 67       ASR   A
    214F: 67       ASR   A
    2150: 21 03    AND   A,0x3
    2152: 53 C3    MOV   [__r0],A
    2154: 26 C3 01 AND   [__r0],0x1
    2157: A0 54    JZ    0x21AC
(0093) 		{
(0094) 			if(currentTemp+5 > conf.maxTemp || currentTemp-5 < conf.minTemp)
    2159: 52 0C    MOV   A,[X+12]
    215B: 01 05    ADD   A,0x5
    215D: 53 C3    MOV   [__r0],A
    215F: 52 05    MOV   A,[X+5]
    2161: 3A C3    CMP   A,[__r0]
    2163: C0 0C    JC    0x2170
    2165: 62 D0 00 MOV   REG[0xD0],0x0
    2168: 52 0C    MOV   A,[X+12]
    216A: 11 05    SUB   A,0x5
    216C: 3B 06    CMP   A,[X+6]
    216E: D0 0B    JNC   0x217A
(0095) 			{
(0096) 				Leds_TurnOn(LED_3);
    2170: 50 08    MOV   A,0x8
    2172: 08       PUSH  A
    2173: 7C 1C AA LCALL _Leds_TurnOn
    2176: 38 FF    ADD   SP,0xFF
(0097) 			}
    2178: 80 09    JMP   0x2182
(0098) 			else 
(0099) 			{
(0100) 				Leds_TurnOff(LED_3);
    217A: 50 08    MOV   A,0x8
    217C: 08       PUSH  A
    217D: 7C 1C BC LCALL _Leds_TurnOff
    2180: 38 FF    ADD   SP,0xFF
(0101) 			}
(0102) 			if(currentTemp > conf.maxTemp || currentTemp < conf.minTemp)
    2182: 52 05    MOV   A,[X+5]
    2184: 3B 0C    CMP   A,[X+12]
    2186: C0 07    JC    0x218E
    2188: 52 0C    MOV   A,[X+12]
    218A: 3B 06    CMP   A,[X+6]
    218C: D0 10    JNC   0x219D
(0103) 			{
(0104) 				Leds_TurnOn(LED_4);
    218E: 50 10    MOV   A,0x10
    2190: 08       PUSH  A
    2191: 7C 1C AA LCALL _Leds_TurnOn
    2194: 38 FF    ADD   SP,0xFF
(0105) 				PWM8_Start();
    2196: 10       PUSH  X
    2197: 7C 08 0A LCALL _PWM8_Start
    219A: 20       POP   X
(0106) 			}
    219B: 80 1D    JMP   0x21B9
(0107) 			else
(0108) 			{
(0109) 				Leds_TurnOff(LED_4);
    219D: 50 10    MOV   A,0x10
    219F: 08       PUSH  A
    21A0: 7C 1C BC LCALL _Leds_TurnOff
    21A3: 38 FF    ADD   SP,0xFF
(0110) 				PWM8_Stop();
    21A5: 10       PUSH  X
    21A6: 7C 08 0E LCALL _PWM8_Stop
    21A9: 20       POP   X
(0111) 			}
(0112) 		}
    21AA: 80 0E    JMP   0x21B9
(0113) 		else 
(0114) 		{
(0115) 			Leds_TurnOff(LED_3 | LED_4);
    21AC: 50 18    MOV   A,0x18
    21AE: 08       PUSH  A
    21AF: 7C 1C BC LCALL _Leds_TurnOff
    21B2: 38 FF    ADD   SP,0xFF
(0116) 			PWM8_Stop();
    21B4: 10       PUSH  X
    21B5: 7C 08 0E LCALL _PWM8_Stop
    21B8: 20       POP   X
(0117) 		}
(0118) 		
(0119) 	}
    21B9: 38 E0    ADD   SP,0xE0
(0120) 	
(0121) 	
(0122) }FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "Time.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) #include "viewManager.h"
(0011) #include "MainView.h"
(0012) #include "dateTimeView.h"
(0013) #include "regTimeView.h"
(0014) #include "levelView.h"
(0015) #include "configView.h"
(0016) #include "TempSensor.h"
(0017) #include "TempView.h"
(0018) #include "Logger.h"
(0019) #include "LedArray.h"
(0020) #include "DeletView.h"
(0021) #include "PCView.h"
(0022) #include "DevControl.h"
(0023) #include <string.h>
(0024) 
(0025) extern CurrentView currentView;
(0026) 
(0027) int putchar(char c)
(0028) {
_putchar:
  c                    --> X-4
    21BD: 10       PUSH  X
    21BE: 4F       MOV   X,SP
(0029) 	UART_PutChar(c);
    21BF: 10       PUSH  X
    21C0: 52 FC    MOV   A,[X-4]
    21C2: 7C 07 42 LCALL _UART_PutChar
    21C5: 20       POP   X
    21C6: 20       POP   X
    21C7: 7F       RET   
(0030) }
(0031) 
(0032) void main(void)
(0033) {
_main:
    21C8: 10       PUSH  X
    21C9: 4F       MOV   X,SP
    21CA: 38 02    ADD   SP,0x2
(0034) 	Time_Start();
    21CC: 7C 2F 3B LCALL _Time_Start
(0035) 	Keypad_Start();
    21CF: 7C 1A 9D LCALL _Keypad_Start
(0036) 	Persist_Start();
    21D2: 7C 26 B0 LCALL _Persist_Start
(0037) 	LCD_Start();
    21D5: 10       PUSH  X
    21D6: 7C 09 9A LCALL _LCD_Start|LCD_Init|_LCD_Init
    21D9: 20       POP   X
(0038) 	MainView_Start();
    21DA: 7C 22 95 LCALL _MainView_Start
(0039) 	DateTimeView_Start();
    21DD: 7C 14 BC LCALL _DateTimeView_Start
(0040) 	RegTimeView_Start();
    21E0: 7C 28 32 LCALL _RegTimeView_Start
(0041) 	LevelView_Start();
    21E3: 7C 1C E3 LCALL _LevelView_Start
(0042) 	ConfigView_Start();
    21E6: 7C 12 C1 LCALL _ConfigView_Start
(0043) 	TempSensor_Start();
    21E9: 7C 2C 84 LCALL _TempSensor_Start
(0044) 	Logger_Start();
    21EC: 7C 1F 23 LCALL _Logger_Start
(0045) 	Leds_Start();
    21EF: 7C 1C 92 LCALL _Leds_Start
(0046) 	DevControl_Start();
    21F2: 7C 18 37 LCALL _DevControl_Start
(0047) 
(0048) 	UART_Start(UART_PARITY_NONE);
    21F5: 10       PUSH  X
    21F6: 50 00    MOV   A,0x0
    21F8: 7C 06 D0 LCALL _UART_Start
(0049) 	UART_IntCntl(UART_ENABLE_RX_INT);
    21FB: 50 01    MOV   A,0x1
    21FD: 7C 06 FD LCALL _UART_IntCntl
    2200: 20       POP   X
(0050) 
(0051) 	M8C_EnableGInt;
    2201: 71 01    OR    F,0x1
(0052) 
(0053) 	MainView_Callback();
    2203: 7C 23 46 LCALL _MainView_Callback
(0054) 
(0055) 	for(;;)
(0056) 	{
(0057) 		switch(currentView)
    2206: 62 D0 00 MOV   REG[0xD0],0x0
    2209: 51 DD    MOV   A,[currentView]
    220B: 54 01    MOV   [X+1],A
    220D: 56 00 00 MOV   [X+0],0x0
    2210: 3D 00 00 CMP   [X+0],0x0
    2213: B0 06    JNZ   0x221A
    2215: 3D 01 00 CMP   [X+1],0x0
    2218: A0 49    JZ    0x2262
    221A: 3D 00 00 CMP   [X+0],0x0
    221D: B0 06    JNZ   0x2224
    221F: 3D 01 01 CMP   [X+1],0x1
    2222: A0 44    JZ    0x2267
    2224: 3D 00 00 CMP   [X+0],0x0
    2227: B0 06    JNZ   0x222E
    2229: 3D 01 02 CMP   [X+1],0x2
    222C: A0 3F    JZ    0x226C
    222E: 3D 00 00 CMP   [X+0],0x0
    2231: B0 06    JNZ   0x2238
    2233: 3D 01 03 CMP   [X+1],0x3
    2236: A0 3A    JZ    0x2271
    2238: 3D 00 00 CMP   [X+0],0x0
    223B: B0 06    JNZ   0x2242
    223D: 3D 01 04 CMP   [X+1],0x4
    2240: A0 35    JZ    0x2276
    2242: 3D 00 00 CMP   [X+0],0x0
    2245: B0 06    JNZ   0x224C
    2247: 3D 01 05 CMP   [X+1],0x5
    224A: A0 30    JZ    0x227B
    224C: 3D 00 00 CMP   [X+0],0x0
    224F: B0 06    JNZ   0x2256
    2251: 3D 01 06 CMP   [X+1],0x6
    2254: A0 2B    JZ    0x2280
    2256: 3D 00 00 CMP   [X+0],0x0
    2259: B0 06    JNZ   0x2260
    225B: 3D 01 07 CMP   [X+1],0x7
    225E: A0 26    JZ    0x2285
    2260: 80 2A    JMP   0x228B
(0058) 		{
(0059) 			case MAIN:
(0060) 				MainView_Update();
    2262: 7C 23 58 LCALL _MainView_Update
(0061) 				break;
    2265: 80 25    JMP   0x228B
(0062) 			case DATETIME_CONFIG:
(0063) 				DateTimeView_Update();
    2267: 7C 14 EB LCALL _DateTimeView_Update
(0064) 				break;
    226A: 80 20    JMP   0x228B
(0065) 			case REGTIME_CONFIG:
(0066) 				RegTimeView_Update();
    226C: 7C 28 3D LCALL _RegTimeView_Update
(0067) 				break;
    226F: 80 1B    JMP   0x228B
(0068) 			case LEVEL_CONFIG:
(0069) 				LevelView_Update();
    2271: 7C 1D 91 LCALL _LevelView_Update
(0070) 				break;
    2274: 80 16    JMP   0x228B
(0071) 			case CONFIG:
(0072) 				ConfigView_Update();
    2276: 7C 13 4E LCALL _ConfigView_Update
(0073) 				break;
    2279: 80 11    JMP   0x228B
(0074) 			case TEMP:
(0075) 				TempView_Update();
    227B: 7C 2E C2 LCALL _TempView_Update
(0076) 				break;
    227E: 80 0C    JMP   0x228B
(0077) 			case DELET:
(0078) 				DeletView_Update();
    2280: 7C 18 0B LCALL _DeletView_Update
(0079) 				break;
    2283: 80 07    JMP   0x228B
(0080) 			case PC:
(0081) 				PCView_Update();
    2285: 7C 26 84 LCALL _PCView_Update
(0082) 				DevControl_Check();
    2288: 7C 18 3F LCALL _DevControl_Check
(0083) 				//Funcion para checar comando
(0084) 				break;
(0085) 		}
(0086) 		Logger_Loop();
    228B: 7C 1F 25 LCALL _Logger_Loop
(0087) 	}
    228E: 8F 77    JMP   0x2206
(0088) 
(0089) }
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\mainview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "mainView.h"
(0004) #include "Menu.h"
(0005) #include "Keypad.h"
(0006) #include "dateTimeView.h"
(0007) #include "viewManager.h"
(0008) #include "regTimeView.h"
(0009) #include "levelView.h"
(0010) #include "configView.h"
(0011) #include "TempView.h"
(0012) #include "DeletView.h"
(0013) #include "PCView.h"
(0014) #include <string.h>
(0015) 
(0016) extern CurrentView currentView;
(0017) 
(0018) MenuEntry entries[7];
(0019) Menu menu;
(0020) 
(0021) void MainView_Start(void)
(0022) {
(0023) 	Menu_Start();
_MainView_Start:
    2295: 7C 23 CF LCALL _Menu_Start
(0024) 
(0025) 	cstrcpy(entries[0].text, "Ajustar Hora");
    2298: 50 02    MOV   A,0x2
    229A: 08       PUSH  A
    229B: 50 7D    MOV   A,0x7D
    229D: 08       PUSH  A
    229E: 50 00    MOV   A,0x0
    22A0: 08       PUSH  A
    22A1: 50 0F    MOV   A,0xF
    22A3: 08       PUSH  A
    22A4: 7C 3E CF LCALL _cstrcpyLMM
    22A7: 38 FC    ADD   SP,0xFC
(0026) 	cstrcpy(entries[1].text, "Ajustar Captura");
    22A9: 50 02    MOV   A,0x2
    22AB: 08       PUSH  A
    22AC: 50 6D    MOV   A,0x6D
    22AE: 08       PUSH  A
    22AF: 50 00    MOV   A,0x0
    22B1: 08       PUSH  A
    22B2: 50 21    MOV   A,0x21
    22B4: 08       PUSH  A
    22B5: 7C 3E CF LCALL _cstrcpyLMM
(0027) 	cstrcpy(entries[2].text, "Ajustar Nivel");
    22B8: 50 02    MOV   A,0x2
    22BA: 08       PUSH  A
    22BB: 50 5F    MOV   A,0x5F
    22BD: 08       PUSH  A
    22BE: 50 00    MOV   A,0x0
    22C0: 08       PUSH  A
    22C1: 50 33    MOV   A,0x33
    22C3: 08       PUSH  A
    22C4: 7C 3E CF LCALL _cstrcpyLMM
    22C7: 38 F8    ADD   SP,0xF8
(0028) 	cstrcpy(entries[3].text, "Configuracion");
    22C9: 50 02    MOV   A,0x2
    22CB: 08       PUSH  A
    22CC: 50 51    MOV   A,0x51
    22CE: 08       PUSH  A
    22CF: 50 00    MOV   A,0x0
    22D1: 08       PUSH  A
    22D2: 50 45    MOV   A,0x45
    22D4: 08       PUSH  A
    22D5: 7C 3E CF LCALL _cstrcpyLMM
(0029) 	cstrcpy(entries[4].text, "Temp Actual");
    22D8: 50 02    MOV   A,0x2
    22DA: 08       PUSH  A
    22DB: 50 45    MOV   A,0x45
    22DD: 08       PUSH  A
    22DE: 50 00    MOV   A,0x0
    22E0: 08       PUSH  A
    22E1: 50 57    MOV   A,0x57
    22E3: 08       PUSH  A
    22E4: 7C 3E CF LCALL _cstrcpyLMM
    22E7: 38 F8    ADD   SP,0xF8
(0030) 	cstrcpy(entries[5].text, "Borrar Memoria");
    22E9: 50 02    MOV   A,0x2
    22EB: 08       PUSH  A
    22EC: 50 36    MOV   A,0x36
    22EE: 08       PUSH  A
    22EF: 50 00    MOV   A,0x0
    22F1: 08       PUSH  A
    22F2: 50 69    MOV   A,0x69
    22F4: 08       PUSH  A
    22F5: 7C 3E CF LCALL _cstrcpyLMM
(0031) 	cstrcpy(entries[6].text, "Conectar a PC");
    22F8: 50 02    MOV   A,0x2
    22FA: 08       PUSH  A
    22FB: 50 28    MOV   A,0x28
    22FD: 08       PUSH  A
    22FE: 50 00    MOV   A,0x0
    2300: 08       PUSH  A
    2301: 50 7B    MOV   A,0x7B
    2303: 08       PUSH  A
    2304: 7C 3E CF LCALL _cstrcpyLMM
    2307: 38 F8    ADD   SP,0xF8
(0032) 
(0033) 	entries[0].callback = &DateTimeView_Callback;
    2309: 62 D0 00 MOV   REG[0xD0],0x0
    230C: 55 20 2E MOV   [entries+17],0x2E
    230F: 55 1F 05 MOV   [entries+16],0x5
(0034) 	entries[1].callback = &RegTimeView_Callback;
    2312: 55 32 2C MOV   [entries+35],0x2C
    2315: 55 31 05 MOV   [entries+34],0x5
(0035) 	entries[2].callback = &LevelView_Callback;
    2318: 55 44 2A MOV   [entries+53],0x2A
    231B: 55 43 05 MOV   [entries+52],0x5
(0036) 	entries[3].callback = &ConfigView_Callback;
    231E: 55 56 28 MOV   [entries+71],0x28
    2321: 55 55 05 MOV   [entries+70],0x5
(0037) 	entries[4].callback = &TempView_Callback;
    2324: 55 68 26 MOV   [entries+89],0x26
    2327: 55 67 05 MOV   [entries+88],0x5
(0038) 	entries[5].callback = &DeletView_Callback;
    232A: 55 7A 24 MOV   [entries+107],0x24
    232D: 55 79 05 MOV   [entries+106],0x5
(0039) 	entries[6].callback = &PCView_Callback;
    2330: 55 8C 22 MOV   [entries+125],0x22
    2333: 55 8B 05 MOV   [entries+124],0x5
(0040) 
(0041) 	menu.currentIndex = 0;
    2336: 62 D0 00 MOV   REG[0xD0],0x0
    2339: 55 CF 00 MOV   [menu+3],0x0
(0042) 	menu.nOptions = 7;
    233C: 55 CE 07 MOV   [menu+2],0x7
(0043) 	menu.entries = entries;
    233F: 55 CD 0F MOV   [menu+1],0xF
    2342: 55 CC 00 MOV   [menu],0x0
    2345: 7F       RET   
(0044) }
(0045) 
(0046) void MainView_Callback(void)
(0047) {
(0048) 	currentView = MAIN;
_MainView_Callback:
    2346: 62 D0 00 MOV   REG[0xD0],0x0
    2349: 55 DD 00 MOV   [currentView],0x0
(0049) 	Menu_Update(&menu);
    234C: 50 00    MOV   A,0x0
    234E: 08       PUSH  A
    234F: 50 CC    MOV   A,0xCC
    2351: 08       PUSH  A
    2352: 7C 23 D1 LCALL _Menu_Update
    2355: 38 FE    ADD   SP,0xFE
    2357: 7F       RET   
(0050) }
(0051) 
(0052) void MainView_Update(void)
(0053) {
_MainView_Update:
    2358: 10       PUSH  X
    2359: 4F       MOV   X,SP
    235A: 38 02    ADD   SP,0x2
(0054) 	if(Keypad_IsKeyStored())
    235C: 7C 1B BC LCALL _Keypad_IsKeyStored
    235F: 62 D0 00 MOV   REG[0xD0],0x0
    2362: 39 00    CMP   A,0x0
    2364: A0 66    JZ    0x23CB
(0055) 	{
(0056) 		switch(Keypad_GetKey())
    2366: 7C 1B D4 LCALL _Keypad_GetKey
    2369: 62 D0 00 MOV   REG[0xD0],0x0
    236C: 54 01    MOV   [X+1],A
    236E: 56 00 00 MOV   [X+0],0x0
    2371: 52 01    MOV   A,[X+1]
    2373: 11 44    SUB   A,0x44
    2375: 53 B6    MOV   [__rY],A
    2377: 52 00    MOV   A,[X+0]
    2379: 31 80    XOR   A,0x80
    237B: 19 80    SBB   A,0x80
    237D: 2A B6    OR    A,[__rY]
    237F: A0 28    JZ    0x23A8
    2381: D0 0D    JNC   0x238F
    2383: 3D 00 00 CMP   [X+0],0x0
    2386: B0 06    JNZ   0x238D
    2388: 3D 01 24 CMP   [X+1],0x24
    238B: A0 0F    JZ    0x239B
    238D: 80 32    JMP   0x23C0
    238F: 3D 00 00 CMP   [X+0],0x0
    2392: B0 06    JNZ   0x2399
    2394: 3D 01 84 CMP   [X+1],0x84
    2397: A0 1D    JZ    0x23B5
    2399: 80 26    JMP   0x23C0
(0057) 		{
(0058) 			case 0x24:
(0059) 				// "8"
(0060) 				Menu_Down(&menu);
    239B: 50 00    MOV   A,0x0
    239D: 08       PUSH  A
    239E: 50 CC    MOV   A,0xCC
    23A0: 08       PUSH  A
    23A1: 7C 25 0C LCALL _Menu_Down
    23A4: 38 FE    ADD   SP,0xFE
(0061) 				break;
    23A6: 80 19    JMP   0x23C0
(0062) 			case 0x44:
(0063) 				// "5"
(0064) 				Menu_Select(&menu);
    23A8: 50 00    MOV   A,0x0
    23AA: 08       PUSH  A
    23AB: 50 CC    MOV   A,0xCC
    23AD: 08       PUSH  A
    23AE: 7C 25 5A LCALL _Menu_Select
    23B1: 38 FE    ADD   SP,0xFE
(0065) 				return;
    23B3: 80 17    JMP   0x23CB
(0066) 				break;
(0067) 			case 0x84:
(0068) 				// "2"
(0069) 				Menu_Up(&menu);
    23B5: 50 00    MOV   A,0x0
    23B7: 08       PUSH  A
    23B8: 50 CC    MOV   A,0xCC
    23BA: 08       PUSH  A
    23BB: 7C 24 CD LCALL _Menu_Up
    23BE: 38 FE    ADD   SP,0xFE
(0070) 				break;
(0071) 		}
(0072) 		Menu_Update(&menu);
    23C0: 50 00    MOV   A,0x0
    23C2: 08       PUSH  A
    23C3: 50 CC    MOV   A,0xCC
    23C5: 08       PUSH  A
    23C6: 7C 23 D1 LCALL _Menu_Update
    23C9: 38 FE    ADD   SP,0xFE
(0073) 	}
    23CB: 38 FE    ADD   SP,0xFE
    23CD: 20       POP   X
    23CE: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\menu.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "menu.h"
(0004) 
(0005) void Menu_Start(void)
(0006) {
_Menu_Start:
    23CF: 7F       RET   
(0007) 	//LCD_Start();
(0008) }
(0009) 
(0010) void Menu_Stop(void)
(0011) {
_Menu_Stop:
    23D0: 7F       RET   
(0012) 	//LCD_Stop();
(0013) }
(0014) 
(0015) void Menu_Update(Menu *menu)
(0016) {
_Menu_Update:
  menu                 --> X-5
    23D1: 10       PUSH  X
    23D2: 4F       MOV   X,SP
(0017) 	Menu_Clear();
    23D3: 92 5B    CALL  _Menu_Clear
(0018) 	LCD_Position(0, 0);
    23D5: 10       PUSH  X
    23D6: 50 00    MOV   A,0x0
    23D8: 57 00    MOV   X,0x0
    23DA: 7C 0A 0D LCALL _LCD_Position
(0019) 	LCD_PrCString(">");
    23DD: 50 02    MOV   A,0x2
    23DF: 08       PUSH  A
    23E0: 50 9D    MOV   A,0x9D
    23E2: 5C       MOV   X,A
    23E3: 18       POP   A
    23E4: 7C 08 88 LCALL _LCD_PrCString
    23E7: 20       POP   X
(0020) 	LCD_PrString(menu->entries[menu->currentIndex].text);
    23E8: 62 D0 00 MOV   REG[0xD0],0x0
    23EB: 52 FC    MOV   A,[X-4]
    23ED: 53 C2    MOV   [__r1],A
    23EF: 52 FB    MOV   A,[X-5]
    23F1: 60 D4    MOV   REG[0xD4],A
    23F3: 3E C2    MVI   A,[__r1]
    23F5: 53 C3    MOV   [__r0],A
    23F7: 3E C2    MVI   A,[__r1]
    23F9: 53 C2    MOV   [__r1],A
    23FB: 52 FC    MOV   A,[X-4]
    23FD: 01 03    ADD   A,0x3
    23FF: 53 C0    MOV   [__r3],A
    2401: 52 FB    MOV   A,[X-5]
    2403: 09 00    ADC   A,0x0
    2405: 60 D4    MOV   REG[0xD4],A
    2407: 3E C0    MVI   A,[__r3]
    2409: 53 C0    MOV   [__r3],A
    240B: 50 00    MOV   A,0x0
    240D: 08       PUSH  A
    240E: 51 C0    MOV   A,[__r3]
    2410: 08       PUSH  A
    2411: 50 00    MOV   A,0x0
    2413: 08       PUSH  A
    2414: 50 12    MOV   A,0x12
    2416: 08       PUSH  A
    2417: 7C 3E 63 LCALL 0x3E63
    241A: 38 FC    ADD   SP,0xFC
    241C: 51 B7    MOV   A,[__rX]
    241E: 53 C0    MOV   [__r3],A
    2420: 51 B6    MOV   A,[__rY]
    2422: 53 C1    MOV   [__r2],A
    2424: 51 C0    MOV   A,[__r3]
    2426: 02 C2    ADD   A,[__r1]
    2428: 53 C2    MOV   [__r1],A
    242A: 51 C1    MOV   A,[__r2]
    242C: 0A C3    ADC   A,[__r0]
    242E: 10       PUSH  X
    242F: 08       PUSH  A
    2430: 51 C2    MOV   A,[__r1]
    2432: 5C       MOV   X,A
    2433: 18       POP   A
    2434: 7C 08 C4 LCALL _LCD_PrString
(0021) 	LCD_Position(1, 0);
    2437: 57 00    MOV   X,0x0
    2439: 50 01    MOV   A,0x1
    243B: 7C 0A 0D LCALL _LCD_Position
(0022) 	LCD_PrCString(" ");
    243E: 50 02    MOV   A,0x2
    2440: 08       PUSH  A
    2441: 50 9B    MOV   A,0x9B
    2443: 5C       MOV   X,A
    2444: 18       POP   A
    2445: 7C 08 88 LCALL _LCD_PrCString
    2448: 20       POP   X
(0023) 	if(menu->currentIndex < menu->nOptions - 1)
    2449: 62 D0 00 MOV   REG[0xD0],0x0
    244C: 52 FC    MOV   A,[X-4]
    244E: 01 02    ADD   A,0x2
    2450: 53 C2    MOV   [__r1],A
    2452: 52 FB    MOV   A,[X-5]
    2454: 09 00    ADC   A,0x0
    2456: 60 D4    MOV   REG[0xD4],A
    2458: 3E C2    MVI   A,[__r1]
    245A: 53 C3    MOV   [__r0],A
    245C: 16 C3 01 SUB   [__r0],0x1
    245F: 52 FC    MOV   A,[X-4]
    2461: 01 03    ADD   A,0x3
    2463: 53 C0    MOV   [__r3],A
    2465: 52 FB    MOV   A,[X-5]
    2467: 09 00    ADC   A,0x0
    2469: 60 D4    MOV   REG[0xD4],A
    246B: 3E C0    MVI   A,[__r3]
    246D: 3A C3    CMP   A,[__r0]
    246F: D0 5B    JNC   0x24CB
(0024) 	{
(0025) 		LCD_PrString(menu->entries[menu->currentIndex + 1].text);
    2471: 62 D0 00 MOV   REG[0xD0],0x0
    2474: 52 FC    MOV   A,[X-4]
    2476: 53 C2    MOV   [__r1],A
    2478: 52 FB    MOV   A,[X-5]
    247A: 60 D4    MOV   REG[0xD4],A
    247C: 3E C2    MVI   A,[__r1]
    247E: 53 C3    MOV   [__r0],A
    2480: 3E C2    MVI   A,[__r1]
    2482: 53 C2    MOV   [__r1],A
    2484: 52 FC    MOV   A,[X-4]
    2486: 01 03    ADD   A,0x3
    2488: 53 C0    MOV   [__r3],A
    248A: 52 FB    MOV   A,[X-5]
    248C: 09 00    ADC   A,0x0
    248E: 60 D4    MOV   REG[0xD4],A
    2490: 3E C0    MVI   A,[__r3]
    2492: 53 C0    MOV   [__r3],A
    2494: 50 00    MOV   A,0x0
    2496: 08       PUSH  A
    2497: 51 C0    MOV   A,[__r3]
    2499: 08       PUSH  A
    249A: 50 00    MOV   A,0x0
    249C: 08       PUSH  A
    249D: 50 12    MOV   A,0x12
    249F: 08       PUSH  A
    24A0: 7C 3E 63 LCALL 0x3E63
    24A3: 38 FC    ADD   SP,0xFC
    24A5: 51 B7    MOV   A,[__rX]
    24A7: 53 C0    MOV   [__r3],A
    24A9: 51 B6    MOV   A,[__rY]
    24AB: 53 C1    MOV   [__r2],A
    24AD: 51 C0    MOV   A,[__r3]
    24AF: 02 C2    ADD   A,[__r1]
    24B1: 53 C2    MOV   [__r1],A
    24B3: 51 C1    MOV   A,[__r2]
    24B5: 0A C3    ADC   A,[__r0]
    24B7: 53 C3    MOV   [__r0],A
    24B9: 06 C2 12 ADD   [__r1],0x12
    24BC: 0E C3 00 ADC   [__r0],0x0
    24BF: 10       PUSH  X
    24C0: 51 C3    MOV   A,[__r0]
    24C2: 08       PUSH  A
    24C3: 51 C2    MOV   A,[__r1]
    24C5: 5C       MOV   X,A
    24C6: 18       POP   A
    24C7: 7C 08 C4 LCALL _LCD_PrString
    24CA: 20       POP   X
(0026) 	}
    24CB: 20       POP   X
    24CC: 7F       RET   
(0027) 
(0028) }
(0029) 
(0030) void Menu_Up(Menu *menu)
(0031) {
_Menu_Up:
  menu                 --> X-5
    24CD: 10       PUSH  X
    24CE: 4F       MOV   X,SP
(0032) 	if(menu->currentIndex > 0)
    24CF: 62 D0 00 MOV   REG[0xD0],0x0
    24D2: 52 FC    MOV   A,[X-4]
    24D4: 01 03    ADD   A,0x3
    24D6: 53 C2    MOV   [__r1],A
    24D8: 52 FB    MOV   A,[X-5]
    24DA: 09 00    ADC   A,0x0
    24DC: 60 D4    MOV   REG[0xD4],A
    24DE: 3E C2    MVI   A,[__r1]
    24E0: 53 C3    MOV   [__r0],A
    24E2: 50 00    MOV   A,0x0
    24E4: 3A C3    CMP   A,[__r0]
    24E6: D0 23    JNC   0x250A
(0033) 	{
(0034) 		menu->currentIndex--;
    24E8: 62 D0 00 MOV   REG[0xD0],0x0
    24EB: 52 FC    MOV   A,[X-4]
    24ED: 01 03    ADD   A,0x3
    24EF: 53 C2    MOV   [__r1],A
    24F1: 52 FB    MOV   A,[X-5]
    24F3: 09 00    ADC   A,0x0
    24F5: 53 C3    MOV   [__r0],A
    24F7: 60 D4    MOV   REG[0xD4],A
    24F9: 3E C2    MVI   A,[__r1]
    24FB: 7A C2    DEC   [__r1]
    24FD: 53 C1    MOV   [__r2],A
    24FF: 16 C1 01 SUB   [__r2],0x1
    2502: 51 C3    MOV   A,[__r0]
    2504: 60 D5    MOV   REG[0xD5],A
    2506: 51 C1    MOV   A,[__r2]
    2508: 3F C2    MVI   [__r1],A
(0035) 	}
    250A: 20       POP   X
    250B: 7F       RET   
(0036) }
(0037) 
(0038) void Menu_Down(Menu *menu)
(0039) {
_Menu_Down:
  menu                 --> X-5
    250C: 10       PUSH  X
    250D: 4F       MOV   X,SP
(0040) 	if(menu->currentIndex < menu->nOptions - 1)
    250E: 62 D0 00 MOV   REG[0xD0],0x0
    2511: 52 FC    MOV   A,[X-4]
    2513: 01 02    ADD   A,0x2
    2515: 53 C2    MOV   [__r1],A
    2517: 52 FB    MOV   A,[X-5]
    2519: 09 00    ADC   A,0x0
    251B: 60 D4    MOV   REG[0xD4],A
    251D: 3E C2    MVI   A,[__r1]
    251F: 53 C3    MOV   [__r0],A
    2521: 16 C3 01 SUB   [__r0],0x1
    2524: 52 FC    MOV   A,[X-4]
    2526: 01 03    ADD   A,0x3
    2528: 53 C0    MOV   [__r3],A
    252A: 52 FB    MOV   A,[X-5]
    252C: 09 00    ADC   A,0x0
    252E: 60 D4    MOV   REG[0xD4],A
    2530: 3E C0    MVI   A,[__r3]
    2532: 3A C3    CMP   A,[__r0]
    2534: D0 23    JNC   0x2558
(0041) 	{
(0042) 		menu->currentIndex++;
    2536: 62 D0 00 MOV   REG[0xD0],0x0
    2539: 52 FC    MOV   A,[X-4]
    253B: 01 03    ADD   A,0x3
    253D: 53 C2    MOV   [__r1],A
    253F: 52 FB    MOV   A,[X-5]
    2541: 09 00    ADC   A,0x0
    2543: 53 C3    MOV   [__r0],A
    2545: 60 D4    MOV   REG[0xD4],A
    2547: 3E C2    MVI   A,[__r1]
    2549: 7A C2    DEC   [__r1]
    254B: 53 C1    MOV   [__r2],A
    254D: 06 C1 01 ADD   [__r2],0x1
    2550: 51 C3    MOV   A,[__r0]
    2552: 60 D5    MOV   REG[0xD5],A
    2554: 51 C1    MOV   A,[__r2]
    2556: 3F C2    MVI   [__r1],A
(0043) 	}
    2558: 20       POP   X
    2559: 7F       RET   
(0044) }
(0045) 
(0046) void Menu_Select(Menu *menu)
(0047) {
_Menu_Select:
  menu                 --> X-5
    255A: 10       PUSH  X
    255B: 4F       MOV   X,SP
(0048) 	if(menu->entries[menu->currentIndex].callback != 0)
    255C: 62 D0 00 MOV   REG[0xD0],0x0
    255F: 52 FC    MOV   A,[X-4]
    2561: 53 C2    MOV   [__r1],A
    2563: 52 FB    MOV   A,[X-5]
    2565: 60 D4    MOV   REG[0xD4],A
    2567: 3E C2    MVI   A,[__r1]
    2569: 53 C3    MOV   [__r0],A
    256B: 3E C2    MVI   A,[__r1]
    256D: 53 C2    MOV   [__r1],A
    256F: 52 FC    MOV   A,[X-4]
    2571: 01 03    ADD   A,0x3
    2573: 53 C0    MOV   [__r3],A
    2575: 52 FB    MOV   A,[X-5]
    2577: 09 00    ADC   A,0x0
    2579: 60 D4    MOV   REG[0xD4],A
    257B: 3E C0    MVI   A,[__r3]
    257D: 53 C0    MOV   [__r3],A
    257F: 50 00    MOV   A,0x0
    2581: 08       PUSH  A
    2582: 51 C0    MOV   A,[__r3]
    2584: 08       PUSH  A
    2585: 50 00    MOV   A,0x0
    2587: 08       PUSH  A
    2588: 50 12    MOV   A,0x12
    258A: 08       PUSH  A
    258B: 7C 3E 63 LCALL 0x3E63
    258E: 38 FC    ADD   SP,0xFC
    2590: 51 B7    MOV   A,[__rX]
    2592: 53 C0    MOV   [__r3],A
    2594: 51 B6    MOV   A,[__rY]
    2596: 53 C1    MOV   [__r2],A
    2598: 51 C0    MOV   A,[__r3]
    259A: 02 C2    ADD   A,[__r1]
    259C: 53 C2    MOV   [__r1],A
    259E: 51 C1    MOV   A,[__r2]
    25A0: 0A C3    ADC   A,[__r0]
    25A2: 53 C3    MOV   [__r0],A
    25A4: 06 C2 10 ADD   [__r1],0x10
    25A7: 0E C3 00 ADC   [__r0],0x0
    25AA: 51 C3    MOV   A,[__r0]
    25AC: 60 D4    MOV   REG[0xD4],A
    25AE: 3E C2    MVI   A,[__r1]
    25B0: 53 C3    MOV   [__r0],A
    25B2: 3E C2    MVI   A,[__r1]
    25B4: 53 C2    MOV   [__r1],A
    25B6: 51 C3    MOV   A,[__r0]
    25B8: 10       PUSH  X
    25B9: 58 C2    MOV   X,[__r1]
    25BB: 08       PUSH  A
    25BC: 28       ROMX  
    25BD: 53 C3    MOV   [__r0],A
    25BF: 18       POP   A
    25C0: 75       INC   X
    25C1: 09 00    ADC   A,0x0
    25C3: 28       ROMX  
    25C4: 20       POP   X
    25C5: 3C C3 00 CMP   [__r0],0x0
    25C8: B0 05    JNZ   0x25CE
    25CA: 39 00    CMP   A,0x0
    25CC: A0 61    JZ    0x262E
(0049) 	{
(0050) 		menu->entries[menu->currentIndex].callback();
    25CE: 62 D0 00 MOV   REG[0xD0],0x0
    25D1: 52 FC    MOV   A,[X-4]
    25D3: 53 C2    MOV   [__r1],A
    25D5: 52 FB    MOV   A,[X-5]
    25D7: 60 D4    MOV   REG[0xD4],A
    25D9: 3E C2    MVI   A,[__r1]
    25DB: 53 C3    MOV   [__r0],A
    25DD: 3E C2    MVI   A,[__r1]
    25DF: 53 C2    MOV   [__r1],A
    25E1: 52 FC    MOV   A,[X-4]
    25E3: 01 03    ADD   A,0x3
    25E5: 53 C0    MOV   [__r3],A
    25E7: 52 FB    MOV   A,[X-5]
    25E9: 09 00    ADC   A,0x0
    25EB: 60 D4    MOV   REG[0xD4],A
    25ED: 3E C0    MVI   A,[__r3]
    25EF: 53 C0    MOV   [__r3],A
    25F1: 50 00    MOV   A,0x0
    25F3: 08       PUSH  A
    25F4: 51 C0    MOV   A,[__r3]
    25F6: 08       PUSH  A
    25F7: 50 00    MOV   A,0x0
    25F9: 08       PUSH  A
    25FA: 50 12    MOV   A,0x12
    25FC: 08       PUSH  A
    25FD: 7C 3E 63 LCALL 0x3E63
    2600: 38 FC    ADD   SP,0xFC
    2602: 51 B7    MOV   A,[__rX]
    2604: 53 C0    MOV   [__r3],A
    2606: 51 B6    MOV   A,[__rY]
    2608: 53 C1    MOV   [__r2],A
    260A: 51 C0    MOV   A,[__r3]
    260C: 02 C2    ADD   A,[__r1]
    260E: 53 C2    MOV   [__r1],A
    2610: 51 C1    MOV   A,[__r2]
    2612: 0A C3    ADC   A,[__r0]
    2614: 53 C3    MOV   [__r0],A
    2616: 06 C2 10 ADD   [__r1],0x10
    2619: 0E C3 00 ADC   [__r0],0x0
    261C: 51 C3    MOV   A,[__r0]
    261E: 60 D4    MOV   REG[0xD4],A
    2620: 3E C2    MVI   A,[__r1]
    2622: 53 C3    MOV   [__r0],A
    2624: 3E C2    MVI   A,[__r1]
    2626: 10       PUSH  X
    2627: 5C       MOV   X,A
    2628: 51 C3    MOV   A,[__r0]
    262A: 7C 3E FC LCALL __plcall
    262D: 20       POP   X
(0051) 	}
    262E: 20       POP   X
    262F: 7F       RET   
(0052) }
(0053) 
(0054) void Menu_Clear(void)
(0055) {
(0056) 	LCD_Position(0, 0);
_Menu_Clear:
    2630: 10       PUSH  X
    2631: 50 00    MOV   A,0x0
    2633: 57 00    MOV   X,0x0
    2635: 7C 0A 0D LCALL _LCD_Position
(0057) 	LCD_PrCString("                ");
    2638: 50 02    MOV   A,0x2
    263A: 08       PUSH  A
    263B: 50 8A    MOV   A,0x8A
    263D: 5C       MOV   X,A
    263E: 18       POP   A
    263F: 7C 08 88 LCALL _LCD_PrCString
(0058) 	LCD_Position(1, 0);
    2642: 57 00    MOV   X,0x0
    2644: 50 01    MOV   A,0x1
    2646: 7C 0A 0D LCALL _LCD_Position
(0059) 	LCD_PrCString("                ");
    2649: 50 02    MOV   A,0x2
    264B: 08       PUSH  A
    264C: 50 8A    MOV   A,0x8A
    264E: 5C       MOV   X,A
    264F: 18       POP   A
    2650: 7C 08 88 LCALL _LCD_PrCString
    2653: 20       POP   X
    2654: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\pcview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "PCView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) 
(0010) extern CurrentView currentView;
(0011) 
(0012) void PCView_Start(void)
(0013) {
_PCView_Start:
    2655: 7F       RET   
(0014) 
(0015) }
(0016) 
(0017) void PCView_Callback(void)
(0018) {	
(0019) 	currentView = PC;
_PCView_Callback:
    2656: 62 D0 00 MOV   REG[0xD0],0x0
    2659: 55 DD 07 MOV   [currentView],0x7
(0020) 	Menu_Clear();
    265C: 7C 26 30 LCALL _Menu_Clear
(0021) 	LCD_Position(0, 0);
    265F: 10       PUSH  X
    2660: 50 00    MOV   A,0x0
    2662: 57 00    MOV   X,0x0
    2664: 7C 0A 0D LCALL _LCD_Position
(0022) 	LCD_PrCString("¡Conecte el");
    2667: 50 02    MOV   A,0x2
    2669: 08       PUSH  A
    266A: 50 AD    MOV   A,0xAD
    266C: 5C       MOV   X,A
    266D: 18       POP   A
    266E: 7C 08 88 LCALL _LCD_PrCString
(0023) 	LCD_Position(1, 0);
    2671: 57 00    MOV   X,0x0
    2673: 50 01    MOV   A,0x1
    2675: 7C 0A 0D LCALL _LCD_Position
(0024) 	LCD_PrCString("cable serial!");
    2678: 50 02    MOV   A,0x2
    267A: 08       PUSH  A
    267B: 50 9F    MOV   A,0x9F
    267D: 5C       MOV   X,A
    267E: 18       POP   A
    267F: 7C 08 88 LCALL _LCD_PrCString
    2682: 20       POP   X
    2683: 7F       RET   
(0025) }
(0026) 
(0027) void PCView_Update(void)
(0028) {	
_PCView_Update:
    2684: 10       PUSH  X
    2685: 4F       MOV   X,SP
    2686: 38 02    ADD   SP,0x2
(0029) 	if(Keypad_IsKeyStored())
    2688: 7C 1B BC LCALL _Keypad_IsKeyStored
    268B: 62 D0 00 MOV   REG[0xD0],0x0
    268E: 39 00    CMP   A,0x0
    2690: A0 1B    JZ    0x26AC
(0030) 	{
(0031) 		switch(Keypad_GetKey())
    2692: 7C 1B D4 LCALL _Keypad_GetKey
    2695: 62 D0 00 MOV   REG[0xD0],0x0
    2698: 54 01    MOV   [X+1],A
    269A: 56 00 00 MOV   [X+0],0x0
    269D: 3D 00 00 CMP   [X+0],0x0
    26A0: B0 06    JNZ   0x26A7
    26A2: 3D 01 11 CMP   [X+1],0x11
    26A5: A0 03    JZ    0x26A9
    26A7: 80 04    JMP   0x26AC
(0032) 		{
(0033) 			case 0x11:
(0034) 				// "B"
(0035) 				MainView_Callback();
    26A9: 7C 23 46 LCALL _MainView_Callback
(0036) 				return;
(0037) 				break;
(0038) 		}
(0039) 	}
    26AC: 38 FE    ADD   SP,0xFE
    26AE: 20       POP   X
    26AF: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\persist.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "EEPROM.h"
(0004) #include "Persist.h"
(0005) //#include <stdio.h>
(0006) 
(0007) void Persist_Start(void)
(0008) {
(0009) 	EEPROM_Start();
_Persist_Start:
    26B0: 7C 19 46 LCALL _EEPROM_Start
    26B3: 7F       RET   
(0010) }
(0011) 
(0012) void Persist_Stop(void)
(0013) {
(0014) 	EEPROM_Stop();
_Persist_Stop:
    26B4: 7C 19 4C LCALL _EEPROM_Stop
    26B7: 7F       RET   
(0015) }
(0016) 
(0017) void Persist_Clear(void)
(0018) {
_Persist_Clear:
  blankConfig          --> X+0
    26B8: 10       PUSH  X
    26B9: 4F       MOV   X,SP
    26BA: 38 0B    ADD   SP,0xB
(0019) 	Config blankConfig;
(0020) 	blankConfig.flags.alarmEnabled = FALSE;
    26BC: 62 D0 00 MOV   REG[0xD0],0x0
    26BF: 52 00    MOV   A,[X+0]
    26C1: 21 BF    AND   A,0xBF
    26C3: 54 00    MOV   [X+0],A
(0021) 	blankConfig.flags.registerEnabled = FALSE;
    26C5: 52 00    MOV   A,[X+0]
    26C7: 21 7F    AND   A,0x7F
    26C9: 54 00    MOV   [X+0],A
(0022) 	blankConfig.registerStart.hour = 0;
    26CB: 56 01 00 MOV   [X+1],0x0
(0023) 	blankConfig.registerStart.min = 0;
    26CE: 56 02 00 MOV   [X+2],0x0
(0024) 	blankConfig.registerEnd.hour = 0;
    26D1: 56 03 00 MOV   [X+3],0x0
(0025) 	blankConfig.registerEnd.min = 0;
    26D4: 56 04 00 MOV   [X+4],0x0
(0026) 	blankConfig.maxTemp = 0;
    26D7: 56 05 00 MOV   [X+5],0x0
(0027) 	blankConfig.minTemp = 0;
    26DA: 56 06 00 MOV   [X+6],0x0
(0028) 	blankConfig.maxRegisteredTemp = 0;
    26DD: 56 07 00 MOV   [X+7],0x0
(0029) 	blankConfig.minRegisteredTemp = 0;
    26E0: 56 08 00 MOV   [X+8],0x0
(0030) 	blankConfig.nRecords = 0;
    26E3: 56 0A 00 MOV   [X+10],0x0
    26E6: 56 09 00 MOV   [X+9],0x0
(0031) 
(0032) 	Persist_SaveConfig(&blankConfig);
    26E9: 50 07    MOV   A,0x7
    26EB: 08       PUSH  A
    26EC: 10       PUSH  X
    26ED: 90 F7    CALL  _Persist_SaveConfig
    26EF: 38 FE    ADD   SP,0xFE
    26F1: 62 D0 00 MOV   REG[0xD0],0x0
    26F4: 38 F5    ADD   SP,0xF5
    26F6: 20       POP   X
    26F7: 7F       RET   
(0033) }
(0034) 
(0035) // saves new record and increments config.nRecords. returns success or error.
(0036) BOOL Persist_SaveRecord(Record *record)
(0037) {
_Persist_SaveRecord:
  index                --> X+11
  conf                 --> X+0
  record               --> X-5
    26F8: 10       PUSH  X
    26F9: 4F       MOV   X,SP
    26FA: 38 0D    ADD   SP,0xD
(0038) 	unsigned short index;
(0039) 	Config conf;
(0040) 	Persist_LoadConfig(&conf);
    26FC: 62 D0 00 MOV   REG[0xD0],0x0
    26FF: 50 07    MOV   A,0x7
    2701: 08       PUSH  A
    2702: 10       PUSH  X
    2703: 91 07    CALL  _Persist_LoadConfig
    2705: 38 FE    ADD   SP,0xFE
    2707: 62 D0 00 MOV   REG[0xD0],0x0
(0041) 	conf.nRecords++;
    270A: 77 0A    INC   [X+10]
    270C: 0F 09 00 ADC   [X+9],0x0
(0042) 
(0043) 	if(conf.nRecords > MAX_RECORDS) return FALSE;
    270F: 50 88    MOV   A,0x88
    2711: 13 0A    SUB   A,[X+10]
    2713: 50 13    MOV   A,0x13
    2715: 1B 09    SBB   A,[X+9]
    2717: D0 08    JNC   0x2720
    2719: 62 D0 00 MOV   REG[0xD0],0x0
    271C: 50 00    MOV   A,0x0
    271E: 80 6B    JMP   0x278A
(0044) 
(0045) 	index = sizeof(Config) + ((conf.nRecords - 1) * sizeof(Record));
    2720: 62 D0 00 MOV   REG[0xD0],0x0
    2723: 52 0A    MOV   A,[X+10]
    2725: 11 01    SUB   A,0x1
    2727: 53 C2    MOV   [__r1],A
    2729: 52 09    MOV   A,[X+9]
    272B: 19 00    SBB   A,0x0
    272D: 08       PUSH  A
    272E: 51 C2    MOV   A,[__r1]
    2730: 08       PUSH  A
    2731: 50 00    MOV   A,0x0
    2733: 08       PUSH  A
    2734: 50 06    MOV   A,0x6
    2736: 08       PUSH  A
    2737: 7C 3E 63 LCALL 0x3E63
    273A: 38 FC    ADD   SP,0xFC
    273C: 51 B7    MOV   A,[__rX]
    273E: 53 C2    MOV   [__r1],A
    2740: 51 B6    MOV   A,[__rY]
    2742: 53 C3    MOV   [__r0],A
    2744: 51 C2    MOV   A,[__r1]
    2746: 01 0B    ADD   A,0xB
    2748: 54 0C    MOV   [X+12],A
    274A: 51 C3    MOV   A,[__r0]
    274C: 09 00    ADC   A,0x0
    274E: 54 0B    MOV   [X+11],A
(0046) 	
(0047) 	//cprintf("Record Index: %d\nNrecords: %d\n", index, conf.nRecords);
(0048) 
(0049) 	if(EEPROM_Write((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
    2750: 50 06    MOV   A,0x6
    2752: 08       PUSH  A
    2753: 52 0B    MOV   A,[X+11]
    2755: 08       PUSH  A
    2756: 52 0C    MOV   A,[X+12]
    2758: 08       PUSH  A
    2759: 52 FB    MOV   A,[X-5]
    275B: 08       PUSH  A
    275C: 52 FC    MOV   A,[X-4]
    275E: 08       PUSH  A
    275F: 7C 19 52 LCALL _EEPROM_Write
    2762: 38 FB    ADD   SP,0xFB
    2764: 62 D0 00 MOV   REG[0xD0],0x0
    2767: 39 00    CMP   A,0x0
    2769: A0 05    JZ    0x276F
    276B: 50 00    MOV   A,0x0
    276D: 80 1C    JMP   0x278A
(0050) 	if(!Persist_SaveConfig(&conf)) return FALSE;
    276F: 62 D0 00 MOV   REG[0xD0],0x0
    2772: 50 07    MOV   A,0x7
    2774: 08       PUSH  A
    2775: 10       PUSH  X
    2776: 90 6E    CALL  _Persist_SaveConfig
    2778: 38 FE    ADD   SP,0xFE
    277A: 62 D0 00 MOV   REG[0xD0],0x0
    277D: 39 00    CMP   A,0x0
    277F: B0 05    JNZ   0x2785
    2781: 50 00    MOV   A,0x0
    2783: 80 06    JMP   0x278A
(0051) 
(0052) 	return TRUE;
    2785: 62 D0 00 MOV   REG[0xD0],0x0
    2788: 50 01    MOV   A,0x1
    278A: 38 F3    ADD   SP,0xF3
    278C: 20       POP   X
    278D: 7F       RET   
(0053) }
(0054) 
(0055) // Loads record n in record.
(0056) BOOL Persist_LoadRecord(Record *record, BYTE n)
(0057) {
_Persist_LoadRecord:
  index                --> X+0
  n                    --> X-6
  record               --> X-5
    278E: 10       PUSH  X
    278F: 4F       MOV   X,SP
    2790: 38 02    ADD   SP,0x2
(0058) 	unsigned short index = sizeof(Config) + (n * sizeof(Record));
    2792: 62 D0 00 MOV   REG[0xD0],0x0
    2795: 52 FA    MOV   A,[X-6]
    2797: 53 C2    MOV   [__r1],A
    2799: 50 00    MOV   A,0x0
    279B: 08       PUSH  A
    279C: 51 C2    MOV   A,[__r1]
    279E: 08       PUSH  A
    279F: 50 00    MOV   A,0x0
    27A1: 08       PUSH  A
    27A2: 50 06    MOV   A,0x6
    27A4: 08       PUSH  A
    27A5: 7C 3E 63 LCALL 0x3E63
    27A8: 38 FC    ADD   SP,0xFC
    27AA: 51 B7    MOV   A,[__rX]
    27AC: 53 C2    MOV   [__r1],A
    27AE: 51 B6    MOV   A,[__rY]
    27B0: 53 C3    MOV   [__r0],A
    27B2: 51 C2    MOV   A,[__r1]
    27B4: 01 0B    ADD   A,0xB
    27B6: 54 01    MOV   [X+1],A
    27B8: 51 C3    MOV   A,[__r0]
    27BA: 09 00    ADC   A,0x0
    27BC: 54 00    MOV   [X+0],A
(0059) 
(0060) 	if(EEPROM_Read((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
    27BE: 50 06    MOV   A,0x6
    27C0: 08       PUSH  A
    27C1: 52 00    MOV   A,[X+0]
    27C3: 08       PUSH  A
    27C4: 52 01    MOV   A,[X+1]
    27C6: 08       PUSH  A
    27C7: 52 FB    MOV   A,[X-5]
    27C9: 08       PUSH  A
    27CA: 52 FC    MOV   A,[X-4]
    27CC: 08       PUSH  A
    27CD: 7C 19 E0 LCALL _EEPROM_Read
    27D0: 38 FB    ADD   SP,0xFB
    27D2: 62 D0 00 MOV   REG[0xD0],0x0
    27D5: 39 00    CMP   A,0x0
    27D7: A0 05    JZ    0x27DD
    27D9: 50 00    MOV   A,0x0
    27DB: 80 06    JMP   0x27E2
(0061) 
(0062) 	return TRUE;
    27DD: 62 D0 00 MOV   REG[0xD0],0x0
    27E0: 50 01    MOV   A,0x1
    27E2: 38 FE    ADD   SP,0xFE
    27E4: 20       POP   X
    27E5: 7F       RET   
(0063) }
(0064) 
(0065) // Saves config
(0066) BOOL Persist_SaveConfig(Config *config)
(0067) {
_Persist_SaveConfig:
  config               --> X-5
    27E6: 10       PUSH  X
    27E7: 4F       MOV   X,SP
(0068) 	if(EEPROM_Write((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
    27E8: 50 0B    MOV   A,0xB
    27EA: 08       PUSH  A
    27EB: 50 00    MOV   A,0x0
    27ED: 08       PUSH  A
    27EE: 08       PUSH  A
    27EF: 52 FB    MOV   A,[X-5]
    27F1: 08       PUSH  A
    27F2: 52 FC    MOV   A,[X-4]
    27F4: 08       PUSH  A
    27F5: 7C 19 52 LCALL _EEPROM_Write
    27F8: 38 FB    ADD   SP,0xFB
    27FA: 62 D0 00 MOV   REG[0xD0],0x0
    27FD: 39 00    CMP   A,0x0
    27FF: A0 05    JZ    0x2805
    2801: 50 00    MOV   A,0x0
    2803: 80 06    JMP   0x280A
(0069) 
(0070) 	return TRUE;
    2805: 62 D0 00 MOV   REG[0xD0],0x0
    2808: 50 01    MOV   A,0x1
    280A: 20       POP   X
    280B: 7F       RET   
(0071) }
(0072) 
(0073) // Loads config.
(0074) BOOL Persist_LoadConfig(Config *config)
(0075) {
_Persist_LoadConfig:
  config               --> X-5
    280C: 10       PUSH  X
    280D: 4F       MOV   X,SP
(0076) 	if(EEPROM_Read((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
    280E: 50 0B    MOV   A,0xB
    2810: 08       PUSH  A
    2811: 50 00    MOV   A,0x0
    2813: 08       PUSH  A
    2814: 08       PUSH  A
    2815: 52 FB    MOV   A,[X-5]
    2817: 08       PUSH  A
    2818: 52 FC    MOV   A,[X-4]
    281A: 08       PUSH  A
    281B: 7C 19 E0 LCALL _EEPROM_Read
    281E: 38 FB    ADD   SP,0xFB
    2820: 62 D0 00 MOV   REG[0xD0],0x0
    2823: 39 00    CMP   A,0x0
    2825: A0 05    JZ    0x282B
    2827: 50 00    MOV   A,0x0
    2829: 80 06    JMP   0x2830
(0077) 
(0078) 	return TRUE;
    282B: 62 D0 00 MOV   REG[0xD0],0x0
    282E: 50 01    MOV   A,0x1
    2830: 20       POP   X
    2831: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\regtimeview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "regTimeView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void RegTimeView_Start(void)
(0014) {
_RegTimeView_Start:
    2832: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void RegTimeView_Callback(void)
(0019) {
(0020) 	currentView = REGTIME_CONFIG;
_RegTimeView_Callback:
    2833: 62 D0 00 MOV   REG[0xD0],0x0
    2836: 55 DD 02 MOV   [currentView],0x2
(0021) 	Menu_Clear();
    2839: 7C 26 30 LCALL _Menu_Clear
    283C: 7F       RET   
(0022) }
(0023) 
(0024) void RegTimeView_Update(void)
(0025) {
_RegTimeView_Update:
  endHour10            --> X+18
  startHour10          --> X+17
  endMin10             --> X+16
  startMin10           --> X+15
  endHour              --> X+14
  startHour            --> X+13
  endMin               --> X+12
  startMin             --> X+11
  conf                 --> X+0
    283D: 10       PUSH  X
    283E: 4F       MOV   X,SP
    283F: 38 15    ADD   SP,0x15
(0026) 	BYTE startMin10, startMin, endMin10, endMin, startHour10, startHour, endHour10, endHour;
(0027) 	Config conf;
(0028) 	Persist_LoadConfig(&conf);
    2841: 62 D0 00 MOV   REG[0xD0],0x0
    2844: 50 07    MOV   A,0x7
    2846: 08       PUSH  A
    2847: 10       PUSH  X
    2848: 7C 28 0C LCALL _Persist_LoadConfig
    284B: 38 FE    ADD   SP,0xFE
    284D: 62 D0 00 MOV   REG[0xD0],0x0
(0029) 	
(0030) 	if(Keypad_IsKeyStored())
    2850: 7C 1B BC LCALL _Keypad_IsKeyStored
    2853: 62 D0 00 MOV   REG[0xD0],0x0
    2856: 39 00    CMP   A,0x0
    2858: A1 6C    JZ    0x29C5
(0031) 	{
(0032) 		switch(Keypad_GetKey())
    285A: 7C 1B D4 LCALL _Keypad_GetKey
    285D: 62 D0 00 MOV   REG[0xD0],0x0
    2860: 54 14    MOV   [X+20],A
    2862: 56 13 00 MOV   [X+19],0x0
    2865: 52 14    MOV   A,[X+20]
    2867: 11 28    SUB   A,0x28
    2869: 53 B6    MOV   [__rY],A
    286B: 52 13    MOV   A,[X+19]
    286D: 31 80    XOR   A,0x80
    286F: 19 80    SBB   A,0x80
    2871: 2A B6    OR    A,[__rY]
    2873: A0 E2    JZ    0x2956
    2875: D0 38    JNC   0x28AE
    2877: 52 14    MOV   A,[X+20]
    2879: 11 18    SUB   A,0x18
    287B: 62 D0 00 MOV   REG[0xD0],0x0
    287E: 53 B6    MOV   [__rY],A
    2880: 52 13    MOV   A,[X+19]
    2882: 31 80    XOR   A,0x80
    2884: 19 80    SBB   A,0x80
    2886: 2A B6    OR    A,[__rY]
    2888: A1 01    JZ    0x298A
    288A: D0 17    JNC   0x28A2
    288C: 3D 13 00 CMP   [X+19],0x0
    288F: B0 06    JNZ   0x2896
    2891: 3D 14 11 CMP   [X+20],0x11
    2894: A1 2B    JZ    0x29C0
    2896: 3D 13 00 CMP   [X+19],0x0
    2899: B0 06    JNZ   0x28A0
    289B: 3D 14 14 CMP   [X+20],0x14
    289E: A1 06    JZ    0x29A5
    28A0: 81 24    JMP   0x29C5
    28A2: 3D 13 00 CMP   [X+19],0x0
    28A5: B0 06    JNZ   0x28AC
    28A7: 3D 14 24 CMP   [X+20],0x24
    28AA: A0 C5    JZ    0x2970
    28AC: 81 18    JMP   0x29C5
    28AE: 52 14    MOV   A,[X+20]
    28B0: 11 48    SUB   A,0x48
    28B2: 62 D0 00 MOV   REG[0xD0],0x0
    28B5: 53 B6    MOV   [__rY],A
    28B7: 52 13    MOV   A,[X+19]
    28B9: 31 80    XOR   A,0x80
    28BB: 19 80    SBB   A,0x80
    28BD: 2A B6    OR    A,[__rY]
    28BF: A0 60    JZ    0x2920
    28C1: D0 0D    JNC   0x28CF
    28C3: 3D 13 00 CMP   [X+19],0x0
    28C6: B0 06    JNZ   0x28CD
    28C8: 3D 14 44 CMP   [X+20],0x44
    28CB: A0 6F    JZ    0x293B
    28CD: 80 F7    JMP   0x29C5
    28CF: 52 14    MOV   A,[X+20]
    28D1: 11 84    SUB   A,0x84
    28D3: 62 D0 00 MOV   REG[0xD0],0x0
    28D6: 53 B6    MOV   [__rY],A
    28D8: 52 13    MOV   A,[X+19]
    28DA: 31 80    XOR   A,0x80
    28DC: 19 80    SBB   A,0x80
    28DE: C0 E6    JC    0x29C5
    28E0: 2A B6    OR    A,[__rY]
    28E2: A0 27    JZ    0x290A
    28E4: 3D 13 00 CMP   [X+19],0x0
    28E7: B0 06    JNZ   0x28EE
    28E9: 3D 14 88 CMP   [X+20],0x88
    28EC: A0 03    JZ    0x28F0
    28EE: 80 D6    JMP   0x29C5
(0033) 		{
(0034) 			case 0x88:
(0035) 				// "1"
(0036) 				// start h up
(0037) 				if(conf.registerStart.hour < 23)
    28F0: 3D 01 17 CMP   [X+1],0x17
    28F3: D0 03    JNC   0x28F7
(0038) 				{
(0039) 					conf.registerStart.hour++;
    28F5: 77 01    INC   [X+1]
(0040) 				}
(0041) 				Persist_SaveConfig(&conf);
    28F7: 62 D0 00 MOV   REG[0xD0],0x0
    28FA: 50 07    MOV   A,0x7
    28FC: 08       PUSH  A
    28FD: 10       PUSH  X
    28FE: 7C 27 E6 LCALL _Persist_SaveConfig
    2901: 38 FE    ADD   SP,0xFE
    2903: 62 D0 00 MOV   REG[0xD0],0x0
    2906: 53 C3    MOV   [__r0],A
(0042) 				break;
    2908: 80 BC    JMP   0x29C5
(0043) 			case 0x84:
(0044) 				// "2"
(0045) 				// start min up
(0046) 				if(conf.registerStart.min < 59)
    290A: 3D 02 3B CMP   [X+2],0x3B
    290D: D0 03    JNC   0x2911
(0047) 				{
(0048) 					conf.registerStart.min++;
    290F: 77 02    INC   [X+2]
(0049) 				}
(0050) 				Persist_SaveConfig(&conf);
    2911: 62 D0 00 MOV   REG[0xD0],0x0
    2914: 50 07    MOV   A,0x7
    2916: 08       PUSH  A
    2917: 10       PUSH  X
    2918: 7C 27 E6 LCALL _Persist_SaveConfig
    291B: 38 FE    ADD   SP,0xFE
    291D: 62 D0 00 MOV   REG[0xD0],0x0
(0051) 			case 0x48:
(0052) 				// "4"
(0053) 				// start h down
(0054) 				if(conf.registerStart.hour > 0)
    2920: 50 00    MOV   A,0x0
    2922: 3B 01    CMP   A,[X+1]
    2924: D0 03    JNC   0x2928
(0055) 				{
(0056) 					conf.registerStart.hour--;
    2926: 7B 01    DEC   [X+1]
(0057) 				}
(0058) 				Persist_SaveConfig(&conf);
    2928: 62 D0 00 MOV   REG[0xD0],0x0
    292B: 50 07    MOV   A,0x7
    292D: 08       PUSH  A
    292E: 10       PUSH  X
    292F: 7C 27 E6 LCALL _Persist_SaveConfig
    2932: 38 FE    ADD   SP,0xFE
    2934: 62 D0 00 MOV   REG[0xD0],0x0
    2937: 53 C3    MOV   [__r0],A
(0059) 				break;
    2939: 80 8B    JMP   0x29C5
(0060) 			case 0x44:
(0061) 				// "5"
(0062) 				// start min down
(0063) 				if(conf.registerStart.min > 0)
    293B: 50 00    MOV   A,0x0
    293D: 3B 02    CMP   A,[X+2]
    293F: D0 03    JNC   0x2943
(0064) 				{
(0065) 					conf.registerStart.min--;
    2941: 7B 02    DEC   [X+2]
(0066) 				}
(0067) 				Persist_SaveConfig(&conf);
    2943: 62 D0 00 MOV   REG[0xD0],0x0
    2946: 50 07    MOV   A,0x7
    2948: 08       PUSH  A
    2949: 10       PUSH  X
    294A: 7C 27 E6 LCALL _Persist_SaveConfig
    294D: 38 FE    ADD   SP,0xFE
    294F: 62 D0 00 MOV   REG[0xD0],0x0
    2952: 53 C3    MOV   [__r0],A
(0068) 				break;
    2954: 80 70    JMP   0x29C5
(0069) 			case 0x28:
(0070) 				// "7"
(0071) 				// end h up
(0072) 				if(conf.registerEnd.hour < 23)
    2956: 3D 03 17 CMP   [X+3],0x17
    2959: D0 03    JNC   0x295D
(0073) 				{
(0074) 					conf.registerEnd.hour++;
    295B: 77 03    INC   [X+3]
(0075) 				}
(0076) 				Persist_SaveConfig(&conf);
    295D: 62 D0 00 MOV   REG[0xD0],0x0
    2960: 50 07    MOV   A,0x7
    2962: 08       PUSH  A
    2963: 10       PUSH  X
    2964: 7C 27 E6 LCALL _Persist_SaveConfig
    2967: 38 FE    ADD   SP,0xFE
    2969: 62 D0 00 MOV   REG[0xD0],0x0
    296C: 53 C3    MOV   [__r0],A
(0077) 				break;
    296E: 80 56    JMP   0x29C5
(0078) 			case 0x24:
(0079) 				// "8"
(0080) 				// end min up
(0081) 				if(conf.registerEnd.min < 59)
    2970: 3D 04 3B CMP   [X+4],0x3B
    2973: D0 03    JNC   0x2977
(0082) 				{
(0083) 					conf.registerEnd.min++;
    2975: 77 04    INC   [X+4]
(0084) 				}
(0085) 				Persist_SaveConfig(&conf);
    2977: 62 D0 00 MOV   REG[0xD0],0x0
    297A: 50 07    MOV   A,0x7
    297C: 08       PUSH  A
    297D: 10       PUSH  X
    297E: 7C 27 E6 LCALL _Persist_SaveConfig
    2981: 38 FE    ADD   SP,0xFE
    2983: 62 D0 00 MOV   REG[0xD0],0x0
    2986: 53 C3    MOV   [__r0],A
(0086) 				break;
    2988: 80 3C    JMP   0x29C5
(0087) 			case 0x18:
(0088) 				// "*"
(0089) 				// end h down
(0090) 				if(conf.registerEnd.hour > 0)
    298A: 50 00    MOV   A,0x0
    298C: 3B 03    CMP   A,[X+3]
    298E: D0 03    JNC   0x2992
(0091) 				{
(0092) 					conf.registerEnd.hour--;
    2990: 7B 03    DEC   [X+3]
(0093) 				}
(0094) 				Persist_SaveConfig(&conf);
    2992: 62 D0 00 MOV   REG[0xD0],0x0
    2995: 50 07    MOV   A,0x7
    2997: 08       PUSH  A
    2998: 10       PUSH  X
    2999: 7C 27 E6 LCALL _Persist_SaveConfig
    299C: 38 FE    ADD   SP,0xFE
    299E: 62 D0 00 MOV   REG[0xD0],0x0
    29A1: 53 C3    MOV   [__r0],A
(0095) 				break;
    29A3: 80 21    JMP   0x29C5
(0096) 			case 0x14:
(0097) 				// "0"
(0098) 				// end min down
(0099) 				if(conf.registerEnd.min > 0)
    29A5: 50 00    MOV   A,0x0
    29A7: 3B 04    CMP   A,[X+4]
    29A9: D0 03    JNC   0x29AD
(0100) 				{
(0101) 					conf.registerEnd.min--;
    29AB: 7B 04    DEC   [X+4]
(0102) 				}
(0103) 				Persist_SaveConfig(&conf);
    29AD: 62 D0 00 MOV   REG[0xD0],0x0
    29B0: 50 07    MOV   A,0x7
    29B2: 08       PUSH  A
    29B3: 10       PUSH  X
    29B4: 7C 27 E6 LCALL _Persist_SaveConfig
    29B7: 38 FE    ADD   SP,0xFE
    29B9: 62 D0 00 MOV   REG[0xD0],0x0
    29BC: 53 C3    MOV   [__r0],A
(0104) 				break;
    29BE: 80 06    JMP   0x29C5
(0105) 			case 0x11:
(0106) 				// "D"
(0107) 				MainView_Callback();
    29C0: 7C 23 46 LCALL _MainView_Callback
(0108) 				return;
    29C3: 81 00    JMP   0x2AC4
(0109) 				break;
(0110) 		}
(0111) 	}
(0112) 	
(0113) 	decToBcd(&startHour10, &startHour, conf.registerStart.hour);
    29C5: 52 01    MOV   A,[X+1]
    29C7: 08       PUSH  A
    29C8: 62 D0 00 MOV   REG[0xD0],0x0
    29CB: 5A C2    MOV   [__r1],X
    29CD: 06 C2 0D ADD   [__r1],0xD
    29D0: 50 07    MOV   A,0x7
    29D2: 08       PUSH  A
    29D3: 51 C2    MOV   A,[__r1]
    29D5: 08       PUSH  A
    29D6: 5A C2    MOV   [__r1],X
    29D8: 06 C2 11 ADD   [__r1],0x11
    29DB: 50 07    MOV   A,0x7
    29DD: 08       PUSH  A
    29DE: 51 C2    MOV   A,[__r1]
    29E0: 08       PUSH  A
    29E1: 7C 0F 6D LCALL _decToBcd
(0114) 	startHour = (startHour10 << 4) | startHour;
    29E4: 52 11    MOV   A,[X+17]
    29E6: 62 D0 00 MOV   REG[0xD0],0x0
    29E9: 64       ASL   A
    29EA: 64       ASL   A
    29EB: 64       ASL   A
    29EC: 64       ASL   A
    29ED: 2B 0D    OR    A,[X+13]
    29EF: 54 0D    MOV   [X+13],A
(0115) 	decToBcd(&startMin10, &startMin, conf.registerStart.min);
    29F1: 52 02    MOV   A,[X+2]
    29F3: 08       PUSH  A
    29F4: 5A C2    MOV   [__r1],X
    29F6: 06 C2 0B ADD   [__r1],0xB
    29F9: 50 07    MOV   A,0x7
    29FB: 08       PUSH  A
    29FC: 51 C2    MOV   A,[__r1]
    29FE: 08       PUSH  A
    29FF: 5A C2    MOV   [__r1],X
    2A01: 06 C2 0F ADD   [__r1],0xF
    2A04: 50 07    MOV   A,0x7
    2A06: 08       PUSH  A
    2A07: 51 C2    MOV   A,[__r1]
    2A09: 08       PUSH  A
    2A0A: 7C 0F 6D LCALL _decToBcd
    2A0D: 38 F6    ADD   SP,0xF6
(0116) 	startMin = (startMin10 << 4) | startMin;
    2A0F: 52 0F    MOV   A,[X+15]
    2A11: 62 D0 00 MOV   REG[0xD0],0x0
    2A14: 64       ASL   A
    2A15: 64       ASL   A
    2A16: 64       ASL   A
    2A17: 64       ASL   A
    2A18: 2B 0B    OR    A,[X+11]
    2A1A: 54 0B    MOV   [X+11],A
(0117) 	
(0118) 	decToBcd(&endHour10, &endHour, conf.registerEnd.hour);
    2A1C: 52 03    MOV   A,[X+3]
    2A1E: 08       PUSH  A
    2A1F: 5A C2    MOV   [__r1],X
    2A21: 06 C2 0E ADD   [__r1],0xE
    2A24: 50 07    MOV   A,0x7
    2A26: 08       PUSH  A
    2A27: 51 C2    MOV   A,[__r1]
    2A29: 08       PUSH  A
    2A2A: 5A C2    MOV   [__r1],X
    2A2C: 06 C2 12 ADD   [__r1],0x12
    2A2F: 50 07    MOV   A,0x7
    2A31: 08       PUSH  A
    2A32: 51 C2    MOV   A,[__r1]
    2A34: 08       PUSH  A
    2A35: 7C 0F 6D LCALL _decToBcd
(0119) 	endHour = (endHour10 << 4) | endHour;
    2A38: 52 12    MOV   A,[X+18]
    2A3A: 62 D0 00 MOV   REG[0xD0],0x0
    2A3D: 64       ASL   A
    2A3E: 64       ASL   A
    2A3F: 64       ASL   A
    2A40: 64       ASL   A
    2A41: 2B 0E    OR    A,[X+14]
    2A43: 54 0E    MOV   [X+14],A
(0120) 	decToBcd(&endMin10, &endMin, conf.registerEnd.min);
    2A45: 52 04    MOV   A,[X+4]
    2A47: 08       PUSH  A
    2A48: 5A C2    MOV   [__r1],X
    2A4A: 06 C2 0C ADD   [__r1],0xC
    2A4D: 50 07    MOV   A,0x7
    2A4F: 08       PUSH  A
    2A50: 51 C2    MOV   A,[__r1]
    2A52: 08       PUSH  A
    2A53: 5A C2    MOV   [__r1],X
    2A55: 06 C2 10 ADD   [__r1],0x10
    2A58: 50 07    MOV   A,0x7
    2A5A: 08       PUSH  A
    2A5B: 51 C2    MOV   A,[__r1]
    2A5D: 08       PUSH  A
    2A5E: 7C 0F 6D LCALL _decToBcd
    2A61: 38 F6    ADD   SP,0xF6
(0121) 	endMin = (endMin10 << 4) | endMin;
    2A63: 52 10    MOV   A,[X+16]
    2A65: 62 D0 00 MOV   REG[0xD0],0x0
    2A68: 64       ASL   A
    2A69: 64       ASL   A
    2A6A: 64       ASL   A
    2A6B: 64       ASL   A
    2A6C: 2B 0C    OR    A,[X+12]
    2A6E: 54 0C    MOV   [X+12],A
(0122) 	
(0123) 	LCD_Position(0, 0);
    2A70: 10       PUSH  X
    2A71: 50 00    MOV   A,0x0
    2A73: 57 00    MOV   X,0x0
    2A75: 7C 0A 0D LCALL _LCD_Position
(0124) 	LCD_PrCString("Inicio: ");
    2A78: 50 02    MOV   A,0x2
    2A7A: 08       PUSH  A
    2A7B: 50 C5    MOV   A,0xC5
    2A7D: 5C       MOV   X,A
    2A7E: 18       POP   A
    2A7F: 7C 08 88 LCALL _LCD_PrCString
    2A82: 20       POP   X
(0125) 	LCD_PrHexByte(startHour);
    2A83: 10       PUSH  X
    2A84: 52 0D    MOV   A,[X+13]
    2A86: 7C 08 AA LCALL _LCD_PrHexByte
(0126) 	LCD_PrCString(":");
    2A89: 50 02    MOV   A,0x2
    2A8B: 08       PUSH  A
    2A8C: 50 C3    MOV   A,0xC3
    2A8E: 5C       MOV   X,A
    2A8F: 18       POP   A
    2A90: 7C 08 88 LCALL _LCD_PrCString
    2A93: 20       POP   X
(0127) 	LCD_PrHexByte(startMin);
    2A94: 10       PUSH  X
    2A95: 52 0B    MOV   A,[X+11]
    2A97: 7C 08 AA LCALL _LCD_PrHexByte
(0128) 	LCD_Position(1,0);
    2A9A: 57 00    MOV   X,0x0
    2A9C: 50 01    MOV   A,0x1
    2A9E: 7C 0A 0D LCALL _LCD_Position
(0129) 	LCD_PrCString("Fin:    ");
    2AA1: 50 02    MOV   A,0x2
    2AA3: 08       PUSH  A
    2AA4: 50 BA    MOV   A,0xBA
    2AA6: 5C       MOV   X,A
    2AA7: 18       POP   A
    2AA8: 7C 08 88 LCALL _LCD_PrCString
    2AAB: 20       POP   X
(0130) 	LCD_PrHexByte(endHour);
    2AAC: 10       PUSH  X
    2AAD: 52 0E    MOV   A,[X+14]
    2AAF: 7C 08 AA LCALL _LCD_PrHexByte
(0131) 	LCD_PrCString(":");
    2AB2: 50 02    MOV   A,0x2
    2AB4: 08       PUSH  A
    2AB5: 50 C3    MOV   A,0xC3
    2AB7: 5C       MOV   X,A
    2AB8: 18       POP   A
    2AB9: 7C 08 88 LCALL _LCD_PrCString
    2ABC: 20       POP   X
(0132) 	LCD_PrHexByte(endMin);
    2ABD: 10       PUSH  X
    2ABE: 52 0C    MOV   A,[X+12]
    2AC0: 7C 08 AA LCALL _LCD_PrHexByte
    2AC3: 20       POP   X
    2AC4: 38 EB    ADD   SP,0xEB
    2AC6: 20       POP   X
    2AC7: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\rtc.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Rtc.h"
(0004) 
(0005) typedef union
(0006) {
(0007) 	struct
(0008) 	{
(0009) 		BYTE OUT : 1;
(0010) 		BYTE : 2;
(0011) 		BYTE SQWE : 1;
(0012) 		BYTE : 2;
(0013) 		BYTE RS1 : 1;
(0014) 		BYTE RS0 : 1;
(0015) 	} bits;
(0016) 	BYTE byte;
(0017) 
(0018) } ControlRegister;
(0019) 
(0020) DateTime datetime;
(0021) static ControlRegister cr;
(0022) 
(0023) void Rtc_Start(void)
(0024) {
(0025) 	I2Cm_Start();
_Rtc_Start:
    2AC8: 10       PUSH  X
    2AC9: 7C 0B 17 LCALL _I2Cm_Start
    2ACC: 20       POP   X
(0026) 
(0027) 	// Starts RTC clock
(0028) 	datetime._00h.bits.CH = 0;
    2ACD: 62 D0 00 MOV   REG[0xD0],0x0
    2AD0: 51 C4    MOV   A,[datetime]
    2AD2: 21 7F    AND   A,0x7F
    2AD4: 53 C4    MOV   [datetime],A
(0029) 	Rtc_WriteToRtc();
    2AD6: 90 37    CALL  _Rtc_WriteToRtc
    2AD8: 62 D0 00 MOV   REG[0xD0],0x0
    2ADB: 7F       RET   
(0030) }
(0031) 
(0032) void Rtc_Stop(void)
(0033) {
(0034) 	// Stops RTC clock
(0035) 	Rtc_ReadFromRtc();
_Rtc_Stop:
    2ADC: 90 45    CALL  _Rtc_ReadFromRtc
(0036) 	datetime._00h.bits.CH = 1;
    2ADE: 62 D0 00 MOV   REG[0xD0],0x0
    2AE1: 51 C4    MOV   A,[datetime]
    2AE3: 29 80    OR    A,0x80
    2AE5: 53 C4    MOV   [datetime],A
(0037) 	Rtc_WriteToRtc();
    2AE7: 90 26    CALL  _Rtc_WriteToRtc
    2AE9: 62 D0 00 MOV   REG[0xD0],0x0
(0038) 
(0039) 	I2Cm_Stop();
    2AEC: 10       PUSH  X
    2AED: 7C 0B 3B LCALL _I2Cm_Stop
    2AF0: 20       POP   X
    2AF1: 7F       RET   
(0040) }
(0041) 
(0042) void Rtc_EnableSqw1Hz(void)
(0043) {
(0044) 	Rtc_GetSqwOutConfig();
_Rtc_EnableSqw1Hz:
    2AF2: 90 57    CALL  _Rtc_GetSqwOutConfig
(0045) 	cr.bits.SQWE = 1;
    2AF4: 62 D0 00 MOV   REG[0xD0],0x0
    2AF7: 51 DB    MOV   A,[rtc.c:cr]
    2AF9: 29 10    OR    A,0x10
    2AFB: 53 DB    MOV   [rtc.c:cr],A
(0046) 	cr.bits.RS0 = 0;
    2AFD: 51 DB    MOV   A,[rtc.c:cr]
    2AFF: 21 FE    AND   A,0xFE
    2B01: 53 DB    MOV   [rtc.c:cr],A
(0047) 	cr.bits.RS1 = 0;
    2B03: 51 DB    MOV   A,[rtc.c:cr]
    2B05: 21 FD    AND   A,0xFD
    2B07: 53 DB    MOV   [rtc.c:cr],A
(0048) 	Rtc_SetSqwOutConfig();
    2B09: 90 2C    CALL  _Rtc_SetSqwOutConfig
    2B0B: 62 D0 00 MOV   REG[0xD0],0x0
    2B0E: 7F       RET   
(0049) }
(0050) 
(0051) #define RTC_NOERROR 0x00
(0052) #define RTC_SLAVENOTACKADDRESS 0x01
(0053) #define RTC_SLAVENOTACKDATA 0x02
(0054) 
(0055) BYTE Rtc_WriteToRtc(void)
(0056) {
(0057) 	return Rtc_WriteToRam(&datetime, 0x00, 7);
_Rtc_WriteToRtc:
    2B0F: 50 07    MOV   A,0x7
    2B11: 08       PUSH  A
    2B12: 50 00    MOV   A,0x0
    2B14: 08       PUSH  A
    2B15: 50 00    MOV   A,0x0
    2B17: 08       PUSH  A
    2B18: 50 C4    MOV   A,0xC4
    2B1A: 08       PUSH  A
    2B1B: 90 47    CALL  _Rtc_WriteToRam
    2B1D: 38 FC    ADD   SP,0xFC
    2B1F: 62 D0 00 MOV   REG[0xD0],0x0
    2B22: 7F       RET   
(0058) }
(0059) 
(0060) BYTE Rtc_ReadFromRtc(void)
(0061) {
(0062) 	return Rtc_ReadFromRam(&datetime, 0x00, 7);
_Rtc_ReadFromRtc:
    2B23: 50 07    MOV   A,0x7
    2B25: 08       PUSH  A
    2B26: 50 00    MOV   A,0x0
    2B28: 08       PUSH  A
    2B29: 50 00    MOV   A,0x0
    2B2B: 08       PUSH  A
    2B2C: 50 C4    MOV   A,0xC4
    2B2E: 08       PUSH  A
    2B2F: 90 A9    CALL  _Rtc_ReadFromRam
    2B31: 38 FC    ADD   SP,0xFC
    2B33: 62 D0 00 MOV   REG[0xD0],0x0
    2B36: 7F       RET   
(0063) }
(0064) 
(0065) BYTE Rtc_SetSqwOutConfig(void)
(0066) {
(0067) 	return Rtc_WriteToRam(&cr, 0x07, 1);
_Rtc_SetSqwOutConfig:
    2B37: 50 01    MOV   A,0x1
    2B39: 08       PUSH  A
    2B3A: 50 07    MOV   A,0x7
    2B3C: 08       PUSH  A
    2B3D: 50 00    MOV   A,0x0
    2B3F: 08       PUSH  A
    2B40: 50 DB    MOV   A,0xDB
    2B42: 08       PUSH  A
    2B43: 90 1F    CALL  _Rtc_WriteToRam
    2B45: 38 FC    ADD   SP,0xFC
    2B47: 62 D0 00 MOV   REG[0xD0],0x0
    2B4A: 7F       RET   
(0068) }
(0069) 
(0070) BYTE Rtc_GetSqwOutConfig(void)
(0071) {
(0072) 	Rtc_ReadFromRam(&cr, 0x07, 1);
_Rtc_GetSqwOutConfig:
    2B4B: 50 01    MOV   A,0x1
    2B4D: 08       PUSH  A
    2B4E: 50 07    MOV   A,0x7
    2B50: 08       PUSH  A
    2B51: 50 00    MOV   A,0x0
    2B53: 08       PUSH  A
    2B54: 50 DB    MOV   A,0xDB
    2B56: 08       PUSH  A
    2B57: 90 81    CALL  _Rtc_ReadFromRam
    2B59: 38 FC    ADD   SP,0xFC
(0073) 	return cr.byte;
    2B5B: 62 D0 00 MOV   REG[0xD0],0x0
    2B5E: 51 DB    MOV   A,[rtc.c:cr]
    2B60: 62 D0 00 MOV   REG[0xD0],0x0
    2B63: 7F       RET   
(0074) }
(0075) 
(0076) BYTE Rtc_WriteToRam(void* buffer, BYTE address, BYTE count)
(0077) {
_Rtc_WriteToRam:
  error                --> X+1
  i                    --> X+0
  count                --> X-7
  address              --> X-6
  buffer               --> X-5
    2B64: 10       PUSH  X
    2B65: 4F       MOV   X,SP
    2B66: 38 02    ADD   SP,0x2
(0078) 	BYTE error = RTC_NOERROR;
    2B68: 56 01 00 MOV   [X+1],0x0
(0079) 	BYTE i = 0;
    2B6B: 56 00 00 MOV   [X+0],0x0
(0080) 
(0081) 	if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
    2B6E: 10       PUSH  X
    2B6F: 57 00    MOV   X,0x0
    2B71: 50 68    MOV   A,0x68
    2B73: 7C 0C 83 LCALL _I2Cm_fSendStart
    2B76: 20       POP   X
    2B77: 62 D0 00 MOV   REG[0xD0],0x0
    2B7A: 39 00    CMP   A,0x0
    2B7C: A0 4C    JZ    0x2BC9
(0082) 	{
(0083) 		if(I2Cm_fWrite(address) != 0)
    2B7E: 10       PUSH  X
    2B7F: 52 FA    MOV   A,[X-6]
    2B81: 7C 0C BD LCALL _I2Cm_fWrite
    2B84: 20       POP   X
    2B85: 62 D0 00 MOV   REG[0xD0],0x0
    2B88: 39 00    CMP   A,0x0
    2B8A: A0 39    JZ    0x2BC4
(0084) 		{
(0085) 			for (i = 0; i < count; i++)
    2B8C: 56 00 00 MOV   [X+0],0x0
    2B8F: 80 2C    JMP   0x2BBC
(0086) 			{
(0087) 				if(I2Cm_fWrite( *( (BYTE*)buffer+i ) ) == 0)
    2B91: 62 D0 00 MOV   REG[0xD0],0x0
    2B94: 52 00    MOV   A,[X+0]
    2B96: 53 C2    MOV   [__r1],A
    2B98: 55 C3 00 MOV   [__r0],0x0
    2B9B: 52 FC    MOV   A,[X-4]
    2B9D: 04 C2    ADD   [__r1],A
    2B9F: 52 FB    MOV   A,[X-5]
    2BA1: 0C C3    ADC   [__r0],A
    2BA3: 51 C3    MOV   A,[__r0]
    2BA5: 60 D4    MOV   REG[0xD4],A
    2BA7: 3E C2    MVI   A,[__r1]
    2BA9: 10       PUSH  X
    2BAA: 7C 0C BD LCALL _I2Cm_fWrite
    2BAD: 20       POP   X
    2BAE: 62 D0 00 MOV   REG[0xD0],0x0
    2BB1: 39 00    CMP   A,0x0
    2BB3: B0 06    JNZ   0x2BBA
(0088) 				{
(0089) 					error = RTC_SLAVENOTACKDATA;
    2BB5: 56 01 02 MOV   [X+1],0x2
(0090) 					break;
    2BB8: 80 13    JMP   0x2BCC
(0091) 				}
(0092) 			}
    2BBA: 77 00    INC   [X+0]
    2BBC: 52 00    MOV   A,[X+0]
    2BBE: 3B F9    CMP   A,[X-7]
    2BC0: CF D0    JC    0x2B91
(0093) 		}
    2BC2: 80 09    JMP   0x2BCC
(0094) 		else
(0095) 		{
(0096) 			error = RTC_SLAVENOTACKDATA;
    2BC4: 56 01 02 MOV   [X+1],0x2
(0097) 		}
(0098) 	}
    2BC7: 80 04    JMP   0x2BCC
(0099) 	else
(0100) 	{
(0101) 		error = RTC_SLAVENOTACKADDRESS;
    2BC9: 56 01 01 MOV   [X+1],0x1
(0102) 	}
(0103) 
(0104) 	I2Cm_SendStop();
    2BCC: 10       PUSH  X
    2BCD: 7C 0D FF LCALL _I2Cm_SendStop
    2BD0: 20       POP   X
(0105) 
(0106) 	return error;
    2BD1: 52 01    MOV   A,[X+1]
    2BD3: 62 D0 00 MOV   REG[0xD0],0x0
    2BD6: 38 FE    ADD   SP,0xFE
    2BD8: 20       POP   X
    2BD9: 7F       RET   
(0107) }
(0108) 
(0109) BYTE Rtc_ReadFromRam(void* buffer, BYTE address, BYTE count)
(0110) {
_Rtc_ReadFromRam:
  error                --> X+1
  i                    --> X+0
  count                --> X-7
  address              --> X-6
  buffer               --> X-5
    2BDA: 10       PUSH  X
    2BDB: 4F       MOV   X,SP
    2BDC: 38 02    ADD   SP,0x2
(0111) 	BYTE error = RTC_NOERROR;
    2BDE: 56 01 00 MOV   [X+1],0x0
(0112) 	BYTE i = 0;
    2BE1: 56 00 00 MOV   [X+0],0x0
(0113) 
(0114) 	if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
    2BE4: 10       PUSH  X
    2BE5: 57 00    MOV   X,0x0
    2BE7: 50 68    MOV   A,0x68
    2BE9: 7C 0C 83 LCALL _I2Cm_fSendStart
    2BEC: 20       POP   X
    2BED: 62 D0 00 MOV   REG[0xD0],0x0
    2BF0: 39 00    CMP   A,0x0
    2BF2: A0 80    JZ    0x2C73
(0115) 	{
(0116) 		if(I2Cm_fWrite(address) != 0)
    2BF4: 10       PUSH  X
    2BF5: 52 FA    MOV   A,[X-6]
    2BF7: 7C 0C BD LCALL _I2Cm_fWrite
    2BFA: 20       POP   X
    2BFB: 62 D0 00 MOV   REG[0xD0],0x0
    2BFE: 39 00    CMP   A,0x0
    2C00: A0 6D    JZ    0x2C6E
(0117) 		{
(0118) 			if(I2Cm_fSendRepeatStart(RTC_I2C_ADDRESS, I2Cm_READ) != 0)
    2C02: 10       PUSH  X
    2C03: 57 01    MOV   X,0x1
    2C05: 50 68    MOV   A,0x68
    2C07: 7C 0C 4D LCALL _I2Cm_fSendRepeatStart
    2C0A: 20       POP   X
    2C0B: 62 D0 00 MOV   REG[0xD0],0x0
    2C0E: 39 00    CMP   A,0x0
    2C10: A0 58    JZ    0x2C69
(0119) 			{
(0120) 				count--;
    2C12: 7B F9    DEC   [X-7]
(0121) 				for (i = 0; i < count; i++)
    2C14: 56 00 00 MOV   [X+0],0x0
    2C17: 80 26    JMP   0x2C3E
(0122) 				{
(0123) 					*( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_ACKslave);
    2C19: 10       PUSH  X
    2C1A: 50 01    MOV   A,0x1
    2C1C: 7C 0D 54 LCALL _I2Cm_bRead
    2C1F: 20       POP   X
    2C20: 62 D0 00 MOV   REG[0xD0],0x0
    2C23: 53 C3    MOV   [__r0],A
    2C25: 52 00    MOV   A,[X+0]
    2C27: 53 C0    MOV   [__r3],A
    2C29: 55 C1 00 MOV   [__r2],0x0
    2C2C: 52 FC    MOV   A,[X-4]
    2C2E: 04 C0    ADD   [__r3],A
    2C30: 52 FB    MOV   A,[X-5]
    2C32: 0C C1    ADC   [__r2],A
    2C34: 51 C1    MOV   A,[__r2]
    2C36: 60 D5    MOV   REG[0xD5],A
    2C38: 51 C3    MOV   A,[__r0]
    2C3A: 3F C0    MVI   [__r3],A
(0124) 				}
    2C3C: 77 00    INC   [X+0]
    2C3E: 52 00    MOV   A,[X+0]
    2C40: 3B F9    CMP   A,[X-7]
    2C42: CF D6    JC    0x2C19
(0125) 
(0126) 				*( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_NAKslave);
    2C44: 10       PUSH  X
    2C45: 50 00    MOV   A,0x0
    2C47: 7C 0D 54 LCALL _I2Cm_bRead
    2C4A: 20       POP   X
    2C4B: 62 D0 00 MOV   REG[0xD0],0x0
    2C4E: 53 C3    MOV   [__r0],A
    2C50: 52 00    MOV   A,[X+0]
    2C52: 53 C0    MOV   [__r3],A
    2C54: 55 C1 00 MOV   [__r2],0x0
    2C57: 52 FC    MOV   A,[X-4]
    2C59: 04 C0    ADD   [__r3],A
    2C5B: 52 FB    MOV   A,[X-5]
    2C5D: 0C C1    ADC   [__r2],A
    2C5F: 51 C1    MOV   A,[__r2]
    2C61: 60 D5    MOV   REG[0xD5],A
    2C63: 51 C3    MOV   A,[__r0]
    2C65: 3F C0    MVI   [__r3],A
(0127) 			}
    2C67: 80 0E    JMP   0x2C76
(0128) 			else
(0129) 			{
(0130) 				error = RTC_SLAVENOTACKDATA;
    2C69: 56 01 02 MOV   [X+1],0x2
(0131) 			}
(0132) 		}
    2C6C: 80 09    JMP   0x2C76
(0133) 		else
(0134) 		{
(0135) 			error = RTC_SLAVENOTACKDATA;
    2C6E: 56 01 02 MOV   [X+1],0x2
(0136) 		}
(0137) 	}
    2C71: 80 04    JMP   0x2C76
(0138) 	else
(0139) 	{
(0140) 		error = RTC_SLAVENOTACKADDRESS;
    2C73: 56 01 01 MOV   [X+1],0x1
(0141) 	}
(0142) 
(0143) 	I2Cm_SendStop();
    2C76: 10       PUSH  X
    2C77: 7C 0D FF LCALL _I2Cm_SendStop
    2C7A: 20       POP   X
(0144) 
(0145) 	return error;
    2C7B: 52 01    MOV   A,[X+1]
    2C7D: 62 D0 00 MOV   REG[0xD0],0x0
    2C80: 38 FE    ADD   SP,0xFE
    2C82: 20       POP   X
    2C83: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\tempsensor.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "TempSensor.h"
(0004) #include <stdio.h>
(0005) 
(0006) 
(0007) void TempSensor_Start(void)
(0008) {
(0009) 	PGA_Start(PGA_HIGHPOWER);
_TempSensor_Start:
    2C84: 10       PUSH  X
    2C85: 50 03    MOV   A,0x3
    2C87: 7C 08 48 LCALL _PGA_Start|PGA_SetPower|PGA_Start|_PGA_SetPower
(0010) 	ADCINC_Start(ADCINC_HIGHPOWER);
    2C8A: 50 03    MOV   A,0x3
    2C8C: 7C 0E A3 LCALL _ADCINC_Start
(0011) 	ADCINC_GetSamples(0);
    2C8F: 50 00    MOV   A,0x0
    2C91: 7C 0E CE LCALL _ADCINC_GetSamples
    2C94: 20       POP   X
    2C95: 7F       RET   
(0012) }
(0013) void TempSensor_Stop(void)
(0014) {
(0015) 	PGA_Stop();
_TempSensor_Stop:
    2C96: 10       PUSH  X
    2C97: 7C 08 84 LCALL _PGA_Stop
(0016) 	ADCINC_Stop();
    2C9A: 7C 0E C4 LCALL _ADCINC_Stop
    2C9D: 20       POP   X
    2C9E: 7F       RET   
(0017) }
(0018) 
(0019) int TempSensor_GetTemp(void)
(0020) {
_TempSensor_GetTemp:
  latemp               --> X+4
  temp                 --> X+0
    2C9F: 10       PUSH  X
    2CA0: 4F       MOV   X,SP
    2CA1: 38 06    ADD   SP,0x6
(0021) 	float temp;
(0022) 	int latemp;
(0023) 	while (ADCINC_fIsDataAvailable() == 0);
    2CA3: 10       PUSH  X
    2CA4: 7C 0F 0B LCALL _ADCINC_fIsDataAvailable
    2CA7: 20       POP   X
    2CA8: 62 D0 00 MOV   REG[0xD0],0x0
    2CAB: 39 00    CMP   A,0x0
    2CAD: AF F5    JZ    0x2CA3
(0024) 	temp = ADCINC_wClearFlagGetData();
    2CAF: 10       PUSH  X
    2CB0: 7C 0F 11 LCALL _ADCINC_iClearFlagGetData|_ADCINC_wClearFlagGetData|ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData
    2CB3: 62 D0 00 MOV   REG[0xD0],0x0
    2CB6: 5A C3    MOV   [__r0],X
    2CB8: 53 C2    MOV   [__r1],A
    2CBA: 20       POP   X
    2CBB: 21 01    AND   A,0x1
    2CBD: 53 C0    MOV   [__r3],A
    2CBF: 51 C3    MOV   A,[__r0]
    2CC1: 21 00    AND   A,0x0
    2CC3: 53 C1    MOV   [__r2],A
    2CC5: 51 C0    MOV   A,[__r3]
    2CC7: 53 BC    MOV   [__r7],A
    2CC9: 51 C1    MOV   A,[__r2]
    2CCB: 53 BD    MOV   [__r6],A
    2CCD: 47 BD 80 TST   [__r6],0x80
    2CD0: A0 09    JZ    0x2CDA
    2CD2: 55 BE FF MOV   [__r5],0xFF
    2CD5: 55 BF FF MOV   [__r4],0xFF
    2CD8: 80 0A    JMP   0x2CE3
    2CDA: 62 D0 00 MOV   REG[0xD0],0x0
    2CDD: 55 BE 00 MOV   [__r5],0x0
    2CE0: 55 BF 00 MOV   [__r4],0x0
    2CE3: 62 D0 00 MOV   REG[0xD0],0x0
    2CE6: 51 BF    MOV   A,[__r4]
    2CE8: 08       PUSH  A
    2CE9: 51 BE    MOV   A,[__r5]
    2CEB: 08       PUSH  A
    2CEC: 51 BD    MOV   A,[__r6]
    2CEE: 08       PUSH  A
    2CEF: 51 BC    MOV   A,[__r7]
    2CF1: 08       PUSH  A
    2CF2: 7C 3D F8 LCALL 0x3DF8
    2CF5: 18       POP   A
    2CF6: 53 BC    MOV   [__r7],A
    2CF8: 18       POP   A
    2CF9: 53 BD    MOV   [__r6],A
    2CFB: 18       POP   A
    2CFC: 53 BE    MOV   [__r5],A
    2CFE: 18       POP   A
    2CFF: 53 BF    MOV   [__r4],A
    2D01: 70 FB    AND   F,0xFB
    2D03: 6E C3    RRC   [__r0]
    2D05: 6E C2    RRC   [__r1]
    2D07: 51 C2    MOV   A,[__r1]
    2D09: 53 C0    MOV   [__r3],A
    2D0B: 51 C3    MOV   A,[__r0]
    2D0D: 53 C1    MOV   [__r2],A
    2D0F: 47 C1 80 TST   [__r2],0x80
    2D12: A0 09    JZ    0x2D1C
    2D14: 55 C2 FF MOV   [__r1],0xFF
    2D17: 55 C3 FF MOV   [__r0],0xFF
    2D1A: 80 0A    JMP   0x2D25
    2D1C: 62 D0 00 MOV   REG[0xD0],0x0
    2D1F: 55 C2 00 MOV   [__r1],0x0
    2D22: 55 C3 00 MOV   [__r0],0x0
    2D25: 62 D0 00 MOV   REG[0xD0],0x0
    2D28: 51 C3    MOV   A,[__r0]
    2D2A: 08       PUSH  A
    2D2B: 51 C2    MOV   A,[__r1]
    2D2D: 08       PUSH  A
    2D2E: 51 C1    MOV   A,[__r2]
    2D30: 08       PUSH  A
    2D31: 51 C0    MOV   A,[__r3]
    2D33: 08       PUSH  A
    2D34: 7C 3D F8 LCALL 0x3DF8
    2D37: 18       POP   A
    2D38: 53 C0    MOV   [__r3],A
    2D3A: 18       POP   A
    2D3B: 53 C1    MOV   [__r2],A
    2D3D: 18       POP   A
    2D3E: 53 C2    MOV   [__r1],A
    2D40: 18       POP   A
    2D41: 08       PUSH  A
    2D42: 51 C2    MOV   A,[__r1]
    2D44: 08       PUSH  A
    2D45: 51 C1    MOV   A,[__r2]
    2D47: 08       PUSH  A
    2D48: 51 C0    MOV   A,[__r3]
    2D4A: 08       PUSH  A
    2D4B: 50 40    MOV   A,0x40
    2D4D: 08       PUSH  A
    2D4E: 50 00    MOV   A,0x0
    2D50: 08       PUSH  A
    2D51: 08       PUSH  A
    2D52: 08       PUSH  A
    2D53: 7C 3C 3E LCALL 0x3C3E
    2D56: 18       POP   A
    2D57: 53 C0    MOV   [__r3],A
    2D59: 18       POP   A
    2D5A: 53 C1    MOV   [__r2],A
    2D5C: 18       POP   A
    2D5D: 53 C2    MOV   [__r1],A
    2D5F: 18       POP   A
    2D60: 53 C3    MOV   [__r0],A
    2D62: 38 FC    ADD   SP,0xFC
    2D64: 51 BF    MOV   A,[__r4]
    2D66: 08       PUSH  A
    2D67: 51 BE    MOV   A,[__r5]
    2D69: 08       PUSH  A
    2D6A: 51 BD    MOV   A,[__r6]
    2D6C: 08       PUSH  A
    2D6D: 51 BC    MOV   A,[__r7]
    2D6F: 08       PUSH  A
    2D70: 51 C3    MOV   A,[__r0]
    2D72: 08       PUSH  A
    2D73: 51 C2    MOV   A,[__r1]
    2D75: 08       PUSH  A
    2D76: 51 C1    MOV   A,[__r2]
    2D78: 08       PUSH  A
    2D79: 51 C0    MOV   A,[__r3]
    2D7B: 08       PUSH  A
    2D7C: 7C 3A 5B LCALL 0x3A5B
    2D7F: 18       POP   A
    2D80: 54 03    MOV   [X+3],A
    2D82: 18       POP   A
    2D83: 54 02    MOV   [X+2],A
    2D85: 18       POP   A
    2D86: 54 01    MOV   [X+1],A
    2D88: 18       POP   A
    2D89: 54 00    MOV   [X+0],A
    2D8B: 38 FC    ADD   SP,0xFC
(0025) 	latemp = temp;
    2D8D: 52 00    MOV   A,[X+0]
    2D8F: 08       PUSH  A
    2D90: 52 01    MOV   A,[X+1]
    2D92: 08       PUSH  A
    2D93: 52 02    MOV   A,[X+2]
    2D95: 08       PUSH  A
    2D96: 52 03    MOV   A,[X+3]
    2D98: 08       PUSH  A
    2D99: 7C 39 4A LCALL 0x394A
    2D9C: 18       POP   A
    2D9D: 54 05    MOV   [X+5],A
    2D9F: 18       POP   A
    2DA0: 54 04    MOV   [X+4],A
    2DA2: 38 FE    ADD   SP,0xFE
(0026) 	//cprintf("Raw: %d\n",latemp);
(0027) 	temp = (((temp)*500.0)/1023.0)-281.5;
    2DA4: 52 00    MOV   A,[X+0]
    2DA6: 08       PUSH  A
    2DA7: 52 01    MOV   A,[X+1]
    2DA9: 08       PUSH  A
    2DAA: 52 02    MOV   A,[X+2]
    2DAC: 08       PUSH  A
    2DAD: 52 03    MOV   A,[X+3]
    2DAF: 08       PUSH  A
    2DB0: 50 43    MOV   A,0x43
    2DB2: 08       PUSH  A
    2DB3: 50 FA    MOV   A,0xFA
    2DB5: 08       PUSH  A
    2DB6: 50 00    MOV   A,0x0
    2DB8: 08       PUSH  A
    2DB9: 08       PUSH  A
    2DBA: 7C 3C 3E LCALL 0x3C3E
    2DBD: 18       POP   A
    2DBE: 53 C0    MOV   [__r3],A
    2DC0: 18       POP   A
    2DC1: 53 C1    MOV   [__r2],A
    2DC3: 18       POP   A
    2DC4: 53 C2    MOV   [__r1],A
    2DC6: 18       POP   A
    2DC7: 53 C3    MOV   [__r0],A
    2DC9: 38 FC    ADD   SP,0xFC
    2DCB: 50 44    MOV   A,0x44
    2DCD: 08       PUSH  A
    2DCE: 50 7F    MOV   A,0x7F
    2DD0: 08       PUSH  A
    2DD1: 50 C0    MOV   A,0xC0
    2DD3: 08       PUSH  A
    2DD4: 50 00    MOV   A,0x0
    2DD6: 08       PUSH  A
    2DD7: 51 C3    MOV   A,[__r0]
    2DD9: 08       PUSH  A
    2DDA: 51 C2    MOV   A,[__r1]
    2DDC: 08       PUSH  A
    2DDD: 51 C1    MOV   A,[__r2]
    2DDF: 08       PUSH  A
    2DE0: 51 C0    MOV   A,[__r3]
    2DE2: 08       PUSH  A
    2DE3: 7C 3B 5B LCALL 0x3B5B
    2DE6: 18       POP   A
    2DE7: 53 C0    MOV   [__r3],A
    2DE9: 18       POP   A
    2DEA: 53 C1    MOV   [__r2],A
    2DEC: 18       POP   A
    2DED: 53 C2    MOV   [__r1],A
    2DEF: 18       POP   A
    2DF0: 53 C3    MOV   [__r0],A
    2DF2: 38 FC    ADD   SP,0xFC
    2DF4: 50 43    MOV   A,0x43
    2DF6: 08       PUSH  A
    2DF7: 50 8C    MOV   A,0x8C
    2DF9: 08       PUSH  A
    2DFA: 50 C0    MOV   A,0xC0
    2DFC: 08       PUSH  A
    2DFD: 50 00    MOV   A,0x0
    2DFF: 08       PUSH  A
    2E00: 51 C3    MOV   A,[__r0]
    2E02: 08       PUSH  A
    2E03: 51 C2    MOV   A,[__r1]
    2E05: 08       PUSH  A
    2E06: 51 C1    MOV   A,[__r2]
    2E08: 08       PUSH  A
    2E09: 51 C0    MOV   A,[__r3]
    2E0B: 08       PUSH  A
    2E0C: 7C 3D 68 LCALL 0x3D68
    2E0F: 18       POP   A
    2E10: 54 03    MOV   [X+3],A
    2E12: 18       POP   A
    2E13: 54 02    MOV   [X+2],A
    2E15: 18       POP   A
    2E16: 54 01    MOV   [X+1],A
    2E18: 18       POP   A
    2E19: 54 00    MOV   [X+0],A
    2E1B: 38 FC    ADD   SP,0xFC
(0028) 	latemp = temp;
    2E1D: 52 00    MOV   A,[X+0]
    2E1F: 08       PUSH  A
    2E20: 52 01    MOV   A,[X+1]
    2E22: 08       PUSH  A
    2E23: 52 02    MOV   A,[X+2]
    2E25: 08       PUSH  A
    2E26: 52 03    MOV   A,[X+3]
    2E28: 08       PUSH  A
    2E29: 7C 39 4A LCALL 0x394A
    2E2C: 18       POP   A
    2E2D: 54 05    MOV   [X+5],A
    2E2F: 18       POP   A
    2E30: 54 04    MOV   [X+4],A
    2E32: 38 FE    ADD   SP,0xFE
(0029) 	//cprintf("Conversion: %d\n",latemp);
(0030) 	
(0031) 	return latemp;
    2E34: 52 05    MOV   A,[X+5]
    2E36: 53 C2    MOV   [__r1],A
    2E38: 52 04    MOV   A,[X+4]
    2E3A: 53 C3    MOV   [__r0],A
    2E3C: 38 FA    ADD   SP,0xFA
    2E3E: 20       POP   X
    2E3F: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\tempview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "TempView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "TempSensor.h"
(0010) #include "BcdUtil.h"
(0011) #include <stdio.h>
(0012) 
(0013) extern CurrentView currentView;
(0014) 
(0015) void TempView_Start(void)
(0016) {
_TempView_Start:
    2E40: 7F       RET   
(0017) 
(0018) }
(0019) 
(0020) void TempView_Callback(void)
(0021) {
_TempView_Callback:
  num                  --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  temp                 --> X+0
    2E41: 10       PUSH  X
    2E42: 4F       MOV   X,SP
    2E43: 38 05    ADD   SP,0x5
(0022) 	int temp;
(0023) 	BYTE bcd10,bcd,num;
(0024) 	
(0025) 	currentView = TEMP;
    2E45: 62 D0 00 MOV   REG[0xD0],0x0
    2E48: 55 DD 05 MOV   [currentView],0x5
(0026) 	Menu_Clear();
    2E4B: 7C 26 30 LCALL _Menu_Clear
(0027) 	LCD_Position(0, 0);
    2E4E: 10       PUSH  X
    2E4F: 50 00    MOV   A,0x0
    2E51: 57 00    MOV   X,0x0
    2E53: 7C 0A 0D LCALL _LCD_Position
(0028) 	LCD_PrCString("Temp Actual");
    2E56: 50 02    MOV   A,0x2
    2E58: 08       PUSH  A
    2E59: 50 DF    MOV   A,0xDF
    2E5B: 5C       MOV   X,A
    2E5C: 18       POP   A
    2E5D: 7C 08 88 LCALL _LCD_PrCString
    2E60: 20       POP   X
(0029) 		
(0030) 	temp = TempSensor_GetTemp();
    2E61: 7C 2C 9F LCALL _TempSensor_GetTemp
    2E64: 62 D0 00 MOV   REG[0xD0],0x0
    2E67: 51 C2    MOV   A,[__r1]
    2E69: 54 01    MOV   [X+1],A
    2E6B: 51 C3    MOV   A,[__r0]
    2E6D: 54 00    MOV   [X+0],A
(0031) 	
(0032) 	cprintf("Temperatura: %d\n", temp);
    2E6F: 52 00    MOV   A,[X+0]
    2E71: 08       PUSH  A
    2E72: 52 01    MOV   A,[X+1]
    2E74: 08       PUSH  A
    2E75: 50 02    MOV   A,0x2
    2E77: 08       PUSH  A
    2E78: 50 CE    MOV   A,0xCE
    2E7A: 08       PUSH  A
    2E7B: 7C 42 C5 LCALL _cprintf
(0033) 		
(0034) 	decToBcd(&bcd10,&bcd,temp);
    2E7E: 62 D0 00 MOV   REG[0xD0],0x0
    2E81: 52 01    MOV   A,[X+1]
    2E83: 08       PUSH  A
    2E84: 5A C2    MOV   [__r1],X
    2E86: 06 C2 03 ADD   [__r1],0x3
    2E89: 50 07    MOV   A,0x7
    2E8B: 08       PUSH  A
    2E8C: 51 C2    MOV   A,[__r1]
    2E8E: 08       PUSH  A
    2E8F: 5A C2    MOV   [__r1],X
    2E91: 06 C2 02 ADD   [__r1],0x2
    2E94: 50 07    MOV   A,0x7
    2E96: 08       PUSH  A
    2E97: 51 C2    MOV   A,[__r1]
    2E99: 08       PUSH  A
    2E9A: 7C 0F 6D LCALL _decToBcd
    2E9D: 38 F7    ADD   SP,0xF7
(0035) 	
(0036) 	//LCD_Position(0,14);
(0037) 	//LCD_PrHexByte(bcd);
(0038) 	LCD_Position(0,13);
    2E9F: 10       PUSH  X
    2EA0: 57 0D    MOV   X,0xD
    2EA2: 50 00    MOV   A,0x0
    2EA4: 7C 0A 0D LCALL _LCD_Position
    2EA7: 20       POP   X
(0039) 	LCD_PrHexByte((bcd10<<4)|bcd);
    2EA8: 52 02    MOV   A,[X+2]
    2EAA: 62 D0 00 MOV   REG[0xD0],0x0
    2EAD: 64       ASL   A
    2EAE: 64       ASL   A
    2EAF: 64       ASL   A
    2EB0: 64       ASL   A
    2EB1: 53 C3    MOV   [__r0],A
    2EB3: 52 03    MOV   A,[X+3]
    2EB5: 2C C3    OR    [__r0],A
    2EB7: 10       PUSH  X
    2EB8: 51 C3    MOV   A,[__r0]
    2EBA: 7C 08 AA LCALL _LCD_PrHexByte
    2EBD: 20       POP   X
    2EBE: 38 FB    ADD   SP,0xFB
    2EC0: 20       POP   X
    2EC1: 7F       RET   
(0040) 	//LCD_Position(0,13);
(0041) 	//LCD_PrCString(" ");
(0042) 	
(0043) 	
(0044) 
(0045) 	
(0046) }
(0047) 
(0048) void TempView_Update(void)
(0049) {
_TempView_Update:
  num                  --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  temp                 --> X+0
    2EC2: 10       PUSH  X
    2EC3: 4F       MOV   X,SP
    2EC4: 38 07    ADD   SP,0x7
(0050) 	int temp;
(0051) 	BYTE bcd10,bcd,num;
(0052) 	
(0053) 	if(Keypad_IsKeyStored())
    2EC6: 7C 1B BC LCALL _Keypad_IsKeyStored
    2EC9: 62 D0 00 MOV   REG[0xD0],0x0
    2ECC: 39 00    CMP   A,0x0
    2ECE: A0 1D    JZ    0x2EEC
(0054) 	{
(0055) 		switch(Keypad_GetKey())
    2ED0: 7C 1B D4 LCALL _Keypad_GetKey
    2ED3: 62 D0 00 MOV   REG[0xD0],0x0
    2ED6: 54 06    MOV   [X+6],A
    2ED8: 56 05 00 MOV   [X+5],0x0
    2EDB: 3D 05 00 CMP   [X+5],0x0
    2EDE: B0 06    JNZ   0x2EE5
    2EE0: 3D 06 11 CMP   [X+6],0x11
    2EE3: A0 03    JZ    0x2EE7
    2EE5: 80 06    JMP   0x2EEC
(0056) 		{
(0057) 			case 0x11:
(0058) 				// "B"
(0059) 				MainView_Callback();
    2EE7: 7C 23 46 LCALL _MainView_Callback
(0060) 				return;
    2EEA: 80 4C    JMP   0x2F37
(0061) 				break;
(0062) 		}
(0063) 	}
(0064) 	
(0065) 	temp = TempSensor_GetTemp();
    2EEC: 7C 2C 9F LCALL _TempSensor_GetTemp
    2EEF: 62 D0 00 MOV   REG[0xD0],0x0
    2EF2: 51 C2    MOV   A,[__r1]
    2EF4: 54 01    MOV   [X+1],A
    2EF6: 51 C3    MOV   A,[__r0]
    2EF8: 54 00    MOV   [X+0],A
(0066) 	decToBcd(&bcd10,&bcd,temp);
    2EFA: 52 01    MOV   A,[X+1]
    2EFC: 08       PUSH  A
    2EFD: 5A C2    MOV   [__r1],X
    2EFF: 06 C2 03 ADD   [__r1],0x3
    2F02: 50 07    MOV   A,0x7
    2F04: 08       PUSH  A
    2F05: 51 C2    MOV   A,[__r1]
    2F07: 08       PUSH  A
    2F08: 5A C2    MOV   [__r1],X
    2F0A: 06 C2 02 ADD   [__r1],0x2
    2F0D: 50 07    MOV   A,0x7
    2F0F: 08       PUSH  A
    2F10: 51 C2    MOV   A,[__r1]
    2F12: 08       PUSH  A
    2F13: 7C 0F 6D LCALL _decToBcd
    2F16: 38 FB    ADD   SP,0xFB
(0067) 	LCD_Position(0,13);
    2F18: 10       PUSH  X
    2F19: 57 0D    MOV   X,0xD
    2F1B: 50 00    MOV   A,0x0
    2F1D: 7C 0A 0D LCALL _LCD_Position
    2F20: 20       POP   X
(0068) 	LCD_PrHexByte((bcd10<<4)|bcd);
    2F21: 52 02    MOV   A,[X+2]
    2F23: 62 D0 00 MOV   REG[0xD0],0x0
    2F26: 64       ASL   A
    2F27: 64       ASL   A
    2F28: 64       ASL   A
    2F29: 64       ASL   A
    2F2A: 53 C3    MOV   [__r0],A
    2F2C: 52 03    MOV   A,[X+3]
    2F2E: 2C C3    OR    [__r0],A
    2F30: 10       PUSH  X
    2F31: 51 C3    MOV   A,[__r0]
    2F33: 7C 08 AA LCALL _LCD_PrHexByte
    2F36: 20       POP   X
    2F37: 38 F9    ADD   SP,0xF9
    2F39: 20       POP   X
    2F3A: 7F       RET   
FILE: X:\10OS~A33\SIST~DJW\PSoC\RTC\RTC\time.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Rtc.h"
(0004) #include "Time.h"
(0005) #include "BcdUtil.h"
(0006) #include "dateUtil.h"
(0007) 
(0008) void Time_Start(void)
(0009) {
(0010) 	datetime._00h.byte = 0x00;	// Hora: 00:00:00
_Time_Start:
    2F3B: 62 D0 00 MOV   REG[0xD0],0x0
    2F3E: 55 C4 00 MOV   [datetime],0x0
(0011) 	datetime._01h.byte = 0x00;	 
    2F41: 55 C5 00 MOV   [datetime+1],0x0
(0012) 	datetime._02h.byte = 0x00;
    2F44: 55 C6 00 MOV   [datetime+2],0x0
(0013) 	datetime._03h.byte = 0x04;	// Dia: Miércoles
    2F47: 55 C7 04 MOV   [datetime+3],0x4
(0014) 	datetime._04h.byte = 0x01;	// Fecha: 01/Enero/2014
    2F4A: 55 C8 01 MOV   [datetime+4],0x1
(0015) 	datetime._05h.byte = 0x01;
    2F4D: 55 C9 01 MOV   [datetime+5],0x1
(0016) 	datetime._06h.byte = 0x14;
    2F50: 55 CA 14 MOV   [datetime+6],0x14
(0017) 	Rtc_Start();
    2F53: 7C 2A C8 LCALL _Rtc_Start
    2F56: 7F       RET   
(0018) }
(0019) 
(0020) void Time_Stop(void)
(0021) {
(0022) 	Rtc_Stop();
_Time_Stop:
    2F57: 7C 2A DC LCALL _Rtc_Stop
    2F5A: 7F       RET   
(0023) }
(0024) 
(0025) void Time_Pause(BOOL isPaused)
(0026) {
_Time_Pause:
  isPaused             --> X-4
    2F5B: 10       PUSH  X
    2F5C: 4F       MOV   X,SP
(0027) 	// Starts or Stops RTC clock
(0028) 	Rtc_ReadFromRtc();
    2F5D: 7C 2B 23 LCALL _Rtc_ReadFromRtc
    2F60: 62 D0 00 MOV   REG[0xD0],0x0
(0029) 	datetime._00h.bits.CH = isPaused;
    2F63: 52 FC    MOV   A,[X-4]
    2F65: 21 01    AND   A,0x1
    2F67: 64       ASL   A
    2F68: 64       ASL   A
    2F69: 64       ASL   A
    2F6A: 64       ASL   A
    2F6B: 64       ASL   A
    2F6C: 64       ASL   A
    2F6D: 64       ASL   A
    2F6E: 53 C3    MOV   [__r0],A
    2F70: 26 C3 80 AND   [__r0],0x80
    2F73: 62 D0 00 MOV   REG[0xD0],0x0
    2F76: 51 C4    MOV   A,[datetime]
    2F78: 21 7F    AND   A,0x7F
    2F7A: 62 D0 00 MOV   REG[0xD0],0x0
    2F7D: 2A C3    OR    A,[__r0]
    2F7F: 62 D0 00 MOV   REG[0xD0],0x0
    2F82: 53 C4    MOV   [datetime],A
(0030) 	Rtc_WriteToRtc();
    2F84: 7C 2B 0F LCALL _Rtc_WriteToRtc
    2F87: 62 D0 00 MOV   REG[0xD0],0x0
    2F8A: 20       POP   X
    2F8B: 7F       RET   
(0031) }
(0032) 
(0033) void Time_Adj_1224hrs(BOOL h12)
(0034) {
_Time_Adj_1224hrs:
  bcd                  --> X+2
  bcd10                --> X+1
  hours                --> X+0
  h12                  --> X-4
    2F8C: 10       PUSH  X
    2F8D: 4F       MOV   X,SP
    2F8E: 38 03    ADD   SP,0x3
(0035) 	BYTE hours, bcd10, bcd;
(0036) 
(0037) 	Time_Pause(TRUE);
    2F90: 50 01    MOV   A,0x1
    2F92: 08       PUSH  A
    2F93: 9F C6    CALL  _Time_Pause
    2F95: 38 FF    ADD   SP,0xFF
(0038) 	Rtc_ReadFromRtc();
    2F97: 7C 2B 23 LCALL _Rtc_ReadFromRtc
(0039) 
(0040) 	if(datetime._02h.bits_24hrs._1224hr != h12)
    2F9A: 62 D0 00 MOV   REG[0xD0],0x0
    2F9D: 51 C6    MOV   A,[datetime+2]
    2F9F: 62 D0 00 MOV   REG[0xD0],0x0
    2FA2: 67       ASR   A
    2FA3: 67       ASR   A
    2FA4: 67       ASR   A
    2FA5: 67       ASR   A
    2FA6: 67       ASR   A
    2FA7: 67       ASR   A
    2FA8: 21 03    AND   A,0x3
    2FAA: 53 C3    MOV   [__r0],A
    2FAC: 26 C3 01 AND   [__r0],0x1
    2FAF: 51 C3    MOV   A,[__r0]
    2FB1: 3B FC    CMP   A,[X-4]
    2FB3: A1 7F    JZ    0x3133
(0041) 	{
(0042) 		if(h12)
    2FB5: 3D FC 00 CMP   [X-4],0x0
    2FB8: A0 B6    JZ    0x306F
(0043) 		{
(0044) 			// Convert from 24h to 12h
(0045) 			bcdToDec(datetime._02h.bits_24hrs.hours10, datetime._02h.bits_24hrs.hours, &hours);
    2FBA: 50 07    MOV   A,0x7
    2FBC: 08       PUSH  A
    2FBD: 10       PUSH  X
    2FBE: 62 D0 00 MOV   REG[0xD0],0x0
    2FC1: 51 C6    MOV   A,[datetime+2]
    2FC3: 21 0F    AND   A,0xF
    2FC5: 08       PUSH  A
    2FC6: 51 C6    MOV   A,[datetime+2]
    2FC8: 62 D0 00 MOV   REG[0xD0],0x0
    2FCB: 67       ASR   A
    2FCC: 67       ASR   A
    2FCD: 67       ASR   A
    2FCE: 67       ASR   A
    2FCF: 21 0F    AND   A,0xF
    2FD1: 53 C3    MOV   [__r0],A
    2FD3: 26 C3 03 AND   [__r0],0x3
    2FD6: 51 C3    MOV   A,[__r0]
    2FD8: 08       PUSH  A
    2FD9: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    2FDC: 38 FC    ADD   SP,0xFC
(0046) 			if(hours >= 12)
    2FDE: 3D 00 0C CMP   [X+0],0xC
    2FE1: C0 1B    JC    0x2FFD
(0047) 			{
(0048) 				datetime._02h.bits_ampm.ampm = 1;
    2FE3: 62 D0 00 MOV   REG[0xD0],0x0
    2FE6: 51 C6    MOV   A,[datetime+2]
    2FE8: 29 20    OR    A,0x20
    2FEA: 53 C6    MOV   [datetime+2],A
(0049) 				if(hours > 12) hours -= 12;
    2FEC: 50 0C    MOV   A,0xC
    2FEE: 3B 00    CMP   A,[X+0]
    2FF0: D0 1D    JNC   0x300E
    2FF2: 62 D0 00 MOV   REG[0xD0],0x0
    2FF5: 52 00    MOV   A,[X+0]
    2FF7: 11 0C    SUB   A,0xC
    2FF9: 54 00    MOV   [X+0],A
(0050) 			}
    2FFB: 80 12    JMP   0x300E
(0051) 			else
(0052) 			{
(0053) 				datetime._02h.bits_ampm.ampm = 0;
    2FFD: 62 D0 00 MOV   REG[0xD0],0x0
    3000: 51 C6    MOV   A,[datetime+2]
    3002: 21 DF    AND   A,0xDF
    3004: 53 C6    MOV   [datetime+2],A
(0054) 				if(hours == 0) hours = 12;
    3006: 3D 00 00 CMP   [X+0],0x0
    3009: B0 04    JNZ   0x300E
    300B: 56 00 0C MOV   [X+0],0xC
(0055) 			}
(0056) 			decToBcd(&bcd10 , &bcd, hours);
    300E: 52 00    MOV   A,[X+0]
    3010: 08       PUSH  A
    3011: 62 D0 00 MOV   REG[0xD0],0x0
    3014: 5A C2    MOV   [__r1],X
    3016: 06 C2 02 ADD   [__r1],0x2
    3019: 50 07    MOV   A,0x7
    301B: 08       PUSH  A
    301C: 51 C2    MOV   A,[__r1]
    301E: 08       PUSH  A
    301F: 5A C2    MOV   [__r1],X
    3021: 06 C2 01 ADD   [__r1],0x1
    3024: 50 07    MOV   A,0x7
    3026: 08       PUSH  A
    3027: 51 C2    MOV   A,[__r1]
    3029: 08       PUSH  A
    302A: 7C 0F 6D LCALL _decToBcd
    302D: 38 FB    ADD   SP,0xFB
(0057) 			datetime._02h.bits_ampm.hours10 = bcd10;
    302F: 62 D0 00 MOV   REG[0xD0],0x0
    3032: 52 01    MOV   A,[X+1]
    3034: 21 01    AND   A,0x1
    3036: 64       ASL   A
    3037: 64       ASL   A
    3038: 64       ASL   A
    3039: 64       ASL   A
    303A: 53 C3    MOV   [__r0],A
    303C: 26 C3 10 AND   [__r0],0x10
    303F: 62 D0 00 MOV   REG[0xD0],0x0
    3042: 51 C6    MOV   A,[datetime+2]
    3044: 21 EF    AND   A,0xEF
    3046: 62 D0 00 MOV   REG[0xD0],0x0
    3049: 2A C3    OR    A,[__r0]
    304B: 62 D0 00 MOV   REG[0xD0],0x0
    304E: 53 C6    MOV   [datetime+2],A
(0058) 			datetime._02h.bits_ampm.hours = bcd;
    3050: 62 D0 00 MOV   REG[0xD0],0x0
    3053: 52 02    MOV   A,[X+2]
    3055: 21 0F    AND   A,0xF
    3057: 53 C3    MOV   [__r0],A
    3059: 26 C3 0F AND   [__r0],0xF
    305C: 62 D0 00 MOV   REG[0xD0],0x0
    305F: 51 C6    MOV   A,[datetime+2]
    3061: 21 F0    AND   A,0xF0
    3063: 62 D0 00 MOV   REG[0xD0],0x0
    3066: 2A C3    OR    A,[__r0]
    3068: 62 D0 00 MOV   REG[0xD0],0x0
    306B: 53 C6    MOV   [datetime+2],A
(0059) 		}
    306D: 80 C5    JMP   0x3133
(0060) 		else
(0061) 		{
(0062) 			// Convert from 12h to 24h
(0063) 			bcdToDec(datetime._02h.bits_ampm.hours10, datetime._02h.bits_ampm.hours, &hours);
    306F: 50 07    MOV   A,0x7
    3071: 08       PUSH  A
    3072: 10       PUSH  X
    3073: 62 D0 00 MOV   REG[0xD0],0x0
    3076: 51 C6    MOV   A,[datetime+2]
    3078: 21 0F    AND   A,0xF
    307A: 08       PUSH  A
    307B: 51 C6    MOV   A,[datetime+2]
    307D: 62 D0 00 MOV   REG[0xD0],0x0
    3080: 67       ASR   A
    3081: 67       ASR   A
    3082: 67       ASR   A
    3083: 67       ASR   A
    3084: 21 0F    AND   A,0xF
    3086: 53 C3    MOV   [__r0],A
    3088: 26 C3 01 AND   [__r0],0x1
    308B: 51 C3    MOV   A,[__r0]
    308D: 08       PUSH  A
    308E: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3091: 38 FC    ADD   SP,0xFC
(0064) 			if(datetime._02h.bits_ampm.ampm == 1 && hours != 12)
    3093: 62 D0 00 MOV   REG[0xD0],0x0
    3096: 51 C6    MOV   A,[datetime+2]
    3098: 62 D0 00 MOV   REG[0xD0],0x0
    309B: 67       ASR   A
    309C: 67       ASR   A
    309D: 67       ASR   A
    309E: 67       ASR   A
    309F: 67       ASR   A
    30A0: 21 07    AND   A,0x7
    30A2: 53 C3    MOV   [__r0],A
    30A4: 26 C3 01 AND   [__r0],0x1
    30A7: 3C C3 01 CMP   [__r0],0x1
    30AA: B0 0B    JNZ   0x30B6
    30AC: 3D 00 0C CMP   [X+0],0xC
    30AF: A0 06    JZ    0x30B6
(0065) 			{
(0066) 				hours += 12;
    30B1: 07 00 0C ADD   [X+0],0xC
(0067) 			}
    30B4: 80 1F    JMP   0x30D4
(0068) 			else if(datetime._02h.bits_ampm.ampm == 0 && hours == 12)
    30B6: 62 D0 00 MOV   REG[0xD0],0x0
    30B9: 51 C6    MOV   A,[datetime+2]
    30BB: 62 D0 00 MOV   REG[0xD0],0x0
    30BE: 67       ASR   A
    30BF: 67       ASR   A
    30C0: 67       ASR   A
    30C1: 67       ASR   A
    30C2: 67       ASR   A
    30C3: 21 07    AND   A,0x7
    30C5: 53 C3    MOV   [__r0],A
    30C7: 26 C3 01 AND   [__r0],0x1
    30CA: B0 09    JNZ   0x30D4
    30CC: 3D 00 0C CMP   [X+0],0xC
    30CF: B0 04    JNZ   0x30D4
(0069) 			{
(0070) 				hours = 0;
    30D1: 56 00 00 MOV   [X+0],0x0
(0071) 			}
(0072) 			decToBcd(&bcd10 , &bcd, hours);
    30D4: 52 00    MOV   A,[X+0]
    30D6: 08       PUSH  A
    30D7: 62 D0 00 MOV   REG[0xD0],0x0
    30DA: 5A C2    MOV   [__r1],X
    30DC: 06 C2 02 ADD   [__r1],0x2
    30DF: 50 07    MOV   A,0x7
    30E1: 08       PUSH  A
    30E2: 51 C2    MOV   A,[__r1]
    30E4: 08       PUSH  A
    30E5: 5A C2    MOV   [__r1],X
    30E7: 06 C2 01 ADD   [__r1],0x1
    30EA: 50 07    MOV   A,0x7
    30EC: 08       PUSH  A
    30ED: 51 C2    MOV   A,[__r1]
    30EF: 08       PUSH  A
    30F0: 7C 0F 6D LCALL _decToBcd
    30F3: 38 FB    ADD   SP,0xFB
(0073) 			datetime._02h.bits_24hrs.hours10 = bcd10;
    30F5: 62 D0 00 MOV   REG[0xD0],0x0
    30F8: 52 01    MOV   A,[X+1]
    30FA: 21 03    AND   A,0x3
    30FC: 64       ASL   A
    30FD: 64       ASL   A
    30FE: 64       ASL   A
    30FF: 64       ASL   A
    3100: 53 C3    MOV   [__r0],A
    3102: 26 C3 30 AND   [__r0],0x30
    3105: 62 D0 00 MOV   REG[0xD0],0x0
    3108: 51 C6    MOV   A,[datetime+2]
    310A: 21 CF    AND   A,0xCF
    310C: 62 D0 00 MOV   REG[0xD0],0x0
    310F: 2A C3    OR    A,[__r0]
    3111: 62 D0 00 MOV   REG[0xD0],0x0
    3114: 53 C6    MOV   [datetime+2],A
(0074) 			datetime._02h.bits_24hrs.hours = bcd;
    3116: 62 D0 00 MOV   REG[0xD0],0x0
    3119: 52 02    MOV   A,[X+2]
    311B: 21 0F    AND   A,0xF
    311D: 53 C3    MOV   [__r0],A
    311F: 26 C3 0F AND   [__r0],0xF
    3122: 62 D0 00 MOV   REG[0xD0],0x0
    3125: 51 C6    MOV   A,[datetime+2]
    3127: 21 F0    AND   A,0xF0
    3129: 62 D0 00 MOV   REG[0xD0],0x0
    312C: 2A C3    OR    A,[__r0]
    312E: 62 D0 00 MOV   REG[0xD0],0x0
    3131: 53 C6    MOV   [datetime+2],A
(0075) 		}
(0076) 	}
(0077) 
(0078) 	datetime._02h.bits_24hrs._1224hr = h12;
    3133: 62 D0 00 MOV   REG[0xD0],0x0
    3136: 52 FC    MOV   A,[X-4]
    3138: 21 01    AND   A,0x1
    313A: 64       ASL   A
    313B: 64       ASL   A
    313C: 64       ASL   A
    313D: 64       ASL   A
    313E: 64       ASL   A
    313F: 64       ASL   A
    3140: 53 C3    MOV   [__r0],A
    3142: 26 C3 40 AND   [__r0],0x40
    3145: 62 D0 00 MOV   REG[0xD0],0x0
    3148: 51 C6    MOV   A,[datetime+2]
    314A: 21 BF    AND   A,0xBF
    314C: 62 D0 00 MOV   REG[0xD0],0x0
    314F: 2A C3    OR    A,[__r0]
    3151: 62 D0 00 MOV   REG[0xD0],0x0
    3154: 53 C6    MOV   [datetime+2],A
(0079) 
(0080) 	Rtc_WriteToRtc();
    3156: 7C 2B 0F LCALL _Rtc_WriteToRtc
    3159: 62 D0 00 MOV   REG[0xD0],0x0
(0081) 	Time_Pause(FALSE);
    315C: 50 00    MOV   A,0x0
    315E: 08       PUSH  A
    315F: 9D FA    CALL  _Time_Pause
    3161: 38 FF    ADD   SP,0xFF
    3163: 38 FD    ADD   SP,0xFD
    3165: 20       POP   X
    3166: 7F       RET   
(0082) }
(0083) 
(0084) void Time_Adj_S(BOOL direction)
(0085) {
_Time_Adj_S:
  bcd                  --> X+2
  bcd10                --> X+1
  seconds              --> X+0
  direction            --> X-4
    3167: 10       PUSH  X
    3168: 4F       MOV   X,SP
    3169: 38 03    ADD   SP,0x3
(0086) 	BYTE seconds, bcd10, bcd;
(0087) 	
(0088) 	Time_Pause(TRUE);
    316B: 50 01    MOV   A,0x1
    316D: 08       PUSH  A
    316E: 9D EB    CALL  _Time_Pause
(0089) 	Rtc_ReadFromRtc();
    3170: 7C 2B 23 LCALL _Rtc_ReadFromRtc
(0090) 
(0091) 	bcdToDec(datetime._00h.bits.seconds10, datetime._00h.bits.seconds, &seconds);
    3173: 50 07    MOV   A,0x7
    3175: 08       PUSH  A
    3176: 10       PUSH  X
    3177: 62 D0 00 MOV   REG[0xD0],0x0
    317A: 51 C4    MOV   A,[datetime]
    317C: 21 0F    AND   A,0xF
    317E: 08       PUSH  A
    317F: 51 C4    MOV   A,[datetime]
    3181: 62 D0 00 MOV   REG[0xD0],0x0
    3184: 67       ASR   A
    3185: 67       ASR   A
    3186: 67       ASR   A
    3187: 67       ASR   A
    3188: 21 0F    AND   A,0xF
    318A: 53 C3    MOV   [__r0],A
    318C: 26 C3 07 AND   [__r0],0x7
    318F: 51 C3    MOV   A,[__r0]
    3191: 08       PUSH  A
    3192: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3195: 38 FB    ADD   SP,0xFB
(0092) 
(0093) 	if(direction == TIME_UP)
    3197: 3D FC 01 CMP   [X-4],0x1
    319A: B0 0F    JNZ   0x31AA
(0094) 	{
(0095) 		if(seconds < 59) seconds++;
    319C: 3D 00 3B CMP   [X+0],0x3B
    319F: D0 05    JNC   0x31A5
    31A1: 77 00    INC   [X+0]
    31A3: 80 13    JMP   0x31B7
(0096) 		else seconds = 0;
    31A5: 56 00 00 MOV   [X+0],0x0
(0097) 	}
    31A8: 80 0E    JMP   0x31B7
(0098) 	else
(0099) 	{
(0100) 		if(seconds > 0) seconds--;
    31AA: 50 00    MOV   A,0x0
    31AC: 3B 00    CMP   A,[X+0]
    31AE: D0 05    JNC   0x31B4
    31B0: 7B 00    DEC   [X+0]
    31B2: 80 04    JMP   0x31B7
(0101) 		else seconds = 59;
    31B4: 56 00 3B MOV   [X+0],0x3B
(0102) 	}
(0103) 
(0104) 	decToBcd(&bcd10, &bcd, seconds);
    31B7: 52 00    MOV   A,[X+0]
    31B9: 08       PUSH  A
    31BA: 62 D0 00 MOV   REG[0xD0],0x0
    31BD: 5A C2    MOV   [__r1],X
    31BF: 06 C2 02 ADD   [__r1],0x2
    31C2: 50 07    MOV   A,0x7
    31C4: 08       PUSH  A
    31C5: 51 C2    MOV   A,[__r1]
    31C7: 08       PUSH  A
    31C8: 5A C2    MOV   [__r1],X
    31CA: 06 C2 01 ADD   [__r1],0x1
    31CD: 50 07    MOV   A,0x7
    31CF: 08       PUSH  A
    31D0: 51 C2    MOV   A,[__r1]
    31D2: 08       PUSH  A
    31D3: 7C 0F 6D LCALL _decToBcd
(0105) 
(0106) 	datetime._00h.bits.seconds = bcd;
    31D6: 62 D0 00 MOV   REG[0xD0],0x0
    31D9: 52 02    MOV   A,[X+2]
    31DB: 21 0F    AND   A,0xF
    31DD: 53 C3    MOV   [__r0],A
    31DF: 26 C3 0F AND   [__r0],0xF
    31E2: 62 D0 00 MOV   REG[0xD0],0x0
    31E5: 51 C4    MOV   A,[datetime]
    31E7: 21 F0    AND   A,0xF0
    31E9: 62 D0 00 MOV   REG[0xD0],0x0
    31EC: 2A C3    OR    A,[__r0]
    31EE: 62 D0 00 MOV   REG[0xD0],0x0
    31F1: 53 C4    MOV   [datetime],A
(0107) 	datetime._00h.bits.seconds10 = bcd10;
    31F3: 62 D0 00 MOV   REG[0xD0],0x0
    31F6: 52 01    MOV   A,[X+1]
    31F8: 21 07    AND   A,0x7
    31FA: 64       ASL   A
    31FB: 64       ASL   A
    31FC: 64       ASL   A
    31FD: 64       ASL   A
    31FE: 53 C3    MOV   [__r0],A
    3200: 26 C3 70 AND   [__r0],0x70
    3203: 62 D0 00 MOV   REG[0xD0],0x0
    3206: 51 C4    MOV   A,[datetime]
    3208: 21 8F    AND   A,0x8F
    320A: 62 D0 00 MOV   REG[0xD0],0x0
    320D: 2A C3    OR    A,[__r0]
    320F: 62 D0 00 MOV   REG[0xD0],0x0
    3212: 53 C4    MOV   [datetime],A
(0108) 
(0109) 	Rtc_WriteToRtc();
    3214: 7C 2B 0F LCALL _Rtc_WriteToRtc
    3217: 62 D0 00 MOV   REG[0xD0],0x0
(0110) 	Time_Pause(FALSE);
    321A: 50 00    MOV   A,0x0
    321C: 08       PUSH  A
    321D: 9D 3C    CALL  _Time_Pause
    321F: 38 FA    ADD   SP,0xFA
    3221: 38 FD    ADD   SP,0xFD
    3223: 20       POP   X
    3224: 7F       RET   
(0111) }
(0112) 
(0113) void Time_Adj_Mi(BOOL direction)
(0114) {
_Time_Adj_Mi:
  bcd                  --> X+2
  bcd10                --> X+1
  minutes              --> X+0
  direction            --> X-4
    3225: 10       PUSH  X
    3226: 4F       MOV   X,SP
    3227: 38 03    ADD   SP,0x3
(0115) 	BYTE minutes, bcd10, bcd;
(0116) 
(0117) 	Time_Pause(TRUE);
    3229: 50 01    MOV   A,0x1
    322B: 08       PUSH  A
    322C: 9D 2D    CALL  _Time_Pause
(0118) 	Rtc_ReadFromRtc();
    322E: 7C 2B 23 LCALL _Rtc_ReadFromRtc
(0119) 
(0120) 	bcdToDec(datetime._01h.bits.minutes10, datetime._01h.bits.minutes, &minutes);
    3231: 50 07    MOV   A,0x7
    3233: 08       PUSH  A
    3234: 10       PUSH  X
    3235: 62 D0 00 MOV   REG[0xD0],0x0
    3238: 51 C5    MOV   A,[datetime+1]
    323A: 21 0F    AND   A,0xF
    323C: 08       PUSH  A
    323D: 51 C5    MOV   A,[datetime+1]
    323F: 62 D0 00 MOV   REG[0xD0],0x0
    3242: 67       ASR   A
    3243: 67       ASR   A
    3244: 67       ASR   A
    3245: 67       ASR   A
    3246: 21 0F    AND   A,0xF
    3248: 53 C3    MOV   [__r0],A
    324A: 26 C3 07 AND   [__r0],0x7
    324D: 51 C3    MOV   A,[__r0]
    324F: 08       PUSH  A
    3250: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3253: 38 FB    ADD   SP,0xFB
(0121) 
(0122) 	if(direction == TIME_UP)
    3255: 3D FC 01 CMP   [X-4],0x1
    3258: B0 0F    JNZ   0x3268
(0123) 	{
(0124) 		if(minutes < 59) minutes++;
    325A: 3D 00 3B CMP   [X+0],0x3B
    325D: D0 05    JNC   0x3263
    325F: 77 00    INC   [X+0]
    3261: 80 13    JMP   0x3275
(0125) 		else minutes = 0;
    3263: 56 00 00 MOV   [X+0],0x0
(0126) 	}
    3266: 80 0E    JMP   0x3275
(0127) 	else
(0128) 	{
(0129) 		if(minutes > 0) minutes--;
    3268: 50 00    MOV   A,0x0
    326A: 3B 00    CMP   A,[X+0]
    326C: D0 05    JNC   0x3272
    326E: 7B 00    DEC   [X+0]
    3270: 80 04    JMP   0x3275
(0130) 		else minutes = 59;
    3272: 56 00 3B MOV   [X+0],0x3B
(0131) 	}
(0132) 
(0133) 	decToBcd(&bcd10, &bcd, minutes);
    3275: 52 00    MOV   A,[X+0]
    3277: 08       PUSH  A
    3278: 62 D0 00 MOV   REG[0xD0],0x0
    327B: 5A C2    MOV   [__r1],X
    327D: 06 C2 02 ADD   [__r1],0x2
    3280: 50 07    MOV   A,0x7
    3282: 08       PUSH  A
    3283: 51 C2    MOV   A,[__r1]
    3285: 08       PUSH  A
    3286: 5A C2    MOV   [__r1],X
    3288: 06 C2 01 ADD   [__r1],0x1
    328B: 50 07    MOV   A,0x7
    328D: 08       PUSH  A
    328E: 51 C2    MOV   A,[__r1]
    3290: 08       PUSH  A
    3291: 7C 0F 6D LCALL _decToBcd
(0134) 
(0135) 	datetime._01h.bits.minutes = bcd;
    3294: 62 D0 00 MOV   REG[0xD0],0x0
    3297: 52 02    MOV   A,[X+2]
    3299: 21 0F    AND   A,0xF
    329B: 53 C3    MOV   [__r0],A
    329D: 26 C3 0F AND   [__r0],0xF
    32A0: 62 D0 00 MOV   REG[0xD0],0x0
    32A3: 51 C5    MOV   A,[datetime+1]
    32A5: 21 F0    AND   A,0xF0
    32A7: 62 D0 00 MOV   REG[0xD0],0x0
    32AA: 2A C3    OR    A,[__r0]
    32AC: 62 D0 00 MOV   REG[0xD0],0x0
    32AF: 53 C5    MOV   [datetime+1],A
(0136) 	datetime._01h.bits.minutes10 = bcd10;
    32B1: 62 D0 00 MOV   REG[0xD0],0x0
    32B4: 52 01    MOV   A,[X+1]
    32B6: 21 07    AND   A,0x7
    32B8: 64       ASL   A
    32B9: 64       ASL   A
    32BA: 64       ASL   A
    32BB: 64       ASL   A
    32BC: 53 C3    MOV   [__r0],A
    32BE: 26 C3 70 AND   [__r0],0x70
    32C1: 62 D0 00 MOV   REG[0xD0],0x0
    32C4: 51 C5    MOV   A,[datetime+1]
    32C6: 21 8F    AND   A,0x8F
    32C8: 62 D0 00 MOV   REG[0xD0],0x0
    32CB: 2A C3    OR    A,[__r0]
    32CD: 62 D0 00 MOV   REG[0xD0],0x0
    32D0: 53 C5    MOV   [datetime+1],A
(0137) 
(0138) 	Rtc_WriteToRtc();
    32D2: 7C 2B 0F LCALL _Rtc_WriteToRtc
    32D5: 62 D0 00 MOV   REG[0xD0],0x0
(0139) 	Time_Pause(FALSE);
    32D8: 50 00    MOV   A,0x0
    32DA: 08       PUSH  A
    32DB: 9C 7E    CALL  _Time_Pause
    32DD: 38 FA    ADD   SP,0xFA
    32DF: 38 FD    ADD   SP,0xFD
    32E1: 20       POP   X
    32E2: 7F       RET   
(0140) }
(0141) 
(0142) void Time_Adj_H(BOOL direction)
(0143) {
_Time_Adj_H:
  maxVal               --> X+5
  minVal               --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  h12                  --> X+1
  hours                --> X+0
  direction            --> X-4
    32E3: 10       PUSH  X
    32E4: 4F       MOV   X,SP
    32E5: 38 08    ADD   SP,0x8
(0144) 	BYTE hours, bcd10, bcd, minVal, maxVal;
(0145) 	BOOL h12;
(0146) 
(0147) 	Time_Pause(TRUE);
    32E7: 50 01    MOV   A,0x1
    32E9: 08       PUSH  A
    32EA: 9C 6F    CALL  _Time_Pause
    32EC: 38 FF    ADD   SP,0xFF
(0148) 	Rtc_ReadFromRtc();
    32EE: 7C 2B 23 LCALL _Rtc_ReadFromRtc
(0149) 
(0150) 	h12 = datetime._02h.bits_24hrs._1224hr;
    32F1: 62 D0 00 MOV   REG[0xD0],0x0
    32F4: 51 C6    MOV   A,[datetime+2]
    32F6: 62 D0 00 MOV   REG[0xD0],0x0
    32F9: 67       ASR   A
    32FA: 67       ASR   A
    32FB: 67       ASR   A
    32FC: 67       ASR   A
    32FD: 67       ASR   A
    32FE: 67       ASR   A
    32FF: 21 03    AND   A,0x3
    3301: 53 C3    MOV   [__r0],A
    3303: 26 C3 01 AND   [__r0],0x1
    3306: 51 C3    MOV   A,[__r0]
    3308: 54 01    MOV   [X+1],A
(0151) 
(0152) 	// Check if ampm or 24h
(0153) 	if(h12)
    330A: 3D 01 00 CMP   [X+1],0x0
    330D: A0 2D    JZ    0x333B
(0154) 	{
(0155) 		//12 hrs
(0156) 		bcdToDec(datetime._02h.bits_ampm.hours10, datetime._02h.bits_ampm.hours, &hours);
    330F: 50 07    MOV   A,0x7
    3311: 08       PUSH  A
    3312: 10       PUSH  X
    3313: 62 D0 00 MOV   REG[0xD0],0x0
    3316: 51 C6    MOV   A,[datetime+2]
    3318: 21 0F    AND   A,0xF
    331A: 08       PUSH  A
    331B: 51 C6    MOV   A,[datetime+2]
    331D: 62 D0 00 MOV   REG[0xD0],0x0
    3320: 67       ASR   A
    3321: 67       ASR   A
    3322: 67       ASR   A
    3323: 67       ASR   A
    3324: 21 0F    AND   A,0xF
    3326: 53 C3    MOV   [__r0],A
    3328: 26 C3 01 AND   [__r0],0x1
    332B: 51 C3    MOV   A,[__r0]
    332D: 08       PUSH  A
    332E: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3331: 38 FC    ADD   SP,0xFC
(0157) 		maxVal = 12;
    3333: 56 05 0C MOV   [X+5],0xC
(0158) 		minVal = 1;
    3336: 56 04 01 MOV   [X+4],0x1
(0159) 	}
    3339: 80 2B    JMP   0x3365
(0160) 	else
(0161) 	{
(0162) 		//24 hrs
(0163) 		bcdToDec(datetime._02h.bits_24hrs.hours10, datetime._02h.bits_24hrs.hours, &hours);
    333B: 50 07    MOV   A,0x7
    333D: 08       PUSH  A
    333E: 10       PUSH  X
    333F: 62 D0 00 MOV   REG[0xD0],0x0
    3342: 51 C6    MOV   A,[datetime+2]
    3344: 21 0F    AND   A,0xF
    3346: 08       PUSH  A
    3347: 51 C6    MOV   A,[datetime+2]
    3349: 62 D0 00 MOV   REG[0xD0],0x0
    334C: 67       ASR   A
    334D: 67       ASR   A
    334E: 67       ASR   A
    334F: 67       ASR   A
    3350: 21 0F    AND   A,0xF
    3352: 53 C3    MOV   [__r0],A
    3354: 26 C3 03 AND   [__r0],0x3
    3357: 51 C3    MOV   A,[__r0]
    3359: 08       PUSH  A
    335A: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    335D: 38 FC    ADD   SP,0xFC
(0164) 		maxVal = 23;
    335F: 56 05 17 MOV   [X+5],0x17
(0165) 		minVal = 0;
    3362: 56 04 00 MOV   [X+4],0x0
(0166) 	}
(0167) 
(0168) 
(0169) 	if(direction == TIME_UP)
    3365: 3D FC 01 CMP   [X-4],0x1
    3368: B0 61    JNZ   0x33CA
(0170) 	{
(0171) 		if(hours < maxVal) hours++;
    336A: 52 00    MOV   A,[X+0]
    336C: 3B 05    CMP   A,[X+5]
    336E: D0 05    JNC   0x3374
    3370: 77 00    INC   [X+0]
    3372: 80 B5    JMP   0x3428
(0172) 		else 
(0173) 		{
(0174) 			hours = minVal;
    3374: 52 04    MOV   A,[X+4]
    3376: 54 00    MOV   [X+0],A
(0175) 			if(h12) datetime._02h.bits_ampm.ampm = !datetime._02h.bits_ampm.ampm;
    3378: 3D 01 00 CMP   [X+1],0x0
    337B: A0 AC    JZ    0x3428
    337D: 62 D0 00 MOV   REG[0xD0],0x0
    3380: 51 C6    MOV   A,[datetime+2]
    3382: 62 D0 00 MOV   REG[0xD0],0x0
    3385: 67       ASR   A
    3386: 67       ASR   A
    3387: 67       ASR   A
    3388: 67       ASR   A
    3389: 67       ASR   A
    338A: 21 07    AND   A,0x7
    338C: 53 C3    MOV   [__r0],A
    338E: 26 C3 01 AND   [__r0],0x1
    3391: B0 09    JNZ   0x339B
    3393: 56 07 01 MOV   [X+7],0x1
    3396: 56 06 00 MOV   [X+6],0x0
    3399: 80 07    JMP   0x33A1
    339B: 56 07 00 MOV   [X+7],0x0
    339E: 56 06 00 MOV   [X+6],0x0
    33A1: 62 D0 00 MOV   REG[0xD0],0x0
    33A4: 52 07    MOV   A,[X+7]
    33A6: 53 C3    MOV   [__r0],A
    33A8: 26 C3 01 AND   [__r0],0x1
    33AB: 51 C3    MOV   A,[__r0]
    33AD: 64       ASL   A
    33AE: 64       ASL   A
    33AF: 64       ASL   A
    33B0: 64       ASL   A
    33B1: 64       ASL   A
    33B2: 53 C3    MOV   [__r0],A
    33B4: 26 C3 20 AND   [__r0],0x20
    33B7: 62 D0 00 MOV   REG[0xD0],0x0
    33BA: 51 C6    MOV   A,[datetime+2]
    33BC: 21 DF    AND   A,0xDF
    33BE: 62 D0 00 MOV   REG[0xD0],0x0
    33C1: 2A C3    OR    A,[__r0]
    33C3: 62 D0 00 MOV   REG[0xD0],0x0
    33C6: 53 C6    MOV   [datetime+2],A
(0176) 		}
(0177) 	}
    33C8: 80 5F    JMP   0x3428
(0178) 	else
(0179) 	{
(0180) 		if(hours > minVal) hours--;
    33CA: 52 04    MOV   A,[X+4]
    33CC: 3B 00    CMP   A,[X+0]
    33CE: D0 05    JNC   0x33D4
    33D0: 7B 00    DEC   [X+0]
    33D2: 80 55    JMP   0x3428
(0181) 		else 
(0182) 		{
(0183) 			hours = maxVal;
    33D4: 52 05    MOV   A,[X+5]
    33D6: 54 00    MOV   [X+0],A
(0184) 			if(h12) datetime._02h.bits_ampm.ampm = !datetime._02h.bits_ampm.ampm;
    33D8: 3D 01 00 CMP   [X+1],0x0
    33DB: A0 4C    JZ    0x3428
    33DD: 62 D0 00 MOV   REG[0xD0],0x0
    33E0: 51 C6    MOV   A,[datetime+2]
    33E2: 62 D0 00 MOV   REG[0xD0],0x0
    33E5: 67       ASR   A
    33E6: 67       ASR   A
    33E7: 67       ASR   A
    33E8: 67       ASR   A
    33E9: 67       ASR   A
    33EA: 21 07    AND   A,0x7
    33EC: 53 C3    MOV   [__r0],A
    33EE: 26 C3 01 AND   [__r0],0x1
    33F1: B0 09    JNZ   0x33FB
    33F3: 56 07 01 MOV   [X+7],0x1
    33F6: 56 06 00 MOV   [X+6],0x0
    33F9: 80 07    JMP   0x3401
    33FB: 56 07 00 MOV   [X+7],0x0
    33FE: 56 06 00 MOV   [X+6],0x0
    3401: 62 D0 00 MOV   REG[0xD0],0x0
    3404: 52 07    MOV   A,[X+7]
    3406: 53 C3    MOV   [__r0],A
    3408: 26 C3 01 AND   [__r0],0x1
    340B: 51 C3    MOV   A,[__r0]
    340D: 64       ASL   A
    340E: 64       ASL   A
    340F: 64       ASL   A
    3410: 64       ASL   A
    3411: 64       ASL   A
    3412: 53 C3    MOV   [__r0],A
    3414: 26 C3 20 AND   [__r0],0x20
    3417: 62 D0 00 MOV   REG[0xD0],0x0
    341A: 51 C6    MOV   A,[datetime+2]
    341C: 21 DF    AND   A,0xDF
    341E: 62 D0 00 MOV   REG[0xD0],0x0
    3421: 2A C3    OR    A,[__r0]
    3423: 62 D0 00 MOV   REG[0xD0],0x0
    3426: 53 C6    MOV   [datetime+2],A
(0185) 		}
(0186) 	}
(0187) 
(0188) 	decToBcd(&bcd10, &bcd, hours);
    3428: 52 00    MOV   A,[X+0]
    342A: 08       PUSH  A
    342B: 62 D0 00 MOV   REG[0xD0],0x0
    342E: 5A C2    MOV   [__r1],X
    3430: 06 C2 03 ADD   [__r1],0x3
    3433: 50 07    MOV   A,0x7
    3435: 08       PUSH  A
    3436: 51 C2    MOV   A,[__r1]
    3438: 08       PUSH  A
    3439: 5A C2    MOV   [__r1],X
    343B: 06 C2 02 ADD   [__r1],0x2
    343E: 50 07    MOV   A,0x7
    3440: 08       PUSH  A
    3441: 51 C2    MOV   A,[__r1]
    3443: 08       PUSH  A
    3444: 7C 0F 6D LCALL _decToBcd
    3447: 38 FB    ADD   SP,0xFB
(0189) 
(0190) 	if(h12)
    3449: 3D 01 00 CMP   [X+1],0x0
    344C: A0 41    JZ    0x348E
(0191) 	{
(0192) 		datetime._02h.bits_ampm.hours = bcd;
    344E: 62 D0 00 MOV   REG[0xD0],0x0
    3451: 52 03    MOV   A,[X+3]
    3453: 21 0F    AND   A,0xF
    3455: 53 C3    MOV   [__r0],A
    3457: 26 C3 0F AND   [__r0],0xF
    345A: 62 D0 00 MOV   REG[0xD0],0x0
    345D: 51 C6    MOV   A,[datetime+2]
    345F: 21 F0    AND   A,0xF0
    3461: 62 D0 00 MOV   REG[0xD0],0x0
    3464: 2A C3    OR    A,[__r0]
    3466: 62 D0 00 MOV   REG[0xD0],0x0
    3469: 53 C6    MOV   [datetime+2],A
(0193) 		datetime._02h.bits_ampm.hours10 = bcd10;
    346B: 62 D0 00 MOV   REG[0xD0],0x0
    346E: 52 02    MOV   A,[X+2]
    3470: 21 01    AND   A,0x1
    3472: 64       ASL   A
    3473: 64       ASL   A
    3474: 64       ASL   A
    3475: 64       ASL   A
    3476: 53 C3    MOV   [__r0],A
    3478: 26 C3 10 AND   [__r0],0x10
    347B: 62 D0 00 MOV   REG[0xD0],0x0
    347E: 51 C6    MOV   A,[datetime+2]
    3480: 21 EF    AND   A,0xEF
    3482: 62 D0 00 MOV   REG[0xD0],0x0
    3485: 2A C3    OR    A,[__r0]
    3487: 62 D0 00 MOV   REG[0xD0],0x0
    348A: 53 C6    MOV   [datetime+2],A
(0194) 	}
    348C: 80 3F    JMP   0x34CC
(0195) 	else
(0196) 	{
(0197) 		datetime._02h.bits_24hrs.hours = bcd;
    348E: 62 D0 00 MOV   REG[0xD0],0x0
    3491: 52 03    MOV   A,[X+3]
    3493: 21 0F    AND   A,0xF
    3495: 53 C3    MOV   [__r0],A
    3497: 26 C3 0F AND   [__r0],0xF
    349A: 62 D0 00 MOV   REG[0xD0],0x0
    349D: 51 C6    MOV   A,[datetime+2]
    349F: 21 F0    AND   A,0xF0
    34A1: 62 D0 00 MOV   REG[0xD0],0x0
    34A4: 2A C3    OR    A,[__r0]
    34A6: 62 D0 00 MOV   REG[0xD0],0x0
    34A9: 53 C6    MOV   [datetime+2],A
(0198) 		datetime._02h.bits_24hrs.hours10 = bcd10;
    34AB: 62 D0 00 MOV   REG[0xD0],0x0
    34AE: 52 02    MOV   A,[X+2]
    34B0: 21 03    AND   A,0x3
    34B2: 64       ASL   A
    34B3: 64       ASL   A
    34B4: 64       ASL   A
    34B5: 64       ASL   A
    34B6: 53 C3    MOV   [__r0],A
    34B8: 26 C3 30 AND   [__r0],0x30
    34BB: 62 D0 00 MOV   REG[0xD0],0x0
    34BE: 51 C6    MOV   A,[datetime+2]
    34C0: 21 CF    AND   A,0xCF
    34C2: 62 D0 00 MOV   REG[0xD0],0x0
    34C5: 2A C3    OR    A,[__r0]
    34C7: 62 D0 00 MOV   REG[0xD0],0x0
    34CA: 53 C6    MOV   [datetime+2],A
(0199) 	}
(0200) 	
(0201) 	Rtc_WriteToRtc();
    34CC: 7C 2B 0F LCALL _Rtc_WriteToRtc
    34CF: 62 D0 00 MOV   REG[0xD0],0x0
(0202) 	Time_Pause(FALSE);
    34D2: 50 00    MOV   A,0x0
    34D4: 08       PUSH  A
    34D5: 9A 84    CALL  _Time_Pause
    34D7: 38 FF    ADD   SP,0xFF
    34D9: 38 F8    ADD   SP,0xF8
    34DB: 20       POP   X
    34DC: 7F       RET   
(0203) }
(0204) 
(0205) void Time_Adj_D(BOOL direction)
(0206) {
_Time_Adj_D:
  year                 --> X+4
  month                --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  date                 --> X+0
  direction            --> X-4
    34DD: 10       PUSH  X
    34DE: 4F       MOV   X,SP
    34DF: 38 05    ADD   SP,0x5
(0207) 	BYTE date, month, year, bcd10, bcd;
(0208) 
(0209) 	Time_Pause(TRUE);
    34E1: 50 01    MOV   A,0x1
    34E3: 08       PUSH  A
    34E4: 9A 75    CALL  _Time_Pause
(0210) 	Rtc_ReadFromRtc();
    34E6: 7C 2B 23 LCALL _Rtc_ReadFromRtc
(0211) 
(0212) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    34E9: 50 07    MOV   A,0x7
    34EB: 08       PUSH  A
    34EC: 10       PUSH  X
    34ED: 62 D0 00 MOV   REG[0xD0],0x0
    34F0: 51 C8    MOV   A,[datetime+4]
    34F2: 21 0F    AND   A,0xF
    34F4: 08       PUSH  A
    34F5: 51 C8    MOV   A,[datetime+4]
    34F7: 62 D0 00 MOV   REG[0xD0],0x0
    34FA: 67       ASR   A
    34FB: 67       ASR   A
    34FC: 67       ASR   A
    34FD: 67       ASR   A
    34FE: 21 0F    AND   A,0xF
    3500: 53 C3    MOV   [__r0],A
    3502: 26 C3 03 AND   [__r0],0x3
    3505: 51 C3    MOV   A,[__r0]
    3507: 08       PUSH  A
    3508: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    350B: 38 FB    ADD   SP,0xFB
(0213) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    350D: 62 D0 00 MOV   REG[0xD0],0x0
    3510: 5A C2    MOV   [__r1],X
    3512: 06 C2 03 ADD   [__r1],0x3
    3515: 50 07    MOV   A,0x7
    3517: 08       PUSH  A
    3518: 51 C2    MOV   A,[__r1]
    351A: 08       PUSH  A
    351B: 62 D0 00 MOV   REG[0xD0],0x0
    351E: 51 C9    MOV   A,[datetime+5]
    3520: 21 0F    AND   A,0xF
    3522: 08       PUSH  A
    3523: 51 C9    MOV   A,[datetime+5]
    3525: 62 D0 00 MOV   REG[0xD0],0x0
    3528: 67       ASR   A
    3529: 67       ASR   A
    352A: 67       ASR   A
    352B: 67       ASR   A
    352C: 21 0F    AND   A,0xF
    352E: 53 C3    MOV   [__r0],A
    3530: 26 C3 01 AND   [__r0],0x1
    3533: 51 C3    MOV   A,[__r0]
    3535: 08       PUSH  A
    3536: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0214) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    3539: 62 D0 00 MOV   REG[0xD0],0x0
    353C: 5A C2    MOV   [__r1],X
    353E: 06 C2 04 ADD   [__r1],0x4
    3541: 50 07    MOV   A,0x7
    3543: 08       PUSH  A
    3544: 51 C2    MOV   A,[__r1]
    3546: 08       PUSH  A
    3547: 62 D0 00 MOV   REG[0xD0],0x0
    354A: 51 CA    MOV   A,[datetime+6]
    354C: 21 0F    AND   A,0xF
    354E: 08       PUSH  A
    354F: 51 CA    MOV   A,[datetime+6]
    3551: 62 D0 00 MOV   REG[0xD0],0x0
    3554: 67       ASR   A
    3555: 67       ASR   A
    3556: 67       ASR   A
    3557: 67       ASR   A
    3558: 21 0F    AND   A,0xF
    355A: 53 C3    MOV   [__r0],A
    355C: 26 C3 0F AND   [__r0],0xF
    355F: 51 C3    MOV   A,[__r0]
    3561: 08       PUSH  A
    3562: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3565: 38 F8    ADD   SP,0xF8
(0215) 
(0216) 	bcd10 = datetime._04h.bits.date10;
    3567: 62 D0 00 MOV   REG[0xD0],0x0
    356A: 51 C8    MOV   A,[datetime+4]
    356C: 62 D0 00 MOV   REG[0xD0],0x0
    356F: 67       ASR   A
    3570: 67       ASR   A
    3571: 67       ASR   A
    3572: 67       ASR   A
    3573: 21 0F    AND   A,0xF
    3575: 53 C3    MOV   [__r0],A
    3577: 26 C3 03 AND   [__r0],0x3
    357A: 51 C3    MOV   A,[__r0]
    357C: 54 01    MOV   [X+1],A
(0217) 	bcd = datetime._04h.bits.date;
    357E: 62 D0 00 MOV   REG[0xD0],0x0
    3581: 51 C8    MOV   A,[datetime+4]
    3583: 21 0F    AND   A,0xF
    3585: 62 D0 00 MOV   REG[0xD0],0x0
    3588: 54 02    MOV   [X+2],A
(0218) 
(0219) 	if(direction == TIME_UP)
    358A: 3D FC 01 CMP   [X-4],0x1
    358D: B0 38    JNZ   0x35C6
(0220) 	{
(0221) 		date++;
    358F: 77 00    INC   [X+0]
(0222) 		if(isValidDate(date, month, year))
    3591: 52 04    MOV   A,[X+4]
    3593: 08       PUSH  A
    3594: 52 03    MOV   A,[X+3]
    3596: 08       PUSH  A
    3597: 52 00    MOV   A,[X+0]
    3599: 08       PUSH  A
    359A: 7C 17 03 LCALL _isValidDate
    359D: 38 FD    ADD   SP,0xFD
    359F: 62 D0 00 MOV   REG[0xD0],0x0
    35A2: 39 00    CMP   A,0x0
    35A4: A0 56    JZ    0x35FB
(0223) 		{
(0224) 			decToBcd(&bcd10, &bcd, date);
    35A6: 52 00    MOV   A,[X+0]
    35A8: 08       PUSH  A
    35A9: 5A C2    MOV   [__r1],X
    35AB: 06 C2 02 ADD   [__r1],0x2
    35AE: 50 07    MOV   A,0x7
    35B0: 08       PUSH  A
    35B1: 51 C2    MOV   A,[__r1]
    35B3: 08       PUSH  A
    35B4: 5A C2    MOV   [__r1],X
    35B6: 06 C2 01 ADD   [__r1],0x1
    35B9: 50 07    MOV   A,0x7
    35BB: 08       PUSH  A
    35BC: 51 C2    MOV   A,[__r1]
    35BE: 08       PUSH  A
    35BF: 7C 0F 6D LCALL _decToBcd
    35C2: 38 FB    ADD   SP,0xFB
(0225) 		}
(0226) 	}
    35C4: 80 36    JMP   0x35FB
(0227) 	else
(0228) 	{
(0229) 		date--;
    35C6: 7B 00    DEC   [X+0]
(0230) 		if(isValidDate(date, month, year))
    35C8: 52 04    MOV   A,[X+4]
    35CA: 08       PUSH  A
    35CB: 52 03    MOV   A,[X+3]
    35CD: 08       PUSH  A
    35CE: 52 00    MOV   A,[X+0]
    35D0: 08       PUSH  A
    35D1: 7C 17 03 LCALL _isValidDate
    35D4: 38 FD    ADD   SP,0xFD
    35D6: 62 D0 00 MOV   REG[0xD0],0x0
    35D9: 39 00    CMP   A,0x0
    35DB: A0 1F    JZ    0x35FB
(0231) 		{
(0232) 			decToBcd(&bcd10, &bcd, date);
    35DD: 52 00    MOV   A,[X+0]
    35DF: 08       PUSH  A
    35E0: 5A C2    MOV   [__r1],X
    35E2: 06 C2 02 ADD   [__r1],0x2
    35E5: 50 07    MOV   A,0x7
    35E7: 08       PUSH  A
    35E8: 51 C2    MOV   A,[__r1]
    35EA: 08       PUSH  A
    35EB: 5A C2    MOV   [__r1],X
    35ED: 06 C2 01 ADD   [__r1],0x1
    35F0: 50 07    MOV   A,0x7
    35F2: 08       PUSH  A
    35F3: 51 C2    MOV   A,[__r1]
    35F5: 08       PUSH  A
    35F6: 7C 0F 6D LCALL _decToBcd
    35F9: 38 FB    ADD   SP,0xFB
(0233) 		}
(0234) 	}
(0235) 
(0236) 	datetime._04h.bits.date10 = bcd10;
    35FB: 62 D0 00 MOV   REG[0xD0],0x0
    35FE: 52 01    MOV   A,[X+1]
    3600: 21 03    AND   A,0x3
    3602: 64       ASL   A
    3603: 64       ASL   A
    3604: 64       ASL   A
    3605: 64       ASL   A
    3606: 53 C3    MOV   [__r0],A
    3608: 26 C3 30 AND   [__r0],0x30
    360B: 62 D0 00 MOV   REG[0xD0],0x0
    360E: 51 C8    MOV   A,[datetime+4]
    3610: 21 CF    AND   A,0xCF
    3612: 62 D0 00 MOV   REG[0xD0],0x0
    3615: 2A C3    OR    A,[__r0]
    3617: 62 D0 00 MOV   REG[0xD0],0x0
    361A: 53 C8    MOV   [datetime+4],A
(0237) 	datetime._04h.bits.date = bcd;
    361C: 62 D0 00 MOV   REG[0xD0],0x0
    361F: 52 02    MOV   A,[X+2]
    3621: 21 0F    AND   A,0xF
    3623: 53 C3    MOV   [__r0],A
    3625: 26 C3 0F AND   [__r0],0xF
    3628: 62 D0 00 MOV   REG[0xD0],0x0
    362B: 51 C8    MOV   A,[datetime+4]
    362D: 21 F0    AND   A,0xF0
    362F: 62 D0 00 MOV   REG[0xD0],0x0
    3632: 2A C3    OR    A,[__r0]
    3634: 62 D0 00 MOV   REG[0xD0],0x0
    3637: 53 C8    MOV   [datetime+4],A
(0238) 
(0239) 	Rtc_WriteToRtc();
    3639: 7C 2B 0F LCALL _Rtc_WriteToRtc
    363C: 62 D0 00 MOV   REG[0xD0],0x0
(0240) 	Time_Pause(FALSE);
    363F: 50 00    MOV   A,0x0
    3641: 08       PUSH  A
    3642: 99 17    CALL  _Time_Pause
    3644: 38 FF    ADD   SP,0xFF
    3646: 38 FB    ADD   SP,0xFB
    3648: 20       POP   X
    3649: 7F       RET   
(0241) }
(0242) 
(0243) void Time_Adj_Mo(BOOL direction)
(0244) {
_Time_Adj_Mo:
  year                 --> X+4
  date                 --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  month                --> X+0
  direction            --> X-4
    364A: 10       PUSH  X
    364B: 4F       MOV   X,SP
    364C: 38 05    ADD   SP,0x5
(0245) 	BYTE date, month, year, bcd10, bcd;
(0246) 
(0247) 	Time_Pause(TRUE);
    364E: 50 01    MOV   A,0x1
    3650: 08       PUSH  A
    3651: 99 08    CALL  _Time_Pause
(0248) 	Rtc_ReadFromRtc();
    3653: 7C 2B 23 LCALL _Rtc_ReadFromRtc
    3656: 62 D0 00 MOV   REG[0xD0],0x0
(0249) 
(0250) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    3659: 5A C2    MOV   [__r1],X
    365B: 06 C2 03 ADD   [__r1],0x3
    365E: 50 07    MOV   A,0x7
    3660: 08       PUSH  A
    3661: 51 C2    MOV   A,[__r1]
    3663: 08       PUSH  A
    3664: 62 D0 00 MOV   REG[0xD0],0x0
    3667: 51 C8    MOV   A,[datetime+4]
    3669: 21 0F    AND   A,0xF
    366B: 08       PUSH  A
    366C: 51 C8    MOV   A,[datetime+4]
    366E: 62 D0 00 MOV   REG[0xD0],0x0
    3671: 67       ASR   A
    3672: 67       ASR   A
    3673: 67       ASR   A
    3674: 67       ASR   A
    3675: 21 0F    AND   A,0xF
    3677: 53 C3    MOV   [__r0],A
    3679: 26 C3 03 AND   [__r0],0x3
    367C: 51 C3    MOV   A,[__r0]
    367E: 08       PUSH  A
    367F: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3682: 38 FB    ADD   SP,0xFB
(0251) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    3684: 50 07    MOV   A,0x7
    3686: 08       PUSH  A
    3687: 10       PUSH  X
    3688: 62 D0 00 MOV   REG[0xD0],0x0
    368B: 51 C9    MOV   A,[datetime+5]
    368D: 21 0F    AND   A,0xF
    368F: 08       PUSH  A
    3690: 51 C9    MOV   A,[datetime+5]
    3692: 62 D0 00 MOV   REG[0xD0],0x0
    3695: 67       ASR   A
    3696: 67       ASR   A
    3697: 67       ASR   A
    3698: 67       ASR   A
    3699: 21 0F    AND   A,0xF
    369B: 53 C3    MOV   [__r0],A
    369D: 26 C3 01 AND   [__r0],0x1
    36A0: 51 C3    MOV   A,[__r0]
    36A2: 08       PUSH  A
    36A3: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0252) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    36A6: 62 D0 00 MOV   REG[0xD0],0x0
    36A9: 5A C2    MOV   [__r1],X
    36AB: 06 C2 04 ADD   [__r1],0x4
    36AE: 50 07    MOV   A,0x7
    36B0: 08       PUSH  A
    36B1: 51 C2    MOV   A,[__r1]
    36B3: 08       PUSH  A
    36B4: 62 D0 00 MOV   REG[0xD0],0x0
    36B7: 51 CA    MOV   A,[datetime+6]
    36B9: 21 0F    AND   A,0xF
    36BB: 08       PUSH  A
    36BC: 51 CA    MOV   A,[datetime+6]
    36BE: 62 D0 00 MOV   REG[0xD0],0x0
    36C1: 67       ASR   A
    36C2: 67       ASR   A
    36C3: 67       ASR   A
    36C4: 67       ASR   A
    36C5: 21 0F    AND   A,0xF
    36C7: 53 C3    MOV   [__r0],A
    36C9: 26 C3 0F AND   [__r0],0xF
    36CC: 51 C3    MOV   A,[__r0]
    36CE: 08       PUSH  A
    36CF: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    36D2: 38 F8    ADD   SP,0xF8
(0253) 
(0254) 	bcd10 = datetime._05h.bits.month10;
    36D4: 62 D0 00 MOV   REG[0xD0],0x0
    36D7: 51 C9    MOV   A,[datetime+5]
    36D9: 62 D0 00 MOV   REG[0xD0],0x0
    36DC: 67       ASR   A
    36DD: 67       ASR   A
    36DE: 67       ASR   A
    36DF: 67       ASR   A
    36E0: 21 0F    AND   A,0xF
    36E2: 53 C3    MOV   [__r0],A
    36E4: 26 C3 01 AND   [__r0],0x1
    36E7: 51 C3    MOV   A,[__r0]
    36E9: 54 01    MOV   [X+1],A
(0255) 	bcd = datetime._05h.bits.month;
    36EB: 62 D0 00 MOV   REG[0xD0],0x0
    36EE: 51 C9    MOV   A,[datetime+5]
    36F0: 21 0F    AND   A,0xF
    36F2: 62 D0 00 MOV   REG[0xD0],0x0
    36F5: 54 02    MOV   [X+2],A
(0256) 
(0257) 	if(direction == TIME_UP)
    36F7: 3D FC 01 CMP   [X-4],0x1
    36FA: B0 38    JNZ   0x3733
(0258) 	{
(0259) 		month++;
    36FC: 77 00    INC   [X+0]
(0260) 		if(isValidDate(date, month, year))
    36FE: 52 04    MOV   A,[X+4]
    3700: 08       PUSH  A
    3701: 52 00    MOV   A,[X+0]
    3703: 08       PUSH  A
    3704: 52 03    MOV   A,[X+3]
    3706: 08       PUSH  A
    3707: 7C 17 03 LCALL _isValidDate
    370A: 38 FD    ADD   SP,0xFD
    370C: 62 D0 00 MOV   REG[0xD0],0x0
    370F: 39 00    CMP   A,0x0
    3711: A0 56    JZ    0x3768
(0261) 		{
(0262) 			decToBcd(&bcd10, &bcd, month);
    3713: 52 00    MOV   A,[X+0]
    3715: 08       PUSH  A
    3716: 5A C2    MOV   [__r1],X
    3718: 06 C2 02 ADD   [__r1],0x2
    371B: 50 07    MOV   A,0x7
    371D: 08       PUSH  A
    371E: 51 C2    MOV   A,[__r1]
    3720: 08       PUSH  A
    3721: 5A C2    MOV   [__r1],X
    3723: 06 C2 01 ADD   [__r1],0x1
    3726: 50 07    MOV   A,0x7
    3728: 08       PUSH  A
    3729: 51 C2    MOV   A,[__r1]
    372B: 08       PUSH  A
    372C: 7C 0F 6D LCALL _decToBcd
    372F: 38 FB    ADD   SP,0xFB
(0263) 		}
(0264) 	}
    3731: 80 36    JMP   0x3768
(0265) 	else
(0266) 	{
(0267) 		month--;
    3733: 7B 00    DEC   [X+0]
(0268) 		if(isValidDate(date, month, year))
    3735: 52 04    MOV   A,[X+4]
    3737: 08       PUSH  A
    3738: 52 00    MOV   A,[X+0]
    373A: 08       PUSH  A
    373B: 52 03    MOV   A,[X+3]
    373D: 08       PUSH  A
    373E: 7C 17 03 LCALL _isValidDate
    3741: 38 FD    ADD   SP,0xFD
    3743: 62 D0 00 MOV   REG[0xD0],0x0
    3746: 39 00    CMP   A,0x0
    3748: A0 1F    JZ    0x3768
(0269) 		{
(0270) 			decToBcd(&bcd10, &bcd, month);
    374A: 52 00    MOV   A,[X+0]
    374C: 08       PUSH  A
    374D: 5A C2    MOV   [__r1],X
    374F: 06 C2 02 ADD   [__r1],0x2
    3752: 50 07    MOV   A,0x7
    3754: 08       PUSH  A
    3755: 51 C2    MOV   A,[__r1]
    3757: 08       PUSH  A
    3758: 5A C2    MOV   [__r1],X
    375A: 06 C2 01 ADD   [__r1],0x1
    375D: 50 07    MOV   A,0x7
    375F: 08       PUSH  A
    3760: 51 C2    MOV   A,[__r1]
    3762: 08       PUSH  A
    3763: 7C 0F 6D LCALL _decToBcd
    3766: 38 FB    ADD   SP,0xFB
(0271) 		}
(0272) 	}
(0273) 
(0274) 	datetime._05h.bits.month10 = bcd10;
    3768: 62 D0 00 MOV   REG[0xD0],0x0
    376B: 52 01    MOV   A,[X+1]
    376D: 21 01    AND   A,0x1
    376F: 64       ASL   A
    3770: 64       ASL   A
    3771: 64       ASL   A
    3772: 64       ASL   A
    3773: 53 C3    MOV   [__r0],A
    3775: 26 C3 10 AND   [__r0],0x10
    3778: 62 D0 00 MOV   REG[0xD0],0x0
    377B: 51 C9    MOV   A,[datetime+5]
    377D: 21 EF    AND   A,0xEF
    377F: 62 D0 00 MOV   REG[0xD0],0x0
    3782: 2A C3    OR    A,[__r0]
    3784: 62 D0 00 MOV   REG[0xD0],0x0
    3787: 53 C9    MOV   [datetime+5],A
(0275) 	datetime._05h.bits.month = bcd;
    3789: 62 D0 00 MOV   REG[0xD0],0x0
    378C: 52 02    MOV   A,[X+2]
    378E: 21 0F    AND   A,0xF
    3790: 53 C3    MOV   [__r0],A
    3792: 26 C3 0F AND   [__r0],0xF
    3795: 62 D0 00 MOV   REG[0xD0],0x0
    3798: 51 C9    MOV   A,[datetime+5]
    379A: 21 F0    AND   A,0xF0
    379C: 62 D0 00 MOV   REG[0xD0],0x0
    379F: 2A C3    OR    A,[__r0]
    37A1: 62 D0 00 MOV   REG[0xD0],0x0
    37A4: 53 C9    MOV   [datetime+5],A
(0276) 
(0277) 	Rtc_WriteToRtc();
    37A6: 7C 2B 0F LCALL _Rtc_WriteToRtc
    37A9: 62 D0 00 MOV   REG[0xD0],0x0
(0278) 	Time_Pause(FALSE);
    37AC: 50 00    MOV   A,0x0
    37AE: 08       PUSH  A
    37AF: 7C 2F 5B LCALL _Time_Pause
    37B2: 38 FF    ADD   SP,0xFF
    37B4: 38 FB    ADD   SP,0xFB
    37B6: 20       POP   X
    37B7: 7F       RET   
(0279) }
(0280) 
(0281) void Time_Adj_Y(BOOL direction)
(0282) {
_Time_Adj_Y:
  month                --> X+4
  date                 --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  year                 --> X+0
  direction            --> X-4
    37B8: 10       PUSH  X
    37B9: 4F       MOV   X,SP
    37BA: 38 05    ADD   SP,0x5
(0283) 	BYTE date, month, year, bcd10, bcd;
(0284) 
(0285) 	Time_Pause(TRUE);
    37BC: 50 01    MOV   A,0x1
    37BE: 08       PUSH  A
    37BF: 7C 2F 5B LCALL _Time_Pause
(0286) 	Rtc_ReadFromRtc();
    37C2: 7C 2B 23 LCALL _Rtc_ReadFromRtc
    37C5: 62 D0 00 MOV   REG[0xD0],0x0
(0287) 
(0288) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    37C8: 5A C2    MOV   [__r1],X
    37CA: 06 C2 03 ADD   [__r1],0x3
    37CD: 50 07    MOV   A,0x7
    37CF: 08       PUSH  A
    37D0: 51 C2    MOV   A,[__r1]
    37D2: 08       PUSH  A
    37D3: 62 D0 00 MOV   REG[0xD0],0x0
    37D6: 51 C8    MOV   A,[datetime+4]
    37D8: 21 0F    AND   A,0xF
    37DA: 08       PUSH  A
    37DB: 51 C8    MOV   A,[datetime+4]
    37DD: 62 D0 00 MOV   REG[0xD0],0x0
    37E0: 67       ASR   A
    37E1: 67       ASR   A
    37E2: 67       ASR   A
    37E3: 67       ASR   A
    37E4: 21 0F    AND   A,0xF
    37E6: 53 C3    MOV   [__r0],A
    37E8: 26 C3 03 AND   [__r0],0x3
    37EB: 51 C3    MOV   A,[__r0]
    37ED: 08       PUSH  A
    37EE: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    37F1: 38 FB    ADD   SP,0xFB
(0289) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    37F3: 62 D0 00 MOV   REG[0xD0],0x0
    37F6: 5A C2    MOV   [__r1],X
    37F8: 06 C2 04 ADD   [__r1],0x4
    37FB: 50 07    MOV   A,0x7
    37FD: 08       PUSH  A
    37FE: 51 C2    MOV   A,[__r1]
    3800: 08       PUSH  A
    3801: 62 D0 00 MOV   REG[0xD0],0x0
    3804: 51 C9    MOV   A,[datetime+5]
    3806: 21 0F    AND   A,0xF
    3808: 08       PUSH  A
    3809: 51 C9    MOV   A,[datetime+5]
    380B: 62 D0 00 MOV   REG[0xD0],0x0
    380E: 67       ASR   A
    380F: 67       ASR   A
    3810: 67       ASR   A
    3811: 67       ASR   A
    3812: 21 0F    AND   A,0xF
    3814: 53 C3    MOV   [__r0],A
    3816: 26 C3 01 AND   [__r0],0x1
    3819: 51 C3    MOV   A,[__r0]
    381B: 08       PUSH  A
    381C: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
(0290) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    381F: 50 07    MOV   A,0x7
    3821: 08       PUSH  A
    3822: 10       PUSH  X
    3823: 62 D0 00 MOV   REG[0xD0],0x0
    3826: 51 CA    MOV   A,[datetime+6]
    3828: 21 0F    AND   A,0xF
    382A: 08       PUSH  A
    382B: 51 CA    MOV   A,[datetime+6]
    382D: 62 D0 00 MOV   REG[0xD0],0x0
    3830: 67       ASR   A
    3831: 67       ASR   A
    3832: 67       ASR   A
    3833: 67       ASR   A
    3834: 21 0F    AND   A,0xF
    3836: 53 C3    MOV   [__r0],A
    3838: 26 C3 0F AND   [__r0],0xF
    383B: 51 C3    MOV   A,[__r0]
    383D: 08       PUSH  A
    383E: 7C 0F 44 LCALL __UserModules_end|_bcdToDec|__text_start|_bcdToDec
    3841: 38 F8    ADD   SP,0xF8
(0291) 
(0292) 	bcd10 = datetime._06h.bits.year10;
    3843: 62 D0 00 MOV   REG[0xD0],0x0
    3846: 51 CA    MOV   A,[datetime+6]
    3848: 62 D0 00 MOV   REG[0xD0],0x0
    384B: 67       ASR   A
    384C: 67       ASR   A
    384D: 67       ASR   A
    384E: 67       ASR   A
    384F: 21 0F    AND   A,0xF
    3851: 53 C3    MOV   [__r0],A
    3853: 26 C3 0F AND   [__r0],0xF
    3856: 51 C3    MOV   A,[__r0]
    3858: 54 01    MOV   [X+1],A
(0293) 	bcd = datetime._06h.bits.year;
    385A: 62 D0 00 MOV   REG[0xD0],0x0
    385D: 51 CA    MOV   A,[datetime+6]
    385F: 21 0F    AND   A,0xF
    3861: 62 D0 00 MOV   REG[0xD0],0x0
    3864: 54 02    MOV   [X+2],A
(0294) 
(0295) 	if(direction == TIME_UP)
    3866: 3D FC 01 CMP   [X-4],0x1
    3869: B0 38    JNZ   0x38A2
(0296) 	{
(0297) 		year++;
    386B: 77 00    INC   [X+0]
(0298) 		if(isValidDate(date, month, year))
    386D: 52 00    MOV   A,[X+0]
    386F: 08       PUSH  A
    3870: 52 04    MOV   A,[X+4]
    3872: 08       PUSH  A
    3873: 52 03    MOV   A,[X+3]
    3875: 08       PUSH  A
    3876: 7C 17 03 LCALL _isValidDate
    3879: 38 FD    ADD   SP,0xFD
    387B: 62 D0 00 MOV   REG[0xD0],0x0
    387E: 39 00    CMP   A,0x0
    3880: A0 56    JZ    0x38D7
(0299) 		{
(0300) 			decToBcd(&bcd10, &bcd, year);
    3882: 52 00    MOV   A,[X+0]
    3884: 08       PUSH  A
    3885: 5A C2    MOV   [__r1],X
    3887: 06 C2 02 ADD   [__r1],0x2
    388A: 50 07    MOV   A,0x7
    388C: 08       PUSH  A
    388D: 51 C2    MOV   A,[__r1]
    388F: 08       PUSH  A
    3890: 5A C2    MOV   [__r1],X
    3892: 06 C2 01 ADD   [__r1],0x1
    3895: 50 07    MOV   A,0x7
    3897: 08       PUSH  A
    3898: 51 C2    MOV   A,[__r1]
    389A: 08       PUSH  A
    389B: 7C 0F 6D LCALL _decToBcd
    389E: 38 FB    ADD   SP,0xFB
(0301) 		}
(0302) 	}
    38A0: 80 36    JMP   0x38D7
(0303) 	else
(0304) 	{
(0305) 		year--;
    38A2: 7B 00    DEC   [X+0]
(0306) 		if(isValidDate(date, month, year))
    38A4: 52 00    MOV   A,[X+0]
    38A6: 08       PUSH  A
    38A7: 52 04    MOV   A,[X+4]
    38A9: 08       PUSH  A
    38AA: 52 03    MOV   A,[X+3]
    38AC: 08       PUSH  A
    38AD: 7C 17 03 LCALL _isValidDate
    38B0: 38 FD    ADD   SP,0xFD
    38B2: 62 D0 00 MOV   REG[0xD0],0x0
    38B5: 39 00    CMP   A,0x0
    38B7: A0 1F    JZ    0x38D7
(0307) 		{
(0308) 			decToBcd(&bcd10, &bcd, year);
    38B9: 52 00    MOV   A,[X+0]
    38BB: 08       PUSH  A
    38BC: 5A C2    MOV   [__r1],X
    38BE: 06 C2 02 ADD   [__r1],0x2
    38C1: 50 07    MOV   A,0x7
    38C3: 08       PUSH  A
    38C4: 51 C2    MOV   A,[__r1]
    38C6: 08       PUSH  A
    38C7: 5A C2    MOV   [__r1],X
    38C9: 06 C2 01 ADD   [__r1],0x1
    38CC: 50 07    MOV   A,0x7
    38CE: 08       PUSH  A
    38CF: 51 C2    MOV   A,[__r1]
    38D1: 08       PUSH  A
    38D2: 7C 0F 6D LCALL _decToBcd
    38D5: 38 FB    ADD   SP,0xFB
(0309) 		}
(0310) 	}
(0311) 
(0312) 	datetime._06h.bits.year10 = bcd10;
    38D7: 62 D0 00 MOV   REG[0xD0],0x0
    38DA: 52 01    MOV   A,[X+1]
    38DC: 21 0F    AND   A,0xF
    38DE: 64       ASL   A
    38DF: 64       ASL   A
    38E0: 64       ASL   A
    38E1: 64       ASL   A
    38E2: 53 C3    MOV   [__r0],A
    38E4: 26 C3 F0 AND   [__r0],0xF0
    38E7: 62 D0 00 MOV   REG[0xD0],0x0
    38EA: 51 CA    MOV   A,[datetime+6]
    38EC: 21 0F    AND   A,0xF
    38EE: 62 D0 00 MOV   REG[0xD0],0x0
    38F1: 2A C3    OR    A,[__r0]
    38F3: 62 D0 00 MOV   REG[0xD0],0x0
    38F6: 53 CA    MOV   [datetime+6],A
(0313) 	datetime._06h.bits.year = bcd;
    38F8: 62 D0 00 MOV   REG[0xD0],0x0
    38FB: 52 02    MOV   A,[X+2]
    38FD: 21 0F    AND   A,0xF
    38FF: 53 C3    MOV   [__r0],A
    3901: 26 C3 0F AND   [__r0],0xF
    3904: 62 D0 00 MOV   REG[0xD0],0x0
    3907: 51 CA    MOV   A,[datetime+6]
    3909: 21 F0    AND   A,0xF0
    390B: 62 D0 00 MOV   REG[0xD0],0x0
    390E: 2A C3    OR    A,[__r0]
    3910: 62 D0 00 MOV   REG[0xD0],0x0
    3913: 53 CA    MOV   [datetime+6],A
(0314) 
(0315) 	Rtc_WriteToRtc();
    3915: 7C 2B 0F LCALL _Rtc_WriteToRtc
    3918: 62 D0 00 MOV   REG[0xD0],0x0
(0316) 	Time_Pause(FALSE);
    391B: 50 00    MOV   A,0x0
    391D: 08       PUSH  A
    391E: 7C 2F 5B LCALL _Time_Pause
    3921: 38 FF    ADD   SP,0xFF
    3923: 38 FB    ADD   SP,0xFB
    3925: 20       POP   X
    3926: 7F       RET   
