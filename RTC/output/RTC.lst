FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
001C: 7D 16 E0 LJMP  _Keypad_GPIO_ISR   (0145)     ljmp _Keypad_GPIO_ISR
001F: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0D A1 LJMP  _ADCINC_ADConversion_ISR(0149)     ljmp	_ADCINC_ADConversion_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 07 B3 LJMP  _TempBuf_ISR       (0153)     ljmp	_TempBuf_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 06 61 LJMP  _UART_TX_ISR       (0157)     ljmp	_UART_TX_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 62 LJMP  _UART_RX_ISR       (0161)     ljmp	_UART_RX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [keypad.c:keyPressed+82],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [keypad.c:keyPressed+83],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 EA LCALL 0x05EA             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 D7    MOV   X,0xD7             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 90    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 90    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 90    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 8F    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 90    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 90 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 8F    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 8F    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 90    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 90 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 8F    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 19 E0 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.2946
04E5: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_rtc_Bank1
                                        (0019) export LoadConfigTBL_rtc_Bank0
                                        (0020) export LoadConfigTBL_rtc_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_rtc_Bank0:
                                        (0023) ;  Instance name ADCINC, User Module ADCINC
                                        (0024) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0025) 	db		88h, 90h		;ADCINC_AtoDcr0(ASC12CR0)
                                        (0026) 	db		89h, 00h		;ADCINC_AtoDcr1(ASC12CR1)
                                        (0027) 	db		8ah, 60h		;ADCINC_AtoDcr2(ASC12CR2)
                                        (0028) 	db		8bh, f0h		;ADCINC_AtoDcr3(ASC12CR3)
                                        (0029) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0030) 	db		23h, 00h		;ADCINC_PWMcr0(DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADCINC_PWMdr1(DBB00DR1)
                                        (0032) 	db		22h, 01h		;ADCINC_PWMdr2(DBB00DR2)
                                        (0033) ;  Instance name I2Cm, User Module I2Cm
                                        (0034) ;  Instance name LCD, User Module LCD
                                        (0035) ;  Instance name PGA, User Module PGA
                                        (0036) ;       Instance name PGA, Block Name GAIN(ACB02)
                                        (0037) 	db		79h, d6h		;PGA_GAIN_CR0(ACB02CR0)
                                        (0038) 	db		7ah, 21h		;PGA_GAIN_CR1(ACB02CR1)
                                        (0039) 	db		7bh, 20h		;PGA_GAIN_CR2(ACB02CR2)
                                        (0040) 	db		78h, 00h		;PGA_GAIN_CR3(ACB02CR3)
                                        (0041) ;  Instance name TempBuf, User Module DigBuf
                                        (0042) ;       Instance name TempBuf, Block Name DigBuf(DBB01)
                                        (0043) 	db		27h, 03h		;TempBuf_CONTROL_REG(DBB01CR0)
                                        (0044) 	db		25h, 00h		;TempBuf_DATA_1_REG(DBB01DR1)
                                        (0045) 	db		26h, 00h		;TempBuf_DATA_2_REG(DBB01DR2)
                                        (0046) ;  Instance name UART, User Module UART
                                        (0047) ;       Instance name UART, Block Name RX(DCB03)
                                        (0048) 	db		2fh, 00h		;UART_RX_CONTROL_REG(DCB03CR0)
                                        (0049) 	db		2dh, 00h		;UART_(DCB03DR1)
                                        (0050) 	db		2eh, 00h		;UART_RX_BUFFER_REG (DCB03DR2)
                                        (0051) ;       Instance name UART, Block Name TX(DCB02)
                                        (0052) 	db		2bh, 00h		;UART_TX_CONTROL_REG(DCB02CR0)
                                        (0053) 	db		29h, 00h		;UART_TX_BUFFER_REG (DCB02DR1)
                                        (0054) 	db		2ah, 00h		;UART_(DCB02DR2)
                                        (0055) ;  Global Register values Bank 0
                                        (0056) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0057) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0058) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0059) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0060) 	db		e6h, 04h		; DecimatorControl_0 register (DEC_CR0)
                                        (0061) 	db		e7h, 42h		; DecimatorControl_1 register (DEC_CR1)
                                        (0062) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0063) 	db		b0h, 30h		; Row_0_InputMux register (RDI0RI)
                                        (0064) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0065) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0066) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0067) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0068) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0069) 	db		b6h, 20h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0070) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0071) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0072) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0073) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0074) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0075) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0076) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0077) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0078) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0079) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0080) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0081) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0082) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0083) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0084) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0085) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0086) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0087) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0088) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0089) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0090) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0091) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0092) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0093) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0094) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0095) 	db		ffh
                                        (0096) LoadConfigTBL_rtc_Bank1:
                                        (0097) ;  Instance name ADCINC, User Module ADCINC
                                        (0098) ;       Instance name ADCINC, Block Name ADC(ASC12)
                                        (0099) ;       Instance name ADCINC, Block Name PWM(DBB00)
                                        (0100) 	db		20h, 31h		;ADCINC_PWMfn(DBB00FN)
                                        (0101) 	db		21h, 16h		;ADCINC_PWMsl(DBB00IN)
                                        (0102) 	db		22h, 40h		;ADCINC_PWMos(DBB00OU)
                                        (0103) ;  Instance name I2Cm, User Module I2Cm
                                        (0104) ;  Instance name LCD, User Module LCD
                                        (0105) ;  Instance name PGA, User Module PGA
                                        (0106) ;       Instance name PGA, Block Name GAIN(ACB02)
                                        (0107) ;  Instance name TempBuf, User Module DigBuf
                                        (0108) ;       Instance name TempBuf, Block Name DigBuf(DBB01)
                                        (0109) 	db		24h, 22h		;TempBuf_FUNC_REG(DBB01FN)
                                        (0110) 	db		25h, 67h		;TempBuf_INPUT_REG(DBB01IN)
                                        (0111) 	db		26h, 45h		;TempBuf_OUTPUT_REG(DBB01OU)
                                        (0112) ;  Instance name UART, User Module UART
                                        (0113) ;       Instance name UART, Block Name RX(DCB03)
                                        (0114) 	db		2ch, 05h		;UART_RX_FUNC_REG   (DCB03FN)
                                        (0115) 	db		2dh, f1h		;UART_RX_INPUT_REG  (DCB03IN)
                                        (0116) 	db		2eh, 40h		;UART_RX_OUTPUT_REG (DCB03OU)
                                        (0117) ;       Instance name UART, Block Name TX(DCB02)
                                        (0118) 	db		28h, 0dh		;UART_TX_FUNC_REG   (DCB02FN)
                                        (0119) 	db		29h, 01h		;UART_TX_INPUT_REG  (DCB02IN)
                                        (0120) 	db		2ah, 47h		;UART_TX_OUTPUT_REG (DCB02OU)
                                        (0121) ;  Global Register values Bank 1
                                        (0122) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0123) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0124) 	db		60h, 10h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0125) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0126) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0127) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0128) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0129) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0130) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0131) 	db		d3h, 80h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0132) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0133) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0134) 	db		e1h, 7fh		; OscillatorControl_1 register (OSC_CR1)
                                        (0135) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0136) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0137) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0138) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0139) 	db		e7h, 48h		; Type2Decimator_Control register (DEC_CR2)
                                        (0140) 	db		ffh
                                        (0141) AREA psoc_config(rom, rel)
                                        (0142) LoadConfigTBL_rtc_Ordered:
                                        (0143) ;  Ordered Global Register values
                                        (0144) 	M8C_SetBank0
04E7: 62 00 00 MOV   REG[0x0],0x0       (0145) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
04EA: 71 10    OR    F,0x10             
                                        (0146) 	M8C_SetBank1
04EC: 62 00 00 MOV   REG[0x0],0x0       (0147) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
04EF: 62 01 FF MOV   REG[0x1],0xFF      (0148) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
04F2: 70 EF    AND   F,0xEF             
                                        (0149) 	M8C_SetBank0
04F4: 62 03 F4 MOV   REG[0x3],0xF4      (0150) 	mov	reg[03h], f4h		; Port_0_DriveMode_2 register (PRT0DM2)
04F7: 62 02 08 MOV   REG[0x2],0x8       (0151) 	mov	reg[02h], 08h		; Port_0_GlobalSelect register (PRT0GS)
04FA: 71 10    OR    F,0x10             
                                        (0152) 	M8C_SetBank1
04FC: 62 02 00 MOV   REG[0x2],0x0       (0153) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
04FF: 62 03 00 MOV   REG[0x3],0x0       (0154) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0502: 70 EF    AND   F,0xEF             
                                        (0155) 	M8C_SetBank0
0504: 62 01 00 MOV   REG[0x1],0x0       (0156) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0507: 62 04 00 MOV   REG[0x4],0x0       (0157) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
050A: 71 10    OR    F,0x10             
                                        (0158) 	M8C_SetBank1
050C: 62 04 00 MOV   REG[0x4],0x0       (0159) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
050F: 62 05 FF MOV   REG[0x5],0xFF      (0160) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0512: 70 EF    AND   F,0xEF             
                                        (0161) 	M8C_SetBank0
0514: 62 07 FF MOV   REG[0x7],0xFF      (0162) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0517: 62 06 00 MOV   REG[0x6],0x0       (0163) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
051A: 71 10    OR    F,0x10             
                                        (0164) 	M8C_SetBank1
051C: 62 06 00 MOV   REG[0x6],0x0       (0165) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
051F: 62 07 00 MOV   REG[0x7],0x0       (0166) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0522: 70 EF    AND   F,0xEF             
                                        (0167) 	M8C_SetBank0
0524: 62 05 00 MOV   REG[0x5],0x0       (0168) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0527: 62 08 00 MOV   REG[0x8],0x0       (0169) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
052A: 71 10    OR    F,0x10             
                                        (0170) 	M8C_SetBank1
052C: 62 08 FF MOV   REG[0x8],0xFF      (0171) 	mov	reg[08h], ffh		; Port_2_DriveMode_0 register (PRT2DM0)
052F: 62 09 00 MOV   REG[0x9],0x0       (0172) 	mov	reg[09h], 00h		; Port_2_DriveMode_1 register (PRT2DM1)
0532: 70 EF    AND   F,0xEF             
                                        (0173) 	M8C_SetBank0
0534: 62 0B 00 MOV   REG[0xB],0x0       (0174) 	mov	reg[0bh], 00h		; Port_2_DriveMode_2 register (PRT2DM2)
0537: 62 0A 80 MOV   REG[0xA],0x80      (0175) 	mov	reg[0ah], 80h		; Port_2_GlobalSelect register (PRT2GS)
053A: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
053C: 62 0A 00 MOV   REG[0xA],0x0       (0177) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
053F: 62 0B 00 MOV   REG[0xB],0x0       (0178) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0542: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
0544: 62 09 00 MOV   REG[0x9],0x0       (0180) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0547: 62 0C 00 MOV   REG[0xC],0x0       (0181) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
054A: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
054C: 62 0C 00 MOV   REG[0xC],0x0       (0183) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
054F: 62 0D 00 MOV   REG[0xD],0x0       (0184) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0552: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
0554: 62 0F 00 MOV   REG[0xF],0x0       (0186) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0557: 62 0E 00 MOV   REG[0xE],0x0       (0187) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
055A: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
055C: 62 0E 00 MOV   REG[0xE],0x0       (0189) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
055F: 62 0F 00 MOV   REG[0xF],0x0       (0190) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0562: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
0564: 62 0D 00 MOV   REG[0xD],0x0       (0192) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0567: 62 10 00 MOV   REG[0x10],0x0      (0193) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
056A: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
056C: 62 10 00 MOV   REG[0x10],0x0      (0195) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
056F: 62 11 00 MOV   REG[0x11],0x0      (0196) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0572: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
0574: 62 13 00 MOV   REG[0x13],0x0      (0198) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0577: 62 12 00 MOV   REG[0x12],0x0      (0199) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
057A: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
057C: 62 12 00 MOV   REG[0x12],0x0      (0201) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
057F: 62 13 00 MOV   REG[0x13],0x0      (0202) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0582: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
0584: 62 11 00 MOV   REG[0x11],0x0      (0204) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0587: 62 14 00 MOV   REG[0x14],0x0      (0205) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
058A: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
058C: 62 14 00 MOV   REG[0x14],0x0      (0207) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
058F: 62 15 00 MOV   REG[0x15],0x0      (0208) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0592: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
0594: 62 17 00 MOV   REG[0x17],0x0      (0210) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0597: 62 16 00 MOV   REG[0x16],0x0      (0211) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
059A: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
059C: 62 16 00 MOV   REG[0x16],0x0      (0213) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
059F: 62 17 00 MOV   REG[0x17],0x0      (0214) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
05A2: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
05A4: 62 15 00 MOV   REG[0x15],0x0      (0216) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
05A7: 62 18 00 MOV   REG[0x18],0x0      (0217) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
05AA: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
05AC: 62 18 00 MOV   REG[0x18],0x0      (0219) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
05AF: 62 19 00 MOV   REG[0x19],0x0      (0220) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
05B2: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
05B4: 62 1B 00 MOV   REG[0x1B],0x0      (0222) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
05B7: 62 1A 00 MOV   REG[0x1A],0x0      (0223) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
05BA: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
05BC: 62 1A 00 MOV   REG[0x1A],0x0      (0225) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
05BF: 62 1B 00 MOV   REG[0x1B],0x0      (0226) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
05C2: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
05C4: 62 19 00 MOV   REG[0x19],0x0      (0228) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
05C7: 62 1C 00 MOV   REG[0x1C],0x0      (0229) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
05CA: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
05CC: 62 1C 00 MOV   REG[0x1C],0x0      (0231) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
05CF: 62 1D 00 MOV   REG[0x1D],0x0      (0232) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
05D2: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
05D4: 62 1F 00 MOV   REG[0x1F],0x0      (0234) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
05D7: 62 1E 00 MOV   REG[0x1E],0x0      (0235) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
05DA: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
05DC: 62 1E 00 MOV   REG[0x1E],0x0      (0237) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
05DF: 62 1F 00 MOV   REG[0x1F],0x0      (0238) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
05E2: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
05E4: 62 1D 00 MOV   REG[0x1D],0x0      (0240) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
05E7: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
05E9: 7F       RET                      (0242) 	ret
                                        (0243) 
                                        (0244) 
                                        (0245) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.2946
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_rtc
                                        (0026) export _LoadConfig_rtc
                                        (0027) export Port_0_Data_SHADE
                                        (0028) export _Port_0_Data_SHADE
                                        (0029) export Port_0_DriveMode_0_SHADE
                                        (0030) export _Port_0_DriveMode_0_SHADE
                                        (0031) export Port_0_DriveMode_1_SHADE
                                        (0032) export _Port_0_DriveMode_1_SHADE
                                        (0033) export Port_0_DriveMode_2_SHADE
                                        (0034) export _Port_0_DriveMode_2_SHADE
                                        (0035) export Port_2_Data_SHADE
                                        (0036) export _Port_2_Data_SHADE
                                        (0037) export Port_2_DriveMode_0_SHADE
                                        (0038) export _Port_2_DriveMode_0_SHADE
                                        (0039) export Port_2_DriveMode_1_SHADE
                                        (0040) export _Port_2_DriveMode_1_SHADE
                                        (0041) 
                                        (0042) 
                                        (0043) export NO_SHADOW
                                        (0044) export _NO_SHADOW
                                        (0045) 
                                        (0046) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0047) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0048) 
                                        (0049) AREA psoc_config(rom, rel)
                                        (0050) 
                                        (0051) ;---------------------------------------------------------------------------
                                        (0052) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0053) ;                  parameters handled by boot code, like CPU speed). This
                                        (0054) ;                  function can be called from user code, but typically it
                                        (0055) ;                  is only called from boot.
                                        (0056) ;
                                        (0057) ;       INPUTS: None.
                                        (0058) ;      RETURNS: Nothing.
                                        (0059) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0060) ;               In the large memory model currently only the page
                                        (0061) ;               pointer registers listed below are modified.  This does
                                        (0062) ;               not guarantee that in future implementations of this
                                        (0063) ;               function other page pointer registers will not be
                                        (0064) ;               modified.
                                        (0065) ;          
                                        (0066) ;               Page Pointer Registers Modified: 
                                        (0067) ;               CUR_PP
                                        (0068) ;
                                        (0069) _LoadConfigInit:
                                        (0070)  LoadConfigInit:
                                        (0071)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0072)     
05EA: 55 00 00 MOV   [0x0],0x0          (0073) 	mov		[Port_0_Data_SHADE], 0h
05ED: 55 02 00 MOV   [0x2],0x0          (0074) 	mov		[Port_0_DriveMode_0_SHADE], 0h
05F0: 55 03 FF MOV   [0x3],0xFF         (0075) 	mov		[Port_0_DriveMode_1_SHADE], ffh
05F3: 55 04 F4 MOV   [0x4],0xF4         (0076) 	mov		[Port_0_DriveMode_2_SHADE], f4h
05F6: 55 01 00 MOV   [0x1],0x0          (0077) 	mov		[Port_2_Data_SHADE], 0h
05F9: 55 05 FF MOV   [0x5],0xFF         (0078) 	mov		[Port_2_DriveMode_0_SHADE], ffh
05FC: 55 06 00 MOV   [0x6],0x0          (0079) 	mov		[Port_2_DriveMode_1_SHADE], 0h
                                        (0080) 
05FF: 7C 06 06 LCALL 0x0606             (0081) 	lcall	LoadConfig_rtc
0602: 7C 04 E5 LCALL 0x04E5             (0082) 	lcall	LoadConfigTBL_rtc_Ordered
                                        (0083) 
                                        (0084) 
                                        (0085)     RAM_EPILOGUE RAM_USE_CLASS_4
0605: 7F       RET                      (0086)     ret
                                        (0087) 
                                        (0088) ;---------------------------------------------------------------------------
                                        (0089) ; Load Configuration rtc
                                        (0090) ;
                                        (0091) ;    Load configuration registers for rtc.
                                        (0092) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0093) ;
                                        (0094) ;       INPUTS: None.
                                        (0095) ;      RETURNS: Nothing.
                                        (0096) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0097) ;               modified as may the Page Pointer registers!
                                        (0098) ;               In the large memory model currently only the page
                                        (0099) ;               pointer registers listed below are modified.  This does
                                        (0100) ;               not guarantee that in future implementations of this
                                        (0101) ;               function other page pointer registers will not be
                                        (0102) ;               modified.
                                        (0103) ;          
                                        (0104) ;               Page Pointer Registers Modified: 
                                        (0105) ;               CUR_PP
                                        (0106) ;
                                        (0107) _LoadConfig_rtc:
                                        (0108)  LoadConfig_rtc:
                                        (0109)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0110) 
0606: 10       PUSH  X                  (0111) 	push	x
0607: 70 EF    AND   F,0xEF             
                                        (0112)     M8C_SetBank0                    ; Force bank 0
0609: 50 00    MOV   A,0x0              (0113)     mov     a, 0                    ; Specify bank 0
060B: 67       ASR   A                  (0114)     asr     a                       ; Store in carry flag
                                        (0115)                                     ; Load bank 0 table:
060C: 50 02    MOV   A,0x2              (0116)     mov     A, >LoadConfigTBL_rtc_Bank0
060E: 57 AE    MOV   X,0xAE             (0117)     mov     X, <LoadConfigTBL_rtc_Bank0
0610: 7C 06 21 LCALL 0x0621             (0118)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0119) 
0613: 50 01    MOV   A,0x1              (0120)     mov     a, 1                    ; Specify bank 1
0615: 67       ASR   A                  (0121)     asr     a                       ; Store in carry flag
                                        (0122)                                     ; Load bank 1 table:
0616: 50 03    MOV   A,0x3              (0123)     mov     A, >LoadConfigTBL_rtc_Bank1
0618: 57 25    MOV   X,0x25             (0124)     mov     X, <LoadConfigTBL_rtc_Bank1
061A: 7C 06 21 LCALL 0x0621             (0125)     lcall   LoadConfig              ; Load the bank 1 values
061D: 70 EF    AND   F,0xEF             
                                        (0126) 
                                        (0127)     M8C_SetBank0                    ; Force return to bank 0
061F: 20       POP   X                  (0128) 	pop		x
                                        (0129) 
                                        (0130)     RAM_EPILOGUE RAM_USE_CLASS_4
0620: 7F       RET                      (0131)     ret
                                        (0132) 
                                        (0133) 
                                        (0134) 
                                        (0135) 
                                        (0136) ;---------------------------------------------------------------------------
                                        (0137) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0138) ;              pairs. Terminate on address=0xFF.
                                        (0139) ;
                                        (0140) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0141) ;           Flag Register Carry bit encodes the Register Bank
                                        (0142) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0143) ;
                                        (0144) ;  RETURNS: nothing.
                                        (0145) ;
                                        (0146) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0147) ;                X-3 Temporary store for register address
                                        (0148) ;                X-2 LSB of config table address
                                        (0149) ;                X-1 MSB of config table address
                                        (0150) ;
                                        (0151) LoadConfig:
                                        (0152)     RAM_PROLOGUE RAM_USE_CLASS_2
0621: 38 02    ADD   SP,0x2             (0153)     add     SP, 2                   ; Set up local vars
0623: 10       PUSH  X                  (0154)     push    X                       ; Save config table address on stack
0624: 08       PUSH  A                  (0155)     push    A
0625: 4F       MOV   X,SP               (0156)     mov     X, SP
0626: 56 FC 00 MOV   [X-4],0x0          (0157)     mov     [X-4], 0                ; Set default Destination to Bank 0
0629: D0 04    JNC   0x062E             (0158)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
062B: 56 FC 01 MOV   [X-4],0x1          (0159)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0160) .BankSelectSaved:
062E: 18       POP   A                  (0161)     pop     A
062F: 20       POP   X                  (0162)     pop     X
0630: 70 EF    AND   F,0xEF             
0632: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0163) 
                                        (0164) LoadConfigLp:
                                        (0165)     M8C_SetBank0                    ; Switch to bank 0
                                        (0166)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0635: 10       PUSH  X                  (0167)     push    X                       ; Preserve the config table address
0636: 08       PUSH  A                  (0168)     push    A
0637: 28       ROMX                     (0169)     romx                            ; Load register address from table
0638: 39 FF    CMP   A,0xFF             (0170)     cmp     A, END_CONFIG_TABLE     ; End of table?
063A: A0 1F    JZ    0x065A             (0171)     jz      EndLoadConfig           ;   Yes, go wrap it up
063C: 4F       MOV   X,SP               (0172)     mov     X, SP                   ;
063D: 48 FC 01 TST   [X-4],0x1          (0173)     tst     [X-4], 1                ; Loading IO Bank 1?
0640: A0 03    JZ    0x0644             (0174)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0642: 71 10    OR    F,0x10             
                                        (0175)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0176) .IOBankNowSet:
0644: 54 FD    MOV   [X-3],A            (0177)     mov     [X-3], A                ; Stash the register address
0646: 18       POP   A                  (0178)     pop     A                       ; Retrieve the table address
0647: 20       POP   X                  (0179)     pop     X
0648: 75       INC   X                  (0180)     inc     X                       ; Advance to the data byte
0649: 09 00    ADC   A,0x0              (0181)     adc     A, 0
064B: 10       PUSH  X                  (0182)     push    X                       ; Save the config table address again
064C: 08       PUSH  A                  (0183)     push    A
064D: 28       ROMX                     (0184)     romx                            ; load config data from the table
064E: 4F       MOV   X,SP               (0185)     mov     X, SP                   ; retrieve the register address
064F: 59 FD    MOV   X,[X-3]            (0186)     mov     X, [X-3]
0651: 61 00    MOV   REG[X+0x0],A       (0187)     mov     reg[X], A               ; Configure the register
0653: 18       POP   A                  (0188)     pop     A                       ; retrieve the table address
0654: 20       POP   X                  (0189)     pop     X
0655: 75       INC   X                  (0190)     inc     X                       ; advance to next table entry
0656: 09 00    ADC   A,0x0              (0191)     adc     A, 0
0658: 8F D7    JMP   0x0630             (0192)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0193) EndLoadConfig:
065A: 38 FC    ADD   SP,0xFC            (0194)     add     SP, -4
065C: 70 3F    AND   F,0x3F             
065E: 71 C0    OR    F,0xC0             
                                        (0195)     RAM_EPILOGUE RAM_USE_CLASS_2
0660: 7F       RET                      (0196)     ret
                                        (0197) 
                                        (0198) AREA InterruptRAM(ram, rel)
                                        (0199) 
                                        (0200) NO_SHADOW:
                                        (0201) _NO_SHADOW:
                                        (0202) ; write only register shadows
                                        (0203) _Port_0_Data_SHADE:
                                        (0204) Port_0_Data_SHADE:	BLK	1
                                        (0205) _Port_2_Data_SHADE:
                                        (0206) Port_2_Data_SHADE:	BLK	1
                                        (0207) _Port_0_DriveMode_0_SHADE:
                                        (0208) Port_0_DriveMode_0_SHADE:	BLK	1
                                        (0209) _Port_0_DriveMode_1_SHADE:
                                        (0210) Port_0_DriveMode_1_SHADE:	BLK	1
                                        (0211) _Port_0_DriveMode_2_SHADE:
                                        (0212) Port_0_DriveMode_2_SHADE:	BLK	1
                                        (0213) _Port_2_DriveMode_0_SHADE:
                                        (0214) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0215) _Port_2_DriveMode_1_SHADE:
                                        (0216) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0217) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0661: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
0662: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0663: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
0666: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2013/5/19 at 10:44:49
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0669: 7F       RET                      (0182)    ret
066A: 41 E1 FB AND   REG[0xE1],0xFB     
066D: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0670: 7F       RET                      (0214)    ret
0671: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
0673: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
0675: A0 07    JZ    0x067D             (0249)    jz    .SetModeRegEmpty
0677: 43 28 10 OR    REG[0x28],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
067A: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
067C: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
067D: 41 28 EF AND   REG[0x28],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0680: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
0682: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
0683: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
0685: 60 2B    MOV   REG[0x2B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
0687: 60 2F    MOV   REG[0x2F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0689: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
068A: 41 2B FE AND   REG[0x2B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
068D: 41 2F FE AND   REG[0x2F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
0690: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
0691: 60 29    MOV   REG[0x29],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
0693: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
0694: 5D 2B    MOV   A,REG[0x2B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0696: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0697: 5D 2E    MOV   A,REG[0x2E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0699: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
069A: 5D 2F    MOV   A,REG[0x2F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
069C: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
069D: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
069F: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
06A1: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
06A3: A0 06    JZ    0x06AA             (0492)    jz   .SetTxCmpMode
                                        (0493) 
06A5: 41 28 EF AND   REG[0x28],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
06A8: 80 04    JMP   0x06AD             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
06AA: 43 28 10 OR    REG[0x28],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
06AD: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
06AF: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
06B0: 08       PUSH  A                  (0536)    push A
06B1: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
06B3: A0 06    JZ    0x06BA             (0538)    jz   .DisRxInt
06B5: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
06B8: 80 04    JMP   0x06BD             (0541)    jmp  .CheckTxInt
06BA: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
06BD: 18       POP   A                  (0547)    pop  A
06BE: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
06C0: A0 06    JZ    0x06C7             (0549)    jz   .DisTxInt
06C2: 43 E1 04 OR    REG[0xE1],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
06C5: 80 04    JMP   0x06CA             (0552)    jmp  .End_IntCntl
06C7: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
06CA: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
06DB: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
06DC: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
06DD: 67       ASR   A                  (0603)    asr   A
06DE: 67       ASR   A                  (0604)    asr   A
06DF: 67       ASR   A                  (0605)    asr   A
06E0: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
06E2: FF E7    INDEX 0x06CB             (0607)    index UART_HEX_STR                  ; Get Hex value
06E4: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
06E6: 18       POP   A                  (0609)    pop   A                             ; Restore value
06E7: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
06E9: FF E0    INDEX 0x06CB             (0611)    index UART_HEX_STR                  ; Get Hex value
06EB: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
06ED: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
06EE: 4B       SWAP  A,X                (0645)    swap  A,X
06EF: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
06F1: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
06F2: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
06F4: 7F       RET                      (0650)    ret
06F5: 49 2B 10 TST   REG[0x2B],0x10     
06F8: AF FC    JZ    _UART_PutChar      
06FA: 60 29    MOV   REG[0x29],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
06FC: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
06FD: 49 2F 08 TST   REG[0x2F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0700: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0702: 5D 2E    MOV   A,REG[0x2E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0704: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0705: 5D 2F    MOV   A,REG[0x2F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
0707: 08       PUSH  A                  (0756)    push A
0708: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
070A: B0 04    JNZ   0x070F             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
070C: 18       POP   A                  (0759)    pop  A
070D: 80 0B    JMP   0x0719             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
070F: 5D 2E    MOV   A,REG[0x2E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0711: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0712: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0713: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0715: B0 03    JNZ   0x0719             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0717: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
0718: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
0719: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
071B: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
071C: 5D 2F    MOV   A,REG[0x2F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
071E: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0720: 08       PUSH  A                  (0819)    push A
0721: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0723: B0 07    JNZ   0x072B             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0725: 18       POP   A                  (0822)    pop  A
0726: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0728: 4B       SWAP  A,X                (0824)    swap A,X
0729: 80 07    JMP   0x0731             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
072B: 18       POP   A                  (0828)    pop  A
072C: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
072E: 4B       SWAP  A,X                (0830)    swap A,X
072F: 5D 2E    MOV   A,REG[0x2E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0731: 7F       RET                      (0836)    ret
0732: 70 BF    AND   F,0xBF             
0734: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0736: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0738: A0 06    JZ    0x073F             (0872)    jz    End_PutString                           ; Check for end of string
073A: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
073C: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
073D: 8F F8    JMP   0x0736             (0875)    jmp   .PutStringLoop                          ; Get next character
073F: 70 3F    AND   F,0x3F             
0741: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0743: 7F       RET                      (0879)    ret
0744: 70 BF    AND   F,0xBF             
0746: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0749: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
074A: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
074C: A0 1A    JZ    0x0767             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
074E: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0750: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0752: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0754: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0756: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0758: 49 2B 10 TST   REG[0x2B],0x10     
075B: AF FC    JZ    0x0758             
075D: 60 29    MOV   REG[0x29],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
075F: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0760: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0763: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0765: 8F E4    JMP   0x074A             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0767: 70 3F    AND   F,0x3F             
0769: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
076B: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
076C: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
076D: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
0770: B0 06    JNZ   0x0777             (0980)    jnz   .CW_WRITEIT
0772: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
0775: A0 1D    JZ    0x0793             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0777: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0778: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
077A: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
077C: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
077D: 49 2B 10 TST   REG[0x2B],0x10     
0780: AF FC    JZ    0x077D             
0782: 60 29    MOV   REG[0x29],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
0784: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
0785: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0788: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
078B: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
078E: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
0791: 8F DB    JMP   0x076D             (0995)    jmp   .CW_Loop
0793: 70 3F    AND   F,0x3F             
0795: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0797: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0798: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0799: 10       PUSH  X                  (1030)    push  X
079A: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
079B: A0 0B    JZ    0x07A7             (1032)    jz    .End_CPutString
079D: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
079F: 20       POP   X                  (1034)    pop   X
07A0: 18       POP   A                  (1035)    pop   A
07A1: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
07A2: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
07A4: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
07A5: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
07A7: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
07A9: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
07AA: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
07AC: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
07AE: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
07B0: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
07B2: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\tempbufint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TempBufINT.asm
                                        (0004) ;;   Version: 1.3, Updated on 2013/5/19 at 10:43:26
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: DigBuf Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) 
                                        (0016) ;-----------------------------------------------
                                        (0017) ;  Global Symbols
                                        (0018) ;-----------------------------------------------
                                        (0019) export  _TempBuf_ISR
                                        (0020) 
                                        (0021) 
                                        (0022) AREA InterruptRAM (RAM,REL,CON)
                                        (0023) 
                                        (0024) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0025) ;---------------------------------------------------
                                        (0026) ; Insert your custom declarations below this banner
                                        (0027) ;---------------------------------------------------
                                        (0028) 
                                        (0029) ;------------------------
                                        (0030) ; Includes
                                        (0031) ;------------------------
                                        (0032) 
                                        (0033) 	
                                        (0034) ;------------------------
                                        (0035) ;  Constant Definitions
                                        (0036) ;------------------------
                                        (0037) 
                                        (0038) 
                                        (0039) ;------------------------
                                        (0040) ; Variable Allocation
                                        (0041) ;------------------------
                                        (0042) 
                                        (0043) 
                                        (0044) ;---------------------------------------------------
                                        (0045) ; Insert your custom declarations above this banner
                                        (0046) ;---------------------------------------------------
                                        (0047) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0048) 
                                        (0049) 
                                        (0050) AREA UserModules (ROM, REL)
                                        (0051) 
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: _TempBuf_ISR
                                        (0054) ;
                                        (0055) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0056) ;
                                        (0057) ;-----------------------------------------------------------------------------
                                        (0058) ;
                                        (0059) 
                                        (0060) _TempBuf_ISR:
                                        (0061) 
                                        (0062)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0063)    ;---------------------------------------------------
                                        (0064)    ; Insert your custom assembly code below this banner
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ;   NOTE: interrupt service routines must preserve
                                        (0067)    ;   the values of the A and X CPU registers.
                                        (0068)    
                                        (0069)    ;---------------------------------------------------
                                        (0070)    ; Insert your custom assembly code above this banner
                                        (0071)    ;---------------------------------------------------
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert a lcall to a C function below this banner
                                        (0075)    ; and un-comment the lines between these banners
                                        (0076)    ;---------------------------------------------------
                                        (0077)    
                                        (0078)    ;PRESERVE_CPU_CONTEXT
                                        (0079)    ;lcall _My_C_Function
                                        (0080)    ;RESTORE_CPU_CONTEXT
                                        (0081)    
                                        (0082)    ;---------------------------------------------------
                                        (0083)    ; Insert a lcall to a C function above this banner
                                        (0084)    ; and un-comment the lines between these banners
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0087) 
07B3: 7E       RETI                     (0088)    reti
                                        (0089) 
                                        (0090) 
                                        (0091) ; end of file TempBufINT.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2013/5/19 at 10:43:59
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
07B4: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
07B6: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
07B7: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
07B8: 5D 7B    MOV   A,REG[0x7B]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
07BA: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
07BC: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
07BE: 60 7B    MOV   REG[0x7B],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
07C0: 18       POP   A                  (0124)    pop  A
07C1: 70 3F    AND   F,0x3F             
07C3: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
07C5: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
07C6: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
07C8: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
07C9: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
07CA: 5D 79    MOV   A,REG[0x79]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
07CC: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
07CE: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
07D1: B0 0E    JNZ   0x07E0             (0164)    jnz  .SETHIGHGAIN
07D3: 41 78 FE AND   REG[0x78],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
07D6: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
07D8: 60 79    MOV   REG[0x79],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
07DA: 18       POP   A                  (0168)    pop  A
07DB: 70 3F    AND   F,0x3F             
07DD: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
07DF: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
07E0: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
07E3: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
07E5: 60 79    MOV   REG[0x79],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
07E7: 43 78 01 OR    REG[0x78],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
07EA: 18       POP   A                  (0177)    pop  A
07EB: 70 3F    AND   F,0x3F             
07ED: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
07EF: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
07F0: 41 7B FC AND   REG[0x7B],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
07F3: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2013/5/19 at 10:43:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
07F4: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
07F5: 10       PUSH  X                  (0209)     push  X
07F6: 28       ROMX                     (0210)     romx                               ; Get character from ROM
07F7: B0 04    JNZ   0x07FC             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
07F9: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
07FA: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
07FB: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
07FC: 90 44    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
07FE: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
07FF: 18       POP   A                  (0220)     pop   A
0800: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
0801: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0803: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0804: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0816: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0817: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0818: 67       ASR   A                  (0262)     asr   A
0819: 67       ASR   A                  (0263)     asr   A
081A: 67       ASR   A                  (0264)     asr   A
081B: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
081D: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
081F: 90 21    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
0821: 18       POP   A                  (0268)     pop   A                            ; Restore value
0822: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0824: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0826: 90 1A    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0828: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0829: 4B       SWAP  A,X                (0305)     swap  A,X
082A: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
082C: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
082D: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
082F: 7F       RET                      (0310)     ret
0830: 70 BF    AND   F,0xBF             
0832: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0834: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0836: A0 06    JZ    0x083D             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0838: 90 08    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
083A: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
083B: 8F F8    JMP   0x0834             (0351)     jmp   .Loop_PrString               ; Go get next character
083D: 70 3F    AND   F,0x3F             
083F: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0841: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0842: 90 65    CALL  0x08A9             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0844: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0845: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0846: 67       ASR   A                  (0390)     asr   A
0847: 67       ASR   A                  (0391)     asr   A
0848: 67       ASR   A                  (0392)     asr   A
0849: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
084B: 90 3B    CALL  0x0888             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
084D: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
084E: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0850: 40       NOP                      (0397)     nop
0851: 40       NOP                      (0398)     nop
0852: 40       NOP                      (0399)     nop
0853: 90 33    CALL  0x0888             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0855: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0856: 90 51    CALL  0x08A9             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0858: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0859: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
085A: 67       ASR   A                  (0436)     asr   A
085B: 67       ASR   A                  (0437)     asr   A
085C: 67       ASR   A                  (0438)     asr   A
085D: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
085F: 90 09    CALL  0x086A             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0861: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0862: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0864: 40       NOP                      (0443)     nop
0865: 40       NOP                      (0444)     nop
0866: 40       NOP                      (0445)     nop
0867: 90 01    CALL  0x086A             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0869: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
086A: 08       PUSH  A                  (0477)     push  A
086B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
086E: 26 01 80 AND   [0x1],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0871: 51 01    MOV   A,[0x1]            (0480)     mov   A,[Port_2_Data_SHADE]
0873: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0875: 18       POP   A                  (0483)     pop   A
0876: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0878: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
087A: 2A 01    OR    A,[0x1]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
087C: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
087E: 53 01    MOV   [0x1],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0880: 40       NOP                      (0489)     nop
0881: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0883: 53 01    MOV   [0x1],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0885: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0887: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0888: 08       PUSH  A                  (0523)     push  A
0889: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
088C: 26 01 80 AND   [0x1],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
088F: 2E 01 20 OR    [0x1],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0892: 51 01    MOV   A,[0x1]            (0527)     mov   A,[Port_2_Data_SHADE]
0894: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0896: 18       POP   A                  (0530)     pop   A
0897: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0899: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
089B: 2A 01    OR    A,[0x1]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
089D: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
089F: 53 01    MOV   [0x1],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
08A1: 40       NOP                      (0536)     NOP
08A2: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
08A4: 53 01    MOV   [0x1],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
08A6: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
08A8: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
08A9: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
08AA: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
08AD: 26 01 80 AND   [0x1],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
08B0: 51 01    MOV   A,[0x1]            (0574)     mov   A,[Port_2_Data_SHADE]
08B2: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
08B4: 26 05 F0 AND   [0x5],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
08B7: 51 05    MOV   A,[0x5]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
08B9: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
08BB: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
08BD: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
08BF: 2E 01 40 OR    [0x1],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
08C2: 51 01    MOV   A,[0x1]            (0584)     mov   A,[Port_2_Data_SHADE]
08C4: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
08C6: 40       NOP                      (0586)     NOP
                                        (0587) 
08C7: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
08C8: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
08CA: 2E 01 50 OR    [0x1],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
08CD: 51 01    MOV   A,[0x1]            (0593)     mov   A,[Port_2_Data_SHADE]
08CF: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
08D1: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
08D2: 40       NOP                      (0597)     nop
08D3: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
08D5: 08       PUSH  A                  (0610)     push  A
08D6: 26 01 C0 AND   [0x1],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
08D9: 51 01    MOV   A,[0x1]            (0612)     mov   A,[Port_2_Data_SHADE]
08DB: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
08DD: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
08DE: 40       NOP                      (0616)     nop                                    ; fastest PSoC
08DF: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
08E0: 2E 01 50 OR    [0x1],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
08E3: 51 01    MOV   A,[0x1]            (0620)     mov   A,[Port_2_Data_SHADE]
08E5: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
08E7: 40       NOP                      (0623)     nop
08E8: 40       NOP                      (0624)     nop
                                        (0625) 
08E9: 26 01 C0 AND   [0x1],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
08EC: 51 01    MOV   A,[0x1]            (0627)     mov   A,[Port_2_Data_SHADE]
08EE: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
08F0: 18       POP   A                  (0630)     pop   A
08F1: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
08F3: A0 04    JZ    0x08F8             (0633)     jz    .UNLOCK
08F5: 79       DEC   X                  (0634)     dec   X
08F6: BF D3    JNZ   0x08CA             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
08F8: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
08F9: 2E 05 7F OR    [0x5],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
08FC: 51 05    MOV   A,[0x5]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
08FE: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
0900: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
0902: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0904: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0905: 7F       RET                      (0646)     ret
0906: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0909: 26 05 80 AND   [0x5],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
090C: 2E 05 7F OR    [0x5],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
090F: 26 06 80 AND   [0x6],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
0912: 51 05    MOV   A,[0x5]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0914: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0916: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0918: 51 06    MOV   A,[0x6]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
091A: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
091C: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
091E: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0920: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
0922: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0924: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0926: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0928: 9F 40    CALL  0x086A             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
092A: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
092C: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
092E: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0930: 9F 38    CALL  0x086A             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0932: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0934: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0936: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0938: 50 03    MOV   A,0x3              (0714)     mov   A,03h
093A: 9F 2E    CALL  0x086A             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
093C: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
093E: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0940: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0942: 9F 26    CALL  0x086A             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0944: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0946: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0948: 50 08    MOV   A,0x8              (0726)     mov   A,08h
094A: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
094C: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
094E: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0950: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0952: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0954: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0956: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0958: 50 06    MOV   A,0x6              (0736)     mov   A,06h
095A: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
095C: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
095E: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0960: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0962: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0964: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0966: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0968: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
096A: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
096C: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
096E: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0970: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0972: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0974: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0979: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
097B: 10       PUSH  X                  (0791)     push  X                            ; Store COL
097C: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
097E: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
097F: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0981: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0982: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0984: 70 3F    AND   F,0x3F             
0986: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0988: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0989: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
098B: 78       DEC   A                  (0828)     dec   A
098C: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
098E: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0997: 08       PUSH  A                  (0871)     push  A
0998: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
099A: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
099C: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
099E: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
09A0: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
09A2: D0 06    JNC   0x09A9             (0877)     jnc   .Delay50u_End
09A4: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
09A6: 78       DEC   A                  (0880)     dec   A                              ; [4]
09A7: BF FE    JNZ   0x09A6             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
09A9: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
09AA: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
09AB: 4F       MOV   X,SP               (1015)     mov   X, SP
09AC: 10       PUSH  X                  (1016)     push  X
09AD: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
09AF: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
09B1: 70 3F    AND   F,0x3F             
09B3: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
09B5: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
09B7: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
09B8: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
09BB: B0 05    JNZ   0x09C1             (1026)     jnz   .LCD_CHECK1
09BD: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
09BF: 80 11    JMP   0x09D1             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
09C1: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
09C4: D0 07    JNC   0x09CC             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
09C6: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
09C8: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
09CA: 80 06    JMP   0x09D1             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
09CC: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
09CE: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
09D1: 9E 6F    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
09D3: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
09D5: BF E2    JNZ   0x09B8             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
09D7: 70 3F    AND   F,0x3F             
09D9: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
09DB: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
09DC: 4F       MOV   X,SP               (1168)     mov   X, SP
09DD: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
09DF: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
09E1: 08       PUSH  A                  (1172)     push  A
09E2: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
09E4: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
09E6: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
09E8: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
09EB: B0 05    JNZ   0x09F1             (1177)     jnz   .VBG_NZ_SEG
09ED: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
09EF: 80 13    JMP   0x0A03             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
09F1: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
09F4: D0 09    JNC   0x09FE             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
09F6: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
09F8: 78       DEC   A                  (1185)     dec   A
09F9: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
09FC: 80 06    JMP   0x0A03             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
09FE: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
0A01: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0A03: 9E 3D    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
0A05: 18       POP   A                  (1195)     pop   A
0A06: 78       DEC   A                  (1196)     dec   A
0A07: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0A09: BF D7    JNZ   0x09E1             (1198)     jnz   .VBG_LOOP
0A0B: 70 3F    AND   F,0x3F             
0A0D: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
0A0F: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
0A10: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
0A11: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
0A12: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0A13: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0A15: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0A17: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0A1A: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
0A1D: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
0A1F: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
0A21: D0 05    JNC   0x0A27             (1251)     jnc   .VBG_SOLID
0A23: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0A25: 80 03    JMP   0x0A29             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0A27: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0A29: 9E 17    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
0A2B: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
0A2D: BF EF    JNZ   0x0A1D             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
0A2F: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
0A31: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0A34: BF E5    JNZ   0x0A1A             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0A36: 18       POP   A                  (1264)     pop  A
0A37: 18       POP   A                  (1265)     pop  A
0A38: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0A3A: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
0A3C: 70 3F    AND   F,0x3F             
0A3E: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
0A40: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
0A4F: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
0A50: 38 03    ADD   SP,0x3             (1320)     add   SP,3
0A52: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
0A54: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0A56: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
0A58: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
0A5B: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
0A5E: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
0A60: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
0A63: B0 05    JNZ   0x0A69             (1332)     jnz   .BG_OTHER
0A65: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
0A67: 80 03    JMP   0x0A6B             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
0A69: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
0A6B: 9D D5    CALL  _LCD_Write_Data|_LCD_WriteData|LCD_WriteData|LCD_Write_Data(1338)     call  LCD_WriteData
0A6D: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
0A6F: BF EE    JNZ   0x0A5E             (1340)     jnz   .BG_Loop2
0A71: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
0A73: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
0A76: BF E4    JNZ   0x0A5B             (1343)     jnz   .BG_Loop1
                                        (1344) 
0A78: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
0A7A: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
0A7C: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
0A7E: 70 3F    AND   F,0x3F             
0A80: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
0A82: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2cm.asm                      (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0A83: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2Cm.asm
                                        (0004) ;;   Version: 2.00, Updated on 2013/5/19 at 10:43:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cm User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2Cm.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) export   I2Cm_Start
                                        (0031) export  _I2Cm_Start
                                        (0032) export   I2Cm_Stop
                                        (0033) export  _I2Cm_Stop
                                        (0034) export   I2Cm_fSendRepeatStart
                                        (0035) export  _I2Cm_fSendRepeatStart
                                        (0036) export   I2Cm_fSendStart
                                        (0037) export  _I2Cm_fSendStart
                                        (0038) export   I2Cm_SendStop
                                        (0039) export  _I2Cm_SendStop
                                        (0040) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0041) export  _I2Cm_fReadBytes
                                        (0042) export  _I2Cm_bWriteBytes
                                        (0043) export  _I2Cm_bWriteCBytes
                                        (0044) 
                                        (0045) export   I2Cm_fWrite
                                        (0046) export  _I2Cm_fWrite
                                        (0047) 
                                        (0048) export   I2Cm_bRead
                                        (0049) export  _I2Cm_bRead
                                        (0050) 
                                        (0051) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0052) 
                                        (0053) export   I2Cm_fReadBytes
                                        (0054) export   I2Cm_bWriteBytes
                                        (0055) export   I2Cm_bWriteCBytes
                                        (0056) 
                                        (0057) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0058) 
                                        (0059) ;-------------------------------------------------------------------
                                        (0060) ;  Declare the varables for both the assembler and C compiler.
                                        (0061) ;
                                        (0062) ;-------------------------------------------------------------------
                                        (0063) export  I2Cm_bStatus
                                        (0064) export _I2Cm_bStatus
                                        (0065) export  I2Cm_bData
                                        (0066) export _I2Cm_bData
                                        (0067) export  I2Cm_bAddr
                                        (0068) export _I2Cm_bAddr
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) area rtc_RAM(RAM, REL, CON)
                                        (0074) 
                                        (0075) _I2Cm_bStatus:
                                        (0076)  I2Cm_bStatus:                         blk   1  ; Status during transfers
                                        (0077) _I2Cm_bData:
                                        (0078)  I2Cm_bData:                           blk   1  ; Data transfered
                                        (0079) _I2Cm_bXferCnt:
                                        (0080)  I2Cm_bXferCnt:                                  ; Reused variable for counting transfered
                                        (0081) _I2Cm_bAddr:                                     ; Bytes
                                        (0082)  I2Cm_bAddr:                           blk   1  ; Slave Address
                                        (0083) _I2Cm_bit_count:
                                        (0084)  I2Cm_bit_count:                       blk   1  ; Bit counter
                                        (0085) 
                                        (0086) AREA UserModules (ROM, REL)
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) I2Cm_SLAVE_ACKed:                      equ 0x01 ; This bit set if Slave ACKed Master
                                        (0091) I2Cm_SEND_ACK:                         equ 0x10 ; If this flag set, Master should send ACK
                                        (0092) 
                                        (0093) .SECTION
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ;  FUNCTION NAME: I2Cm_Start
                                        (0096) ;
                                        (0097) ;  DESCRIPTION:
                                        (0098) ;
                                        (0099) ;-----------------------------------------------------------------------------
                                        (0100) ;
                                        (0101) ;  ARGUMENTS: none
                                        (0102) ;
                                        (0103) ;  RETURNS: none
                                        (0104) ;
                                        (0105) ;  SIDE EFFECTS:
                                        (0106) ;    The A and X registers may be modified by this or future implementations
                                        (0107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0110) ;    functions.
                                        (0111) ;          
                                        (0112) ;    Currently only the page pointer registers listed below are modified: 
                                        (0113) ;          CUR_PP
                                        (0114) ;
                                        (0115) ;    Resets all pins on the I2C master port to the pulldown drive
                                        (0116) ;
                                        (0117) ;  THEORY of OPERATION or PROCEDURE:
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120)  I2Cm_Start:
                                        (0121) _I2Cm_Start:
                                        (0122)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0123)     RAM_SETPAGE_CUR >Port_0_DriveMode_1_SHADE
                                        (0124)     ; Set pins to drive mode high Z
0A86: 2E 03 03 OR    [0x3],0x3          (0125)     or   [Port_0_DriveMode_1_SHADE],I2Cm_SDA_pin|I2Cm_SCL_pin
0A89: 26 02 FC AND   [0x2],0xFC         (0126)     and  [Port_0_DriveMode_0_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
                                        (0127) 
                                        (0128) IF(I2Cm_DriveMode2)            
0A8C: 26 04 FC AND   [0x4],0xFC         (0129)     and  [Port_0_DriveMode_2_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0A8F: 51 04    MOV   A,[0x4]            (0130)     mov  A,[Port_0_DriveMode_2_SHADE]
0A91: 60 03    MOV   REG[0x3],A         (0131)     mov  reg[I2Cm_I2CPRTDM2],A
0A93: 71 10    OR    F,0x10             
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) 	M8C_SetBank1
0A95: 51 03    MOV   A,[0x3]            (0135)     mov  A,[Port_0_DriveMode_1_SHADE]
0A97: 60 01    MOV   REG[0x1],A         (0136)     mov  reg[I2Cm_I2CPRTDM1],A
0A99: 51 02    MOV   A,[0x2]            (0137)     mov  A,[Port_0_DriveMode_0_SHADE]
0A9B: 60 00    MOV   REG[0x0],A         (0138)     mov  reg[I2Cm_I2CPRTDM0],A
0A9D: 70 EF    AND   F,0xEF             
                                        (0139)     M8C_SetBank0
                                        (0140)                                                      ; Set both pins, low so that only the port
                                        (0141)                                                      ; mode has to be changed from a 0 to a 1
0A9F: 26 00 FC AND   [0x0],0xFC         (0142)     and  [Port_0_Data_SHADE],~(I2Cm_SDA_pin|I2Cm_SCL_pin)
0AA2: 51 00    MOV   A,[0x0]            (0143)     mov  A,[Port_0_Data_SHADE]
0AA4: 60 00    MOV   REG[0x0],A         (0144)     mov  reg[I2Cm_I2CPRTDR],A
                                        (0145)     RAM_EPILOGUE RAM_USE_CLASS_4
0AA6: 7F       RET                      (0146)     ret
                                        (0147) .ENDSECTION
                                        (0148) 
                                        (0149) .SECTION
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;  FUNCTION NAME: I2Cm_Stop
                                        (0152) ;
                                        (0153) ;  DESCRIPTION:
                                        (0154) ;    This function performs no operation and is used for future
                                        (0155) ;    module compatibility.
                                        (0156) ;
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;
                                        (0159) ;  ARGUMENTS: none
                                        (0160) ;
                                        (0161) ;  RETURNS: none
                                        (0162) ;
                                        (0163) ;  SIDE EFFECTS:
                                        (0164) ;    The A and X registers may be modified by this or future implementations
                                        (0165) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0166) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0167) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0168) ;    functions.
                                        (0169) ;          
                                        (0170)  I2Cm_Stop:
                                        (0171) _I2Cm_Stop:
                                        (0172)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0173)     RAM_EPILOGUE RAM_USE_CLASS_1
0AA7: 7F       RET                      (0174)     ret
0AA8: 70 BF    AND   F,0xBF             
0AAA: 62 D3 07 MOV   REG[0xD3],0x7      
0AAD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;
                                        (0185) ;  ARGUMENTS:
                                        (0186) ;  [SP-3]=> Address of slave
                                        (0187) ;  [SP-4]=> LSB of Array address to put data in.
                                        (0188) ;  [SP-5]=> MSB of Array address to put data in.
                                        (0189) ;  [SP-6]=> Count of bytes to read.
                                        (0190) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0191) ;           to determine if:
                                        (0192) ;             0x01 => Use RepeatStart instead of Start
                                        (0193) ;             0x02 => Don't send Stop
                                        (0194) ;
                                        (0195) ;  RETURNS:
                                        (0196) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0197) ;
                                        (0198) ;  SIDE EFFECTS:
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;          
                                        (0205) ;    Currently only the page pointer registers listed below are modified: 
                                        (0206) ;          CUR_PP
                                        (0207) ;		   IDX_PP
                                        (0208) ;
                                        (0209) SlaveAdr:     equ  -3
                                        (0210) RxArrayLSB:   equ  -4
                                        (0211) RxArrayMSB:   equ  -5
                                        (0212) RxByteCount:  equ  -6
                                        (0213) RxMode:       equ  -7
                                        (0214) 
                                        (0215) _I2Cm_fReadBytes:
                                        (0216)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0217)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0218)     RAM_SETPAGE_IDX2STK
                                        (0219)     RAM_SETPAGE_CUR >I2Cm_bStatus
0AB0: 4F       MOV   X,SP               (0220)     mov   X, SP
                                        (0221)     
0AB1: 52 FD    MOV   A,[X-3]            (0222)     mov   A, [X+SlaveAdr]
0AB3: 64       ASL   A                  (0223)     asl   A                                                ; Shift address to the left to make
                                        (0224)                                                            ; a complete byte with the R/W bit.
0AB4: 29 01    OR    A,0x1              (0225)     or    A,0x01                                           ; OR the address with the Read bit.
0AB6: 55 9D 00 MOV   [menu+4],0x0       (0226)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
0AB9: 48 F9 01 TST   [X-7],0x1          (0227)     tst   [x+RxMode],I2Cm_RepStart
0ABC: B0 05    JNZ   0x0AC2             (0228)     jnz   DoRestartRx
0ABE: 91 3B    CALL  0x0BFB             (0229)     call  I2C_DoStart                                      ; Send a start and address.
0AC0: 80 03    JMP   0x0AC4             (0230)     jmp   CheckRxAck
                                        (0231) DoRestartRx:
0AC2: 91 01    CALL  0x0BC5             (0232)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
0AC4: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0233) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0234)     RAM_SETPAGE_CUR >I2Cm_bStatus
0AC7: 47 9D 01 TST   [menu+4],0x1       (0235)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0ACA: A0 2A    JZ    0x0AF5             (0236)     jz    End_RD_Loop
                                        (0237)                                                            ; Send ACK until last byte
0ACC: 2E 9D 10 OR    [menu+4],0x10      (0238)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0239) RD_Loop:                                                   ; Loop through bytes
0ACF: 10       PUSH  X                  (0240)     push  x                                                ; Save X for later
0AD0: 7B FA    DEC   [X-6]              (0241)     dec   [x+RxByteCount]                                  ; Decrement data counter
0AD2: B0 04    JNZ   0x0AD7             (0242)     jnz   I2C_READ
0AD4: 26 9D EF AND   [menu+4],0xEF      (0243)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0244) I2C_READ:
0AD7: 91 F7    CALL  0x0CD0             (0245)     call  I2Cm_read                                        ; Read a byte
0AD9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0246)     RAM_SETPAGE_CUR >I2Cm_bStatus
0ADC: 20       POP   X                  (0247)     pop   x                                                ; Restore x
0ADD: 10       PUSH  X                  (0248)     push  x
0ADE: 52 FC    MOV   A,[X-4]            (0249)     mov   a,[x+RxArrayLSB]                                 ; Get pointer to data and put it in X
0AE0: 08       PUSH  A                  (0250)     push  a                                                ; push the index pointer onto the stack (will be popped to x) 
                                        (0251) IF SYSTEM_LARGE_MEMORY_MODEL
0AE1: 52 FB    MOV   A,[X-5]            (0252)     mov   A,[x+RxArrayMSB]
0AE3: 60 D3    MOV   REG[0xD3],A        
                                        (0253)     RAM_SETPAGE_IDX A
                                        (0254) ENDIF
0AE5: 20       POP   X                  (0255)     pop   x                                                ; restores the index pointer pushed a few lines above
0AE6: 51 9E    MOV   A,[menu+5]         (0256)     mov   a,[I2Cm_bData]                                   ; Save data in data array
0AE8: 54 00    MOV   [X+0],A            (0257)     mov   [x],a                                            ; Put read data in array
0AEA: 20       POP   X                  (0258)     pop   x                                                ; Restore the original pointer (for the subrtn params)
0AEB: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0259)     RAM_SETPAGE_IDX2STK					   ; Set Index Page to Stack Page
0AEE: 77 FC    INC   [X-4]              (0260)     inc   [x+RxArrayLSB]                                   ; Advance data pointer
0AF0: 48 FA FF TST   [X-6],0xFF         (0261)     tst   [x+RxByteCount],FFh                              ; Decrement data counter
0AF3: BF DB    JNZ   0x0ACF             (0262)     jnz   RD_Loop                                          ; Not finished, do another byte.
                                        (0263) End_RD_Loop:                                               ; Endloop
0AF5: 48 F9 02 TST   [X-7],0x2          (0264)     tst   [x+RxMode],I2Cm_NoStop
0AF8: B0 03    JNZ   0x0AFC             (0265)     jnz   SkipRxStop
0AFA: 92 6F    CALL  _I2Cm_SendStop     (0266)     call  I2Cm_SendStop
0AFC: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0267) SkipRxStop:
                                        (0268)     RAM_SETPAGE_CUR >I2Cm_bStatus
0AFF: 50 00    MOV   A,0x0              (0269)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
0B01: 47 9D 01 TST   [menu+4],0x1       (0270)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
0B04: A0 03    JZ    0x0B08             (0271)     jz    End_ReadBytes
0B06: 50 01    MOV   A,0x1              (0272)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
0B08: 70 3F    AND   F,0x3F             
0B0A: 71 C0    OR    F,0xC0             
                                        (0273) End_ReadBytes:
                                        (0274)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0275)     RAM_EPILOGUE RAM_USE_CLASS_4
0B0C: 7F       RET                      (0276)     ret
0B0D: 70 BF    AND   F,0xBF             
0B0F: 62 D3 07 MOV   REG[0xD3],0x7      
0B12: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0277) .ENDSECTION
                                        (0278) 
                                        (0279) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: I2Cm_fReadBytes
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      A => Address of slave
                                        (0290) ;      X => Pointer to other arguments.
                                        (0291) ;    [x] => LSB of Array address to put data in.
                                        (0292) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (0293) ;  [X-2] => Count of bytes to read.
                                        (0294) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (0295) ;           to determine if:
                                        (0296) ;             0x01 => Use RepeatStart instead of Start
                                        (0297) ;             0x02 => Don't send Stop
                                        (0298) ;
                                        (0299) ;  RETURNS:
                                        (0300) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0301) ;
                                        (0302) ;  SIDE EFFECTS:
                                        (0303) ;    The A and X registers may be modified by this or future implementations
                                        (0304) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0305) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0306) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0307) ;    functions.
                                        (0308) ;          
                                        (0309) RxArray_X:      equ   0
                                        (0310) RxByteCount_X:  equ  -2
                                        (0311) RxMode_X:       equ  -3
                                        (0312) 
                                        (0313)  I2Cm_fReadBytes:		                 
                                        (0314)     asl   A                                            ; Shift address to the left to make
                                        (0315)                                                        ; a complete byte with the R/W bit.
                                        (0316)     or    A,0x01                                       ; OR the address with the Read bit.
                                        (0317)     mov   [I2Cm_bStatus],0x00                              ; Clear all flags
                                        (0318)     tst   [x+RxMode_X],I2Cm_RepStart
                                        (0319)     jnz   DoRestartRxSmm
                                        (0320)     call  I2C_DoStart                                      ; Send a start and address.
                                        (0321)     jmp   CheckRxAckSmm
                                        (0322) DoRestartRxSmm:
                                        (0323)     call  I2C_DoRepeatStart                                ; Send a repeat start and address.
                                        (0324) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (0325)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0326)     jz    End_RD_LoopSmm
                                        (0327)                                                            ; Send ACK until last byte
                                        (0328)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Send ACK until last byte
                                        (0329) RD_LoopSmm:                                                   ; Loop through bytes
                                        (0330)     push  x                                                ; Save X for later
                                        (0331)     dec   [x+RxByteCount_X]                                ; Decrement data counter
                                        (0332)     jnz   I2C_READSmm
                                        (0333)     and   [I2Cm_bStatus],~I2Cm_SEND_ACK                    ; If last Byte, don't ACK
                                        (0334) I2C_READSmm:
                                        (0335)     call  I2Cm_read                                        ; Read a byte
                                        (0336)     pop   x                                                ; Restore x
                                        (0337)     push  x                                                ; Store x
                                        (0338)     mov   x,[x+RxArray_X]                                  ; Get pointer to data and put it in X
                                        (0339)     mov   a,[I2Cm_bData]                                   ; Save data in data array
                                        (0340)     mov   [x+RxArray_X],a                                  ; Put read data in array
                                        (0341)     pop   x                                                ; Restore the original pointer
                                        (0342)     inc   [x+RxArray_X]                                    ; Advance data pointer
                                        (0343)     tst   [x+RxByteCount_X],FFh                            ; Decrement data counter
                                        (0344)     jnz   RD_LoopSmm                                       ; Not finished, do another byte.
                                        (0345) End_RD_LoopSmm:                                            ; Endloop
                                        (0346)     tst   [x+RxMode_X],I2Cm_NoStop
                                        (0347)     jnz   SkipRxStopSmm
                                        (0348)     call  I2Cm_SendStop
                                        (0349) SkipRxStopSmm:
                                        (0350)     mov   a,I2Cm_XFER_ERROR                                ; Clear return value until we test if slave ACKed
                                        (0351)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed                  ; Test to see if Slave ACKed
                                        (0352)     jz    End_ReadBytesSmm
                                        (0353)     mov   a,I2Cm_XFER_COMPLETE                             ; Return ACKed True
                                        (0354) End_ReadBytesSmm:
                                        (0355)     ret
                                        (0356) .ENDSECTION
                                        (0357) ENDIF
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    Write multiple data bits to slave device.
                                        (0365) ;
                                        (0366) ;-----------------------------------------------------------------------------
                                        (0367) ;
                                        (0368) ;  ARGUMENTS:
                                        (0369) ; [SP-3] => Address of slave
                                        (0370) ; [SP-4] => LSB of Array address to put data in.
                                        (0371) ; [SP-5] => MSB of Array address to put data in.
                                        (0372) ; [SP-6] => Count of bytes to write.
                                        (0373) ; [SP-7] => Mode flags that allow the programmer to set flags
                                        (0374) ;           to determine if:
                                        (0375) ;              0x01 => Use RePeatStart instead of Start
                                        (0376) ;              0x02 => Don't send Stop
                                        (0377) ;
                                        (0378) ;
                                        (0379) ;  RETURNS:
                                        (0380) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0381) ;
                                        (0382) ;  SIDE EFFECTS:
                                        (0383) ;    The A and X registers may be modified by this or future implementations
                                        (0384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0387) ;    functions.
                                        (0388) ;          
                                        (0389) ;    Currently only the page pointer registers listed below are modified: 
                                        (0390) ;          CUR_PP
                                        (0391) ;		   IDX_PP
                                        (0392) ;
                                        (0393) TxSlaveAdr:   equ  -3
                                        (0394) TxArrayLSB:   equ  -4
                                        (0395) TxArrayMSB:   equ  -5
                                        (0396) TxByteCount:  equ  -6
                                        (0397) TxMode:       equ  -7
                                        (0398) 
                                        (0399) _I2Cm_bWriteBytes:
                                        (0400)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0401)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0402)     RAM_SETPAGE_IDX2STK
                                        (0403)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B15: 4F       MOV   X,SP               (0404)     mov   X, SP
                                        (0405)     
0B16: 52 FD    MOV   A,[X-3]            (0406)     mov   A,[x+TxSlaveAdr]
0B18: 64       ASL   A                  (0407)     asl   A                                           ; Shift address to the left to make
                                        (0408)                                                       ; a complete byte with the R/W bit.
                                        (0409)                                                       ; The ASL takes care of clearing bit 0.
0B19: 55 9D 00 MOV   [menu+4],0x0       (0410)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0411) 
                                        (0412) 
0B1C: 48 F9 01 TST   [X-7],0x1          (0413)     tst   [x+TxMode],I2Cm_RepStart
0B1F: B0 05    JNZ   0x0B25             (0414)     jnz   DoRestartTx
0B21: 90 D8    CALL  0x0BFB             (0415)     call  I2C_DoStart                                 ; Send a start and address.
0B23: 80 03    JMP   0x0B27             (0416)     jmp   DoTxAck
                                        (0417) DoRestartTx:
0B25: 90 9E    CALL  0x0BC5             (0418)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0B27: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0419) DoTxAck:
                                        (0420)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B2A: 55 9F 00 MOV   [menu+6],0x0       (0421)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
0B2D: 47 9D 01 TST   [menu+4],0x1       (0422)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
0B30: A0 27    JZ    0x0B58             (0423)     jz    End_WR_Loop
0B32: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0424) WR_Loop:                                              ; Loop through bytes
                                        (0425)     RAM_SETPAGE_IDX2STK
0B35: 10       PUSH  X                  (0426)     push  x                                           ; Save X for later
0B36: 52 FC    MOV   A,[X-4]            (0427)     mov   a,[x+TxArrayLSB]                            ; Get pointer to data and put it in X
0B38: 08       PUSH  A                  (0428) 	push  a                                           ; save the address on the stack (will pop it back into X)
                                        (0429) IF SYSTEM_LARGE_MEMORY_MODEL
0B39: 52 FB    MOV   A,[X-5]            (0430)     mov   a,[x+TxArrayMSB]
0B3B: 60 D3    MOV   REG[0xD3],A        
                                        (0431)     RAM_SETPAGE_IDX a                                 ; Set Index Page to pointer MSB
                                        (0432) ENDIF
0B3D: 20       POP   X                  (0433)     pop   x                                           ; this recovers the address previously stoed on teh stack
0B3E: 52 00    MOV   A,[X+0]            (0434)     mov   a,[x]                                       ; Get data pointer to by X
0B40: 53 9E    MOV   [menu+5],A         (0435)     mov   [I2Cm_bData],a                              ; Save data in temp location
0B42: 90 ED    CALL  0x0C31             (0436)     call  I2Cm_write                                  ; Write the data
0B44: 62 D0 00 MOV   REG[0xD0],0x0      
0B47: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0437) 	RAM_SETPAGE_CUR >I2Cm_bStatus
                                        (0438)     RAM_SETPAGE_IDX2STK                               ; Set Index Page back to Stack Page   
0B4A: 20       POP   X                  (0439)     pop   x
0B4B: 47 9D 01 TST   [menu+4],0x1       (0440)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B4E: A0 0E    JZ    0x0B5D             (0441)     jz    DoWBstop                                    ; Stop transfer if NAKed
0B50: 76 9F    INC   [menu+6]           (0442)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0B52: 77 FC    INC   [X-4]              (0443)     inc   [x+TxArrayLSB]                              ; Advance pointer
0B54: 7B FA    DEC   [X-6]              (0444)     dec   [x+TxByteCount]                             ; Decrement byte counter
0B56: BF DB    JNZ   0x0B32             (0445)     jnz   WR_Loop                                     ; Not finished, do another byte.
                                        (0446) End_WR_Loop:                                          ; Endloop
0B58: 48 F9 02 TST   [X-7],0x2          (0447)     tst   [x+TxMode],I2Cm_NoStop
0B5B: B0 03    JNZ   0x0B5F             (0448)     jnz   SkipTxStop
                                        (0449) DoWBstop:
0B5D: 92 0C    CALL  _I2Cm_SendStop     (0450)     call  I2Cm_SendStop
0B5F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0451) SkipTxStop:
                                        (0452) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0B62: 51 9F    MOV   A,[menu+6]         (0453)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
0B64: 70 3F    AND   F,0x3F             
0B66: 71 C0    OR    F,0xC0             
                                        (0454) End_WriteBytes:
                                        (0455)     RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0456)     RAM_EPILOGUE RAM_USE_CLASS_4
0B68: 7F       RET                      (0457)     ret
0B69: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0458) .ENDSECTION
                                        (0459) 
                                        (0460) 
                                        (0461) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: I2Cm_bWriteBytes
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;    Write multiple data bits to slave device.
                                        (0468) ;
                                        (0469) ;-----------------------------------------------------------------------------
                                        (0470) ;
                                        (0471) ;  ARGUMENTS:
                                        (0472) ;     A => Address of slave
                                        (0473) ;     X => Pointer to other arguments.
                                        (0474) ;   [x] => LSB of Array address to put data in.
                                        (0475) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (0476) ; [X-2] => Count of bytes to write.
                                        (0477) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (0478) ;          to determine if:
                                        (0479) ;              0x01 => Use RePeatStart instead of Start
                                        (0480) ;              0x02 => Don't send Stop
                                        (0481) ;
                                        (0482) ;
                                        (0483) ;  RETURNS:
                                        (0484) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0485) ;
                                        (0486) ;  SIDE EFFECTS:
                                        (0487) ;    The A and X registers may be modified by this or future implementations
                                        (0488) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0489) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0490) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0491) ;    functions.
                                        (0492) ;          
                                        (0493) TxArray_X:      equ   0
                                        (0494) TxByteCount_X:  equ  -2
                                        (0495) TxMode_X:       equ  -3
                                        (0496) 
                                        (0497)  I2Cm_bWriteBytes:						       
                                        (0498)     asl   A                                           ; Shift address to the left to make
                                        (0499)                                                       ; a complete byte with the R/W bit.
                                        (0500)                                                       ; The ASL takes care of clearing bit 0.
                                        (0501)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0502) 
                                        (0503) 
                                        (0504)     tst   [x+TxMode_X],I2Cm_RepStart
                                        (0505)     jnz   DoRestartTxSmm
                                        (0506)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0507)     jmp   DoTxAckSmm
                                        (0508) DoRestartTxSmm:
                                        (0509)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0510) DoTxAckSmm:
                                        (0511)     mov   [I2Cm_bXferCnt],0x00                        ; Zero out byte count first
                                        (0512)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed             ; Test to see if Slave ACKed
                                        (0513)     jz    End_WR_LoopSmm
                                        (0514) WR_LoopSmm:                                              ; Loop through bytes
                                        (0515)     push  x                                           ; Save X for later
                                        (0516)     mov   x,[x+TxArray_X]                               ; Get pointer to data and put it in X
                                        (0517)     mov   a,[x]                                       ; Get data pointer to by X
                                        (0518)     mov   [I2Cm_bData],a                              ; Save data in temp location
                                        (0519)     call  I2Cm_write                                  ; Write the data
                                        (0520)     pop   x
                                        (0521)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0522)     jz    DoWBstopSmm                                    ; Stop transfer if NAKed
                                        (0523)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
                                        (0524)     inc   [x+TxArray_X]                                 ; Advance pointer
                                        (0525)     dec   [x+TxByteCount_X]                             ; Decrement byte counter
                                        (0526)     jnz   WR_LoopSmm                                     ; Not finished, do another byte.
                                        (0527) End_WR_LoopSmm:                                          ; Endloop
                                        (0528)     tst   [x+TxMode_X],I2Cm_NoStop
                                        (0529)     jnz   SkipTxStopSmm
                                        (0530) DoWBstopSmm:
                                        (0531)     call  I2Cm_SendStop
                                        (0532) SkipTxStopSmm:
                                        (0533)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0534) End_WriteBytesSmm:
                                        (0535)     ret
                                        (0536) .ENDSECTION
                                        (0537) ENDIF
                                        (0538) 
                                        (0539) .SECTION
                                        (0540) ;-----------------------------------------------------------------------------
                                        (0541) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0542) ;
                                        (0543) ;  DESCRIPTION:
                                        (0544) ;    Write multiple data bits to slave device from ROM
                                        (0545) ;
                                        (0546) ;-----------------------------------------------------------------------------
                                        (0547) ;
                                        (0548) ;  ARGUMENTS:
                                        (0549) ;   [SP-3] => Address of slave
                                        (0550) ;   [SP-4] => LSB of ROM Array address to put data in.
                                        (0551) ;   [SP-5] => MSB of ROM Array address to put data in (ignorned)
                                        (0552) ;   [SP-6] => Count of bytes to write.
                                        (0553) ;   [SP-7] => Mode flags that allow the programmer to set flags
                                        (0554) ;            to determine if:
                                        (0555) ;               0x01 => Use RepeatStart instead of Start
                                        (0556) ;               0x02 => Don't send Stop
                                        (0557) ;
                                        (0558) ;  RETURNS:
                                        (0559) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0560) ;
                                        (0561) ;  SIDE EFFECTS:
                                        (0562) ;    The A and X registers may be modified by this or future implementations
                                        (0563) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0564) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0565) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0566) ;    functions.
                                        (0567) ;          
                                        (0568) ;    Currently only the page pointer registers listed below are modified: 
                                        (0569) ;          CUR_PP
                                        (0570) ;
                                        (0571) TxCSlaveAdr:   equ  -3
                                        (0572) TxCArrayLSB:   equ  -4
                                        (0573) TxCArrayMSB:   equ  -5
                                        (0574) TxCByteCount:  equ  -6
                                        (0575) TxCMode:       equ  -7
                                        (0576) 
                                        (0577) _I2Cm_bWriteCBytes:
                                        (0578)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0579)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0580)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B6C: 4F       MOV   X,SP               (0581)     mov   X, SP
                                        (0582) 
0B6D: 52 FD    MOV   A,[X-3]            (0583)     mov   A,[x+TxCSlaveAdr]
0B6F: 64       ASL   A                  (0584)     asl   A                                           ; Shift address to the left to make
                                        (0585)                                                       ; a complete byte with the R/W bit.
                                        (0586)                                                       ; The ASL takes care of clearing bit 0.
0B70: 55 9D 00 MOV   [menu+4],0x0       (0587)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0588) 
                                        (0589) 
0B73: 48 F9 01 TST   [X-7],0x1          (0590)     tst   [x+TxCMode],I2Cm_RepStart                   ; Check if a Start or RepeatStart
0B76: B0 05    JNZ   0x0B7C             (0591)     jnz   DoCRestartTx                                ; should executed.
0B78: 90 81    CALL  0x0BFB             (0592)     call  I2C_DoStart                                 ; Send a start and address.
0B7A: 80 03    JMP   0x0B7E             (0593)     jmp   DoCTxAck
                                        (0594) DoCRestartTx:
0B7C: 90 47    CALL  0x0BC5             (0595)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
0B7E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0596) 
                                        (0597) DoCTxAck:                                             ; Test to see if Slave is ACKed
                                        (0598) 	RAM_SETPAGE_CUR >I2Cm_bStatus
0B81: 55 9F 00 MOV   [menu+6],0x0       (0599)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
0B84: 47 9D 01 TST   [menu+4],0x1       (0600)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B87: A0 20    JZ    0x0BA8             (0601)     jz    End_WRC_Loop
                                        (0602) WRC_Loop:                                             ; Loop through bytes
0B89: 10       PUSH  X                  (0603)     push  x                                           ; Save X for later
                                        (0604) 
0B8A: 52 FB    MOV   A,[X-5]            (0605)     mov   a,[x+TxCArrayMSB]                           ; Get data pointer to by X
0B8C: 59 FC    MOV   X,[X-4]            (0606)     mov   x,[x+TxCArrayLSB]                           ; Get pointer to data and put it in X
0B8E: 28       ROMX                     (0607)     romx                                              ; Put ROM Data in a
0B8F: 53 9E    MOV   [menu+5],A         (0608)     mov   [I2Cm_bData],a                              ; Save data in temp location
0B91: 90 9E    CALL  0x0C31             (0609)     call  I2Cm_write                                  ; Write the data
0B93: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0610)     RAM_SETPAGE_CUR >I2Cm_bStatus
0B96: 20       POP   X                  (0611)     pop   x
0B97: 47 9D 01 TST   [menu+4],0x1       (0612)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
0B9A: A0 12    JZ    0x0BAD             (0613)     jz    DoWCBstop                                    ; Stop transfer if NAKed
0B9C: 76 9F    INC   [menu+6]           (0614)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
0B9E: 77 FC    INC   [X-4]              (0615)     inc   [x+TxCArrayLSB]                             ; Advance LSB of pointer
0BA0: D0 03    JNC   0x0BA4             (0616)     jnc   DecBCnt
0BA2: 77 FB    INC   [X-5]              (0617)     inc   [x+TxCArrayMSB]                             ; Advance MSB of pointer
                                        (0618) 
                                        (0619) DecBCnt:
0BA4: 7B FA    DEC   [X-6]              (0620)     dec   [x+TxCByteCount]                            ; Decrement byte counter
0BA6: BF E2    JNZ   0x0B89             (0621)     jnz   WRC_Loop                                    ; Not finished, do another byte.
                                        (0622) End_WRC_Loop:                                         ; Endloop
0BA8: 48 F9 02 TST   [X-7],0x2          (0623)     tst   [x+TxCMode],I2Cm_NoStop
0BAB: B0 03    JNZ   0x0BAF             (0624)     jnz   SkipTxCStop
                                        (0625) DoWCBstop:
0BAD: 91 BC    CALL  _I2Cm_SendStop     (0626)     call  I2Cm_SendStop
0BAF: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0627) SkipTxCStop:
                                        (0628)     RAM_SETPAGE_CUR >I2Cm_bStatus
0BB2: 51 9F    MOV   A,[menu+6]         (0629)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
0BB4: 70 3F    AND   F,0x3F             
0BB6: 71 C0    OR    F,0xC0             
                                        (0630) End_WriteCBytes:
                                        (0631)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0632)     RAM_EPILOGUE RAM_USE_CLASS_4
0BB8: 7F       RET                      (0633)     ret
                                        (0634) .ENDSECTION
                                        (0635) 
                                        (0636) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0637) .SECTION
                                        (0638) ;-----------------------------------------------------------------------------
                                        (0639) ;  FUNCTION NAME: I2Cm_bWriteCBytes
                                        (0640) ;
                                        (0641) ;  DESCRIPTION:
                                        (0642) ;    Write multiple data bits to slave device from ROM
                                        (0643) ;
                                        (0644) ;-----------------------------------------------------------------------------
                                        (0645) ;
                                        (0646) ;  ARGUMENTS:
                                        (0647) ;      A => Address of slave
                                        (0648) ;      X => Pointer to other arguments.
                                        (0649) ;     [x] => LSB of ROM Array address to put data in.
                                        (0650) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (0651) ;   [X-2] => Count of bytes to write.
                                        (0652) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (0653) ;            to determine if:
                                        (0654) ;               0x01 => Use RepeatStart instead of Start
                                        (0655) ;               0x02 => Don't send Stop
                                        (0656) ;
                                        (0657) ;  RETURNS:
                                        (0658) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0659) ;
                                        (0660) ;  SIDE EFFECTS:
                                        (0661) ;    The A and X registers may be modified by this or future implementations
                                        (0662) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0663) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0664) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0665) ;    functions.
                                        (0666) ;          
                                        (0667) TxCArrayLSB_x:   equ   0
                                        (0668) TxCArrayMSB_x:   equ  -1
                                        (0669) TxCByteCount_x:  equ  -2
                                        (0670) TxCMode_x:       equ  -3
                                        (0671) 
                                        (0672)  I2Cm_bWriteCBytes:					        
                                        (0673)     asl   A                                           ; Shift address to the left to make
                                        (0674)                                                       ; a complete byte with the R/W bit.
                                        (0675)                                                       ; The ASL takes care of clearing bit 0.
                                        (0676)     mov   [I2Cm_bStatus],0x00                         ; Clear all flags
                                        (0677) 
                                        (0678) 
                                        (0679)     tst   [x+TxCMode_x],I2Cm_RepStart                 ; Check if a Start or RepeatStart
                                        (0680)     jnz   DoCRestartTxSmm                                ; should executed.
                                        (0681)     call  I2C_DoStart                                 ; Send a start and address.
                                        (0682)     jmp   DoCTxAckSmm
                                        (0683) DoCRestartTxSmm:
                                        (0684)     call  I2C_DoRepeatStart                           ; Send a repeat start and address.
                                        (0685) 
                                        (0686) DoCTxAckSmm:                                             ; Test to see if Slave is ACKed
                                        (0687)     mov   [I2Cm_bXferCnt],0x00            ; Zero out byte count first
                                        (0688)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0689)     jz    End_WRC_LoopSmm
                                        (0690) WRC_LoopSmm:                                             ; Loop through bytes
                                        (0691)     push  x                                           ; Save X for later
                                        (0692) 
                                        (0693)     mov   a,[x+TxCArrayMSB_x]                           ; Get data pointer to by X
                                        (0694)     mov   x,[x+TxCArrayLSB_x]                           ; Get pointer to data and put it in X
                                        (0695)     romx                                              ; Put ROM Data in a
                                        (0696)     mov   [I2Cm_bData],a                              ; Save data in temp location
                                        (0697)     call  I2Cm_write                                  ; Write the data
                                        (0698)     pop   x
                                        (0699)     tst   [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (0700)     jz    DoWCBstopSmm                                ; Stop transfer if NAKed
                                        (0701)     inc   [I2Cm_bXferCnt]                             ; Increment transfer byte count
                                        (0702)     inc   [x+TxCArrayLSB_x]                             ; Advance LSB of pointer
                                        (0703)     jnc   DecBCntSmm
                                        (0704)     inc   [x+TxCArrayMSB_x]                             ; Advance MSB of pointer
                                        (0705) 
                                        (0706) DecBCntSmm:
                                        (0707)     dec   [x+TxCByteCount_x]                            ; Decrement byte counter
                                        (0708)     jnz   WRC_LoopSmm                                    ; Not finished, do another byte.
                                        (0709) End_WRC_LoopSmm:                                         ; Endloop
                                        (0710)     tst   [x+TxCMode_x],I2Cm_NoStop
                                        (0711)     jnz   SkipTxCStopSmm
                                        (0712) DoWCBstopSmm:
                                        (0713)     call  I2Cm_SendStop
                                        (0714) SkipTxCStopSmm:
                                        (0715)     mov   a,[I2Cm_bXferCnt]                           ; Return bytes transfered
                                        (0716) End_WriteCBytesSmm:
                                        (0717)     ret
                                        (0718) .ENDSECTION
                                        (0719) ENDIF
                                        (0720) 
                                        (0721) .SECTION
                                        (0722) ;-----------------------------------------------------------------------------
                                        (0723) ;  FUNCTION NAME: I2Cm_fSendRepeatStart
                                        (0724) ;
                                        (0725) ;  DESCRIPTION:
                                        (0726) ;    Send repeated start condition and send slave address.
                                        (0727) ;
                                        (0728) ;-----------------------------------------------------------------------------
                                        (0729) ;
                                        (0730) ;  ARGUMENTS:
                                        (0731) ;    I2Cm_bAddr - Contains the slave address and transfer direction.
                                        (0732) ;
                                        (0733) ;  RETURNS:
                                        (0734) ;    I2Cm_bSTatus - Cleared if a slave responds to a request. Set otherwise
                                        (0735) ;
                                        (0736) ;  SIDE EFFECTS:
                                        (0737) ;    The A and X registers may be modified by this or future implementations
                                        (0738) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0739) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0740) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0741) ;    functions.
                                        (0742) ;          
                                        (0743) ;    Currently only the page pointer registers listed below are modified: 
                                        (0744) ;          CUR_PP
                                        (0745) ;
                                        (0746) ;  THEORY of OPERATION or PROCEDURE:
                                        (0747) ;    Prepare to send start by setting SCl and SDA high.
                                        (0748) ;    must be followed directly by I2Cm_start.
                                        (0749) ;
                                        (0750)  I2Cm_fSendRepeatStart:
                                        (0751) _I2Cm_fSendRepeatStart:
                                        (0752)     RAM_PROLOGUE RAM_USE_CLASS_4
0BB9: 64       ASL   A                  (0753)     asl   a                                                ; Shift address to the left
0BBA: 79       DEC   X                  (0754)     dec   x                                                ; If zero, C flag will be set
0BBB: D0 04    JNC   0x0BC0             (0755)     jnc   .setRead                                ; Do a write if zero
0BBD: 90 06    CALL  0x0BC5             (0756)     call  I2C_DoRepeatStart
                                        (0757)     RAM_EPILOGUE RAM_USE_CLASS_4
0BBF: 7F       RET                      (0758)     ret
                                        (0759) .setRead:
0BC0: 29 01    OR    A,0x1              (0760)     or    a,0x01                                           ; Set Read flag
0BC2: 90 01    CALL  0x0BC5             (0761)     call  I2C_DoRepeatStart
                                        (0762)     RAM_EPILOGUE RAM_USE_CLASS_4
0BC4: 7F       RET                      (0763)     ret  
0BC5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0764) 
                                        (0765) I2C_DoRepeatStart:
                                        (0766)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0767)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
0BC8: 08       PUSH  A                  (0768)     push  a
0BC9: 71 10    OR    F,0x10             
                                        (0769)     M8C_SetBank1
0BCB: 2E 02 02 OR    [0x2],0x2          (0770)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin          ; Assert SCL low
0BCE: 26 02 FE AND   [0x2],0xFE         (0771)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0BD1: 51 02    MOV   A,[0x2]            (0772)     mov   A,[Port_0_DriveMode_0_SHADE]
0BD3: 60 00    MOV   REG[0x0],A         (0773)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0774) 
                                        (0775)                                                            ; Delay 3/4 period
0BD5: 50 0C    MOV   A,0xC              (0776)     mov   A,I2Cm_delay3qtr
0BD7: 91 C4    CALL  0x0D9D             (0777)     call  I2Cm_delay
                                        (0778)                                                            ; Release SCL high
0BD9: 26 02 FD AND   [0x2],0xFD         (0779)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0BDC: 51 02    MOV   A,[0x2]            (0780)     mov   A,[Port_0_DriveMode_0_SHADE]
0BDE: 60 00    MOV   REG[0x0],A         (0781)     mov   reg[I2Cm_I2CPRTDM0],A
0BE0: 70 EF    AND   F,0xEF             
                                        (0782) 
                                        (0783)     M8C_SetBank0
                                        (0784) clockstretch1:                                             ; Wait for SCL high in case of wait
                                        (0785)                                                            ; states adde by slave
0BE2: 49 00 02 TST   REG[0x0],0x2       (0786)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0BE5: AF FC    JZ    0x0BE2             (0787)     jz    clockstretch1
                                        (0788) 
0BE7: 50 0C    MOV   A,0xC              (0789)     mov   A,I2Cm_delay3qtr                                 ; Delay 1/2 period
0BE9: 91 B2    CALL  0x0D9D             (0790)     call  I2Cm_delay
0BEB: 18       POP   A                  (0791)     pop   a
0BEC: 90 0D    CALL  0x0BFB             (0792)     call  I2C_DoStart                                      ; Jump through to I2C_DoStart
                                        (0793)     RAM_EPILOGUE RAM_USE_CLASS_4
0BEE: 7F       RET                      (0794)     ret
                                        (0795) .ENDSECTION
                                        (0796) 
                                        (0797) .SECTION
                                        (0798) ;-----------------------------------------------------------------------------
                                        (0799) ;  FUNCTION NAME: I2Cm_fSendStart
                                        (0800) ;
                                        (0801) ;  DESCRIPTION:
                                        (0802) ;    Generates start condition and sends slave address.
                                        (0803) ;
                                        (0804) ;-----------------------------------------------------------------------------
                                        (0805) ;
                                        (0806) ;  ARGUMENTS:
                                        (0807) ;    A => Contains the slave address.
                                        (0808) ;
                                        (0809) ;  RETURNS:
                                        (0810) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0811) ;
                                        (0812) ;  SIDE EFFECTS:
                                        (0813) ;    The A and X registers may be modified by this or future implementations
                                        (0814) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0815) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0816) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0817) ;    functions.
                                        (0818) ;          
                                        (0819) ;    Currently only the page pointer registers listed below are modified: 
                                        (0820) ;          CUR_PP
                                        (0821) ;
                                        (0822) ;  THEORY of OPERATION or PROCEDURE:
                                        (0823) ;   Send start by setting SDA low while SCL is high. Set
                                        (0824) ;   SCL low in preparation to send address. Must be followed
                                        (0825) ;   by I2Cm_write.
                                        (0826) ;
                                        (0827)  I2Cm_fSendStart:
                                        (0828) _I2Cm_fSendStart:
                                        (0829)     RAM_PROLOGUE RAM_USE_CLASS_4
0BEF: 64       ASL   A                  (0830)     asl   a                                                     ; Shift address to the left
0BF0: 79       DEC   X                  (0831)     dec   x                                                     ; If zero, C flag will be set
0BF1: D0 04    JNC   0x0BF6             (0832)     jnc   .SetRead
0BF3: 90 06    CALL  0x0BFB             (0833)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0834)     RAM_EPILOGUE RAM_USE_CLASS_4
0BF5: 7F       RET                      (0835)     ret
                                        (0836) .SetRead:
0BF6: 29 01    OR    A,0x1              (0837)     or    a,0x01                                                ; Set Read flag
0BF8: 90 01    CALL  0x0BFB             (0838)     call  I2C_DoStart                                           ; Do a write if zero
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0BFA: 7F       RET                      (0840)     ret
0BFB: 62 D0 00 MOV   REG[0xD0],0x0      
0BFE: 71 10    OR    F,0x10             
                                        (0841) 
                                        (0842) I2C_DoStart:
                                        (0843)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0844)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0845)     M8C_SetBank1
0C00: 08       PUSH  A                  (0846)     push  A                                                     ; Save the slave address
0C01: 2E 02 01 OR    [0x2],0x1          (0847)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin               ; Assert SDA low
0C04: 51 02    MOV   A,[0x2]            (0848)     mov   A,[Port_0_DriveMode_0_SHADE]
0C06: 60 00    MOV   REG[0x0],A         (0849)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0850) 
0C08: 50 05    MOV   A,0x5              (0851)     mov   A,I2Cm_delayhalf                                      ; Delay 1/2 period
0C0A: 91 91    CALL  0x0D9D             (0852)     call  I2Cm_delay
0C0C: 18       POP   A                  (0853)     pop   A                                                     ; Restore slave address to A
0C0D: 70 EF    AND   F,0xEF             
0C0F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0854)     M8C_SetBank0
                                        (0855)     RAM_SETPAGE_CUR >I2Cm_bData
0C12: 53 9E    MOV   [menu+5],A         (0856)     mov   [I2Cm_bData],A
0C14: 62 D0 00 MOV   REG[0xD0],0x0      
0C17: 71 10    OR    F,0x10             
                                        (0857) 
                                        (0858)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0859)     M8C_SetBank1
0C19: 2E 02 02 OR    [0x2],0x2          (0860)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin               ; Set SCL low
0C1C: 51 02    MOV   A,[0x2]            (0861)     mov   A,[Port_0_DriveMode_0_SHADE]
0C1E: 60 00    MOV   REG[0x0],A         (0862)     mov   reg[I2Cm_I2CPRTDM0],A
0C20: 70 EF    AND   F,0xEF             
                                        (0863)     M8C_SetBank0
                                        (0864) 
0C22: 50 02    MOV   A,0x2              (0865)     mov   A,I2Cm_delayqtr                                       ; Delay 1/4 period
0C24: 91 77    CALL  0x0D9D             (0866)     call  I2Cm_delay
0C26: 90 09    CALL  0x0C31             (0867)     call   I2Cm_write                                           ; Write the byte.
                                        (0868)     RAM_EPILOGUE RAM_USE_CLASS_4
0C28: 7F       RET                      (0869)     ret
0C29: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0870) .ENDSECTION
                                        (0871) 
                                        (0872) .SECTION
                                        (0873) ;-----------------------------------------------------------------------------
                                        (0874) ;  FUNCTION NAME: I2Cm_fWrite
                                        (0875) ;
                                        (0876) ;  DESCRIPTION:
                                        (0877) ;    Writes a byte to the I2C master bus.
                                        (0878) ;
                                        (0879) ;-----------------------------------------------------------------------------
                                        (0880) ;
                                        (0881) ;  ARGUMENTS:
                                        (0882) ;    A contains Data to be written to I2C slave.
                                        (0883) ;
                                        (0884) ;  RETURNS:
                                        (0885) ;    1 If ACKed, else 0
                                        (0886) ;
                                        (0887) ;  SIDE EFFECTS:
                                        (0888) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0889) ;
                                        (0890) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0891) ;
                                        (0892) ;  FUNCTION NAME: I2Cm_write
                                        (0893) ;
                                        (0894) ;  DESCRIPTION:
                                        (0895) ;    Writes a byte to the I2C master bus. Also used for sending the address.
                                        (0896) ;
                                        (0897) ;  ARGUMENTS:
                                        (0898) ;    Reg A contains slave address.
                                        (0899) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2Cm_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Send data byte to slave. Must be followed by I2Cm_get_ack.
                                        (0915) ;
                                        (0916) I2Cm_fWrite:
                                        (0917) _I2Cm_fWrite:
                                        (0918)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0919)     RAM_SETPAGE_CUR >I2Cm_bData
0C2C: 53 9E    MOV   [menu+5],A         (0920)     mov   [I2Cm_bData],A                                   ; Put data in bData
0C2E: 90 01    CALL  0x0C31             (0921)     call  I2Cm_write
                                        (0922)     RAM_EPILOGUE RAM_USE_CLASS_4
0C30: 7F       RET                      (0923)     ret
0C31: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0924) 
                                        (0925) I2Cm_write:
                                        (0926) _I2Cm_write:
                                        (0927)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0928)     RAM_SETPAGE_CUR >I2Cm_bit_count
                                        (0929)     
0C34: 55 A0 08 MOV   [menu+7],0x8       (0930)     mov   [I2Cm_bit_count],8                                ; Set up count to xmit 8 bits
                                        (0931) writenextbit:
0C37: 7A A0    DEC   [menu+7]           (0932)     dec   [I2Cm_bit_count]
0C39: 62 D0 00 MOV   REG[0xD0],0x0      
0C3C: 71 10    OR    F,0x10             
                                        (0933) 
                                        (0934)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0935)                                                            ; Assert SCL low
                                        (0936)     M8C_SetBank1
0C3E: 2E 02 02 OR    [0x2],0x2          (0937)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0C41: 51 02    MOV   A,[0x2]            (0938)     mov   A,[Port_0_DriveMode_0_SHADE]
0C43: 60 00    MOV   REG[0x0],A         (0939)     mov   reg[I2Cm_I2CPRTDM0],A
0C45: 70 EF    AND   F,0xEF             
0C47: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0940)     M8C_SetBank0
                                        (0941) 
                                        (0942)     RAM_SETPAGE_CUR >I2Cm_bit_count
0C4A: 6B 9E    RLC   [menu+5]           (0943)     rlc   [I2Cm_bData]
0C4C: 62 D0 00 MOV   REG[0xD0],0x0      
0C4F: 71 10    OR    F,0x10             
                                        (0944)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (0945)     M8C_SetBank1
0C51: C0 0A    JC    0x0C5C             (0946)     jc    write_bit                                        ; Assert SDA low for data 0    
0C53: 2E 02 01 OR    [0x2],0x1          (0947)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0C56: 51 02    MOV   A,[0x2]            (0948)     mov   A,[Port_0_DriveMode_0_SHADE]
0C58: 60 00    MOV   REG[0x0],A         (0949)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0950) 
0C5A: 80 08    JMP   0x0C63             (0951)     jmp   writestartclock
                                        (0952) write_bit:                                                 ; Release SDA high for data 1
0C5C: 26 02 FE AND   [0x2],0xFE         (0953)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin      
0C5F: 51 02    MOV   A,[0x2]            (0954)     mov   A,[Port_0_DriveMode_0_SHADE]
0C61: 60 00    MOV   REG[0x0],A         (0955)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (0956) 
                                        (0957) writestartclock:
0C63: 50 05    MOV   A,0x5              (0958)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0C65: 91 36    CALL  0x0D9D             (0959)     call  I2Cm_delay
                                        (0960)                                                            ; Release SCL High
0C67: 26 02 FD AND   [0x2],0xFD         (0961)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C6A: 51 02    MOV   A,[0x2]            (0962)     mov   A,[Port_0_DriveMode_0_SHADE]
0C6C: 60 00    MOV   REG[0x0],A         (0963)     mov   reg[I2Cm_I2CPRTDM0],A
0C6E: 70 EF    AND   F,0xEF             
                                        (0964) 
                                        (0965)     M8C_SetBank0
                                        (0966) clockstretch2:                                             ; Wait for SCL high in case of wait states
                                        (0967)                                                            ; are added by slave.
0C70: 49 00 02 TST   REG[0x0],0x2       (0968)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0C73: AF FC    JZ    0x0C70             (0969)     jz    clockstretch2
                                        (0970)                                                            ; Delay for 1/2 period
0C75: 50 05    MOV   A,0x5              (0971)     mov   A,I2Cm_delayhalf
0C77: 91 24    CALL  0x0D9D             (0972)     call  I2Cm_delay
0C79: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0973) 
                                        (0974)     RAM_SETPAGE_CUR >I2Cm_bit_count
0C7C: 3C A0 00 CMP   [menu+7],0x0       (0975)     cmp   [I2Cm_bit_count],0
0C7F: BF B7    JNZ   0x0C37             (0976)     jnz   writenextbit
0C81: 90 01    CALL  0x0C84             (0977)     call  I2Cm_get_ack                
                                        (0978) 
                                        (0979)     RAM_EPILOGUE RAM_USE_CLASS_4
0C83: 7F       RET                      (0980)     ret
0C84: 62 D0 00 MOV   REG[0xD0],0x0      
0C87: 71 10    OR    F,0x10             
                                        (0981) .ENDSECTION
                                        (0982) 
                                        (0983) .SECTION
                                        (0984) ;-----------------------------------------------------------------------------
                                        (0985) ;  FUNCTION NAME: I2Cm_get_ack
                                        (0986) ;
                                        (0987) ;  DESCRIPTION:
                                        (0988) ;    Get slave acknowledge response. Used only by I2Cm_write.
                                        (0989) ;
                                        (0990) ;-----------------------------------------------------------------------------
                                        (0991) ;
                                        (0992) ;  ARGUMENTS:
                                        (0993) ;    I2Cm_bData - Contains data to be transmitted.
                                        (0994) ;
                                        (0995) ;  RETURNS:
                                        (0996) ;    Sets flag in I2Cm_bStatus if ACKed by Slave.
                                        (0997) ;
                                        (0998) ;  SIDE EFFECTS:
                                        (0999) ;    The A and X registers may be modified by this or future implementations
                                        (1000) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1001) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1002) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1003) ;    functions.
                                        (1004) ;          
                                        (1005) ;    Currently only the page pointer registers listed below are modified: 
                                        (1006) ;          CUR_PP
                                        (1007) ;
                                        (1008) I2Cm_get_ack:
                                        (1009) _I2Cm_get_ack:
                                        (1010)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1011)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1012)     M8C_SetBank1
0C89: 2E 02 02 OR    [0x2],0x2          (1013)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0C8C: 51 02    MOV   A,[0x2]            (1014)     mov   A,[Port_0_DriveMode_0_SHADE]
0C8E: 60 00    MOV   REG[0x0],A         (1015)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1016)                                                            ; Release SDA high so slave may ACK
0C90: 26 02 FE AND   [0x2],0xFE         (1017)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0C93: 51 02    MOV   A,[0x2]            (1018)     mov   A,[Port_0_DriveMode_0_SHADE]
0C95: 60 00    MOV   REG[0x0],A         (1019)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1020)                                                            ; Delay 3/4 period
0C97: 50 0C    MOV   A,0xC              (1021)     mov   A,I2Cm_delay3qtr
0C99: 91 02    CALL  0x0D9D             (1022)     call  I2Cm_delay
                                        (1023)                                                            ; Release SCL high
0C9B: 26 02 FD AND   [0x2],0xFD         (1024)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0C9E: 51 02    MOV   A,[0x2]            (1025)     mov   A,[Port_0_DriveMode_0_SHADE]
0CA0: 60 00    MOV   REG[0x0],A         (1026)     mov   reg[I2Cm_I2CPRTDM0],A
0CA2: 70 EF    AND   F,0xEF             
                                        (1027) 
                                        (1028)     M8C_SetBank0
                                        (1029) clockstretch3:                                             ; Wait for SCL to go high in case wait states
                                        (1030)                                                            ; are added my slave.
0CA4: 49 00 02 TST   REG[0x0],0x2       (1031)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0CA7: AF FC    JZ    0x0CA4             (1032)     jz    clockstretch3
0CA9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1033)     
                                        (1034)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1035)                                                        ; Clear ACK bit
0CAC: 26 9D FE AND   [menu+4],0xFE      (1036)     and   [I2Cm_bStatus],~I2Cm_SLAVE_ACKed
0CAF: 49 00 01 TST   REG[0x0],0x1       (1037)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0CB2: B0 04    JNZ   0x0CB7             (1038)     jnz    getack2                                         ; If ACKed, set flag
0CB4: 2E 9D 01 OR    [menu+4],0x1       (1039)     or    [I2Cm_bStatus],I2Cm_SLAVE_ACKed
                                        (1040) 
                                        (1041) getack2:
0CB7: 50 05    MOV   A,0x5              (1042)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0CB9: 90 E2    CALL  0x0D9D             (1043)     call  I2Cm_delay
                                        (1044) 
0CBB: 51 9D    MOV   A,[menu+4]         (1045)     mov   A,[I2Cm_bStatus]                                 ; Get result and put it in A
0CBD: 21 01    AND   A,0x1              (1046)     and   A,I2Cm_SLAVE_ACKed                               ; Mask off just the ACK flag.
                                        (1047)     RAM_EPILOGUE RAM_USE_CLASS_4
0CBF: 7F       RET                      (1048)     ret
0CC0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1049) .ENDSECTION
                                        (1050) 
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: I2Cm_bRead
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;    Reads 1 data byte from the I2C master bus.
                                        (1057) ;
                                        (1058) ;-----------------------------------------------------------------------------
                                        (1059) ;
                                        (1060) ;  ARGUMENTS:
                                        (1061) ;    Reg A Contains the Slave Address.
                                        (1062) ;    I2Cm_bStatus - Set for no ack to be followed by stop.
                                        (1063) ;    Clear for ack to indicate more data to follow.
                                        (1064) ;
                                        (1065) ;  RETURNS:
                                        (1066) ;    I2Cm_bData - Contains received data.
                                        (1067) ;
                                        (1068) ;  SIDE EFFECTS:
                                        (1069) ;    The A and X registers may be modified by this or future implementations
                                        (1070) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1071) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1072) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1073) ;    functions.
                                        (1074) ;          
                                        (1075) ;    Currently only the page pointer registers listed below are modified: 
                                        (1076) ;          CUR_PP
                                        (1077) ;
                                        (1078) ;    Must be followed by I2Cm_put_ack.
                                        (1079) ;
                                        (1080) I2Cm_bRead:
                                        (1081) _I2Cm_bRead:
                                        (1082)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1083)     RAM_SETPAGE_CUR >I2Cm_bStatus
0CC3: 55 9D 00 MOV   [menu+4],0x0       (1084)     mov   [I2Cm_bStatus],0x00                              ; Clear ACK flag
0CC6: 21 FF    AND   A,0xFF             (1085)     and   A,0xFF                                           ; Is Ack flag set"
0CC8: A0 07    JZ    0x0CD0             (1086)     jz    I2Cm_read                                        ; Don't ACK
0CCA: 2E 9D 10 OR    [menu+4],0x10      (1087)     or    [I2Cm_bStatus],I2Cm_SEND_ACK                     ; Set ACK flag
0CCD: 90 01    CALL  0x0CD0             (1088)     call  I2Cm_read
                                        (1089)     RAM_EPILOGUE RAM_USE_CLASS_4
0CCF: 7F       RET                      (1090)     ret
0CD0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1091) 
                                        (1092) I2Cm_read:
                                        (1093) _I2Cm_read:
                                        (1094)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1095)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0CD3: 55 A0 08 MOV   [menu+7],0x8       (1096)     mov   [I2Cm_bit_count],8                               ; Count and prepare bits to read
                                        (1097) readnextbit:
0CD6: 7A A0    DEC   [menu+7]           (1098)     dec   [I2Cm_bit_count]
0CD8: 6B 9E    RLC   [menu+5]           (1099)     rlc   [I2Cm_bData]
0CDA: 62 D0 00 MOV   REG[0xD0],0x0      
0CDD: 71 10    OR    F,0x10             
                                        (1100)     
                                        (1101)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1102)     M8C_SetBank1                                           ; Asser SCL low
0CDF: 2E 02 02 OR    [0x2],0x2          (1103)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0CE2: 51 02    MOV   A,[0x2]            (1104)     mov   A,[Port_0_DriveMode_0_SHADE]
0CE4: 60 00    MOV   REG[0x0],A         (1105)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1106)                                                            ; Delay 1/2 period
0CE6: 50 05    MOV   A,0x5              (1107)     mov   A,I2Cm_delayhalf
0CE8: 90 B3    CALL  0x0D9D             (1108)     call  I2Cm_delay
                                        (1109)                                                            ; Release SCL high
0CEA: 26 02 FD AND   [0x2],0xFD         (1110)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0CED: 51 02    MOV   A,[0x2]            (1111)     mov   A,[Port_0_DriveMode_0_SHADE]
0CEF: 60 00    MOV   REG[0x0],A         (1112)     mov   reg[I2Cm_I2CPRTDM0],A
0CF1: 70 EF    AND   F,0xEF             
0CF3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1113) 
                                        (1114)     M8C_SetBank0
                                        (1115)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1116) clockstretch4:                                             ; Wait for SCL to go high in case slave
                                        (1117)                                                            ; addes wait states.
                                        (1118) 
0CF6: 49 00 02 TST   REG[0x0],0x2       (1119)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0CF9: AF FC    JZ    0x0CF6             (1120)     jz    clockstretch4
                                        (1121)                                                            ; Delay 1/4 period
0CFB: 50 02    MOV   A,0x2              (1122)     mov   A,I2Cm_delayqtr
0CFD: 90 9E    CALL  0x0D9D             (1123)     call  I2Cm_delay
                                        (1124) 
0CFF: 26 9E FE AND   [menu+5],0xFE      (1125)     and   [I2Cm_bData],~01h                                ; Record bit received
0D02: 49 00 01 TST   REG[0x0],0x1       (1126)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SDA_pin
0D05: A0 04    JZ    0x0D0A             (1127)     jz    readnobit
0D07: 2E 9E 01 OR    [menu+5],0x1       (1128)     or    [I2Cm_bData],01h
                                        (1129) readnobit:
0D0A: 3C A0 00 CMP   [menu+7],0x0       (1130)     cmp   [I2Cm_bit_count],0
0D0D: BF C8    JNZ   0x0CD6             (1131)     jnz   readnextbit                                      ; Check for byte complete
                                        (1132) 
0D0F: 90 01    CALL  0x0D12             (1133)     call   I2Cm_put_ack                
                                        (1134)     RAM_EPILOGUE RAM_USE_CLASS_4
0D11: 7F       RET                      (1135)     ret
0D12: 62 D0 00 MOV   REG[0xD0],0x0      
0D15: 71 10    OR    F,0x10             
                                        (1136) .ENDSECTION
                                        (1137)                                                          
                                        (1138) .SECTION
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;  FUNCTION NAME: I2Cm_put_ack
                                        (1141) ;
                                        (1142) ;  DESCRIPTION:
                                        (1143) ;    Send acknowledge to slave. Used only by I2Cm_read
                                        (1144) ;
                                        (1145) ;-----------------------------------------------------------------------------
                                        (1146) ;
                                        (1147) ;  ARGUMENTS:
                                        (1148) ;    I2Cm_bStatus - Set for no ack to be followed by stop. Clear for ack
                                        (1149) ;    to indicate more data to follow.
                                        (1150) ;
                                        (1151) ;  RETURNS:
                                        (1152) ;    I2Cm_bData - Contains received data.
                                        (1153) ;
                                        (1154) ;  SIDE EFFECTS:
                                        (1155) ;    The A and X registers may be modified by this or future implementations
                                        (1156) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1157) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1158) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1159) ;    functions.
                                        (1160) ;          
                                        (1161) ;    Currently only the page pointer registers listed below are modified: 
                                        (1162) ;          CUR_PP
                                        (1163) ;
                                        (1164) ;    Send ack if more data will follow.
                                        (1165) ;
                                        (1166) I2Cm_put_ack:
                                        (1167) _I2Cm_put_ack:
                                        (1168)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1169)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1170)     M8C_SetBank1                                           ; Assert SCL low
0D17: 2E 02 02 OR    [0x2],0x2          (1171)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0D1A: 51 02    MOV   A,[0x2]            (1172)     mov   A,[Port_0_DriveMode_0_SHADE]
0D1C: 60 00    MOV   REG[0x0],A         (1173)     mov   reg[I2Cm_I2CPRTDM0],A
0D1E: 70 EF    AND   F,0xEF             
0D20: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1174)     M8C_SetBank0
                                        (1175) 
                                        (1176)     RAM_SETPAGE_CUR >I2Cm_bStatus    
                                        (1177)                                                        ; Check if ack is to be transmitted
0D23: 47 9D 10 TST   [menu+4],0x10      (1178)     tst   [I2Cm_bStatus],I2Cm_SEND_ACK
0D26: 62 D0 00 MOV   REG[0xD0],0x0      
0D29: 71 10    OR    F,0x10             
                                        (1179) 
                                        (1180)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1181)     M8C_SetBank1
                                        (1182) 
0D2B: A0 0A    JZ    0x0D36             (1183)     jz    noputack
                                        (1184)                                                            ; Assert SDA low
0D2D: 2E 02 01 OR    [0x2],0x1          (1185)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SDA_pin
0D30: 51 02    MOV   A,[0x2]            (1186)     mov   A,[Port_0_DriveMode_0_SHADE]
0D32: 60 00    MOV   REG[0x0],A         (1187)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1188) 
0D34: 80 08    JMP   0x0D3D             (1189)     jmp   putack1
                                        (1190) noputack:                                                  ; Release SDA high
0D36: 26 02 FE AND   [0x2],0xFE         (1191)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0D39: 51 02    MOV   A,[0x2]            (1192)     mov   A,[Port_0_DriveMode_0_SHADE]
0D3B: 60 00    MOV   REG[0x0],A         (1193)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1194) 
                                        (1195) putack1:
0D3D: 50 02    MOV   A,0x2              (1196)     mov   A,I2Cm_delayqtr                                  ; Delay 1/4 period
0D3F: 90 5C    CALL  0x0D9D             (1197)     call  I2Cm_delay
                                        (1198)                                                            ; Release SCL high
0D41: 26 02 FD AND   [0x2],0xFD         (1199)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0D44: 51 02    MOV   A,[0x2]            (1200)     mov   A,[Port_0_DriveMode_0_SHADE]
0D46: 60 00    MOV   REG[0x0],A         (1201)     mov   reg[I2Cm_I2CPRTDM0],A
0D48: 70 EF    AND   F,0xEF             
                                        (1202) 
                                        (1203)     M8C_SetBank0
                                        (1204) clockstretch5:                                             ; Wait for SCL high in case slave
                                        (1205)                                                            ; adds wait states.
0D4A: 49 00 02 TST   REG[0x0],0x2       (1206)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D4D: AF FC    JZ    0x0D4A             (1207)     jz    clockstretch5
                                        (1208)                                                            ; delay for the high half of the clock.
0D4F: 50 05    MOV   A,0x5              (1209)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0D51: 90 4A    CALL  0x0D9D             (1210)     call  I2Cm_delay
0D53: 71 10    OR    F,0x10             
                                        (1211) 
                                        (1212)     M8C_SetBank1                                           ; Assert SCL low
0D55: 2E 02 02 OR    [0x2],0x2          (1213)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin
0D58: 51 02    MOV   A,[0x2]            (1214)     mov   A,[Port_0_DriveMode_0_SHADE]
0D5A: 60 00    MOV   REG[0x0],A         (1215)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1216)                                                            ; If there is another read pending
                                        (1217)                                                            ; must release SDA for slave
0D5C: 26 02 FE AND   [0x2],0xFE         (1218)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin         ; Release SDA high
0D5F: 51 02    MOV   A,[0x2]            (1219)     mov   A,[Port_0_DriveMode_0_SHADE]
0D61: 60 00    MOV   REG[0x0],A         (1220)     mov   reg[I2Cm_I2CPRTDM0],A
0D63: 70 EF    AND   F,0xEF             
0D65: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1221)     M8C_SetBank0
                                        (1222) 
                                        (1223)     RAM_SETPAGE_CUR >I2Cm_bStatus    
0D68: 51 9E    MOV   A,[menu+5]         (1224)     mov   A, [I2Cm_bData]
                                        (1225)     RAM_EPILOGUE RAM_USE_CLASS_4
0D6A: 7F       RET                      (1226)     ret
0D6B: 62 D0 00 MOV   REG[0xD0],0x0      
0D6E: 71 10    OR    F,0x10             
                                        (1227) .ENDSECTION
                                        (1228) 
                                        (1229) .SECTION
                                        (1230) ;-----------------------------------------------------------------------------
                                        (1231) ;  FUNCTION NAME: I2Cm_SendStop
                                        (1232) ;
                                        (1233) ;  DESCRIPTION:
                                        (1234) ;    Assert stop condition.
                                        (1235) ;
                                        (1236) ;-----------------------------------------------------------------------------
                                        (1237) ;
                                        (1238) ;  ARGUMENTS: none
                                        (1239) ;
                                        (1240) ;  RETURNS: none
                                        (1241) ;
                                        (1242) ;  SIDE EFFECTS:
                                        (1243) ;    The A and X registers may be modified by this or future implementations
                                        (1244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1247) ;    functions.
                                        (1248) ;          
                                        (1249) ;    Currently only the page pointer registers listed below are modified: 
                                        (1250) ;          CUR_PP
                                        (1251) ;
                                        (1252) ;  THEORY of OPERATION or PROCEDURE:
                                        (1253) ;     Send stop by releasing SDA high while SCL high.ASA21CR1
                                        (1254) ;
                                        (1255)  I2Cm_SendStop:
                                        (1256) _I2Cm_SendStop:
                                        (1257)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1258)     RAM_SETPAGE_CUR >Port_0_DriveMode_0_SHADE
                                        (1259)     M8C_SetBank1                                           ; Assert ACK and SDA low
0D70: 2E 02 03 OR    [0x2],0x3          (1260)     or    [Port_0_DriveMode_0_SHADE],I2Cm_SCL_pin|I2Cm_SDA_pin
0D73: 51 02    MOV   A,[0x2]            (1261)     mov   A,[Port_0_DriveMode_0_SHADE]
0D75: 60 00    MOV   REG[0x0],A         (1262)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1263) 
0D77: 50 0C    MOV   A,0xC              (1264)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0D79: 90 22    CALL  0x0D9D             (1265)     call  I2Cm_delay
                                        (1266)                                                            ; Release SCL high
0D7B: 26 02 FD AND   [0x2],0xFD         (1267)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SCL_pin
0D7E: 51 02    MOV   A,[0x2]            (1268)     mov   A,[Port_0_DriveMode_0_SHADE]
0D80: 60 00    MOV   REG[0x0],A         (1269)     mov   reg[I2Cm_I2CPRTDM0],A
0D82: 70 EF    AND   F,0xEF             
                                        (1270) 
                                        (1271)     M8C_SetBank0
                                        (1272) clockstretch6:                                             ; Wait for SCL to go high in case slave
                                        (1273)                                                            ; has added wait states.
0D84: 49 00 02 TST   REG[0x0],0x2       (1274)     tst   reg[I2Cm_I2CPRTDR],I2Cm_SCL_pin
0D87: AF FC    JZ    0x0D84             (1275)     jz    clockstretch6
0D89: 71 10    OR    F,0x10             
                                        (1276)     M8C_SetBank1
                                        (1277) 
0D8B: 50 0C    MOV   A,0xC              (1278)     mov   A,I2Cm_delay3qtr                                 ; Delay 3/4 period
0D8D: 90 0E    CALL  0x0D9D             (1279)     call  I2Cm_delay
                                        (1280) 
                                        (1281)                                                            ; Release SDA high
0D8F: 26 02 FE AND   [0x2],0xFE         (1282)     and   [Port_0_DriveMode_0_SHADE],~I2Cm_SDA_pin
0D92: 51 02    MOV   A,[0x2]            (1283)     mov   A,[Port_0_DriveMode_0_SHADE]
0D94: 60 00    MOV   REG[0x0],A         (1284)     mov   reg[I2Cm_I2CPRTDM0],A
                                        (1285) 
0D96: 50 05    MOV   A,0x5              (1286)     mov   A,I2Cm_delayhalf                                 ; Delay 1/2 period
0D98: 90 03    CALL  0x0D9D             (1287)     call  I2Cm_delay
0D9A: 70 EF    AND   F,0xEF             
                                        (1288)     M8C_SetBank0
                                        (1289)     
                                        (1290)     RAM_EPILOGUE RAM_USE_CLASS_4
0D9C: 7F       RET                      (1291)     ret
                                        (1292) .ENDSECTION
                                        (1293) 
                                        (1294) .SECTION
                                        (1295) ;-----------------------------------------------------------------------------
                                        (1296) ;  FUNCTION NAME: I2Cm_delay
                                        (1297) ;
                                        (1298) ;  DESCRIPTION:
                                        (1299) ;    Create delays for I2Cm routines.
                                        (1300) ;
                                        (1301) ;-----------------------------------------------------------------------------
                                        (1302) ;
                                        (1303) ;  ARGUMENTS: none
                                        (1304) ;
                                        (1305) ;  RETURNS: none
                                        (1306) ;
                                        (1307) ;  SIDE EFFECTS:
                                        (1308) ;    The A and X registers may be modified by this or future implementations
                                        (1309) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1310) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1311) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1312) ;    functions.
                                        (1313) ;          
                                        (1314) I2Cm_delay:                                      ; 11 cycles for call. 32 total.
                                        (1315) I2Cmdelay1:                                      ; Delay 1/4 period at 100 kHz
0D9D: 78       DEC   A                  (1316)      dec  A                                      ; 4 cycles
0D9E: BF FE    JNZ   0x0D9D             (1317)      jnz  I2Cmdelay1                             ; 5 cycles for jump, 4 no jump.     
0DA0: 7F       RET                      (1318)      ret                                         ; 8 cycles
                                        (1319)   
                                        (1320) .ENDSECTION
                                        (1321) 
                                        (1322) 
                                        (1323) 
                                        (1324) ; End of File I2Cm.asm
                                        (1325) 
                                        (1326) 
FILE: lib\adcincint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINCINT.asm
                                        (0004) ;;  Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;
                                        (0006) ;;  DESCRIPTION: Assembler interrupt service routine for the ADCINC
                                        (0007) ;;               A/D Converter User Module. This code works for both the
                                        (0008) ;;               first and second-order modulator topologies.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "ADCINC.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export _ADCINC_ADConversion_ISR
                                        (0024) 
                                        (0025) export _ADCINC_iResult
                                        (0026) export  ADCINC_iResult
                                        (0027) export _ADCINC_fStatus
                                        (0028) export  ADCINC_fStatus
                                        (0029) export _ADCINC_bState
                                        (0030) export  ADCINC_bState
                                        (0031) export _ADCINC_fMode
                                        (0032) export  ADCINC_fMode
                                        (0033) export _ADCINC_bNumSamples
                                        (0034) export  ADCINC_bNumSamples
                                        (0035) 
                                        (0036) ;-----------------------------------------------
                                        (0037) ; Variable Allocation
                                        (0038) ;-----------------------------------------------
                                        (0039) AREA InterruptRAM(RAM,REL)
                                        (0040)  ADCINC_iResult:
                                        (0041) _ADCINC_iResult:                           BLK  2 ;Calculated answer
                                        (0042)   iTemp:                                   BLK  2 ;internal temp storage
                                        (0043)  ADCINC_fStatus:
                                        (0044) _ADCINC_fStatus:                           BLK  1 ;ADC Status
                                        (0045)  ADCINC_bState:
                                        (0046) _ADCINC_bState:                            BLK  1 ;State value of ADC count
                                        (0047)  ADCINC_fMode:
                                        (0048) _ADCINC_fMode:                             BLK  1 ;Integrate and reset mode.
                                        (0049)  ADCINC_bNumSamples:
                                        (0050) _ADCINC_bNumSamples:                       BLK  1 ;Number of samples to take.
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0057) ;---------------------------------------------------
                                        (0058) ; Insert your custom declarations below this banner
                                        (0059) ;---------------------------------------------------
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _ADCINC_ADConversion_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION: Perform final filter operations to produce output samples.
                                        (0083) ;
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;
                                        (0086) ;    The decimation rate is established by the PWM interrupt. Four timer
                                        (0087) ;    clocks elapse for each modulator output (decimator input) since the
                                        (0088) ;    phi1/phi2 generator divides by 4. This means the timer period and thus
                                        (0089) ;    it's interrupt must equal 4 times the actual decimation rate.  The
                                        (0090) ;    decimator is ru  for 2^(#bits-6).
                                        (0091) ;
                                        (0092) _ADCINC_ADConversion_ISR:
0DA1: 7A 0C    DEC   [0xC]              (0093)     dec  [ADCINC_bState]
                                        (0094) if1:
0DA3: C0 02    JC    0x0DA6             (0095)     jc endif1 ; no underflow
0DA5: 7E       RETI                     (0096)     reti
                                        (0097) endif1:
0DA6: 3C 0D 00 CMP   [0xD],0x0          (0098)     cmp [ADCINC_fMode],0
                                        (0099) if2: 
0DA9: B0 12    JNZ   0x0DBC             (0100)     jnz endif2  ;leaving reset mode
0DAB: 08       PUSH  A                  (0101)     push A                            ;read decimator
0DAC: 5D E5    MOV   A,REG[0xE5]        (0102)     mov  A, reg[DEC_DL]
0DAE: 53 0A    MOV   [0xA],A            (0103)     mov  [iTemp + LowByte],A
0DB0: 5D E4    MOV   A,REG[0xE4]        (0104)     mov  A, reg[DEC_DH]
0DB2: 53 09    MOV   [0x9],A            (0105)     mov  [iTemp + HighByte], A
0DB4: 18       POP   A                  (0106)     pop A
0DB5: 55 0D 01 MOV   [0xD],0x1          (0107)     mov [ADCINC_fMode],1
0DB8: 55 0C 0F MOV   [0xC],0xF          (0108)     mov [ADCINC_bState],((1<<(ADCINC_bNUMBITS- 6))-1)
0DBB: 7E       RETI                     (0109)     reti
0DBC: 43 8A 20 OR    REG[0x8A],0x20     
0DBF: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0110) endif2:
                                        (0111)     ;This code runs at end of integrate
                                        (0112)     ADCINC_RESET_INTEGRATOR_M
0DC2: 08       PUSH  A                  (0113)     push A
0DC3: 5D E5    MOV   A,REG[0xE5]        (0114)     mov  A, reg[DEC_DL]
0DC5: 12 0A    SUB   A,[0xA]            (0115)     sub  A,[iTemp + LowByte]
0DC7: 53 0A    MOV   [0xA],A            (0116)     mov  [iTemp +LowByte],A
0DC9: 5D E4    MOV   A,REG[0xE4]        (0117)     mov  A, reg[DEC_DH]
0DCB: 1A 09    SBB   A,[0x9]            (0118)     sbb  A,[iTemp + HighByte]
                                        (0119) 
                                        (0120)        ;check for overflow
                                        (0121) IF     ADCINC_8_OR_MORE_BITS
0DCD: 39 04    CMP   A,0x4              (0122)     cmp A,(1<<(ADCINC_bNUMBITS - 8))
                                        (0123) if3: 
0DCF: B0 05    JNZ   0x0DD5             (0124)     jnz endif3 ;overflow
0DD1: 78       DEC   A                  (0125)     dec A
0DD2: 55 0A FF MOV   [0xA],0xFF         (0126)     mov [iTemp + LowByte],ffh
                                        (0127) endif3:
                                        (0128) ELSE
                                        (0129)     cmp [iTemp + LowByte],(1<<(ADCINC_bNUMBITS))
                                        (0130) if4: 
                                        (0131)     jnz endif4 ;overflow
                                        (0132)     dec [iTemp + LowByte]
                                        (0133) endif4:
                                        (0134) ENDIF
                                        (0135) IF ADCINC_SIGNED_DATA
                                        (0136) IF ADCINC_9_OR_MORE_BITS
                                        (0137)     sub A,(1<<(ADCINC_bNUMBITS - 9))
                                        (0138) ELSE
                                        (0139)     sub [iTemp +LowByte],(1<<(ADCINC_bNUMBITS - 1))
                                        (0140)     sbb A,0
                                        (0141) ENDIF
                                        (0142) ENDIF
0DD5: 5F 08 0A MOV   [0x8],[0xA]        (0143)     mov  [ADCINC_iResult + LowByte],[iTemp +LowByte]
0DD8: 53 07    MOV   [0x7],A            (0144)     mov  [ADCINC_iResult + HighByte],A
0DDA: 55 0B 01 MOV   [0xB],0x1          (0145)     mov  [ADCINC_fStatus],1
                                        (0146) ConversionReady:
                                        (0147)     ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0148)     ;---------------------------------------------------
                                        (0149)     ; Insert your custom code below this banner
                                        (0150)     ;---------------------------------------------------
                                        (0151)     ;  Sample data is now in iResult
                                        (0152)     ;
                                        (0153)     ;  NOTE: This interrupt service routine has already
                                        (0154)     ;  preserved the values of the A CPU register. If
                                        (0155)     ;  you need to use the X register you must preserve
                                        (0156)     ;  its value and restore it before the return from
                                        (0157)     ;  interrupt.
                                        (0158)     ;---------------------------------------------------
                                        (0159)     ; Insert your custom code above this banner
                                        (0160)     ;---------------------------------------------------
                                        (0161)     ;@PSoC_UserCode_END@ (Do not change this line.)
0DDD: 18       POP   A                  (0162)     pop A
0DDE: 3C 0E 00 CMP   [0xE],0x0          (0163)     cmp [ADCINC_bNumSamples],0
                                        (0164) if5: 
0DE1: B0 0E    JNZ   0x0DF0             (0165)     jnz endif5 ; Number of samples is zero
0DE3: 55 0D 00 MOV   [0xD],0x0          (0166)     mov [ADCINC_fMode],0
0DE6: 55 0C 00 MOV   [0xC],0x0          (0167)     mov [ADCINC_bState],0
0DE9: 41 8B EF AND   REG[0x8B],0xEF     
0DEC: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0168)     ADCINC_ENABLE_INTEGRATOR_M
0DEF: 7E       RETI                     (0169)     reti       
                                        (0170) endif5:
0DF0: 7A 0E    DEC   [0xE]              (0171)     dec [ADCINC_bNumSamples]
                                        (0172) if6:
0DF2: A0 0E    JZ    0x0E01             (0173)     jz endif6  ; count not zero
0DF4: 55 0D 00 MOV   [0xD],0x0          (0174)     mov [ADCINC_fMode],0
0DF7: 55 0C 00 MOV   [0xC],0x0          (0175)     mov [ADCINC_bState],0
0DFA: 41 8B EF AND   REG[0x8B],0xEF     
0DFD: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0176)     ADCINC_ENABLE_INTEGRATOR_M
0E00: 7E       RETI                     (0177)     reti       
0E01: 71 10    OR    F,0x10             
                                        (0178) endif6:
                                        (0179)     ;All samples done
                                        (0180)     M8C_SetBank1
0E03: 41 E7 3F AND   REG[0xE7],0x3F     (0181)     and reg[E7h], 3Fh            ; if we are in 29xxx or 24x94   
0E06: 43 E7 80 OR    REG[0xE7],0x80     (0182)     or  reg[E7h], 80h            ; then set to incremental Mode
0E09: 70 EF    AND   F,0xEF             
0E0B: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0183)     M8C_SetBank0
                                        (0184)     ADCINC_STOPADC_M
0E0E: 7E       RETI                     (0185)  reti 
FILE: lib\adcinc.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: ADCINC.asm
                                        (0004) ;;   Version: 1.20, Updated on 2013/5/19 at 10:39:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.2946
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Assembler source for the ADCINC A/D Converter
                                        (0008) ;;               User Module with 1st-order modulator.
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API
                                        (0014) ;;        function returns. Even though these registers may be preserved now,
                                        (0015) ;;        there is no guarantee they will be preserved in future releases.
                                        (0016) ;;-----------------------------------------------------------------------------
                                        (0017) ;;  Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0018) ;;*****************************************************************************
                                        (0019) ;;*****************************************************************************
                                        (0020) 
                                        (0021) include "m8c.inc"
                                        (0022) include "memory.inc"
                                        (0023) 
                                        (0024) include "ADCINC.inc"
                                        (0025) 
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) export  ADCINC_Start
                                        (0031) export _ADCINC_Start
                                        (0032) export  ADCINC_SetPower
                                        (0033) export _ADCINC_SetPower
                                        (0034) export  ADCINC_Stop
                                        (0035) export _ADCINC_Stop
                                        (0036) export  ADCINC_GetSamples
                                        (0037) export _ADCINC_GetSamples
                                        (0038) export  ADCINC_StopADC
                                        (0039) export _ADCINC_StopADC
                                        (0040) export  ADCINC_fIsDataAvailable
                                        (0041) export _ADCINC_fIsDataAvailable
                                        (0042) export  ADCINC_iClearFlagGetData
                                        (0043) export _ADCINC_iClearFlagGetData
                                        (0044) export  ADCINC_wClearFlagGetData
                                        (0045) export _ADCINC_wClearFlagGetData
                                        (0046) export  ADCINC_cClearFlagGetData
                                        (0047) export _ADCINC_cClearFlagGetData
                                        (0048) export  ADCINC_bClearFlagGetData
                                        (0049) export _ADCINC_bClearFlagGetData
                                        (0050) export  ADCINC_iGetData
                                        (0051) export _ADCINC_iGetData
                                        (0052) export  ADCINC_wGetData
                                        (0053) export _ADCINC_wGetData
                                        (0054) export  ADCINC_bGetData
                                        (0055) export _ADCINC_bGetData
                                        (0056) export  ADCINC_cGetData
                                        (0057) export _ADCINC_cGetData
                                        (0058) export  ADCINC_fClearFlag
                                        (0059) export _ADCINC_fClearFlag
                                        (0060) export  ADCINC_WritePulseWidth
                                        (0061) export _ADCINC_WritePulseWidth
                                        (0062) 
                                        (0063) 
                                        (0064) AREA bss (RAM,REL)
                                        (0065) 
                                        (0066) ;-----------------------------------------------
                                        (0067) ;  Constant Definitions
                                        (0068) ;-----------------------------------------------
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: ADCINC_Start
                                        (0080) ;
                                        (0081) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0082) ;               and starts the PWM
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0086) ;  RETURNS:      Nothing.
                                        (0087) ;  SIDE EFFECTS:
                                        (0088) ;    The A and X registers may be modified by this or future implementations
                                        (0089) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0090) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0091) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0092) ;    functions.
                                        (0093) ;
                                        (0094)  ADCINC_Start:
                                        (0095) _ADCINC_Start:
                                        (0096)    RAM_PROLOGUE RAM_USE_CLASS_1
0E0F: 90 0D    CALL  _ADCINC_SetPower   (0097)    call  ADCINC_SetPower
0E11: 43 8A 20 OR    REG[0x8A],0x20     
0E14: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0098)    ADCINC_RESET_INTEGRATOR_M
0E17: 62 21 FF MOV   REG[0x21],0xFF     (0099)    mov   reg[ADCINC_PWMdr1],ffh
0E1A: 43 23 01 OR    REG[0x23],0x1      (0100)    or    reg[ADCINC_PWMcr0],01h                      ; start PWM
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0E1D: 7F       RET                      (0102)    ret
                                        (0103) .ENDSECTION
                                        (0104) 
                                        (0105)    
                                        (0106) .SECTION
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;  FUNCTION NAME: ADCINC_SetPower
                                        (0109) ;
                                        (0110) ;  DESCRIPTION: Applies power setting to the module's analog PSoc block.
                                        (0111) ;-----------------------------------------------------------------------------
                                        (0112) ;
                                        (0113) ;  ARGUMENTS:    The A register contains the power setting.
                                        (0114) ;  RETURNS:      Nothing.
                                        (0115) ;  SIDE EFFECTS:
                                        (0116) ;    The A and X registers may be modified by this or future implementations
                                        (0117) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0118) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0119) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0120) ;    functions.
                                        (0121) ;
                                        (0122)  ADCINC_SetPower:
                                        (0123) _ADCINC_SetPower:
                                        (0124)    RAM_PROLOGUE RAM_USE_CLASS_2
0E1E: 4F       MOV   X,SP               (0125)    mov  X,SP                                     ; Set up Stack frame
0E1F: 21 03    AND   A,0x3              (0126)    and  A,03h                                    ; Ensure value is legal
0E21: 08       PUSH  A                  (0127)    push A
0E22: 5D 8B    MOV   A,REG[0x8B]        (0128)    mov  A,reg[ADCINC_AtoDcr3]                    ; First SC block:
0E24: 21 FC    AND   A,0xFC             (0129)    and  A,~03h                                   ;   clear power bits to zero
0E26: 2B 00    OR    A,[X+0]            (0130)    or   A,[ X ]                                  ;   establish new value
0E28: 60 8B    MOV   REG[0x8B],A        (0131)    mov  reg[ADCINC_AtoDcr3],A                    ;   change the actual setting
0E2A: 18       POP   A                  (0132)    pop  A
0E2B: 70 3F    AND   F,0x3F             
0E2D: 71 C0    OR    F,0xC0             
                                        (0133)    RAM_EPILOGUE RAM_USE_CLASS_2
0E2F: 7F       RET                      (0134)    ret
0E30: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0135) .ENDSECTION
                                        (0136) 
                                        (0137) .SECTION
                                        (0138) ;-----------------------------------------------------------------------------
                                        (0139) ;  FUNCTION NAME: ADCINC_Stop
                                        (0140) ;
                                        (0141) ;  DESCRIPTION:   Removes power from the module's analog PSoc block.
                                        (0142) ;                 and turns off PWM
                                        (0143) ;-----------------------------------------------------------------------------
                                        (0144) ;
                                        (0145) ;  ARGUMENTS:     None.
                                        (0146) ;  RETURNS:       Nothing.
                                        (0147) ;  SIDE EFFECTS:
                                        (0148) ;    The A and X registers may be modified by this or future implementations
                                        (0149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0151) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0152) ;    functions.
                                        (0153) ;
                                        (0154)  ADCINC_Stop:
                                        (0155) _ADCINC_Stop:
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0157)    ADCINC_STOPADC_M
0E33: 41 8B FC AND   REG[0x8B],0xFC     (0158)    and  reg[ADCINC_AtoDcr3], ~03h
0E36: 41 23 FE AND   REG[0x23],0xFE     (0159)    and  reg[ADCINC_PWMcr0], ~01h ; stop PWM
                                        (0160)    RAM_EPILOGUE RAM_USE_CLASS_1
0E39: 7F       RET                      (0161)    ret
0E3A: 62 D0 00 MOV   REG[0xD0],0x0      
0E3D: 41 8B EF AND   REG[0x8B],0xEF     
0E40: 41 8A DF AND   REG[0x8A],0xDF     
                                        (0162) .ENDSECTION
                                        (0163) 
                                        (0164) 
                                        (0165) .SECTION
                                        (0166) ;-----------------------------------------------------------------------------
                                        (0167) ;  FUNCTION NAME: ADCINC_GetSamples
                                        (0168) ;
                                        (0169) ;  DESCRIPTION: Activates interrupts for this user module and begins sampling.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    A register contain number of samples
                                        (0173) ;  RETURNS:      Nothing.
                                        (0174) ;  SIDE EFFECTS:
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;          
                                        (0181) ;    Currently only the page pointer registers listed below are modified: 
                                        (0182) ;          CUR_PP
                                        (0183) ;
                                        (0184)  ADCINC_GetSamples:
                                        (0185) _ADCINC_GetSamples:
                                        (0186)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0187)    RAM_SETPAGE_CUR >ADCINC_fMode
                                        (0188)    ADCINC_ENABLE_INTEGRATOR_M
0E43: 55 0D 00 MOV   [0xD],0x0          (0189)    mov [ADCINC_fMode],0
0E46: 55 0C 00 MOV   [0xC],0x0          (0190)    mov [ADCINC_bState],0
0E49: 53 0E    MOV   [0xE],A            (0191)    mov [ADCINC_bNumSamples],A
0E4B: 5D 22    MOV   A,REG[0x22]        (0192)    mov A, reg[ADCINC_PWMdr2]
0E4D: B0 04    JNZ   0x0E52             (0193)    jnz  .SkipPulseWrite
0E4F: 62 22 01 MOV   REG[0x22],0x1      (0194)    mov reg[ADCINC_PWMdr2], 1
0E52: 71 10    OR    F,0x10             
                                        (0195) .SkipPulseWrite:
                                        (0196) 
                                        (0197)    M8C_SetBank1
0E54: 41 E7 3F AND   REG[0xE7],0x3F     (0198)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0E57: 43 E7 40 OR    REG[0xE7],0x40     (0199)    or  reg[E7h], 40h             ; then set to incremental Mode
0E5A: 70 EF    AND   F,0xEF             
0E5C: 62 DB FE MOV   REG[0xDB],0xFE     
0E5F: 43 E1 01 OR    REG[0xE1],0x1      
                                        (0200)    M8C_SetBank0
                                        (0201) 
                                        (0202)    ADCINC_STARTADC_M  ;enable interrupt 
                                        (0203)    RAM_EPILOGUE RAM_USE_CLASS_4 
0E62: 7F       RET                      (0204)    ret
0E63: 71 10    OR    F,0x10             
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) 
                                        (0208) .SECTION
                                        (0209) ;-----------------------------------------------------------------------------
                                        (0210) ;  FUNCTION NAME: ADCINC_StopADC
                                        (0211) ;
                                        (0212) ;  DESCRIPTION: Shuts down the A/D is an orderly manner.  The interrupt
                                        (0213) ;               is disabled but the PWM output is still active.
                                        (0214) ;               Integrator is reset
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS:    None.
                                        (0218) ;  RETURNS:      Nothing.
                                        (0219) ;  SIDE EFFECTS:
                                        (0220) ;    The A and X registers may be modified by this or future implementations
                                        (0221) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0222) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0223) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0224) ;    functions.
                                        (0225) ;
                                        (0226)  ADCINC_StopADC:
                                        (0227) _ADCINC_StopADC:
                                        (0228)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0229)    M8C_SetBank1
0E65: 41 E7 3F AND   REG[0xE7],0x3F     (0230)    and reg[E7h], 3Fh             ; if we are in 29xxx or 24x94   
0E68: 43 E7 80 OR    REG[0xE7],0x80     (0231)    or  reg[E7h], 80h             ; then set to incremental Mode
0E6B: 70 EF    AND   F,0xEF             
0E6D: 41 E1 FE AND   REG[0xE1],0xFE     
0E70: 43 8A 20 OR    REG[0x8A],0x20     
0E73: 43 8B 10 OR    REG[0x8B],0x10     
                                        (0232)    M8C_SetBank0
                                        (0233)    ADCINC_STOPADC_M
                                        (0234)    ADCINC_RESET_INTEGRATOR_M
                                        (0235)    RAM_EPILOGUE RAM_USE_CLASS_1 
0E76: 7F       RET                      (0236)    ret
0E77: 62 D0 00 MOV   REG[0xD0],0x0      
0E7A: 51 0B    MOV   A,[0xB]            
                                        (0237) .ENDSECTION
                                        (0238) 
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: ADCINC_fIsDataAvailable
                                        (0243) ;
                                        (0244) ;  DESCRIPTION: Returns the status of the A/D Data
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  ARGUMENTS:    None.
                                        (0247) ;  RETURNS:      fastcall BOOL DataAvailable returned in the A register
                                        (0248) ;  SIDE EFFECTS:
                                        (0249) ;    The A and X registers may be modified by this or future implementations
                                        (0250) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0251) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0252) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0253) ;    functions.
                                        (0254) ;          
                                        (0255) ;    Currently only the page pointer registers listed below are modified: 
                                        (0256) ;          CUR_PP
                                        (0257) ;
                                        (0258)  ADCINC_fIsDataAvailable:
                                        (0259) _ADCINC_fIsDataAvailable:
                                        (0260)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0261)    ADCINC_fIsDataAvailable_M   
                                        (0262)    RAM_EPILOGUE RAM_USE_CLASS_4
0E7C: 7F       RET                      (0263)    ret
0E7D: 62 D0 00 MOV   REG[0xD0],0x0      
0E80: 55 0B 00 MOV   [0xB],0x0          
0E83: 58 07    MOV   X,[0x7]            
0E85: 51 08    MOV   A,[0x8]            
0E87: 3C 0B 00 CMP   [0xB],0x0          
0E8A: BF F5    JNZ   0x0E80             
                                        (0264) .ENDSECTION
                                        (0265) 
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME:  ADCINC_iClearFlagGetData
                                        (0270) ;                  ADCINC_wClearFlagGetData
                                        (0271) ;
                                        (0272) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0273) ;                  Flag is checked after trandfer to insure valid data.
                                        (0274) ;                  available. Also clears the DATA_READY flag. 
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  ARGUMENTS:    None.
                                        (0277) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;          
                                        (0285) ;    Currently only the page pointer registers listed below are modified: 
                                        (0286) ;          CUR_PP
                                        (0287) ;
                                        (0288)  ADCINC_iClearFlagGetData:
                                        (0289) _ADCINC_iClearFlagGetData:
                                        (0290)  ADCINC_wClearFlagGetData:
                                        (0291) _ADCINC_wClearFlagGetData:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0293)    ADCINC_iClearFlagGetData_M   
                                        (0294)    RAM_EPILOGUE RAM_USE_CLASS_4
0E8C: 7F       RET                      (0295)    ret
0E8D: 62 D0 00 MOV   REG[0xD0],0x0      
0E90: 55 0B 00 MOV   [0xB],0x0          
0E93: 51 08    MOV   A,[0x8]            
                                        (0296) .ENDSECTION
                                        (0297) 
                                        (0298) 
                                        (0299) .SECTION
                                        (0300) ;-----------------------------------------------------------------------------
                                        (0301) ;  FUNCTION NAME:  ADCINC_cClearFlagGetData
                                        (0302) ;                  ADCINC_bClearFlagGetData
                                        (0303) ;
                                        (0304) ;  DESCRIPTION:    Clears the fStatus and places ADC data in iResult A/D.
                                        (0305) ;-----------------------------------------------------------------------------
                                        (0306) ;  ARGUMENTS:    None.
                                        (0307) ;  RETURNS:      fastcall int iResult returned in the X and A register
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315) ;    Currently only the page pointer registers listed below are modified: 
                                        (0316) ;          CUR_PP
                                        (0317) ;
                                        (0318)  ADCINC_cClearFlagGetData:
                                        (0319) _ADCINC_cClearFlagGetData:
                                        (0320)  ADCINC_bClearFlagGetData:
                                        (0321) _ADCINC_bClearFlagGetData:
                                        (0322)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0323)    ADCINC_bClearFlagGetData_M     
                                        (0324)    RAM_EPILOGUE RAM_USE_CLASS_4
0E95: 7F       RET                      (0325)    ret
0E96: 62 D0 00 MOV   REG[0xD0],0x0      
0E99: 58 07    MOV   X,[0x7]            
0E9B: 51 08    MOV   A,[0x8]            
                                        (0326) .ENDSECTION
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME:  ADCINC_iGetData
                                        (0330) ;				   ADCINC_wGetData
                                        (0331) ;
                                        (0332) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0333) ;                   available.
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;  ARGUMENTS:    None.
                                        (0336) ;  RETURNS:      fastcall int iResult is returned in the X,A registers
                                        (0337) ;  SIDE EFFECTS:
                                        (0338) ;    The A and X registers may be modified by this or future implementations
                                        (0339) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0340) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0341) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0342) ;    functions.
                                        (0343) ;          
                                        (0344) ;    Currently only the page pointer registers listed below are modified: 
                                        (0345) ;          CUR_PP
                                        (0346) ;
                                        (0347)  ADCINC_iGetData:
                                        (0348) _ADCINC_iGetData:
                                        (0349)  ADCINC_wGetData:
                                        (0350) _ADCINC_wGetData:
                                        (0351)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0352)    ADCINC_wGetData_M          
                                        (0353)    RAM_EPILOGUE RAM_USE_CLASS_4
0E9D: 7F       RET                      (0354)    ret
0E9E: 62 D0 00 MOV   REG[0xD0],0x0      
0EA1: 51 08    MOV   A,[0x8]            
                                        (0355) .ENDSECTION
                                        (0356) .SECTION
                                        (0357) ;-----------------------------------------------------------------------------
                                        (0358) ;  FUNCTION NAME:  ADCINC_bGetData
                                        (0359) ;                  ADCINC_cGetData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:     Returns the data from the A/D.  Does not check if data is
                                        (0362) ;                   available.
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  ARGUMENTS:    None.
                                        (0365) ;  RETURNS:      fastcall CHAR cData returned in the A register
                                        (0366) ;  SIDE EFFECTS:
                                        (0367) ;    The A and X registers may be modified by this or future implementations
                                        (0368) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0369) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0370) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0371) ;    functions.
                                        (0372) ;          
                                        (0373) ;    Currently only the page pointer registers listed below are modified: 
                                        (0374) ;          CUR_PP
                                        (0375) ;
                                        (0376)  ADCINC_bGetData:
                                        (0377) _ADCINC_bGetData:
                                        (0378)  ADCINC_cGetData:
                                        (0379) _ADCINC_cGetData:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0381)    ADCINC_cGetData_M        
                                        (0382)    RAM_EPILOGUE RAM_USE_CLASS_4
0EA3: 7F       RET                      (0383)    ret
0EA4: 62 D0 00 MOV   REG[0xD0],0x0      
0EA7: 51 0B    MOV   A,[0xB]            
0EA9: 55 0B 00 MOV   [0xB],0x0          
                                        (0384) .ENDSECTION
                                        (0385) 
                                        (0386) 
                                        (0387) .SECTION
                                        (0388) ;-----------------------------------------------------------------------------
                                        (0389) ;  FUNCTION NAME: ADCINC_fClearFlag
                                        (0390) ;
                                        (0391) ;  DESCRIPTION: Clears the data ready flag.
                                        (0392) ;-----------------------------------------------------------------------------
                                        (0393) ;  ARGUMENTS:    None.
                                        (0394) ;  RETURNS:      Nothing.
                                        (0395) ;  SIDE EFFECTS: 
                                        (0396) ;    The DATA_READY flag is cleared.
                                        (0397) ;    
                                        (0398) ;    The A and X registers may be modified by this or future implementations
                                        (0399) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0400) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0401) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0402) ;    functions.
                                        (0403) ;          
                                        (0404) ;    Currently only the page pointer registers listed below are modified: 
                                        (0405) ;          CUR_PP
                                        (0406) ;
                                        (0407)  ADCINC_fClearFlag:
                                        (0408) _ADCINC_fClearFlag:
                                        (0409)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0410)    ADCINC_fClearFlag_M    
                                        (0411)    RAM_EPILOGUE RAM_USE_CLASS_4
0EAC: 7F       RET                      (0412)    ret
0EAD: 60 22    MOV   REG[0x22],A        
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) 
                                        (0416) .SECTION
                                        (0417) ;-----------------------------------------------------------------------------
                                        (0418) ;  FUNCTION NAME: ADCINC_WritePulseWidth
                                        (0419) ;
                                        (0420) ;  DESCRIPTION:
                                        (0421) ;     Write the 8-bit period value into the compare register (DR2).
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;
                                        (0424) ;  ARGUMENTS: fastcall BYTE bPeriodValue (passed in A)
                                        (0425) ;  RETURNS:   Nothing
                                        (0426) ;  SIDE EFFECTS:
                                        (0427) ;    The A and X registers may be modified by this or future implementations
                                        (0428) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0429) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0430) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0431) ;    functions.
                                        (0432) ;
                                        (0433)  ADCINC_WritePulseWidth:
                                        (0434) _ADCINC_WritePulseWidth:
                                        (0435)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0436)    ADCINC_WritePulseWidth_M  
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
0EAF: 7F       RET                      (0438)    ret
                                        (0439) .ENDSECTION
                                        (0440) 
                                        (0441) ; End of File ADCINC.asm
FILE: C:\Users\Rod\Desktop\RTC\RTC\bcdutil.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "BcdUtil.h"
(0004) 
(0005) void bcdToDec(BYTE bcd10, BYTE bcd, BYTE *dec)
(0006) {
__UserModules_end|__text_start|_bcdToDec|_bcdToDec:
  dec                  --> X-7
  bcd                  --> X-5
  bcd10                --> X-4
    0EB0: 10       PUSH  X
    0EB1: 4F       MOV   X,SP
(0007) 	*dec = (bcd10 & 0xf) * 10 + (bcd & 0xf);
    0EB2: 62 D0 00 MOV   REG[0xD0],0x0
    0EB5: 52 FB    MOV   A,[X-5]
    0EB7: 21 0F    AND   A,0xF
    0EB9: 53 90    MOV   [__r0],A
    0EBB: 52 FC    MOV   A,[X-4]
    0EBD: 21 0F    AND   A,0xF
    0EBF: 60 E8    MOV   REG[0xE8],A
    0EC1: 62 E9 0A MOV   REG[0xE9],0xA
    0EC4: 40       NOP   
    0EC5: 5D EB    MOV   A,REG[0xEB]
    0EC7: 02 90    ADD   A,[__r0]
    0EC9: 53 90    MOV   [__r0],A
    0ECB: 52 FA    MOV   A,[X-6]
    0ECD: 53 8D    MOV   [__r3],A
    0ECF: 52 F9    MOV   A,[X-7]
    0ED1: 60 D5    MOV   REG[0xD5],A
    0ED3: 51 90    MOV   A,[__r0]
    0ED5: 3F 8D    MVI   [__r3],A
    0ED7: 20       POP   X
    0ED8: 7F       RET   
(0008) }
(0009) 
(0010) void decToBcd(BYTE *bcd10, BYTE *bcd, BYTE dec)
(0011) {
_decToBcd:
  dec                  --> X-8
  bcd                  --> X-7
  bcd10                --> X-5
    0ED9: 10       PUSH  X
    0EDA: 4F       MOV   X,SP
(0012) 	*bcd10 = dec/10;
    0EDB: 62 D0 00 MOV   REG[0xD0],0x0
    0EDE: 50 0A    MOV   A,0xA
    0EE0: 08       PUSH  A
    0EE1: 52 F8    MOV   A,[X-8]
    0EE3: 08       PUSH  A
    0EE4: 7C 2E 69 LCALL 0x2E69
    0EE7: 18       POP   A
    0EE8: 53 90    MOV   [__r0],A
    0EEA: 38 FF    ADD   SP,0xFF
    0EEC: 52 FC    MOV   A,[X-4]
    0EEE: 53 8D    MOV   [__r3],A
    0EF0: 52 FB    MOV   A,[X-5]
    0EF2: 60 D5    MOV   REG[0xD5],A
    0EF4: 51 90    MOV   A,[__r0]
    0EF6: 3F 8D    MVI   [__r3],A
(0013) 	*bcd = dec - (*bcd10 * 10);
    0EF8: 52 FC    MOV   A,[X-4]
    0EFA: 53 8F    MOV   [__r1],A
    0EFC: 52 FB    MOV   A,[X-5]
    0EFE: 60 D4    MOV   REG[0xD4],A
    0F00: 3E 8F    MVI   A,[__r1]
    0F02: 60 E8    MOV   REG[0xE8],A
    0F04: 62 E9 0A MOV   REG[0xE9],0xA
    0F07: 40       NOP   
    0F08: 5D EB    MOV   A,REG[0xEB]
    0F0A: 53 90    MOV   [__r0],A
    0F0C: 52 F8    MOV   A,[X-8]
    0F0E: 12 90    SUB   A,[__r0]
    0F10: 53 90    MOV   [__r0],A
    0F12: 52 FA    MOV   A,[X-6]
    0F14: 53 8D    MOV   [__r3],A
    0F16: 52 F9    MOV   A,[X-7]
    0F18: 60 D5    MOV   REG[0xD5],A
    0F1A: 51 90    MOV   A,[__r0]
    0F1C: 3F 8D    MVI   [__r3],A
    0F1E: 20       POP   X
    0F1F: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\configview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "configView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void ConfigView_Start(void)
(0014) {
_ConfigView_Start:
    0F20: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void ConfigView_Callback(void)
(0019) {
_ConfigView_Callback:
  conf                 --> X+0
    0F21: 10       PUSH  X
    0F22: 4F       MOV   X,SP
    0F23: 38 0B    ADD   SP,0xB
(0020) 	Config conf;
(0021) 	Persist_LoadConfig(&conf);
    0F25: 62 D0 00 MOV   REG[0xD0],0x0
    0F28: 50 07    MOV   A,0x7
    0F2A: 08       PUSH  A
    0F2B: 10       PUSH  X
    0F2C: 7C 1F 58 LCALL _Persist_LoadConfig
    0F2F: 38 FE    ADD   SP,0xFE
(0022) 
(0023) 	currentView = CONFIG;
    0F31: 62 D0 00 MOV   REG[0xD0],0x0
    0F34: 55 A4 04 MOV   [currentView],0x4
(0024) 	Menu_Clear();
    0F37: 7C 1D EF LCALL _Menu_Clear
(0025) 	LCD_Position(0, 0);
    0F3A: 10       PUSH  X
    0F3B: 50 00    MOV   A,0x0
    0F3D: 57 00    MOV   X,0x0
    0F3F: 7C 09 79 LCALL _LCD_Position
    0F42: 20       POP   X
(0026) 	if(conf.flags.registerEnabled)
    0F43: 52 00    MOV   A,[X+0]
    0F45: 62 D0 00 MOV   REG[0xD0],0x0
    0F48: 67       ASR   A
    0F49: 67       ASR   A
    0F4A: 67       ASR   A
    0F4B: 67       ASR   A
    0F4C: 67       ASR   A
    0F4D: 67       ASR   A
    0F4E: 67       ASR   A
    0F4F: 21 01    AND   A,0x1
    0F51: 53 90    MOV   [__r0],A
    0F53: 26 90 01 AND   [__r0],0x1
    0F56: A0 0F    JZ    0x0F66
(0027) 	{
(0028) 		LCD_PrCString("Registrar: Si");
    0F58: 10       PUSH  X
    0F59: 50 01    MOV   A,0x1
    0F5B: 08       PUSH  A
    0F5C: 50 CA    MOV   A,0xCA
    0F5E: 5C       MOV   X,A
    0F5F: 18       POP   A
    0F60: 7C 07 F4 LCALL _LCD_PrCString
    0F63: 20       POP   X
(0029) 	}
    0F64: 80 0D    JMP   0x0F72
(0030) 	else
(0031) 	{
(0032) 		LCD_PrCString("Registrar: No");
    0F66: 10       PUSH  X
    0F67: 50 01    MOV   A,0x1
    0F69: 08       PUSH  A
    0F6A: 50 BC    MOV   A,0xBC
    0F6C: 5C       MOV   X,A
    0F6D: 18       POP   A
    0F6E: 7C 07 F4 LCALL _LCD_PrCString
    0F71: 20       POP   X
(0033) 
(0034) 	}
(0035) 	LCD_Position(1,0);
    0F72: 10       PUSH  X
    0F73: 57 00    MOV   X,0x0
    0F75: 50 01    MOV   A,0x1
    0F77: 7C 09 79 LCALL _LCD_Position
    0F7A: 20       POP   X
(0036) 	if(conf.flags.alarmEnabled)
    0F7B: 52 00    MOV   A,[X+0]
    0F7D: 62 D0 00 MOV   REG[0xD0],0x0
    0F80: 67       ASR   A
    0F81: 67       ASR   A
    0F82: 67       ASR   A
    0F83: 67       ASR   A
    0F84: 67       ASR   A
    0F85: 67       ASR   A
    0F86: 21 03    AND   A,0x3
    0F88: 53 90    MOV   [__r0],A
    0F8A: 26 90 01 AND   [__r0],0x1
    0F8D: A0 0F    JZ    0x0F9D
(0037) 	{
(0038) 		LCD_PrCString("Alarma:    Si");
    0F8F: 10       PUSH  X
    0F90: 50 01    MOV   A,0x1
    0F92: 08       PUSH  A
    0F93: 50 AE    MOV   A,0xAE
    0F95: 5C       MOV   X,A
    0F96: 18       POP   A
    0F97: 7C 07 F4 LCALL _LCD_PrCString
    0F9A: 20       POP   X
(0039) 	}
    0F9B: 80 0D    JMP   0x0FA9
(0040) 	else
(0041) 	{
(0042) 		LCD_PrCString("Alarma:    No");
    0F9D: 10       PUSH  X
    0F9E: 50 01    MOV   A,0x1
    0FA0: 08       PUSH  A
    0FA1: 50 A0    MOV   A,0xA0
    0FA3: 5C       MOV   X,A
    0FA4: 18       POP   A
    0FA5: 7C 07 F4 LCALL _LCD_PrCString
    0FA8: 20       POP   X
(0043) 	}
    0FA9: 38 F5    ADD   SP,0xF5
    0FAB: 20       POP   X
    0FAC: 7F       RET   
(0044) }
(0045) 
(0046) void ConfigView_Update(void)
(0047) {
_ConfigView_Update:
  conf                 --> X+0
    0FAD: 10       PUSH  X
    0FAE: 4F       MOV   X,SP
    0FAF: 38 11    ADD   SP,0x11
(0048) 	if(Keypad_IsKeyStored())
    0FB1: 7C 16 BF LCALL _Keypad_IsKeyStored
    0FB4: 62 D0 00 MOV   REG[0xD0],0x0
    0FB7: 39 00    CMP   A,0x0
    0FB9: A1 5D    JZ    0x1117
(0049) 	{
(0050) 		Config conf;
(0051) 		Persist_LoadConfig(&conf);
    0FBB: 50 07    MOV   A,0x7
    0FBD: 08       PUSH  A
    0FBE: 10       PUSH  X
    0FBF: 7C 1F 58 LCALL _Persist_LoadConfig
    0FC2: 38 FE    ADD   SP,0xFE
    0FC4: 62 D0 00 MOV   REG[0xD0],0x0
(0052) 
(0053) 		switch(Keypad_GetKey())
    0FC7: 7C 16 D7 LCALL _Keypad_GetKey
    0FCA: 62 D0 00 MOV   REG[0xD0],0x0
    0FCD: 54 0C    MOV   [X+12],A
    0FCF: 56 0B 00 MOV   [X+11],0x0
    0FD2: 52 0C    MOV   A,[X+12]
    0FD4: 11 48    SUB   A,0x48
    0FD6: 53 83    MOV   [__rY],A
    0FD8: 52 0B    MOV   A,[X+11]
    0FDA: 31 80    XOR   A,0x80
    0FDC: 19 80    SBB   A,0x80
    0FDE: 2A 83    OR    A,[__rY]
    0FE0: A0 6E    JZ    0x104F
    0FE2: D0 0D    JNC   0x0FF0
    0FE4: 3D 0B 00 CMP   [X+11],0x0
    0FE7: B0 06    JNZ   0x0FEE
    0FE9: 3D 0C 11 CMP   [X+12],0x11
    0FEC: A0 B3    JZ    0x10A0
    0FEE: 80 B6    JMP   0x10A5
    0FF0: 3D 0B 00 CMP   [X+11],0x0
    0FF3: B0 06    JNZ   0x0FFA
    0FF5: 3D 0C 88 CMP   [X+12],0x88
    0FF8: A0 03    JZ    0x0FFC
    0FFA: 80 AA    JMP   0x10A5
(0054) 		{
(0055) 			case 0x88:
(0056) 				// "1"
(0057) 				conf.flags.registerEnabled = !conf.flags.registerEnabled;
    0FFC: 52 00    MOV   A,[X+0]
    0FFE: 62 D0 00 MOV   REG[0xD0],0x0
    1001: 67       ASR   A
    1002: 67       ASR   A
    1003: 67       ASR   A
    1004: 67       ASR   A
    1005: 67       ASR   A
    1006: 67       ASR   A
    1007: 67       ASR   A
    1008: 21 01    AND   A,0x1
    100A: 53 90    MOV   [__r0],A
    100C: 26 90 01 AND   [__r0],0x1
    100F: B0 09    JNZ   0x1019
    1011: 56 0E 01 MOV   [X+14],0x1
    1014: 56 0D 00 MOV   [X+13],0x0
    1017: 80 07    JMP   0x101F
    1019: 56 0E 00 MOV   [X+14],0x0
    101C: 56 0D 00 MOV   [X+13],0x0
    101F: 62 D0 00 MOV   REG[0xD0],0x0
    1022: 52 0E    MOV   A,[X+14]
    1024: 53 90    MOV   [__r0],A
    1026: 26 90 01 AND   [__r0],0x1
    1029: 51 90    MOV   A,[__r0]
    102B: 64       ASL   A
    102C: 64       ASL   A
    102D: 64       ASL   A
    102E: 64       ASL   A
    102F: 64       ASL   A
    1030: 64       ASL   A
    1031: 64       ASL   A
    1032: 53 90    MOV   [__r0],A
    1034: 26 90 80 AND   [__r0],0x80
    1037: 52 00    MOV   A,[X+0]
    1039: 21 7F    AND   A,0x7F
    103B: 2A 90    OR    A,[__r0]
    103D: 54 00    MOV   [X+0],A
(0058) 				Persist_SaveConfig(&conf);
    103F: 50 07    MOV   A,0x7
    1041: 08       PUSH  A
    1042: 10       PUSH  X
    1043: 7C 1F 32 LCALL _Persist_SaveConfig
    1046: 38 FE    ADD   SP,0xFE
    1048: 62 D0 00 MOV   REG[0xD0],0x0
    104B: 53 90    MOV   [__r0],A
(0059) 				break;
    104D: 80 57    JMP   0x10A5
(0060) 			case 0x48:
(0061) 				// "4"
(0062) 				conf.flags.alarmEnabled = !conf.flags.alarmEnabled;
    104F: 52 00    MOV   A,[X+0]
    1051: 62 D0 00 MOV   REG[0xD0],0x0
    1054: 67       ASR   A
    1055: 67       ASR   A
    1056: 67       ASR   A
    1057: 67       ASR   A
    1058: 67       ASR   A
    1059: 67       ASR   A
    105A: 21 03    AND   A,0x3
    105C: 53 90    MOV   [__r0],A
    105E: 26 90 01 AND   [__r0],0x1
    1061: B0 09    JNZ   0x106B
    1063: 56 10 01 MOV   [X+16],0x1
    1066: 56 0F 00 MOV   [X+15],0x0
    1069: 80 07    JMP   0x1071
    106B: 56 10 00 MOV   [X+16],0x0
    106E: 56 0F 00 MOV   [X+15],0x0
    1071: 62 D0 00 MOV   REG[0xD0],0x0
    1074: 52 10    MOV   A,[X+16]
    1076: 53 90    MOV   [__r0],A
    1078: 26 90 01 AND   [__r0],0x1
    107B: 51 90    MOV   A,[__r0]
    107D: 64       ASL   A
    107E: 64       ASL   A
    107F: 64       ASL   A
    1080: 64       ASL   A
    1081: 64       ASL   A
    1082: 64       ASL   A
    1083: 53 90    MOV   [__r0],A
    1085: 26 90 40 AND   [__r0],0x40
    1088: 52 00    MOV   A,[X+0]
    108A: 21 BF    AND   A,0xBF
    108C: 2A 90    OR    A,[__r0]
    108E: 54 00    MOV   [X+0],A
(0063) 				Persist_SaveConfig(&conf);
    1090: 50 07    MOV   A,0x7
    1092: 08       PUSH  A
    1093: 10       PUSH  X
    1094: 7C 1F 32 LCALL _Persist_SaveConfig
    1097: 38 FE    ADD   SP,0xFE
    1099: 62 D0 00 MOV   REG[0xD0],0x0
    109C: 53 90    MOV   [__r0],A
(0064) 				break;
    109E: 80 06    JMP   0x10A5
(0065) 			case 0x11:
(0066) 				// "D"
(0067) 				MainView_Callback();
    10A0: 7C 1B 05 LCALL _MainView_Callback
(0068) 				return;
    10A3: 80 73    JMP   0x1117
(0069) 				break;
(0070) 		}
(0071) 
(0072) 		Menu_Clear();
    10A5: 7C 1D EF LCALL _Menu_Clear
(0073) 		LCD_Position(0, 0);
    10A8: 10       PUSH  X
    10A9: 50 00    MOV   A,0x0
    10AB: 57 00    MOV   X,0x0
    10AD: 7C 09 79 LCALL _LCD_Position
    10B0: 20       POP   X
(0074) 		if(conf.flags.registerEnabled)
    10B1: 52 00    MOV   A,[X+0]
    10B3: 62 D0 00 MOV   REG[0xD0],0x0
    10B6: 67       ASR   A
    10B7: 67       ASR   A
    10B8: 67       ASR   A
    10B9: 67       ASR   A
    10BA: 67       ASR   A
    10BB: 67       ASR   A
    10BC: 67       ASR   A
    10BD: 21 01    AND   A,0x1
    10BF: 53 90    MOV   [__r0],A
    10C1: 26 90 01 AND   [__r0],0x1
    10C4: A0 0F    JZ    0x10D4
(0075) 		{
(0076) 			LCD_PrCString("Registrar: Si");
    10C6: 10       PUSH  X
    10C7: 50 01    MOV   A,0x1
    10C9: 08       PUSH  A
    10CA: 50 CA    MOV   A,0xCA
    10CC: 5C       MOV   X,A
    10CD: 18       POP   A
    10CE: 7C 07 F4 LCALL _LCD_PrCString
    10D1: 20       POP   X
(0077) 		}
    10D2: 80 0D    JMP   0x10E0
(0078) 		else
(0079) 		{
(0080) 			LCD_PrCString("Registrar: No");
    10D4: 10       PUSH  X
    10D5: 50 01    MOV   A,0x1
    10D7: 08       PUSH  A
    10D8: 50 BC    MOV   A,0xBC
    10DA: 5C       MOV   X,A
    10DB: 18       POP   A
    10DC: 7C 07 F4 LCALL _LCD_PrCString
    10DF: 20       POP   X
(0081) 
(0082) 		}
(0083) 		LCD_Position(1,0);
    10E0: 10       PUSH  X
    10E1: 57 00    MOV   X,0x0
    10E3: 50 01    MOV   A,0x1
    10E5: 7C 09 79 LCALL _LCD_Position
    10E8: 20       POP   X
(0084) 		if(conf.flags.alarmEnabled)
    10E9: 52 00    MOV   A,[X+0]
    10EB: 62 D0 00 MOV   REG[0xD0],0x0
    10EE: 67       ASR   A
    10EF: 67       ASR   A
    10F0: 67       ASR   A
    10F1: 67       ASR   A
    10F2: 67       ASR   A
    10F3: 67       ASR   A
    10F4: 21 03    AND   A,0x3
    10F6: 53 90    MOV   [__r0],A
    10F8: 26 90 01 AND   [__r0],0x1
    10FB: A0 0F    JZ    0x110B
(0085) 		{
(0086) 			LCD_PrCString("Alarma:    Si");
    10FD: 10       PUSH  X
    10FE: 50 01    MOV   A,0x1
    1100: 08       PUSH  A
    1101: 50 AE    MOV   A,0xAE
    1103: 5C       MOV   X,A
    1104: 18       POP   A
    1105: 7C 07 F4 LCALL _LCD_PrCString
    1108: 20       POP   X
(0087) 		}
    1109: 80 0D    JMP   0x1117
(0088) 		else
(0089) 		{
(0090) 			LCD_PrCString("Alarma:    No");
    110B: 10       PUSH  X
    110C: 50 01    MOV   A,0x1
    110E: 08       PUSH  A
    110F: 50 A0    MOV   A,0xA0
    1111: 5C       MOV   X,A
    1112: 18       POP   A
    1113: 7C 07 F4 LCALL _LCD_PrCString
    1116: 20       POP   X
(0091) 		}
(0092) 	}
    1117: 38 EF    ADD   SP,0xEF
    1119: 20       POP   X
    111A: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\datetimeview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "dateTimeView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "Time.h"
(0007) #include "Rtc.h"
(0008) #include "viewManager.h"
(0009) #include "Keypad.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void DateTimeView_Start(void)
(0014) {
_DateTimeView_Start:
    111B: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void DateTimeView_Callback(void)
(0019) {
(0020) 	currentView = DATETIME_CONFIG;
_DateTimeView_Callback:
    111C: 62 D0 00 MOV   REG[0xD0],0x0
    111F: 55 A4 01 MOV   [currentView],0x1
(0021) 	Menu_Clear();
    1122: 7C 1D EF LCALL _Menu_Clear
(0022) 	LCD_Position(0, 0);
    1125: 10       PUSH  X
    1126: 50 00    MOV   A,0x0
    1128: 57 00    MOV   X,0x0
    112A: 7C 09 79 LCALL _LCD_Position
(0023) 	LCD_PrCString("00/00/00");
    112D: 50 01    MOV   A,0x1
    112F: 08       PUSH  A
    1130: 50 E1    MOV   A,0xE1
    1132: 5C       MOV   X,A
    1133: 18       POP   A
    1134: 7C 07 F4 LCALL _LCD_PrCString
(0024) 	LCD_Position(1,0);
    1137: 57 00    MOV   X,0x0
    1139: 50 01    MOV   A,0x1
    113B: 7C 09 79 LCALL _LCD_Position
(0025) 	LCD_PrCString("00:00:00");
    113E: 50 01    MOV   A,0x1
    1140: 08       PUSH  A
    1141: 50 D8    MOV   A,0xD8
    1143: 5C       MOV   X,A
    1144: 18       POP   A
    1145: 7C 07 F4 LCALL _LCD_PrCString
    1148: 20       POP   X
    1149: 7F       RET   
(0026) }
(0027) 
(0028) void DateTimeView_Update(void)
(0029) {
_DateTimeView_Update:
    114A: 10       PUSH  X
    114B: 4F       MOV   X,SP
    114C: 38 02    ADD   SP,0x2
(0030) 	if(Keypad_IsKeyStored())
    114E: 7C 16 BF LCALL _Keypad_IsKeyStored
    1151: 62 D0 00 MOV   REG[0xD0],0x0
    1154: 39 00    CMP   A,0x0
    1156: A1 32    JZ    0x1289
(0031) 	{
(0032) 		switch(Keypad_GetKey())
    1158: 7C 16 D7 LCALL _Keypad_GetKey
    115B: 62 D0 00 MOV   REG[0xD0],0x0
    115E: 54 01    MOV   [X+1],A
    1160: 56 00 00 MOV   [X+0],0x0
    1163: 3D 00 00 CMP   [X+0],0x0
    1166: B0 06    JNZ   0x116D
    1168: 3D 01 42 CMP   [X+1],0x42
    116B: A0 DE    JZ    0x124A
    116D: 52 01    MOV   A,[X+1]
    116F: 11 44    SUB   A,0x44
    1171: 62 D0 00 MOV   REG[0xD0],0x0
    1174: 53 83    MOV   [__rY],A
    1176: 52 00    MOV   A,[X+0]
    1178: 31 80    XOR   A,0x80
    117A: 19 80    SBB   A,0x80
    117C: 2A 83    OR    A,[__rY]
    117E: A0 C1    JZ    0x1240
    1180: D0 56    JNC   0x11D7
    1182: 3D 00 00 CMP   [X+0],0x0
    1185: B0 06    JNZ   0x118C
    1187: 3D 01 22 CMP   [X+1],0x22
    118A: A0 DD    JZ    0x1268
    118C: 52 01    MOV   A,[X+1]
    118E: 11 24    SUB   A,0x24
    1190: 62 D0 00 MOV   REG[0xD0],0x0
    1193: 53 83    MOV   [__rY],A
    1195: 52 00    MOV   A,[X+0]
    1197: 31 80    XOR   A,0x80
    1199: 19 80    SBB   A,0x80
    119B: 2A 83    OR    A,[__rY]
    119D: A0 C0    JZ    0x125E
    119F: D0 2B    JNC   0x11CB
    11A1: 3D 00 00 CMP   [X+0],0x0
    11A4: B0 06    JNZ   0x11AB
    11A6: 3D 01 11 CMP   [X+1],0x11
    11A9: A0 C8    JZ    0x1272
    11AB: 3D 00 00 CMP   [X+0],0x0
    11AE: B0 06    JNZ   0x11B5
    11B0: 3D 01 12 CMP   [X+1],0x12
    11B3: A0 CD    JZ    0x1281
    11B5: 3D 00 00 CMP   [X+0],0x0
    11B8: B0 06    JNZ   0x11BF
    11BA: 3D 01 14 CMP   [X+1],0x14
    11BD: A0 50    JZ    0x120E
    11BF: 3D 00 00 CMP   [X+0],0x0
    11C2: B0 06    JNZ   0x11C9
    11C4: 3D 01 18 CMP   [X+1],0x18
    11C7: A0 AF    JZ    0x1277
    11C9: 80 BF    JMP   0x1289
    11CB: 3D 00 00 CMP   [X+0],0x0
    11CE: B0 06    JNZ   0x11D5
    11D0: 3D 01 28 CMP   [X+1],0x28
    11D3: A0 80    JZ    0x1254
    11D5: 80 B3    JMP   0x1289
    11D7: 3D 00 00 CMP   [X+0],0x0
    11DA: B0 06    JNZ   0x11E1
    11DC: 3D 01 82 CMP   [X+1],0x82
    11DF: A0 4C    JZ    0x122C
    11E1: 52 01    MOV   A,[X+1]
    11E3: 11 84    SUB   A,0x84
    11E5: 62 D0 00 MOV   REG[0xD0],0x0
    11E8: 53 83    MOV   [__rY],A
    11EA: 52 00    MOV   A,[X+0]
    11EC: 31 80    XOR   A,0x80
    11EE: 19 80    SBB   A,0x80
    11F0: 2A 83    OR    A,[__rY]
    11F2: A0 2F    JZ    0x1222
    11F4: D0 0D    JNC   0x1202
    11F6: 3D 00 00 CMP   [X+0],0x0
    11F9: B0 06    JNZ   0x1200
    11FB: 3D 01 48 CMP   [X+1],0x48
    11FE: A0 37    JZ    0x1236
    1200: 80 88    JMP   0x1289
    1202: 3D 00 00 CMP   [X+0],0x0
    1205: B0 06    JNZ   0x120C
    1207: 3D 01 88 CMP   [X+1],0x88
    120A: A0 0D    JZ    0x1218
    120C: 80 7C    JMP   0x1289
(0033) 		{
(0034) 			case 0x14:
(0035) 					// "0"
(0036) 					Time_Adj_Mi(TIME_DOWN);
    120E: 50 00    MOV   A,0x0
    1210: 08       PUSH  A
    1211: 7C 27 5C LCALL _Time_Adj_Mi
    1214: 38 FF    ADD   SP,0xFF
(0037) 					break;
    1216: 80 72    JMP   0x1289
(0038) 				case 0x88:
(0039) 					// "1"
(0040) 					Time_Adj_D(TIME_UP);
    1218: 50 01    MOV   A,0x1
    121A: 08       PUSH  A
    121B: 7C 2A 14 LCALL _Time_Adj_D
    121E: 38 FF    ADD   SP,0xFF
(0041) 					break;
    1220: 80 68    JMP   0x1289
(0042) 				case 0x84:
(0043) 					// "2"
(0044) 					Time_Adj_Mo(TIME_UP);
    1222: 50 01    MOV   A,0x1
    1224: 08       PUSH  A
    1225: 7C 2B 81 LCALL _Time_Adj_Mo
    1228: 38 FF    ADD   SP,0xFF
(0045) 					break;
    122A: 80 5E    JMP   0x1289
(0046) 				case 0x82:
(0047) 					// "3"
(0048) 					Time_Adj_Y(TIME_UP);
    122C: 50 01    MOV   A,0x1
    122E: 08       PUSH  A
    122F: 7C 2C EF LCALL _Time_Adj_Y
    1232: 38 FF    ADD   SP,0xFF
(0049) 					break;
    1234: 80 54    JMP   0x1289
(0050) 				case 0x48:
(0051) 					// "4"
(0052) 					Time_Adj_D(TIME_DOWN);
    1236: 50 00    MOV   A,0x0
    1238: 08       PUSH  A
    1239: 7C 2A 14 LCALL _Time_Adj_D
    123C: 38 FF    ADD   SP,0xFF
(0053) 					break;
    123E: 80 4A    JMP   0x1289
(0054) 				case 0x44:
(0055) 					// "5"
(0056) 					Time_Adj_Mo(TIME_DOWN);
    1240: 50 00    MOV   A,0x0
    1242: 08       PUSH  A
    1243: 7C 2B 81 LCALL _Time_Adj_Mo
    1246: 38 FF    ADD   SP,0xFF
(0057) 					break;
    1248: 80 40    JMP   0x1289
(0058) 				case 0x42:
(0059) 					// "6"
(0060) 					Time_Adj_Y(TIME_DOWN);
    124A: 50 00    MOV   A,0x0
    124C: 08       PUSH  A
    124D: 7C 2C EF LCALL _Time_Adj_Y
    1250: 38 FF    ADD   SP,0xFF
(0061) 					break;
    1252: 80 36    JMP   0x1289
(0062) 				case 0x28:
(0063) 					// "7"
(0064) 					Time_Adj_H(TIME_UP);
    1254: 50 01    MOV   A,0x1
    1256: 08       PUSH  A
    1257: 7C 28 1A LCALL _Time_Adj_H
    125A: 38 FF    ADD   SP,0xFF
(0065) 					break;
    125C: 80 2C    JMP   0x1289
(0066) 				case 0x24:
(0067) 					// "8"
(0068) 					Time_Adj_Mi(TIME_UP);
    125E: 50 01    MOV   A,0x1
    1260: 08       PUSH  A
    1261: 7C 27 5C LCALL _Time_Adj_Mi
    1264: 38 FF    ADD   SP,0xFF
(0069) 					break;
    1266: 80 22    JMP   0x1289
(0070) 				case 0x22:
(0071) 					// "9"
(0072) 					Time_Adj_S(TIME_UP);
    1268: 50 01    MOV   A,0x1
    126A: 08       PUSH  A
    126B: 7C 26 9E LCALL _Time_Adj_S
    126E: 38 FF    ADD   SP,0xFF
(0073) 					break;
    1270: 80 18    JMP   0x1289
(0074) 				case 0x11:
(0075) 					// "D"
(0076) 					MainView_Callback();
    1272: 7C 1B 05 LCALL _MainView_Callback
(0077) 					return;
    1275: 80 75    JMP   0x12EB
(0078) 					break;
(0079) 				case 0x18:
(0080) 					// "*"
(0081) 					Time_Adj_H(TIME_DOWN);
    1277: 50 00    MOV   A,0x0
    1279: 08       PUSH  A
    127A: 7C 28 1A LCALL _Time_Adj_H
    127D: 38 FF    ADD   SP,0xFF
(0082) 					break;
    127F: 80 09    JMP   0x1289
(0083) 				case 0x12:
(0084) 					// "#"
(0085) 					Time_Adj_S(TIME_DOWN);
    1281: 50 00    MOV   A,0x0
    1283: 08       PUSH  A
    1284: 7C 26 9E LCALL _Time_Adj_S
    1287: 38 FF    ADD   SP,0xFF
(0086) 					break;
(0087) 		}
(0088) 	}
(0089) 
(0090) 	Rtc_ReadFromRtc();
    1289: 7C 20 34 LCALL _Rtc_ReadFromRtc
    128C: 62 D0 00 MOV   REG[0xD0],0x0
(0091) 	
(0092) 	LCD_Position(0, 0);
    128F: 10       PUSH  X
    1290: 50 00    MOV   A,0x0
    1292: 57 00    MOV   X,0x0
    1294: 7C 09 79 LCALL _LCD_Position
(0093) 	LCD_PrHexByte(datetime._04h.byte);
    1297: 62 D0 00 MOV   REG[0xD0],0x0
    129A: 51 95    MOV   A,[datetime+4]
    129C: 7C 08 16 LCALL _LCD_PrHexByte
(0094) 	LCD_Position(0, 3);
    129F: 57 03    MOV   X,0x3
    12A1: 50 00    MOV   A,0x0
    12A3: 7C 09 79 LCALL _LCD_Position
(0095) 	LCD_PrHexByte(datetime._05h.byte);
    12A6: 62 D0 00 MOV   REG[0xD0],0x0
    12A9: 51 96    MOV   A,[datetime+5]
    12AB: 7C 08 16 LCALL _LCD_PrHexByte
(0096) 	LCD_Position(0, 6);
    12AE: 57 06    MOV   X,0x6
    12B0: 50 00    MOV   A,0x0
    12B2: 7C 09 79 LCALL _LCD_Position
(0097) 	LCD_PrHexByte(datetime._06h.byte);
    12B5: 62 D0 00 MOV   REG[0xD0],0x0
    12B8: 51 97    MOV   A,[datetime+6]
    12BA: 7C 08 16 LCALL _LCD_PrHexByte
(0098) 
(0099) 	LCD_Position(1, 0);
    12BD: 57 00    MOV   X,0x0
    12BF: 50 01    MOV   A,0x1
    12C1: 7C 09 79 LCALL _LCD_Position
(0100) 	/*if(is12h)
(0101) 	{
(0102) 		LCD_PrHexByte(datetime._02h.bits_ampm.hours | (datetime._02h.bits_ampm.hours10 << 4));
(0103) 	}
(0104) 	else
(0105) 	{*/
(0106) 		LCD_PrHexByte(datetime._02h.byte);
    12C4: 62 D0 00 MOV   REG[0xD0],0x0
    12C7: 51 93    MOV   A,[datetime+2]
    12C9: 7C 08 16 LCALL _LCD_PrHexByte
(0107) 	//}
(0108) 	LCD_Position(1, 3);
    12CC: 57 03    MOV   X,0x3
    12CE: 50 01    MOV   A,0x1
    12D0: 7C 09 79 LCALL _LCD_Position
(0109) 	LCD_PrHexByte(datetime._01h.byte);
    12D3: 62 D0 00 MOV   REG[0xD0],0x0
    12D6: 51 92    MOV   A,[datetime+1]
    12D8: 7C 08 16 LCALL _LCD_PrHexByte
(0110) 	LCD_Position(1, 6);
    12DB: 57 06    MOV   X,0x6
    12DD: 50 01    MOV   A,0x1
    12DF: 7C 09 79 LCALL _LCD_Position
(0111) 	LCD_PrHexByte(datetime._00h.byte);
    12E2: 62 D0 00 MOV   REG[0xD0],0x0
    12E5: 51 91    MOV   A,[datetime]
    12E7: 7C 08 16 LCALL _LCD_PrHexByte
    12EA: 20       POP   X
    12EB: 38 FE    ADD   SP,0xFE
    12ED: 20       POP   X
    12EE: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\dateutil.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "dateUtil.h"
(0004) 
(0005) BOOL isLeapYear(unsigned short year)
(0006) {
_isLeapYear:
  year                 --> X-5
    12EF: 10       PUSH  X
    12F0: 4F       MOV   X,SP
    12F1: 38 02    ADD   SP,0x2
(0007) 	return (!(year%4) && (year%100) || !(year%400));
    12F3: 62 D0 00 MOV   REG[0xD0],0x0
    12F6: 52 FC    MOV   A,[X-4]
    12F8: 21 03    AND   A,0x3
    12FA: 53 8F    MOV   [__r1],A
    12FC: 52 FB    MOV   A,[X-5]
    12FE: 21 00    AND   A,0x0
    1300: 39 00    CMP   A,0x0
    1302: B0 27    JNZ   0x132A
    1304: 3C 8F 00 CMP   [__r1],0x0
    1307: B0 22    JNZ   0x132A
    1309: 62 D0 00 MOV   REG[0xD0],0x0
    130C: 50 00    MOV   A,0x0
    130E: 08       PUSH  A
    130F: 50 64    MOV   A,0x64
    1311: 08       PUSH  A
    1312: 52 FB    MOV   A,[X-5]
    1314: 08       PUSH  A
    1315: 52 FC    MOV   A,[X-4]
    1317: 08       PUSH  A
    1318: 7C 2E 5E LCALL 0x2E5E
    131B: 38 FE    ADD   SP,0xFE
    131D: 18       POP   A
    131E: 53 8F    MOV   [__r1],A
    1320: 18       POP   A
    1321: 39 00    CMP   A,0x0
    1323: B0 27    JNZ   0x134B
    1325: 3C 8F 00 CMP   [__r1],0x0
    1328: B0 22    JNZ   0x134B
    132A: 62 D0 00 MOV   REG[0xD0],0x0
    132D: 50 01    MOV   A,0x1
    132F: 08       PUSH  A
    1330: 50 90    MOV   A,0x90
    1332: 08       PUSH  A
    1333: 52 FB    MOV   A,[X-5]
    1335: 08       PUSH  A
    1336: 52 FC    MOV   A,[X-4]
    1338: 08       PUSH  A
    1339: 7C 2E 5E LCALL 0x2E5E
    133C: 38 FE    ADD   SP,0xFE
    133E: 18       POP   A
    133F: 53 8F    MOV   [__r1],A
    1341: 18       POP   A
    1342: 39 00    CMP   A,0x0
    1344: B0 0E    JNZ   0x1353
    1346: 3C 8F 00 CMP   [__r1],0x0
    1349: B0 09    JNZ   0x1353
    134B: 56 01 01 MOV   [X+1],0x1
    134E: 56 00 00 MOV   [X+0],0x0
    1351: 80 07    JMP   0x1359
    1353: 56 01 00 MOV   [X+1],0x0
    1356: 56 00 00 MOV   [X+0],0x0
    1359: 62 D0 00 MOV   REG[0xD0],0x0
    135C: 52 01    MOV   A,[X+1]
    135E: 38 FE    ADD   SP,0xFE
    1360: 20       POP   X
    1361: 7F       RET   
(0008) }
(0009) 
(0010) BOOL isValidDate(BYTE day, BYTE month, BYTE year)
(0011) {
_isValidDate:
  monthLen             --> X+2
  fullYear             --> X+0
  year                 --> X-6
  month                --> X-5
  day                  --> X-4
    1362: 10       PUSH  X
    1363: 4F       MOV   X,SP
    1364: 38 0E    ADD   SP,0xE
(0012) 	unsigned short fullYear = 2000 + year;
    1366: 62 D0 00 MOV   REG[0xD0],0x0
    1369: 52 FA    MOV   A,[X-6]
    136B: 53 8F    MOV   [__r1],A
    136D: 55 90 00 MOV   [__r0],0x0
    1370: 06 8F D0 ADD   [__r1],0xD0
    1373: 0E 90 07 ADC   [__r0],0x7
    1376: 51 8F    MOV   A,[__r1]
    1378: 54 01    MOV   [X+1],A
    137A: 51 90    MOV   A,[__r0]
    137C: 54 00    MOV   [X+0],A
(0013) 	BYTE monthLen[]={31,28,31,30,31,30,31,31,30,31,30,31};
    137E: 55 8F EA MOV   [__r1],0xEA
    1381: 55 90 01 MOV   [__r0],0x1
    1384: 5A 8D    MOV   [__r3],X
    1386: 06 8D 02 ADD   [__r3],0x2
    1389: 62 D5 07 MOV   REG[0xD5],0x7
    138C: 10       PUSH  X
    138D: 55 84 00 MOV   [__rX],0x0
    1390: 51 90    MOV   A,[__r0]
    1392: 58 8F    MOV   X,[__r1]
    1394: 08       PUSH  A
    1395: 28       ROMX  
    1396: 62 D0 00 MOV   REG[0xD0],0x0
    1399: 3F 8D    MVI   [__r3],A
    139B: 18       POP   A
    139C: 75       INC   X
    139D: 09 00    ADC   A,0x0
    139F: 76 84    INC   [__rX]
    13A1: 3C 84 0C CMP   [__rX],0xC
    13A4: BF EF    JNZ   0x1394
    13A6: 20       POP   X
(0014) 	
(0015) 	if(year > 99) return FALSE;
    13A7: 50 63    MOV   A,0x63
    13A9: 3B FA    CMP   A,[X-6]
    13AB: D0 08    JNC   0x13B4
    13AD: 62 D0 00 MOV   REG[0xD0],0x0
    13B0: 50 00    MOV   A,0x0
    13B2: 80 63    JMP   0x1416
(0016) 
(0017) 	if (!fullYear || !month || !day || month>12)
    13B4: 3D 00 00 CMP   [X+0],0x0
    13B7: B0 06    JNZ   0x13BE
    13B9: 3D 01 00 CMP   [X+1],0x0
    13BC: A0 11    JZ    0x13CE
    13BE: 3D FB 00 CMP   [X-5],0x0
    13C1: A0 0C    JZ    0x13CE
    13C3: 3D FC 00 CMP   [X-4],0x0
    13C6: A0 07    JZ    0x13CE
    13C8: 50 0C    MOV   A,0xC
    13CA: 3B FB    CMP   A,[X-5]
    13CC: D0 08    JNC   0x13D5
(0018) 		return FALSE;
    13CE: 62 D0 00 MOV   REG[0xD0],0x0
    13D1: 50 00    MOV   A,0x0
    13D3: 80 42    JMP   0x1416
(0019) 	if (isLeapYear(fullYear) && month==2)
    13D5: 52 00    MOV   A,[X+0]
    13D7: 08       PUSH  A
    13D8: 52 01    MOV   A,[X+1]
    13DA: 08       PUSH  A
    13DB: 9F 12    CALL  _isLeapYear
    13DD: 38 FE    ADD   SP,0xFE
    13DF: 62 D0 00 MOV   REG[0xD0],0x0
    13E2: 39 00    CMP   A,0x0
    13E4: A0 08    JZ    0x13ED
    13E6: 3D FB 02 CMP   [X-5],0x2
    13E9: B0 03    JNZ   0x13ED
(0020) 		monthLen[1]++;
    13EB: 77 03    INC   [X+3]
(0021) 	if (day > monthLen[month-1])
    13ED: 62 D0 00 MOV   REG[0xD0],0x0
    13F0: 55 90 07 MOV   [__r0],0x7
    13F3: 5A 8F    MOV   [__r1],X
    13F5: 06 8F 01 ADD   [__r1],0x1
    13F8: 52 FB    MOV   A,[X-5]
    13FA: 02 8F    ADD   A,[__r1]
    13FC: 53 8F    MOV   [__r1],A
    13FE: 50 00    MOV   A,0x0
    1400: 0A 90    ADC   A,[__r0]
    1402: 60 D4    MOV   REG[0xD4],A
    1404: 3E 8F    MVI   A,[__r1]
    1406: 3B FC    CMP   A,[X-4]
    1408: D0 08    JNC   0x1411
(0022) 		return FALSE;
    140A: 62 D0 00 MOV   REG[0xD0],0x0
    140D: 50 00    MOV   A,0x0
    140F: 80 06    JMP   0x1416
(0023) 	return TRUE;
    1411: 62 D0 00 MOV   REG[0xD0],0x0
    1414: 50 01    MOV   A,0x1
    1416: 38 F2    ADD   SP,0xF2
    1418: 20       POP   X
    1419: 7F       RET   
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
141A: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
141B: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
141D: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
141F: 78       DEC   A                  (0062)     dec   A
1420: BF FC    JNZ   0x141D             (0063)     jnz   DELAY50US
                                        (0064) 
1422: 18       POP   A                  (0065) 	pop A
1423: 78       DEC   A                  (0066) 	dec   A
1424: BF F5    JNZ   _Delay10msTimes    (0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
1426: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
1427: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
1429: 78       DEC   A                  (0104) 	dec A
142A: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
142C: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
1435: 08       PUSH  A                  (0149)     push  A
1436: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
1438: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
143A: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
143C: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
143E: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
1440: D0 06    JNC   0x1447             (0155)     jnc   Delay50u_End
1442: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
1444: 78       DEC   A                  (0158)     dec   A                            ; [4]
1445: BF FE    JNZ   0x1444             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
1447: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
1448: 7F       RET                      (0163)     ret
FILE: C:\Users\Rod\Desktop\RTC\RTC\eeprom.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "EEPROM.h"
(0004) #include "delay.h"
(0005) 
(0006) extern BYTE data;
(0007) void EEPROM_Start(void)
(0008) {
(0009) 	I2Cm_Start();
_EEPROM_Start:
    1449: 10       PUSH  X
    144A: 7C 0A 83 LCALL _I2Cm_Start
    144D: 20       POP   X
    144E: 7F       RET   
(0010) }
(0011) void EEPROM_Stop(void)
(0012) {
(0013) 	I2Cm_Stop();
_EEPROM_Stop:
    144F: 10       PUSH  X
    1450: 7C 0A A7 LCALL _I2Cm_Stop
    1453: 20       POP   X
    1454: 7F       RET   
(0014) }
(0015) 
(0016) BYTE EEPROM_Write(void* buffer, WORD address, BYTE count)
(0017) {
_EEPROM_Write:
  error                --> X+1
  i                    --> X+0
  count                --> X-8
  address              --> X-7
  buffer               --> X-5
    1455: 10       PUSH  X
    1456: 4F       MOV   X,SP
    1457: 38 02    ADD   SP,0x2
(0018) 	BYTE error = EEPROM_NOERROR;
    1459: 56 01 00 MOV   [X+1],0x0
(0019) 	BYTE i=0;
    145C: 56 00 00 MOV   [X+0],0x0
(0020) 	
(0021) 	if(I2Cm_fSendStart(EEPROM_I2C_ADD, I2Cm_WRITE) != 0)
    145F: 10       PUSH  X
    1460: 57 00    MOV   X,0x0
    1462: 50 50    MOV   A,0x50
    1464: 7C 0B EF LCALL _I2Cm_fSendStart
    1467: 20       POP   X
    1468: 62 D0 00 MOV   REG[0xD0],0x0
    146B: 39 00    CMP   A,0x0
    146D: A0 5F    JZ    0x14CD
(0022) 	{
(0023) 		if(I2Cm_fWrite(address >> 8) != 0)
    146F: 52 F9    MOV   A,[X-7]
    1471: 10       PUSH  X
    1472: 7C 0C 29 LCALL _I2Cm_fWrite
    1475: 20       POP   X
    1476: 62 D0 00 MOV   REG[0xD0],0x0
    1479: 39 00    CMP   A,0x0
    147B: A0 4C    JZ    0x14C8
(0024) 		{
(0025) 			if(I2Cm_fWrite(address & 0xFF) != 0)
    147D: 52 FA    MOV   A,[X-6]
    147F: 10       PUSH  X
    1480: 7C 0C 29 LCALL _I2Cm_fWrite
    1483: 20       POP   X
    1484: 62 D0 00 MOV   REG[0xD0],0x0
    1487: 39 00    CMP   A,0x0
    1489: A0 39    JZ    0x14C3
(0026) 			{
(0027) 				for (i=0; i<count; i++)
    148B: 56 00 00 MOV   [X+0],0x0
    148E: 80 2C    JMP   0x14BB
(0028) 				{
(0029) 					if(I2Cm_fWrite(*((BYTE*)buffer+i)) == 0)
    1490: 62 D0 00 MOV   REG[0xD0],0x0
    1493: 52 00    MOV   A,[X+0]
    1495: 53 8F    MOV   [__r1],A
    1497: 55 90 00 MOV   [__r0],0x0
    149A: 52 FC    MOV   A,[X-4]
    149C: 04 8F    ADD   [__r1],A
    149E: 52 FB    MOV   A,[X-5]
    14A0: 0C 90    ADC   [__r0],A
    14A2: 51 90    MOV   A,[__r0]
    14A4: 60 D4    MOV   REG[0xD4],A
    14A6: 3E 8F    MVI   A,[__r1]
    14A8: 10       PUSH  X
    14A9: 7C 0C 29 LCALL _I2Cm_fWrite
    14AC: 20       POP   X
    14AD: 62 D0 00 MOV   REG[0xD0],0x0
    14B0: 39 00    CMP   A,0x0
    14B2: B0 06    JNZ   0x14B9
(0030) 					{	
(0031) 						error= EEPROM_SLAVENOTACKDATA;
    14B4: 56 01 02 MOV   [X+1],0x2
(0032) 						break;
    14B7: 80 18    JMP   0x14D0
(0033) 					}
(0034) 				}
    14B9: 77 00    INC   [X+0]
    14BB: 52 00    MOV   A,[X+0]
    14BD: 3B F8    CMP   A,[X-8]
    14BF: CF D0    JC    0x1490
(0035) 			}
    14C1: 80 0E    JMP   0x14D0
(0036) 			else
(0037) 			{
(0038) 				error = EEPROM_SLAVENOTACKADDRESS;
    14C3: 56 01 01 MOV   [X+1],0x1
(0039) 			}
(0040) 		}
    14C6: 80 09    JMP   0x14D0
(0041) 		else
(0042) 		{
(0043) 		error = EEPROM_SLAVENOTACKADDRESS;
    14C8: 56 01 01 MOV   [X+1],0x1
(0044) 		}
(0045) 	}
    14CB: 80 04    JMP   0x14D0
(0046) 	else
(0047) 	{
(0048) 		error = EEPROM_SLAVENOTACKADDRESS;
    14CD: 56 01 01 MOV   [X+1],0x1
(0049) 	}
(0050)     
(0051) 	I2Cm_SendStop();
    14D0: 10       PUSH  X
    14D1: 7C 0D 6B LCALL _I2Cm_SendStop
(0052) 	
(0053) 	Delay50uTimes(0x64);
    14D4: 50 64    MOV   A,0x64
    14D6: 7C 14 27 LCALL _Delay50uTimes
    14D9: 20       POP   X
(0054) 
(0055) 	return error;
    14DA: 52 01    MOV   A,[X+1]
    14DC: 62 D0 00 MOV   REG[0xD0],0x0
    14DF: 38 FE    ADD   SP,0xFE
    14E1: 20       POP   X
    14E2: 7F       RET   
(0056) }
(0057) BYTE EEPROM_Read(void* buffer, WORD address, BYTE count)
(0058) {
_EEPROM_Read:
  error                --> X+1
  i                    --> X+0
  count                --> X-8
  address              --> X-7
  buffer               --> X-5
    14E3: 10       PUSH  X
    14E4: 4F       MOV   X,SP
    14E5: 38 02    ADD   SP,0x2
(0059) 	BYTE error = EEPROM_NOERROR;
    14E7: 56 01 00 MOV   [X+1],0x0
(0060) 	BYTE i=0;
    14EA: 56 00 00 MOV   [X+0],0x0
(0061) 	
(0062) 	if(I2Cm_fSendStart(EEPROM_I2C_ADD, I2Cm_WRITE) != 0)
    14ED: 10       PUSH  X
    14EE: 57 00    MOV   X,0x0
    14F0: 50 50    MOV   A,0x50
    14F2: 7C 0B EF LCALL _I2Cm_fSendStart
    14F5: 20       POP   X
    14F6: 62 D0 00 MOV   REG[0xD0],0x0
    14F9: 39 00    CMP   A,0x0
    14FB: A0 93    JZ    0x158F
(0063) 	{
(0064) 		if(I2Cm_fWrite(address >> 8) != 0)
    14FD: 52 F9    MOV   A,[X-7]
    14FF: 10       PUSH  X
    1500: 7C 0C 29 LCALL _I2Cm_fWrite
    1503: 20       POP   X
    1504: 62 D0 00 MOV   REG[0xD0],0x0
    1507: 39 00    CMP   A,0x0
    1509: A0 80    JZ    0x158A
(0065) 		{
(0066) 			if (I2Cm_fWrite(address & 0xFF) != 0)
    150B: 52 FA    MOV   A,[X-6]
    150D: 10       PUSH  X
    150E: 7C 0C 29 LCALL _I2Cm_fWrite
    1511: 20       POP   X
    1512: 62 D0 00 MOV   REG[0xD0],0x0
    1515: 39 00    CMP   A,0x0
    1517: A0 6D    JZ    0x1585
(0067) 			{
(0068) 				if (I2Cm_fSendRepeatStart(EEPROM_I2C_ADD,I2Cm_READ) != 0)
    1519: 10       PUSH  X
    151A: 57 01    MOV   X,0x1
    151C: 50 50    MOV   A,0x50
    151E: 7C 0B B9 LCALL _I2Cm_fSendRepeatStart
    1521: 20       POP   X
    1522: 62 D0 00 MOV   REG[0xD0],0x0
    1525: 39 00    CMP   A,0x0
    1527: A0 58    JZ    0x1580
(0069) 				{
(0070) 					count--;
    1529: 7B F8    DEC   [X-8]
(0071) 					for (i=0;i<count;i++)
    152B: 56 00 00 MOV   [X+0],0x0
    152E: 80 26    JMP   0x1555
(0072) 					{
(0073) 						*((BYTE*)buffer+i) =I2Cm_bRead(I2Cm_ACKslave);
    1530: 10       PUSH  X
    1531: 50 01    MOV   A,0x1
    1533: 7C 0C C0 LCALL _I2Cm_bRead
    1536: 20       POP   X
    1537: 62 D0 00 MOV   REG[0xD0],0x0
    153A: 53 90    MOV   [__r0],A
    153C: 52 00    MOV   A,[X+0]
    153E: 53 8D    MOV   [__r3],A
    1540: 55 8E 00 MOV   [__r2],0x0
    1543: 52 FC    MOV   A,[X-4]
    1545: 04 8D    ADD   [__r3],A
    1547: 52 FB    MOV   A,[X-5]
    1549: 0C 8E    ADC   [__r2],A
    154B: 51 8E    MOV   A,[__r2]
    154D: 60 D5    MOV   REG[0xD5],A
    154F: 51 90    MOV   A,[__r0]
    1551: 3F 8D    MVI   [__r3],A
(0074) 					}
    1553: 77 00    INC   [X+0]
    1555: 52 00    MOV   A,[X+0]
    1557: 3B F8    CMP   A,[X-8]
    1559: CF D6    JC    0x1530
(0075) 					*((BYTE*)buffer+i) =I2Cm_bRead(I2Cm_NAKslave);
    155B: 10       PUSH  X
    155C: 50 00    MOV   A,0x0
    155E: 7C 0C C0 LCALL _I2Cm_bRead
    1561: 20       POP   X
    1562: 62 D0 00 MOV   REG[0xD0],0x0
    1565: 53 90    MOV   [__r0],A
    1567: 52 00    MOV   A,[X+0]
    1569: 53 8D    MOV   [__r3],A
    156B: 55 8E 00 MOV   [__r2],0x0
    156E: 52 FC    MOV   A,[X-4]
    1570: 04 8D    ADD   [__r3],A
    1572: 52 FB    MOV   A,[X-5]
    1574: 0C 8E    ADC   [__r2],A
    1576: 51 8E    MOV   A,[__r2]
    1578: 60 D5    MOV   REG[0xD5],A
    157A: 51 90    MOV   A,[__r0]
    157C: 3F 8D    MVI   [__r3],A
(0076) 				}
    157E: 80 13    JMP   0x1592
(0077) 				else
(0078) 				{
(0079) 				error = EEPROM_SLAVENOTACKDATA;
    1580: 56 01 02 MOV   [X+1],0x2
(0080) 				}
(0081) 			}
    1583: 80 0E    JMP   0x1592
(0082) 			else
(0083) 			{
(0084) 			error = EEPROM_SLAVENOTACKDATA;
    1585: 56 01 02 MOV   [X+1],0x2
(0085) 			}
(0086) 		}
    1588: 80 09    JMP   0x1592
(0087) 		else
(0088) 		{
(0089) 		error = EEPROM_SLAVENOTACKADDRESS;
    158A: 56 01 01 MOV   [X+1],0x1
(0090) 		}
(0091) 	}
    158D: 80 04    JMP   0x1592
(0092) 	else
(0093) 	{
(0094) 		error = EEPROM_SLAVENOTACKADDRESS;
    158F: 56 01 01 MOV   [X+1],0x1
(0095) 	}
(0096) 	
(0097) 	I2Cm_SendStop();
    1592: 10       PUSH  X
    1593: 7C 0D 6B LCALL _I2Cm_SendStop
    1596: 20       POP   X
(0098) 	
(0099) 	return error;
    1597: 52 01    MOV   A,[X+1]
    1599: 62 D0 00 MOV   REG[0xD0],0x0
    159C: 38 FE    ADD   SP,0xFE
    159E: 20       POP   X
    159F: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\keypad.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h" 
(0003) #include "Keypad.h"
(0004) 
(0005) #if KEYPAD_PORT == 0
(0006) 	#define PRTxDM2 PRT0DM2
(0007) 	#define PRTxDM1 PRT0DM1
(0008) 	#define PRTxDM0 PRT0DM0
(0009) 	#define PRTxDR 	PRT0DR
(0010) 	
(0011) 	#define PRTxIC1 PRT0IC1
(0012) 	#define PRTxIC0 PRT0IC0
(0013) 	#define PRTxIE 	PRT0IE
(0014) 		
(0015) #elif KEYPAD_PORT == 1
(0016) 	#define PRTxDM2 PRT1DM2
(0017) 	#define PRTxDM1 PRT1DM1
(0018) 	#define PRTxDM0 PRT1DM0
(0019) 	#define PRTxDR 	PRT1DR
(0020) 	
(0021) 	#define PRTxIC1 PRT1IC1
(0022) 	#define PRTxIC0 PRT1IC0
(0023) 	#define PRTxIE 	PRT1IE
(0024) 		
(0025) #elif KEYPAD_PORT == 2
(0026) 	#define PRTxDM2 PRT2DM2
(0027) 	#define PRTxDM1 PRT2DM1
(0028) 	#define PRTxDM0 PRT2DM0
(0029) 	#define PRTxDR 	PRT2DR
(0030) 	
(0031) 	#define PRTxIC1 PRT2IC1
(0032) 	#define PRTxIC0 PRT2IC0
(0033) 	#define PRTxIE 	PRT2IE
(0034) 		
(0035) #else 
(0036) 	#error "Keypad port is invalid!"
(0037) #endif
(0038) 		
(0039) static BOOL keyStillPressed = FALSE;
(0040) static BYTE keypadMask = 0x0F;
(0041) static BYTE pressedKey = 0x00;
(0042) static BOOL keyPressed = FALSE;
(0043) 
(0044) void Keypad_Start(void)
(0045) {
(0046) 	PRTxDM2 &= ~keypadMask;	// initialize button
_Keypad_Start:
    15A0: 62 D0 00 MOV   REG[0xD0],0x0
    15A3: 51 A1    MOV   A,[keypad.c:keypadMask]
    15A5: 73       CPL   A
    15A6: 62 D0 00 MOV   REG[0xD0],0x0
    15A9: 53 90    MOV   [__r0],A
    15AB: 5D 07    MOV   A,REG[0x7]
    15AD: 22 90    AND   A,[__r0]
    15AF: 60 07    MOV   REG[0x7],A
(0047) 	PRTxDM1 &= ~keypadMask;
    15B1: 62 D0 00 MOV   REG[0xD0],0x0
    15B4: 51 A1    MOV   A,[keypad.c:keypadMask]
    15B6: 73       CPL   A
    15B7: 62 D0 00 MOV   REG[0xD0],0x0
    15BA: 53 90    MOV   [__r0],A
    15BC: 71 10    OR    F,0x10
    15BE: 5D 05    MOV   A,REG[0x5]
    15C0: 22 90    AND   A,[__r0]
    15C2: 60 05    MOV   REG[0x5],A
(0048) 	PRTxDM0 &= ~keypadMask;
    15C4: 70 CF    AND   F,0xCF
    15C6: 62 D0 00 MOV   REG[0xD0],0x0
    15C9: 51 A1    MOV   A,[keypad.c:keypadMask]
    15CB: 73       CPL   A
    15CC: 62 D0 00 MOV   REG[0xD0],0x0
    15CF: 53 90    MOV   [__r0],A
    15D1: 71 10    OR    F,0x10
    15D3: 5D 04    MOV   A,REG[0x4]
    15D5: 22 90    AND   A,[__r0]
    15D7: 60 04    MOV   REG[0x4],A
(0049) 	
(0050) 	PRTxDM2 &= keypadMask;	// initialize button
    15D9: 70 CF    AND   F,0xCF
    15DB: 5D 07    MOV   A,REG[0x7]
    15DD: 53 90    MOV   [__r0],A
    15DF: 62 D0 00 MOV   REG[0xD0],0x0
    15E2: 51 A1    MOV   A,[keypad.c:keypadMask]
    15E4: 62 D0 00 MOV   REG[0xD0],0x0
    15E7: 24 90    AND   [__r0],A
    15E9: 51 90    MOV   A,[__r0]
    15EB: 60 07    MOV   REG[0x7],A
(0051) 	PRTxDM1 &= keypadMask;
    15ED: 71 10    OR    F,0x10
    15EF: 5D 05    MOV   A,REG[0x5]
    15F1: 53 90    MOV   [__r0],A
    15F3: 70 CF    AND   F,0xCF
    15F5: 62 D0 00 MOV   REG[0xD0],0x0
    15F8: 51 A1    MOV   A,[keypad.c:keypadMask]
    15FA: 62 D0 00 MOV   REG[0xD0],0x0
    15FD: 24 90    AND   [__r0],A
    15FF: 51 90    MOV   A,[__r0]
    1601: 71 10    OR    F,0x10
    1603: 60 05    MOV   REG[0x5],A
(0052) 	PRTxDM0 &= keypadMask;
    1605: 5D 04    MOV   A,REG[0x4]
    1607: 53 90    MOV   [__r0],A
    1609: 70 CF    AND   F,0xCF
    160B: 62 D0 00 MOV   REG[0xD0],0x0
    160E: 51 A1    MOV   A,[keypad.c:keypadMask]
    1610: 62 D0 00 MOV   REG[0xD0],0x0
    1613: 24 90    AND   [__r0],A
    1615: 51 90    MOV   A,[__r0]
    1617: 71 10    OR    F,0x10
    1619: 60 04    MOV   REG[0x4],A
(0053) 	
(0054) 	PRTxDR = ~keypadMask;	// Setup pull-down resistor
    161B: 70 CF    AND   F,0xCF
    161D: 62 D0 00 MOV   REG[0xD0],0x0
    1620: 51 A1    MOV   A,[keypad.c:keypadMask]
    1622: 73       CPL   A
    1623: 62 D0 00 MOV   REG[0xD0],0x0
    1626: 60 04    MOV   REG[0x4],A
(0055) 	
(0056) 	PRTxIC1 |= keypadMask; // setup interrupt mode
    1628: 71 10    OR    F,0x10
    162A: 5D 07    MOV   A,REG[0x7]
    162C: 53 90    MOV   [__r0],A
    162E: 70 CF    AND   F,0xCF
    1630: 62 D0 00 MOV   REG[0xD0],0x0
    1633: 51 A1    MOV   A,[keypad.c:keypadMask]
    1635: 62 D0 00 MOV   REG[0xD0],0x0
    1638: 2C 90    OR    [__r0],A
    163A: 51 90    MOV   A,[__r0]
    163C: 71 10    OR    F,0x10
    163E: 60 07    MOV   REG[0x7],A
(0057) 	PRTxIC0 &= ~keypadMask;
    1640: 70 CF    AND   F,0xCF
    1642: 62 D0 00 MOV   REG[0xD0],0x0
    1645: 51 A1    MOV   A,[keypad.c:keypadMask]
    1647: 73       CPL   A
    1648: 62 D0 00 MOV   REG[0xD0],0x0
    164B: 53 90    MOV   [__r0],A
    164D: 71 10    OR    F,0x10
    164F: 5D 06    MOV   A,REG[0x6]
    1651: 22 90    AND   A,[__r0]
    1653: 60 06    MOV   REG[0x6],A
(0058) 	
(0059) 	PRTxIE |= keypadMask; //Enable GPIO port interrupt bits
    1655: 70 CF    AND   F,0xCF
    1657: 5D 05    MOV   A,REG[0x5]
    1659: 53 90    MOV   [__r0],A
    165B: 62 D0 00 MOV   REG[0xD0],0x0
    165E: 51 A1    MOV   A,[keypad.c:keypadMask]
    1660: 62 D0 00 MOV   REG[0xD0],0x0
    1663: 2C 90    OR    [__r0],A
    1665: 51 90    MOV   A,[__r0]
    1667: 60 05    MOV   REG[0x5],A
(0060) 	
(0061) 	INT_MSK0 |= INT_MSK0_GPIO; //Enable global GPIO interrupt
    1669: 43 E0 20 OR    REG[0xE0],0x20
    166C: 7F       RET   
(0062) 	
(0063) }
(0064) 
(0065) BOOL KeyPad_Test(void)
(0066) {
_KeyPad_Test:
  cont                 --> X+1
  i                    --> X+0
    166D: 10       PUSH  X
    166E: 4F       MOV   X,SP
    166F: 38 02    ADD   SP,0x2
(0067) 	BYTE i, cont;
(0068) 	cont = 0;
    1671: 56 01 00 MOV   [X+1],0x0
(0069) 	
(0070) 	for (i = 0; i<50 ;i++)
    1674: 56 00 00 MOV   [X+0],0x0
    1677: 80 39    JMP   0x16B1
(0071) 	{
(0072) 		if ((PRTxDR & keypadMask) != 0x00)
    1679: 5D 04    MOV   A,REG[0x4]
    167B: 62 D0 00 MOV   REG[0xD0],0x0
    167E: 53 90    MOV   [__r0],A
    1680: 62 D0 00 MOV   REG[0xD0],0x0
    1683: 51 A1    MOV   A,[keypad.c:keypadMask]
    1685: 62 D0 00 MOV   REG[0xD0],0x0
    1688: 24 90    AND   [__r0],A
    168A: A0 1B    JZ    0x16A6
(0073) 		{
(0074) 			cont ++;
    168C: 77 01    INC   [X+1]
(0075) 			if ( (cont > 20) && !keyStillPressed )
    168E: 50 14    MOV   A,0x14
    1690: 3B 01    CMP   A,[X+1]
    1692: D0 1C    JNC   0x16AF
    1694: 62 D0 00 MOV   REG[0xD0],0x0
    1697: 3C A3 00 CMP   [keypad.c:keyStillPressed],0x0
    169A: B0 14    JNZ   0x16AF
(0076) 			{
(0077) 				keyStillPressed = TRUE;
    169C: 55 A3 01 MOV   [keypad.c:keyStillPressed],0x1
(0078) 				return TRUE;
    169F: 62 D0 00 MOV   REG[0xD0],0x0
    16A2: 50 01    MOV   A,0x1
    16A4: 80 16    JMP   0x16BB
(0079) 			}
(0080) 		}
(0081) 		else 
(0082) 		{
(0083) 			keyStillPressed = FALSE;
    16A6: 62 D0 00 MOV   REG[0xD0],0x0
    16A9: 55 A3 00 MOV   [keypad.c:keyStillPressed],0x0
(0084) 			cont = 0;
    16AC: 56 01 00 MOV   [X+1],0x0
(0085) 		}
(0086) 	}
    16AF: 77 00    INC   [X+0]
    16B1: 3D 00 32 CMP   [X+0],0x32
    16B4: CF C4    JC    0x1679
(0087) 	return FALSE;
    16B6: 62 D0 00 MOV   REG[0xD0],0x0
    16B9: 50 00    MOV   A,0x0
    16BB: 38 FE    ADD   SP,0xFE
    16BD: 20       POP   X
    16BE: 7F       RET   
(0088) }
(0089) 
(0090) BOOL Keypad_IsKeyStored(void)
(0091) {
(0092) 	if(keyPressed == TRUE)
_Keypad_IsKeyStored:
    16BF: 62 D0 00 MOV   REG[0xD0],0x0
    16C2: 3C A6 01 CMP   [keypad.c:keyPressed],0x1
    16C5: B0 0B    JNZ   0x16D1
(0093) 	{
(0094) 		keyPressed = FALSE;
    16C7: 55 A6 00 MOV   [keypad.c:keyPressed],0x0
(0095) 		return TRUE;
    16CA: 62 D0 00 MOV   REG[0xD0],0x0
    16CD: 50 01    MOV   A,0x1
    16CF: 80 06    JMP   0x16D6
(0096) 	}
(0097) 	else
(0098) 	{
(0099) 		return FALSE;
    16D1: 62 D0 00 MOV   REG[0xD0],0x0
    16D4: 50 00    MOV   A,0x0
    16D6: 7F       RET   
(0100) 	}
(0101) }
(0102) 
(0103) BYTE Keypad_GetKey(void)
(0104) {
(0105) 	return pressedKey;
_Keypad_GetKey:
    16D7: 62 D0 00 MOV   REG[0xD0],0x0
    16DA: 51 A5    MOV   A,[keypad.c:pressedKey]
    16DC: 62 D0 00 MOV   REG[0xD0],0x0
    16DF: 7F       RET   
(0106) }
(0107) 
(0108) #pragma interrupt_handler Keypad_GPIO_ISR
(0109) void Keypad_GPIO_ISR(void)
(0110) {	
_Keypad_GPIO_ISR:
    16E0: 71 C0    OR    F,0xC0
    16E2: 08       PUSH  A
    16E3: 5D D0    MOV   A,REG[0xD0]
    16E5: 08       PUSH  A
    16E6: 5D D3    MOV   A,REG[0xD3]
    16E8: 08       PUSH  A
    16E9: 5D D4    MOV   A,REG[0xD4]
    16EB: 08       PUSH  A
    16EC: 5D D5    MOV   A,REG[0xD5]
    16EE: 08       PUSH  A
    16EF: 62 D0 00 MOV   REG[0xD0],0x0
    16F2: 51 90    MOV   A,[__r0]
    16F4: 08       PUSH  A
    16F5: 51 8F    MOV   A,[__r1]
    16F7: 08       PUSH  A
    16F8: 51 8E    MOV   A,[__r2]
    16FA: 08       PUSH  A
    16FB: 51 8D    MOV   A,[__r3]
    16FD: 08       PUSH  A
    16FE: 51 8C    MOV   A,[__r4]
    1700: 08       PUSH  A
    1701: 51 8B    MOV   A,[__r5]
    1703: 08       PUSH  A
    1704: 51 8A    MOV   A,[__r6]
    1706: 08       PUSH  A
    1707: 51 89    MOV   A,[__r7]
    1709: 08       PUSH  A
    170A: 51 88    MOV   A,[__r8]
    170C: 08       PUSH  A
    170D: 51 87    MOV   A,[__r9]
    170F: 08       PUSH  A
    1710: 51 86    MOV   A,[__r10]
    1712: 08       PUSH  A
    1713: 51 85    MOV   A,[__r11]
    1715: 08       PUSH  A
    1716: 51 84    MOV   A,[__rX]
    1718: 08       PUSH  A
    1719: 51 83    MOV   A,[__rY]
    171B: 08       PUSH  A
    171C: 51 82    MOV   A,[__rZ]
    171E: 08       PUSH  A
(0111) 	if (KeyPad_Test())
    171F: 9F 4C    CALL  _KeyPad_Test
    1721: 39 00    CMP   A,0x0
    1723: A0 33    JZ    0x1757
(0112) 	{
(0113) 		//nos aseguramos de solo tomar los 4 bits menos significativos
(0114) 		pressedKey = (PRTxDR & keypadMask);
    1725: 5D 04    MOV   A,REG[0x4]
    1727: 62 D0 00 MOV   REG[0xD0],0x0
    172A: 22 A1    AND   A,[keypad.c:keypadMask]
    172C: 62 D0 00 MOV   REG[0xD0],0x0
    172F: 53 A5    MOV   [keypad.c:pressedKey],A
(0115) 		
(0116) 		//Invierte los puertos 
(0117) 		
(0118) 		PRTxDR = keypadMask;	// Setup pull-down resistor
    1731: 62 D0 00 MOV   REG[0xD0],0x0
    1734: 51 A1    MOV   A,[keypad.c:keypadMask]
    1736: 60 04    MOV   REG[0x4],A
(0119) 		
(0120) 		//tomamos ahora los 4 bits mas significativos y obtenemos el byte completo
(0121) 		pressedKey |= (PRTxDR & ~keypadMask); 
    1738: 51 A1    MOV   A,[keypad.c:keypadMask]
    173A: 73       CPL   A
    173B: 62 D0 00 MOV   REG[0xD0],0x0
    173E: 53 90    MOV   [__r0],A
    1740: 5D 04    MOV   A,REG[0x4]
    1742: 22 90    AND   A,[__r0]
    1744: 62 D0 00 MOV   REG[0xD0],0x0
    1747: 2C A5    OR    [keypad.c:pressedKey],A
(0122) 		
(0123) 		//los regresa a la normalidad
(0124) 		
(0125) 		PRTxDR = ~keypadMask;
    1749: 62 D0 00 MOV   REG[0xD0],0x0
    174C: 51 A1    MOV   A,[keypad.c:keypadMask]
    174E: 73       CPL   A
    174F: 60 04    MOV   REG[0x4],A
(0126) 		
(0127) 		keyPressed = TRUE;
    1751: 62 D0 00 MOV   REG[0xD0],0x0
    1754: 55 A6 01 MOV   [keypad.c:keyPressed],0x1
(0128) 	}
    1757: 62 D0 00 MOV   REG[0xD0],0x0
    175A: 18       POP   A
    175B: 53 82    MOV   [__rZ],A
    175D: 18       POP   A
    175E: 53 83    MOV   [__rY],A
    1760: 18       POP   A
    1761: 53 84    MOV   [__rX],A
    1763: 18       POP   A
    1764: 53 85    MOV   [__r11],A
    1766: 18       POP   A
    1767: 53 86    MOV   [__r10],A
    1769: 18       POP   A
    176A: 53 87    MOV   [__r9],A
    176C: 18       POP   A
    176D: 53 88    MOV   [__r8],A
    176F: 18       POP   A
    1770: 53 89    MOV   [__r7],A
    1772: 18       POP   A
    1773: 53 8A    MOV   [__r6],A
    1775: 18       POP   A
    1776: 53 8B    MOV   [__r5],A
    1778: 18       POP   A
    1779: 53 8C    MOV   [__r4],A
    177B: 18       POP   A
    177C: 53 8D    MOV   [__r3],A
    177E: 18       POP   A
    177F: 53 8E    MOV   [__r2],A
    1781: 18       POP   A
    1782: 53 8F    MOV   [__r1],A
    1784: 18       POP   A
    1785: 53 90    MOV   [__r0],A
    1787: 18       POP   A
    1788: 60 D5    MOV   REG[0xD5],A
    178A: 18       POP   A
    178B: 60 D4    MOV   REG[0xD4],A
    178D: 18       POP   A
    178E: 60 D3    MOV   REG[0xD3],A
    1790: 18       POP   A
    1791: 60 D0    MOV   REG[0xD0],A
    1793: 18       POP   A
    1794: 7E       RETI  
FILE: C:\Users\Rod\Desktop\RTC\RTC\levelview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "mainView.h"
(0004) #include "menu.h"
(0005) #include "BcdUtil.h"
(0006) #include "viewManager.h"
(0007) #include "Keypad.h"
(0008) #include "levelView.h"
(0009) #include "Persist.h"
(0010) 
(0011) extern CurrentView currentView;
(0012) 
(0013) void LevelView_Start(void)
(0014) {
_LevelView_Start:
    1795: 7F       RET   
(0015) 
(0016) }
(0017) 
(0018) void LevelView_Callback(void)
(0019) {
_LevelView_Callback:
  bcdmin               --> X+14
  bcd10min             --> X+13
  bcdmax               --> X+12
  bcd10max             --> X+11
  conf                 --> X+0
    1796: 10       PUSH  X
    1797: 4F       MOV   X,SP
    1798: 38 0F    ADD   SP,0xF
(0020) 	BYTE bcd10max, bcdmax, bcd10min, bcdmin;
(0021) 	Config conf;
(0022) 	Persist_LoadConfig(&conf);
    179A: 62 D0 00 MOV   REG[0xD0],0x0
    179D: 50 07    MOV   A,0x7
    179F: 08       PUSH  A
    17A0: 10       PUSH  X
    17A1: 7C 1F 58 LCALL _Persist_LoadConfig
    17A4: 38 FE    ADD   SP,0xFE
    17A6: 62 D0 00 MOV   REG[0xD0],0x0
(0023) 
(0024) 	decToBcd(&bcd10max, &bcdmax, conf.maxTemp);
    17A9: 52 05    MOV   A,[X+5]
    17AB: 08       PUSH  A
    17AC: 5A 8F    MOV   [__r1],X
    17AE: 06 8F 0C ADD   [__r1],0xC
    17B1: 50 07    MOV   A,0x7
    17B3: 08       PUSH  A
    17B4: 51 8F    MOV   A,[__r1]
    17B6: 08       PUSH  A
    17B7: 5A 8F    MOV   [__r1],X
    17B9: 06 8F 0B ADD   [__r1],0xB
    17BC: 50 07    MOV   A,0x7
    17BE: 08       PUSH  A
    17BF: 51 8F    MOV   A,[__r1]
    17C1: 08       PUSH  A
    17C2: 7C 0E D9 LCALL _decToBcd
(0025) 	decToBcd(&bcd10min, &bcdmin, conf.minTemp);
    17C5: 52 06    MOV   A,[X+6]
    17C7: 08       PUSH  A
    17C8: 62 D0 00 MOV   REG[0xD0],0x0
    17CB: 5A 8F    MOV   [__r1],X
    17CD: 06 8F 0E ADD   [__r1],0xE
    17D0: 50 07    MOV   A,0x7
    17D2: 08       PUSH  A
    17D3: 51 8F    MOV   A,[__r1]
    17D5: 08       PUSH  A
    17D6: 5A 8F    MOV   [__r1],X
    17D8: 06 8F 0D ADD   [__r1],0xD
    17DB: 50 07    MOV   A,0x7
    17DD: 08       PUSH  A
    17DE: 51 8F    MOV   A,[__r1]
    17E0: 08       PUSH  A
    17E1: 7C 0E D9 LCALL _decToBcd
    17E4: 38 F6    ADD   SP,0xF6
(0026) 
(0027) 	currentView = LEVEL_CONFIG;
    17E6: 62 D0 00 MOV   REG[0xD0],0x0
    17E9: 55 A4 03 MOV   [currentView],0x3
(0028) 	Menu_Clear();
    17EC: 7C 1D EF LCALL _Menu_Clear
(0029) 	LCD_Position(0, 0);
    17EF: 10       PUSH  X
    17F0: 50 00    MOV   A,0x0
    17F2: 57 00    MOV   X,0x0
    17F4: 7C 09 79 LCALL _LCD_Position
(0030) 	LCD_PrCString("Max: ");
    17F7: 50 01    MOV   A,0x1
    17F9: 08       PUSH  A
    17FA: 50 FC    MOV   A,0xFC
    17FC: 5C       MOV   X,A
    17FD: 18       POP   A
    17FE: 7C 07 F4 LCALL _LCD_PrCString
    1801: 20       POP   X
(0031) 	LCD_PrHexByte( (bcd10max << 4)|bcdmax );
    1802: 52 0B    MOV   A,[X+11]
    1804: 62 D0 00 MOV   REG[0xD0],0x0
    1807: 64       ASL   A
    1808: 64       ASL   A
    1809: 64       ASL   A
    180A: 64       ASL   A
    180B: 53 90    MOV   [__r0],A
    180D: 52 0C    MOV   A,[X+12]
    180F: 2C 90    OR    [__r0],A
    1811: 10       PUSH  X
    1812: 51 90    MOV   A,[__r0]
    1814: 7C 08 16 LCALL _LCD_PrHexByte
(0032) 	LCD_Position(1,0);
    1817: 57 00    MOV   X,0x0
    1819: 50 01    MOV   A,0x1
    181B: 7C 09 79 LCALL _LCD_Position
(0033) 	LCD_PrCString("Min: ");
    181E: 50 01    MOV   A,0x1
    1820: 08       PUSH  A
    1821: 50 F6    MOV   A,0xF6
    1823: 5C       MOV   X,A
    1824: 18       POP   A
    1825: 7C 07 F4 LCALL _LCD_PrCString
    1828: 20       POP   X
(0034) 	LCD_PrHexByte( (bcd10min << 4)|bcdmin );
    1829: 52 0D    MOV   A,[X+13]
    182B: 62 D0 00 MOV   REG[0xD0],0x0
    182E: 64       ASL   A
    182F: 64       ASL   A
    1830: 64       ASL   A
    1831: 64       ASL   A
    1832: 53 90    MOV   [__r0],A
    1834: 52 0E    MOV   A,[X+14]
    1836: 2C 90    OR    [__r0],A
    1838: 10       PUSH  X
    1839: 51 90    MOV   A,[__r0]
    183B: 7C 08 16 LCALL _LCD_PrHexByte
    183E: 20       POP   X
    183F: 38 F1    ADD   SP,0xF1
    1841: 20       POP   X
    1842: 7F       RET   
(0035) }
(0036) 
(0037) void LevelView_Update(void)
(0038) {
_LevelView_Update:
  bcd10min             --> X+14
  bcd10max             --> X+13
  conf                 --> X+2
  bcdmin               --> X+1
  bcdmax               --> X+0
    1843: 10       PUSH  X
    1844: 4F       MOV   X,SP
    1845: 38 11    ADD   SP,0x11
(0039) 	if(Keypad_IsKeyStored())
    1847: 7C 16 BF LCALL _Keypad_IsKeyStored
    184A: 62 D0 00 MOV   REG[0xD0],0x0
    184D: 39 00    CMP   A,0x0
    184F: A1 81    JZ    0x19D1
(0040) 	{
(0041) 		BYTE bcd10max, bcdmax, bcd10min, bcdmin;
(0042) 		Config conf;
(0043) 		Persist_LoadConfig(&conf);
    1851: 5A 8F    MOV   [__r1],X
    1853: 06 8F 02 ADD   [__r1],0x2
    1856: 50 07    MOV   A,0x7
    1858: 08       PUSH  A
    1859: 51 8F    MOV   A,[__r1]
    185B: 08       PUSH  A
    185C: 7C 1F 58 LCALL _Persist_LoadConfig
    185F: 38 FE    ADD   SP,0xFE
    1861: 62 D0 00 MOV   REG[0xD0],0x0
(0044) 
(0045) 		decToBcd(&bcd10max, &bcdmax, conf.maxTemp);
    1864: 52 07    MOV   A,[X+7]
    1866: 08       PUSH  A
    1867: 50 07    MOV   A,0x7
    1869: 08       PUSH  A
    186A: 10       PUSH  X
    186B: 5A 8F    MOV   [__r1],X
    186D: 06 8F 0D ADD   [__r1],0xD
    1870: 08       PUSH  A
    1871: 51 8F    MOV   A,[__r1]
    1873: 08       PUSH  A
    1874: 7C 0E D9 LCALL _decToBcd
(0046) 		decToBcd(&bcd10min, &bcdmin, conf.minTemp);
    1877: 52 08    MOV   A,[X+8]
    1879: 08       PUSH  A
    187A: 62 D0 00 MOV   REG[0xD0],0x0
    187D: 5A 8F    MOV   [__r1],X
    187F: 06 8F 01 ADD   [__r1],0x1
    1882: 50 07    MOV   A,0x7
    1884: 08       PUSH  A
    1885: 51 8F    MOV   A,[__r1]
    1887: 08       PUSH  A
    1888: 5A 8F    MOV   [__r1],X
    188A: 06 8F 0E ADD   [__r1],0xE
    188D: 50 07    MOV   A,0x7
    188F: 08       PUSH  A
    1890: 51 8F    MOV   A,[__r1]
    1892: 08       PUSH  A
    1893: 7C 0E D9 LCALL _decToBcd
    1896: 38 F6    ADD   SP,0xF6
(0047) 
(0048) 		switch(Keypad_GetKey())
    1898: 7C 16 D7 LCALL _Keypad_GetKey
    189B: 62 D0 00 MOV   REG[0xD0],0x0
    189E: 54 10    MOV   [X+16],A
    18A0: 56 0F 00 MOV   [X+15],0x0
    18A3: 52 10    MOV   A,[X+16]
    18A5: 11 28    SUB   A,0x28
    18A7: 53 83    MOV   [__rY],A
    18A9: 52 0F    MOV   A,[X+15]
    18AB: 31 80    XOR   A,0x80
    18AD: 19 80    SBB   A,0x80
    18AF: 2A 83    OR    A,[__rY]
    18B1: A0 88    JZ    0x193A
    18B3: D0 22    JNC   0x18D6
    18B5: 52 10    MOV   A,[X+16]
    18B7: 11 11    SUB   A,0x11
    18B9: 62 D0 00 MOV   REG[0xD0],0x0
    18BC: 53 83    MOV   [__rY],A
    18BE: 52 0F    MOV   A,[X+15]
    18C0: 31 80    XOR   A,0x80
    18C2: 19 80    SBB   A,0x80
    18C4: C0 BD    JC    0x1982
    18C6: 2A 83    OR    A,[__rY]
    18C8: A0 B4    JZ    0x197D
    18CA: 3D 0F 00 CMP   [X+15],0x0
    18CD: B0 06    JNZ   0x18D4
    18CF: 3D 10 18 CMP   [X+16],0x18
    18D2: A0 88    JZ    0x195B
    18D4: 80 AD    JMP   0x1982
    18D6: 52 10    MOV   A,[X+16]
    18D8: 11 48    SUB   A,0x48
    18DA: 62 D0 00 MOV   REG[0xD0],0x0
    18DD: 53 83    MOV   [__rY],A
    18DF: 52 0F    MOV   A,[X+15]
    18E1: 31 80    XOR   A,0x80
    18E3: 19 80    SBB   A,0x80
    18E5: C0 9C    JC    0x1982
    18E7: 2A 83    OR    A,[__rY]
    18E9: A0 2E    JZ    0x1918
    18EB: 3D 0F 00 CMP   [X+15],0x0
    18EE: B0 06    JNZ   0x18F5
    18F0: 3D 10 88 CMP   [X+16],0x88
    18F3: A0 03    JZ    0x18F7
    18F5: 80 8C    JMP   0x1982
(0049) 		{
(0050) 			case 0x88:
(0051) 				// "1"
(0052) 				if(conf.maxTemp < 99) conf.maxTemp++;
    18F7: 3D 07 63 CMP   [X+7],0x63
    18FA: D0 03    JNC   0x18FE
    18FC: 77 07    INC   [X+7]
(0053) 				Persist_SaveConfig(&conf);
    18FE: 62 D0 00 MOV   REG[0xD0],0x0
    1901: 5A 8F    MOV   [__r1],X
    1903: 06 8F 02 ADD   [__r1],0x2
    1906: 50 07    MOV   A,0x7
    1908: 08       PUSH  A
    1909: 51 8F    MOV   A,[__r1]
    190B: 08       PUSH  A
    190C: 7C 1F 32 LCALL _Persist_SaveConfig
    190F: 38 FE    ADD   SP,0xFE
    1911: 62 D0 00 MOV   REG[0xD0],0x0
    1914: 53 90    MOV   [__r0],A
(0054) 				break;
    1916: 80 6B    JMP   0x1982
(0055) 			case 0x48:
(0056) 				if(conf.maxTemp > 0) conf.maxTemp--;
    1918: 50 00    MOV   A,0x0
    191A: 3B 07    CMP   A,[X+7]
    191C: D0 03    JNC   0x1920
    191E: 7B 07    DEC   [X+7]
(0057) 				Persist_SaveConfig(&conf);
    1920: 62 D0 00 MOV   REG[0xD0],0x0
    1923: 5A 8F    MOV   [__r1],X
    1925: 06 8F 02 ADD   [__r1],0x2
    1928: 50 07    MOV   A,0x7
    192A: 08       PUSH  A
    192B: 51 8F    MOV   A,[__r1]
    192D: 08       PUSH  A
    192E: 7C 1F 32 LCALL _Persist_SaveConfig
    1931: 38 FE    ADD   SP,0xFE
    1933: 62 D0 00 MOV   REG[0xD0],0x0
    1936: 53 90    MOV   [__r0],A
(0058) 				// "4"
(0059) 				break;
    1938: 80 49    JMP   0x1982
(0060) 			case 0x28:
(0061) 				// "7"
(0062) 				if(conf.maxTemp < 99) conf.minTemp++;
    193A: 3D 07 63 CMP   [X+7],0x63
    193D: D0 03    JNC   0x1941
    193F: 77 08    INC   [X+8]
(0063) 				Persist_SaveConfig(&conf);
    1941: 62 D0 00 MOV   REG[0xD0],0x0
    1944: 5A 8F    MOV   [__r1],X
    1946: 06 8F 02 ADD   [__r1],0x2
    1949: 50 07    MOV   A,0x7
    194B: 08       PUSH  A
    194C: 51 8F    MOV   A,[__r1]
    194E: 08       PUSH  A
    194F: 7C 1F 32 LCALL _Persist_SaveConfig
    1952: 38 FE    ADD   SP,0xFE
    1954: 62 D0 00 MOV   REG[0xD0],0x0
    1957: 53 90    MOV   [__r0],A
(0064) 				break;
    1959: 80 28    JMP   0x1982
(0065) 			case 0x18:
(0066) 				// "*"
(0067) 				if(conf.maxTemp > 0) conf.minTemp--;
    195B: 50 00    MOV   A,0x0
    195D: 3B 07    CMP   A,[X+7]
    195F: D0 03    JNC   0x1963
    1961: 7B 08    DEC   [X+8]
(0068) 				Persist_SaveConfig(&conf);
    1963: 62 D0 00 MOV   REG[0xD0],0x0
    1966: 5A 8F    MOV   [__r1],X
    1968: 06 8F 02 ADD   [__r1],0x2
    196B: 50 07    MOV   A,0x7
    196D: 08       PUSH  A
    196E: 51 8F    MOV   A,[__r1]
    1970: 08       PUSH  A
    1971: 7C 1F 32 LCALL _Persist_SaveConfig
    1974: 38 FE    ADD   SP,0xFE
    1976: 62 D0 00 MOV   REG[0xD0],0x0
    1979: 53 90    MOV   [__r0],A
(0069) 				break;
    197B: 80 06    JMP   0x1982
(0070) 			case 0x11:
(0071) 				// "D"
(0072) 				MainView_Callback();
    197D: 7C 1B 05 LCALL _MainView_Callback
(0073) 				return;
    1980: 80 50    JMP   0x19D1
(0074) 				break;
(0075) 		}
(0076) 
(0077) 		Menu_Clear();
    1982: 7C 1D EF LCALL _Menu_Clear
(0078) 		LCD_Position(0, 0);
    1985: 10       PUSH  X
    1986: 50 00    MOV   A,0x0
    1988: 57 00    MOV   X,0x0
    198A: 7C 09 79 LCALL _LCD_Position
(0079) 		LCD_PrCString("Max: ");
    198D: 50 01    MOV   A,0x1
    198F: 08       PUSH  A
    1990: 50 FC    MOV   A,0xFC
    1992: 5C       MOV   X,A
    1993: 18       POP   A
    1994: 7C 07 F4 LCALL _LCD_PrCString
    1997: 20       POP   X
(0080) 		bcdmax = (bcd10max << 4) | bcdmax;
    1998: 52 0D    MOV   A,[X+13]
    199A: 62 D0 00 MOV   REG[0xD0],0x0
    199D: 64       ASL   A
    199E: 64       ASL   A
    199F: 64       ASL   A
    19A0: 64       ASL   A
    19A1: 2B 00    OR    A,[X+0]
    19A3: 54 00    MOV   [X+0],A
(0081) 		LCD_PrHexByte(bcdmax);
    19A5: 10       PUSH  X
    19A6: 52 00    MOV   A,[X+0]
    19A8: 7C 08 16 LCALL _LCD_PrHexByte
(0082) 		LCD_Position(1,0);
    19AB: 57 00    MOV   X,0x0
    19AD: 50 01    MOV   A,0x1
    19AF: 7C 09 79 LCALL _LCD_Position
(0083) 		LCD_PrCString("Min: ");
    19B2: 50 01    MOV   A,0x1
    19B4: 08       PUSH  A
    19B5: 50 F6    MOV   A,0xF6
    19B7: 5C       MOV   X,A
    19B8: 18       POP   A
    19B9: 7C 07 F4 LCALL _LCD_PrCString
    19BC: 20       POP   X
(0084) 		bcdmin = (bcd10min << 4) | bcdmin;
    19BD: 52 0E    MOV   A,[X+14]
    19BF: 62 D0 00 MOV   REG[0xD0],0x0
    19C2: 64       ASL   A
    19C3: 64       ASL   A
    19C4: 64       ASL   A
    19C5: 64       ASL   A
    19C6: 2B 01    OR    A,[X+1]
    19C8: 54 01    MOV   [X+1],A
(0085) 		LCD_PrHexByte(bcdmin);
    19CA: 10       PUSH  X
    19CB: 52 01    MOV   A,[X+1]
    19CD: 7C 08 16 LCALL _LCD_PrHexByte
    19D0: 20       POP   X
(0086) 	}
    19D1: 38 EF    ADD   SP,0xEF
(0087) 
(0088) 	
(0089) }FILE: C:\Users\Rod\Desktop\RTC\RTC\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "Time.h"
(0008) #include "Keypad.h"
(0009) #include "Persist.h"
(0010) #include "viewManager.h"
(0011) #include "MainView.h"
(0012) #include "dateTimeView.h"
(0013) #include "regTimeView.h"
(0014) #include "levelView.h"
(0015) #include "configView.h"
(0016) #include "TempSensor.h"
(0017) #include "TempView.h"
(0018) #include <string.h>
(0019) 
(0020) extern CurrentView currentView;
(0021) 
(0022) int putchar(char c)
(0023) {
_putchar:
  c                    --> X-4
    19D5: 10       PUSH  X
    19D6: 4F       MOV   X,SP
(0024) 	UART_PutChar(c);
    19D7: 10       PUSH  X
    19D8: 52 FC    MOV   A,[X-4]
    19DA: 7C 06 F5 LCALL _UART_PutChar
    19DD: 20       POP   X
    19DE: 20       POP   X
    19DF: 7F       RET   
(0025) }
(0026) 
(0027) void main(void)
(0028) {
_main:
    19E0: 10       PUSH  X
    19E1: 4F       MOV   X,SP
    19E2: 38 02    ADD   SP,0x2
(0029) 	Time_Start();
    19E4: 7C 24 72 LCALL _Time_Start
(0030) 	Keypad_Start();
    19E7: 7C 15 A0 LCALL _Keypad_Start
(0031) 	Persist_Start();
    19EA: 7C 1E 14 LCALL _Persist_Start
(0032) 	LCD_Start();
    19ED: 10       PUSH  X
    19EE: 7C 09 06 LCALL _LCD_Start|LCD_Init|_LCD_Init|LCD_Start
    19F1: 20       POP   X
(0033) 	MainView_Start();
    19F2: 7C 1A 80 LCALL _MainView_Start
(0034) 	DateTimeView_Start();
    19F5: 7C 11 1B LCALL _DateTimeView_Start
(0035) 	RegTimeView_Start();
    19F8: 7C 1F 7E LCALL _RegTimeView_Start
(0036) 	LevelView_Start();
    19FB: 7C 17 95 LCALL _LevelView_Start
(0037) 	ConfigView_Start();
    19FE: 7C 0F 20 LCALL _ConfigView_Start
(0038) 	TempSensor_Start();
    1A01: 7C 21 95 LCALL _TempSensor_Start
(0039) 
(0040) 	UART_Start(UART_PARITY_NONE);
    1A04: 10       PUSH  X
    1A05: 50 00    MOV   A,0x0
    1A07: 7C 06 83 LCALL _UART_Start
(0041) 	UART_IntCntl(UART_ENABLE_RX_INT);
    1A0A: 50 01    MOV   A,0x1
    1A0C: 7C 06 B0 LCALL _UART_IntCntl
    1A0F: 20       POP   X
(0042) 
(0043) 	M8C_EnableGInt;
    1A10: 71 01    OR    F,0x1
(0044) 
(0045) 	MainView_Callback();
    1A12: 7C 1B 05 LCALL _MainView_Callback
(0046) 
(0047) 	for(;;)
(0048) 	{
(0049) 		switch(currentView)
    1A15: 62 D0 00 MOV   REG[0xD0],0x0
    1A18: 51 A4    MOV   A,[currentView]
    1A1A: 54 01    MOV   [X+1],A
    1A1C: 56 00 00 MOV   [X+0],0x0
    1A1F: 3D 00 00 CMP   [X+0],0x0
    1A22: B0 06    JNZ   0x1A29
    1A24: 3D 01 00 CMP   [X+1],0x0
    1A27: A0 35    JZ    0x1A5D
    1A29: 3D 00 00 CMP   [X+0],0x0
    1A2C: B0 06    JNZ   0x1A33
    1A2E: 3D 01 01 CMP   [X+1],0x1
    1A31: A0 30    JZ    0x1A62
    1A33: 3D 00 00 CMP   [X+0],0x0
    1A36: B0 06    JNZ   0x1A3D
    1A38: 3D 01 02 CMP   [X+1],0x2
    1A3B: A0 2B    JZ    0x1A67
    1A3D: 3D 00 00 CMP   [X+0],0x0
    1A40: B0 06    JNZ   0x1A47
    1A42: 3D 01 03 CMP   [X+1],0x3
    1A45: A0 26    JZ    0x1A6C
    1A47: 3D 00 00 CMP   [X+0],0x0
    1A4A: B0 06    JNZ   0x1A51
    1A4C: 3D 01 04 CMP   [X+1],0x4
    1A4F: A0 21    JZ    0x1A71
    1A51: 3D 00 00 CMP   [X+0],0x0
    1A54: B0 06    JNZ   0x1A5B
    1A56: 3D 01 05 CMP   [X+1],0x5
    1A59: A0 1C    JZ    0x1A76
    1A5B: 8F B9    JMP   0x1A15
(0050) 		{
(0051) 			case MAIN:
(0052) 				MainView_Update();
    1A5D: 7C 1B 17 LCALL _MainView_Update
(0053) 				break;
    1A60: 8F B4    JMP   0x1A15
(0054) 			case DATETIME_CONFIG:
(0055) 				DateTimeView_Update();
    1A62: 7C 11 4A LCALL _DateTimeView_Update
(0056) 				break;
    1A65: 8F AF    JMP   0x1A15
(0057) 			case REGTIME_CONFIG:
(0058) 				RegTimeView_Update();
    1A67: 7C 1F AD LCALL _RegTimeView_Update
(0059) 				break;
    1A6A: 8F AA    JMP   0x1A15
(0060) 			case LEVEL_CONFIG:
(0061) 				LevelView_Update();
    1A6C: 7C 18 43 LCALL _LevelView_Update
(0062) 				break;
    1A6F: 8F A5    JMP   0x1A15
(0063) 			case CONFIG:
(0064) 				ConfigView_Update();
    1A71: 7C 0F AD LCALL _ConfigView_Update
(0065) 				break;
    1A74: 8F A0    JMP   0x1A15
(0066) 			case TEMP:
(0067) 				TempView_Update();
    1A76: 7C 23 F9 LCALL _TempView_Update
(0068) 				break;
(0069) 		}
(0070) 	}
    1A79: 8F 9B    JMP   0x1A15
(0071) 
(0072) }
FILE: C:\Users\Rod\Desktop\RTC\RTC\mainview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "mainView.h"
(0004) #include "Menu.h"
(0005) #include "Keypad.h"
(0006) #include "dateTimeView.h"
(0007) #include "viewManager.h"
(0008) #include "regTimeView.h"
(0009) #include "levelView.h"
(0010) #include "configView.h"
(0011) #include "TempView.h"
(0012) #include <string.h>
(0013) 
(0014) extern CurrentView currentView;
(0015) 
(0016) MenuEntry entries[5];
(0017) Menu menu;
(0018) 
(0019) void MainView_Start(void)
(0020) {
(0021) 	Menu_Start();
_MainView_Start:
    1A80: 7C 1B 8E LCALL _Menu_Start
(0022) 
(0023) 	cstrcpy(entries[0].text, "Ajustar Hora");
    1A83: 50 02    MOV   A,0x2
    1A85: 08       PUSH  A
    1A86: 50 3A    MOV   A,0x3A
    1A88: 08       PUSH  A
    1A89: 50 00    MOV   A,0x0
    1A8B: 08       PUSH  A
    1A8C: 50 0F    MOV   A,0xF
    1A8E: 08       PUSH  A
    1A8F: 7C 33 D8 LCALL _cstrcpyLMM
    1A92: 38 FC    ADD   SP,0xFC
(0024) 	cstrcpy(entries[1].text, "Ajustar Captura");
    1A94: 50 02    MOV   A,0x2
    1A96: 08       PUSH  A
    1A97: 50 2A    MOV   A,0x2A
    1A99: 08       PUSH  A
    1A9A: 50 00    MOV   A,0x0
    1A9C: 08       PUSH  A
    1A9D: 50 21    MOV   A,0x21
    1A9F: 08       PUSH  A
    1AA0: 7C 33 D8 LCALL _cstrcpyLMM
(0025) 	cstrcpy(entries[2].text, "Ajustar Nivel");
    1AA3: 50 02    MOV   A,0x2
    1AA5: 08       PUSH  A
    1AA6: 50 1C    MOV   A,0x1C
    1AA8: 08       PUSH  A
    1AA9: 50 00    MOV   A,0x0
    1AAB: 08       PUSH  A
    1AAC: 50 33    MOV   A,0x33
    1AAE: 08       PUSH  A
    1AAF: 7C 33 D8 LCALL _cstrcpyLMM
    1AB2: 38 F8    ADD   SP,0xF8
(0026) 	cstrcpy(entries[3].text, "Configuracion");
    1AB4: 50 02    MOV   A,0x2
    1AB6: 08       PUSH  A
    1AB7: 50 0E    MOV   A,0xE
    1AB9: 08       PUSH  A
    1ABA: 50 00    MOV   A,0x0
    1ABC: 08       PUSH  A
    1ABD: 50 45    MOV   A,0x45
    1ABF: 08       PUSH  A
    1AC0: 7C 33 D8 LCALL _cstrcpyLMM
(0027) 	cstrcpy(entries[4].text, "Temp Actual");
    1AC3: 50 02    MOV   A,0x2
    1AC5: 08       PUSH  A
    1AC6: 50 02    MOV   A,0x2
    1AC8: 08       PUSH  A
    1AC9: 50 00    MOV   A,0x0
    1ACB: 08       PUSH  A
    1ACC: 50 57    MOV   A,0x57
    1ACE: 08       PUSH  A
    1ACF: 7C 33 D8 LCALL _cstrcpyLMM
    1AD2: 38 F8    ADD   SP,0xF8
(0028) 
(0029) 	entries[0].callback = &DateTimeView_Callback;
    1AD4: 62 D0 00 MOV   REG[0xD0],0x0
    1AD7: 55 20 E1 MOV   [entries+17],0xE1
    1ADA: 55 1F 04 MOV   [entries+16],0x4
(0030) 	entries[1].callback = &RegTimeView_Callback;
    1ADD: 55 32 DF MOV   [entries+35],0xDF
    1AE0: 55 31 04 MOV   [entries+34],0x4
(0031) 	entries[2].callback = &LevelView_Callback;
    1AE3: 55 44 DD MOV   [entries+53],0xDD
    1AE6: 55 43 04 MOV   [entries+52],0x4
(0032) 	entries[3].callback = &ConfigView_Callback;
    1AE9: 55 56 DB MOV   [entries+71],0xDB
    1AEC: 55 55 04 MOV   [entries+70],0x4
(0033) 	entries[4].callback = &TempView_Callback;
    1AEF: 55 68 D9 MOV   [entries+89],0xD9
    1AF2: 55 67 04 MOV   [entries+88],0x4
(0034) 
(0035) 	menu.currentIndex = 0;
    1AF5: 62 D0 00 MOV   REG[0xD0],0x0
    1AF8: 55 9C 00 MOV   [menu+3],0x0
(0036) 	menu.nOptions = 5;
    1AFB: 55 9B 05 MOV   [menu+2],0x5
(0037) 	menu.entries = entries;
    1AFE: 55 9A 0F MOV   [menu+1],0xF
    1B01: 55 99 00 MOV   [menu],0x0
    1B04: 7F       RET   
(0038) }
(0039) 
(0040) void MainView_Callback(void)
(0041) {
(0042) 	currentView = MAIN;
_MainView_Callback:
    1B05: 62 D0 00 MOV   REG[0xD0],0x0
    1B08: 55 A4 00 MOV   [currentView],0x0
(0043) 	Menu_Update(&menu);
    1B0B: 50 00    MOV   A,0x0
    1B0D: 08       PUSH  A
    1B0E: 50 99    MOV   A,0x99
    1B10: 08       PUSH  A
    1B11: 7C 1B 90 LCALL _Menu_Update
    1B14: 38 FE    ADD   SP,0xFE
    1B16: 7F       RET   
(0044) }
(0045) 
(0046) void MainView_Update(void)
(0047) {
_MainView_Update:
    1B17: 10       PUSH  X
    1B18: 4F       MOV   X,SP
    1B19: 38 02    ADD   SP,0x2
(0048) 	if(Keypad_IsKeyStored())
    1B1B: 7C 16 BF LCALL _Keypad_IsKeyStored
    1B1E: 62 D0 00 MOV   REG[0xD0],0x0
    1B21: 39 00    CMP   A,0x0
    1B23: A0 66    JZ    0x1B8A
(0049) 	{
(0050) 		switch(Keypad_GetKey())
    1B25: 7C 16 D7 LCALL _Keypad_GetKey
    1B28: 62 D0 00 MOV   REG[0xD0],0x0
    1B2B: 54 01    MOV   [X+1],A
    1B2D: 56 00 00 MOV   [X+0],0x0
    1B30: 52 01    MOV   A,[X+1]
    1B32: 11 44    SUB   A,0x44
    1B34: 53 83    MOV   [__rY],A
    1B36: 52 00    MOV   A,[X+0]
    1B38: 31 80    XOR   A,0x80
    1B3A: 19 80    SBB   A,0x80
    1B3C: 2A 83    OR    A,[__rY]
    1B3E: A0 28    JZ    0x1B67
    1B40: D0 0D    JNC   0x1B4E
    1B42: 3D 00 00 CMP   [X+0],0x0
    1B45: B0 06    JNZ   0x1B4C
    1B47: 3D 01 24 CMP   [X+1],0x24
    1B4A: A0 0F    JZ    0x1B5A
    1B4C: 80 32    JMP   0x1B7F
    1B4E: 3D 00 00 CMP   [X+0],0x0
    1B51: B0 06    JNZ   0x1B58
    1B53: 3D 01 84 CMP   [X+1],0x84
    1B56: A0 1D    JZ    0x1B74
    1B58: 80 26    JMP   0x1B7F
(0051) 		{
(0052) 			case 0x24:
(0053) 				// "8"
(0054) 				Menu_Down(&menu);
    1B5A: 50 00    MOV   A,0x0
    1B5C: 08       PUSH  A
    1B5D: 50 99    MOV   A,0x99
    1B5F: 08       PUSH  A
    1B60: 7C 1C CB LCALL _Menu_Down
    1B63: 38 FE    ADD   SP,0xFE
(0055) 				break;
    1B65: 80 19    JMP   0x1B7F
(0056) 			case 0x44:
(0057) 				// "5"
(0058) 				Menu_Select(&menu);
    1B67: 50 00    MOV   A,0x0
    1B69: 08       PUSH  A
    1B6A: 50 99    MOV   A,0x99
    1B6C: 08       PUSH  A
    1B6D: 7C 1D 19 LCALL _Menu_Select
    1B70: 38 FE    ADD   SP,0xFE
(0059) 				return;
    1B72: 80 17    JMP   0x1B8A
(0060) 				break;
(0061) 			case 0x84:
(0062) 				// "2"
(0063) 				Menu_Up(&menu);
    1B74: 50 00    MOV   A,0x0
    1B76: 08       PUSH  A
    1B77: 50 99    MOV   A,0x99
    1B79: 08       PUSH  A
    1B7A: 7C 1C 8C LCALL _Menu_Up
    1B7D: 38 FE    ADD   SP,0xFE
(0064) 				break;
(0065) 		}
(0066) 		Menu_Update(&menu);
    1B7F: 50 00    MOV   A,0x0
    1B81: 08       PUSH  A
    1B82: 50 99    MOV   A,0x99
    1B84: 08       PUSH  A
    1B85: 7C 1B 90 LCALL _Menu_Update
    1B88: 38 FE    ADD   SP,0xFE
(0067) 	}
    1B8A: 38 FE    ADD   SP,0xFE
    1B8C: 20       POP   X
    1B8D: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\menu.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "menu.h"
(0004) 
(0005) void Menu_Start(void)
(0006) {
_Menu_Start:
    1B8E: 7F       RET   
(0007) 	//LCD_Start();
(0008) }
(0009) 
(0010) void Menu_Stop(void)
(0011) {
_Menu_Stop:
    1B8F: 7F       RET   
(0012) 	//LCD_Stop();
(0013) }
(0014) 
(0015) void Menu_Update(Menu *menu)
(0016) {
_Menu_Update:
  menu                 --> X-5
    1B90: 10       PUSH  X
    1B91: 4F       MOV   X,SP
(0017) 	Menu_Clear();
    1B92: 92 5B    CALL  _Menu_Clear
(0018) 	LCD_Position(0, 0);
    1B94: 10       PUSH  X
    1B95: 50 00    MOV   A,0x0
    1B97: 57 00    MOV   X,0x0
    1B99: 7C 09 79 LCALL _LCD_Position
(0019) 	LCD_PrCString(">");
    1B9C: 50 02    MOV   A,0x2
    1B9E: 08       PUSH  A
    1B9F: 50 5A    MOV   A,0x5A
    1BA1: 5C       MOV   X,A
    1BA2: 18       POP   A
    1BA3: 7C 07 F4 LCALL _LCD_PrCString
    1BA6: 20       POP   X
(0020) 	LCD_PrString(menu->entries[menu->currentIndex].text);
    1BA7: 62 D0 00 MOV   REG[0xD0],0x0
    1BAA: 52 FC    MOV   A,[X-4]
    1BAC: 53 8F    MOV   [__r1],A
    1BAE: 52 FB    MOV   A,[X-5]
    1BB0: 60 D4    MOV   REG[0xD4],A
    1BB2: 3E 8F    MVI   A,[__r1]
    1BB4: 53 90    MOV   [__r0],A
    1BB6: 3E 8F    MVI   A,[__r1]
    1BB8: 53 8F    MOV   [__r1],A
    1BBA: 52 FC    MOV   A,[X-4]
    1BBC: 01 03    ADD   A,0x3
    1BBE: 53 8D    MOV   [__r3],A
    1BC0: 52 FB    MOV   A,[X-5]
    1BC2: 09 00    ADC   A,0x0
    1BC4: 60 D4    MOV   REG[0xD4],A
    1BC6: 3E 8D    MVI   A,[__r3]
    1BC8: 53 8D    MOV   [__r3],A
    1BCA: 50 00    MOV   A,0x0
    1BCC: 08       PUSH  A
    1BCD: 51 8D    MOV   A,[__r3]
    1BCF: 08       PUSH  A
    1BD0: 50 00    MOV   A,0x0
    1BD2: 08       PUSH  A
    1BD3: 50 12    MOV   A,0x12
    1BD5: 08       PUSH  A
    1BD6: 7C 33 9A LCALL 0x339A
    1BD9: 38 FC    ADD   SP,0xFC
    1BDB: 51 84    MOV   A,[__rX]
    1BDD: 53 8D    MOV   [__r3],A
    1BDF: 51 83    MOV   A,[__rY]
    1BE1: 53 8E    MOV   [__r2],A
    1BE3: 51 8D    MOV   A,[__r3]
    1BE5: 02 8F    ADD   A,[__r1]
    1BE7: 53 8F    MOV   [__r1],A
    1BE9: 51 8E    MOV   A,[__r2]
    1BEB: 0A 90    ADC   A,[__r0]
    1BED: 10       PUSH  X
    1BEE: 08       PUSH  A
    1BEF: 51 8F    MOV   A,[__r1]
    1BF1: 5C       MOV   X,A
    1BF2: 18       POP   A
    1BF3: 7C 08 30 LCALL _LCD_PrString
(0021) 	LCD_Position(1, 0);
    1BF6: 57 00    MOV   X,0x0
    1BF8: 50 01    MOV   A,0x1
    1BFA: 7C 09 79 LCALL _LCD_Position
(0022) 	LCD_PrCString(" ");
    1BFD: 50 02    MOV   A,0x2
    1BFF: 08       PUSH  A
    1C00: 50 58    MOV   A,0x58
    1C02: 5C       MOV   X,A
    1C03: 18       POP   A
    1C04: 7C 07 F4 LCALL _LCD_PrCString
    1C07: 20       POP   X
(0023) 	if(menu->currentIndex < menu->nOptions - 1)
    1C08: 62 D0 00 MOV   REG[0xD0],0x0
    1C0B: 52 FC    MOV   A,[X-4]
    1C0D: 01 02    ADD   A,0x2
    1C0F: 53 8F    MOV   [__r1],A
    1C11: 52 FB    MOV   A,[X-5]
    1C13: 09 00    ADC   A,0x0
    1C15: 60 D4    MOV   REG[0xD4],A
    1C17: 3E 8F    MVI   A,[__r1]
    1C19: 53 90    MOV   [__r0],A
    1C1B: 16 90 01 SUB   [__r0],0x1
    1C1E: 52 FC    MOV   A,[X-4]
    1C20: 01 03    ADD   A,0x3
    1C22: 53 8D    MOV   [__r3],A
    1C24: 52 FB    MOV   A,[X-5]
    1C26: 09 00    ADC   A,0x0
    1C28: 60 D4    MOV   REG[0xD4],A
    1C2A: 3E 8D    MVI   A,[__r3]
    1C2C: 3A 90    CMP   A,[__r0]
    1C2E: D0 5B    JNC   0x1C8A
(0024) 	{
(0025) 		LCD_PrString(menu->entries[menu->currentIndex + 1].text);
    1C30: 62 D0 00 MOV   REG[0xD0],0x0
    1C33: 52 FC    MOV   A,[X-4]
    1C35: 53 8F    MOV   [__r1],A
    1C37: 52 FB    MOV   A,[X-5]
    1C39: 60 D4    MOV   REG[0xD4],A
    1C3B: 3E 8F    MVI   A,[__r1]
    1C3D: 53 90    MOV   [__r0],A
    1C3F: 3E 8F    MVI   A,[__r1]
    1C41: 53 8F    MOV   [__r1],A
    1C43: 52 FC    MOV   A,[X-4]
    1C45: 01 03    ADD   A,0x3
    1C47: 53 8D    MOV   [__r3],A
    1C49: 52 FB    MOV   A,[X-5]
    1C4B: 09 00    ADC   A,0x0
    1C4D: 60 D4    MOV   REG[0xD4],A
    1C4F: 3E 8D    MVI   A,[__r3]
    1C51: 53 8D    MOV   [__r3],A
    1C53: 50 00    MOV   A,0x0
    1C55: 08       PUSH  A
    1C56: 51 8D    MOV   A,[__r3]
    1C58: 08       PUSH  A
    1C59: 50 00    MOV   A,0x0
    1C5B: 08       PUSH  A
    1C5C: 50 12    MOV   A,0x12
    1C5E: 08       PUSH  A
    1C5F: 7C 33 9A LCALL 0x339A
    1C62: 38 FC    ADD   SP,0xFC
    1C64: 51 84    MOV   A,[__rX]
    1C66: 53 8D    MOV   [__r3],A
    1C68: 51 83    MOV   A,[__rY]
    1C6A: 53 8E    MOV   [__r2],A
    1C6C: 51 8D    MOV   A,[__r3]
    1C6E: 02 8F    ADD   A,[__r1]
    1C70: 53 8F    MOV   [__r1],A
    1C72: 51 8E    MOV   A,[__r2]
    1C74: 0A 90    ADC   A,[__r0]
    1C76: 53 90    MOV   [__r0],A
    1C78: 06 8F 12 ADD   [__r1],0x12
    1C7B: 0E 90 00 ADC   [__r0],0x0
    1C7E: 10       PUSH  X
    1C7F: 51 90    MOV   A,[__r0]
    1C81: 08       PUSH  A
    1C82: 51 8F    MOV   A,[__r1]
    1C84: 5C       MOV   X,A
    1C85: 18       POP   A
    1C86: 7C 08 30 LCALL _LCD_PrString
    1C89: 20       POP   X
(0026) 	}
    1C8A: 20       POP   X
    1C8B: 7F       RET   
(0027) 
(0028) }
(0029) 
(0030) void Menu_Up(Menu *menu)
(0031) {
_Menu_Up:
  menu                 --> X-5
    1C8C: 10       PUSH  X
    1C8D: 4F       MOV   X,SP
(0032) 	if(menu->currentIndex > 0)
    1C8E: 62 D0 00 MOV   REG[0xD0],0x0
    1C91: 52 FC    MOV   A,[X-4]
    1C93: 01 03    ADD   A,0x3
    1C95: 53 8F    MOV   [__r1],A
    1C97: 52 FB    MOV   A,[X-5]
    1C99: 09 00    ADC   A,0x0
    1C9B: 60 D4    MOV   REG[0xD4],A
    1C9D: 3E 8F    MVI   A,[__r1]
    1C9F: 53 90    MOV   [__r0],A
    1CA1: 50 00    MOV   A,0x0
    1CA3: 3A 90    CMP   A,[__r0]
    1CA5: D0 23    JNC   0x1CC9
(0033) 	{
(0034) 		menu->currentIndex--;
    1CA7: 62 D0 00 MOV   REG[0xD0],0x0
    1CAA: 52 FC    MOV   A,[X-4]
    1CAC: 01 03    ADD   A,0x3
    1CAE: 53 8F    MOV   [__r1],A
    1CB0: 52 FB    MOV   A,[X-5]
    1CB2: 09 00    ADC   A,0x0
    1CB4: 53 90    MOV   [__r0],A
    1CB6: 60 D4    MOV   REG[0xD4],A
    1CB8: 3E 8F    MVI   A,[__r1]
    1CBA: 7A 8F    DEC   [__r1]
    1CBC: 53 8E    MOV   [__r2],A
    1CBE: 16 8E 01 SUB   [__r2],0x1
    1CC1: 51 90    MOV   A,[__r0]
    1CC3: 60 D5    MOV   REG[0xD5],A
    1CC5: 51 8E    MOV   A,[__r2]
    1CC7: 3F 8F    MVI   [__r1],A
(0035) 	}
    1CC9: 20       POP   X
    1CCA: 7F       RET   
(0036) }
(0037) 
(0038) void Menu_Down(Menu *menu)
(0039) {
_Menu_Down:
  menu                 --> X-5
    1CCB: 10       PUSH  X
    1CCC: 4F       MOV   X,SP
(0040) 	if(menu->currentIndex < menu->nOptions - 1)
    1CCD: 62 D0 00 MOV   REG[0xD0],0x0
    1CD0: 52 FC    MOV   A,[X-4]
    1CD2: 01 02    ADD   A,0x2
    1CD4: 53 8F    MOV   [__r1],A
    1CD6: 52 FB    MOV   A,[X-5]
    1CD8: 09 00    ADC   A,0x0
    1CDA: 60 D4    MOV   REG[0xD4],A
    1CDC: 3E 8F    MVI   A,[__r1]
    1CDE: 53 90    MOV   [__r0],A
    1CE0: 16 90 01 SUB   [__r0],0x1
    1CE3: 52 FC    MOV   A,[X-4]
    1CE5: 01 03    ADD   A,0x3
    1CE7: 53 8D    MOV   [__r3],A
    1CE9: 52 FB    MOV   A,[X-5]
    1CEB: 09 00    ADC   A,0x0
    1CED: 60 D4    MOV   REG[0xD4],A
    1CEF: 3E 8D    MVI   A,[__r3]
    1CF1: 3A 90    CMP   A,[__r0]
    1CF3: D0 23    JNC   0x1D17
(0041) 	{
(0042) 		menu->currentIndex++;
    1CF5: 62 D0 00 MOV   REG[0xD0],0x0
    1CF8: 52 FC    MOV   A,[X-4]
    1CFA: 01 03    ADD   A,0x3
    1CFC: 53 8F    MOV   [__r1],A
    1CFE: 52 FB    MOV   A,[X-5]
    1D00: 09 00    ADC   A,0x0
    1D02: 53 90    MOV   [__r0],A
    1D04: 60 D4    MOV   REG[0xD4],A
    1D06: 3E 8F    MVI   A,[__r1]
    1D08: 7A 8F    DEC   [__r1]
    1D0A: 53 8E    MOV   [__r2],A
    1D0C: 06 8E 01 ADD   [__r2],0x1
    1D0F: 51 90    MOV   A,[__r0]
    1D11: 60 D5    MOV   REG[0xD5],A
    1D13: 51 8E    MOV   A,[__r2]
    1D15: 3F 8F    MVI   [__r1],A
(0043) 	}
    1D17: 20       POP   X
    1D18: 7F       RET   
(0044) }
(0045) 
(0046) void Menu_Select(Menu *menu)
(0047) {
_Menu_Select:
  menu                 --> X-5
    1D19: 10       PUSH  X
    1D1A: 4F       MOV   X,SP
(0048) 	if(menu->entries[menu->currentIndex].callback != 0)
    1D1B: 62 D0 00 MOV   REG[0xD0],0x0
    1D1E: 52 FC    MOV   A,[X-4]
    1D20: 53 8F    MOV   [__r1],A
    1D22: 52 FB    MOV   A,[X-5]
    1D24: 60 D4    MOV   REG[0xD4],A
    1D26: 3E 8F    MVI   A,[__r1]
    1D28: 53 90    MOV   [__r0],A
    1D2A: 3E 8F    MVI   A,[__r1]
    1D2C: 53 8F    MOV   [__r1],A
    1D2E: 52 FC    MOV   A,[X-4]
    1D30: 01 03    ADD   A,0x3
    1D32: 53 8D    MOV   [__r3],A
    1D34: 52 FB    MOV   A,[X-5]
    1D36: 09 00    ADC   A,0x0
    1D38: 60 D4    MOV   REG[0xD4],A
    1D3A: 3E 8D    MVI   A,[__r3]
    1D3C: 53 8D    MOV   [__r3],A
    1D3E: 50 00    MOV   A,0x0
    1D40: 08       PUSH  A
    1D41: 51 8D    MOV   A,[__r3]
    1D43: 08       PUSH  A
    1D44: 50 00    MOV   A,0x0
    1D46: 08       PUSH  A
    1D47: 50 12    MOV   A,0x12
    1D49: 08       PUSH  A
    1D4A: 7C 33 9A LCALL 0x339A
    1D4D: 38 FC    ADD   SP,0xFC
    1D4F: 51 84    MOV   A,[__rX]
    1D51: 53 8D    MOV   [__r3],A
    1D53: 51 83    MOV   A,[__rY]
    1D55: 53 8E    MOV   [__r2],A
    1D57: 51 8D    MOV   A,[__r3]
    1D59: 02 8F    ADD   A,[__r1]
    1D5B: 53 8F    MOV   [__r1],A
    1D5D: 51 8E    MOV   A,[__r2]
    1D5F: 0A 90    ADC   A,[__r0]
    1D61: 53 90    MOV   [__r0],A
    1D63: 06 8F 10 ADD   [__r1],0x10
    1D66: 0E 90 00 ADC   [__r0],0x0
    1D69: 51 90    MOV   A,[__r0]
    1D6B: 60 D4    MOV   REG[0xD4],A
    1D6D: 3E 8F    MVI   A,[__r1]
    1D6F: 53 90    MOV   [__r0],A
    1D71: 3E 8F    MVI   A,[__r1]
    1D73: 53 8F    MOV   [__r1],A
    1D75: 51 90    MOV   A,[__r0]
    1D77: 10       PUSH  X
    1D78: 58 8F    MOV   X,[__r1]
    1D7A: 08       PUSH  A
    1D7B: 28       ROMX  
    1D7C: 53 90    MOV   [__r0],A
    1D7E: 18       POP   A
    1D7F: 75       INC   X
    1D80: 09 00    ADC   A,0x0
    1D82: 28       ROMX  
    1D83: 20       POP   X
    1D84: 3C 90 00 CMP   [__r0],0x0
    1D87: B0 05    JNZ   0x1D8D
    1D89: 39 00    CMP   A,0x0
    1D8B: A0 61    JZ    0x1DED
(0049) 	{
(0050) 		menu->entries[menu->currentIndex].callback();
    1D8D: 62 D0 00 MOV   REG[0xD0],0x0
    1D90: 52 FC    MOV   A,[X-4]
    1D92: 53 8F    MOV   [__r1],A
    1D94: 52 FB    MOV   A,[X-5]
    1D96: 60 D4    MOV   REG[0xD4],A
    1D98: 3E 8F    MVI   A,[__r1]
    1D9A: 53 90    MOV   [__r0],A
    1D9C: 3E 8F    MVI   A,[__r1]
    1D9E: 53 8F    MOV   [__r1],A
    1DA0: 52 FC    MOV   A,[X-4]
    1DA2: 01 03    ADD   A,0x3
    1DA4: 53 8D    MOV   [__r3],A
    1DA6: 52 FB    MOV   A,[X-5]
    1DA8: 09 00    ADC   A,0x0
    1DAA: 60 D4    MOV   REG[0xD4],A
    1DAC: 3E 8D    MVI   A,[__r3]
    1DAE: 53 8D    MOV   [__r3],A
    1DB0: 50 00    MOV   A,0x0
    1DB2: 08       PUSH  A
    1DB3: 51 8D    MOV   A,[__r3]
    1DB5: 08       PUSH  A
    1DB6: 50 00    MOV   A,0x0
    1DB8: 08       PUSH  A
    1DB9: 50 12    MOV   A,0x12
    1DBB: 08       PUSH  A
    1DBC: 7C 33 9A LCALL 0x339A
    1DBF: 38 FC    ADD   SP,0xFC
    1DC1: 51 84    MOV   A,[__rX]
    1DC3: 53 8D    MOV   [__r3],A
    1DC5: 51 83    MOV   A,[__rY]
    1DC7: 53 8E    MOV   [__r2],A
    1DC9: 51 8D    MOV   A,[__r3]
    1DCB: 02 8F    ADD   A,[__r1]
    1DCD: 53 8F    MOV   [__r1],A
    1DCF: 51 8E    MOV   A,[__r2]
    1DD1: 0A 90    ADC   A,[__r0]
    1DD3: 53 90    MOV   [__r0],A
    1DD5: 06 8F 10 ADD   [__r1],0x10
    1DD8: 0E 90 00 ADC   [__r0],0x0
    1DDB: 51 90    MOV   A,[__r0]
    1DDD: 60 D4    MOV   REG[0xD4],A
    1DDF: 3E 8F    MVI   A,[__r1]
    1DE1: 53 90    MOV   [__r0],A
    1DE3: 3E 8F    MVI   A,[__r1]
    1DE5: 10       PUSH  X
    1DE6: 5C       MOV   X,A
    1DE7: 51 90    MOV   A,[__r0]
    1DE9: 7C 34 05 LCALL __plcall
    1DEC: 20       POP   X
(0051) 	}
    1DED: 20       POP   X
    1DEE: 7F       RET   
(0052) }
(0053) 
(0054) void Menu_Clear(void)
(0055) {
(0056) 	LCD_Position(0, 0);
_Menu_Clear:
    1DEF: 10       PUSH  X
    1DF0: 50 00    MOV   A,0x0
    1DF2: 57 00    MOV   X,0x0
    1DF4: 7C 09 79 LCALL _LCD_Position
(0057) 	LCD_PrCString("                ");
    1DF7: 50 02    MOV   A,0x2
    1DF9: 08       PUSH  A
    1DFA: 50 47    MOV   A,0x47
    1DFC: 5C       MOV   X,A
    1DFD: 18       POP   A
    1DFE: 7C 07 F4 LCALL _LCD_PrCString
(0058) 	LCD_Position(1, 0);
    1E01: 57 00    MOV   X,0x0
    1E03: 50 01    MOV   A,0x1
    1E05: 7C 09 79 LCALL _LCD_Position
(0059) 	LCD_PrCString("                ");
    1E08: 50 02    MOV   A,0x2
    1E0A: 08       PUSH  A
    1E0B: 50 47    MOV   A,0x47
    1E0D: 5C       MOV   X,A
    1E0E: 18       POP   A
    1E0F: 7C 07 F4 LCALL _LCD_PrCString
    1E12: 20       POP   X
    1E13: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\persist.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "EEPROM.h"
(0004) #include "Persist.h"
(0005) 
(0006) void Persist_Start(void)
(0007) {
(0008) 	EEPROM_Start();
_Persist_Start:
    1E14: 7C 14 49 LCALL _EEPROM_Start
    1E17: 7F       RET   
(0009) }
(0010) 
(0011) void Persist_Stop(void)
(0012) {
(0013) 	EEPROM_Stop();
_Persist_Stop:
    1E18: 7C 14 4F LCALL _EEPROM_Stop
    1E1B: 7F       RET   
(0014) }
(0015) 
(0016) void Persist_Clear(void)
(0017) {
_Persist_Clear:
  blankConfig          --> X+0
    1E1C: 10       PUSH  X
    1E1D: 4F       MOV   X,SP
    1E1E: 38 0B    ADD   SP,0xB
(0018) 	Config blankConfig;
(0019) 	blankConfig.flags.alarmEnabled = FALSE;
    1E20: 62 D0 00 MOV   REG[0xD0],0x0
    1E23: 52 00    MOV   A,[X+0]
    1E25: 21 BF    AND   A,0xBF
    1E27: 54 00    MOV   [X+0],A
(0020) 	blankConfig.flags.registerEnabled = FALSE;
    1E29: 52 00    MOV   A,[X+0]
    1E2B: 21 7F    AND   A,0x7F
    1E2D: 54 00    MOV   [X+0],A
(0021) 	blankConfig.nRecords = 0;
    1E2F: 56 0A 00 MOV   [X+10],0x0
    1E32: 56 09 00 MOV   [X+9],0x0
(0022) 
(0023) 	Persist_SaveConfig(&blankConfig);
    1E35: 50 07    MOV   A,0x7
    1E37: 08       PUSH  A
    1E38: 10       PUSH  X
    1E39: 90 F7    CALL  _Persist_SaveConfig
    1E3B: 38 FE    ADD   SP,0xFE
    1E3D: 62 D0 00 MOV   REG[0xD0],0x0
    1E40: 38 F5    ADD   SP,0xF5
    1E42: 20       POP   X
    1E43: 7F       RET   
(0024) }
(0025) 
(0026) // saves new record and increments config.nRecords. returns success or error.
(0027) BOOL Persist_SaveRecord(Record *record)
(0028) {
_Persist_SaveRecord:
  index                --> X+11
  conf                 --> X+0
  record               --> X-5
    1E44: 10       PUSH  X
    1E45: 4F       MOV   X,SP
    1E46: 38 0D    ADD   SP,0xD
(0029) 	unsigned short index;
(0030) 	Config conf;
(0031) 	Persist_LoadConfig(&conf);
    1E48: 62 D0 00 MOV   REG[0xD0],0x0
    1E4B: 50 07    MOV   A,0x7
    1E4D: 08       PUSH  A
    1E4E: 10       PUSH  X
    1E4F: 91 07    CALL  _Persist_LoadConfig
    1E51: 38 FE    ADD   SP,0xFE
    1E53: 62 D0 00 MOV   REG[0xD0],0x0
(0032) 	conf.nRecords++;
    1E56: 77 0A    INC   [X+10]
    1E58: 0F 09 00 ADC   [X+9],0x0
(0033) 
(0034) 	if(conf.nRecords > MAX_RECORDS) return FALSE;
    1E5B: 50 88    MOV   A,0x88
    1E5D: 13 0A    SUB   A,[X+10]
    1E5F: 50 13    MOV   A,0x13
    1E61: 1B 09    SBB   A,[X+9]
    1E63: D0 08    JNC   0x1E6C
    1E65: 62 D0 00 MOV   REG[0xD0],0x0
    1E68: 50 00    MOV   A,0x0
    1E6A: 80 6B    JMP   0x1ED6
(0035) 
(0036) 	index = sizeof(Config) + ((conf.nRecords - 1) * sizeof(Record));
    1E6C: 62 D0 00 MOV   REG[0xD0],0x0
    1E6F: 52 0A    MOV   A,[X+10]
    1E71: 11 01    SUB   A,0x1
    1E73: 53 8F    MOV   [__r1],A
    1E75: 52 09    MOV   A,[X+9]
    1E77: 19 00    SBB   A,0x0
    1E79: 08       PUSH  A
    1E7A: 51 8F    MOV   A,[__r1]
    1E7C: 08       PUSH  A
    1E7D: 50 00    MOV   A,0x0
    1E7F: 08       PUSH  A
    1E80: 50 06    MOV   A,0x6
    1E82: 08       PUSH  A
    1E83: 7C 33 9A LCALL 0x339A
    1E86: 38 FC    ADD   SP,0xFC
    1E88: 51 84    MOV   A,[__rX]
    1E8A: 53 8F    MOV   [__r1],A
    1E8C: 51 83    MOV   A,[__rY]
    1E8E: 53 90    MOV   [__r0],A
    1E90: 51 8F    MOV   A,[__r1]
    1E92: 01 0B    ADD   A,0xB
    1E94: 54 0C    MOV   [X+12],A
    1E96: 51 90    MOV   A,[__r0]
    1E98: 09 00    ADC   A,0x0
    1E9A: 54 0B    MOV   [X+11],A
(0037) 
(0038) 	if(EEPROM_Write((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
    1E9C: 50 06    MOV   A,0x6
    1E9E: 08       PUSH  A
    1E9F: 52 0B    MOV   A,[X+11]
    1EA1: 08       PUSH  A
    1EA2: 52 0C    MOV   A,[X+12]
    1EA4: 08       PUSH  A
    1EA5: 52 FB    MOV   A,[X-5]
    1EA7: 08       PUSH  A
    1EA8: 52 FC    MOV   A,[X-4]
    1EAA: 08       PUSH  A
    1EAB: 7C 14 55 LCALL _EEPROM_Write
    1EAE: 38 FB    ADD   SP,0xFB
    1EB0: 62 D0 00 MOV   REG[0xD0],0x0
    1EB3: 39 00    CMP   A,0x0
    1EB5: A0 05    JZ    0x1EBB
    1EB7: 50 00    MOV   A,0x0
    1EB9: 80 1C    JMP   0x1ED6
(0039) 	if(!Persist_SaveConfig(&conf)) return FALSE;
    1EBB: 62 D0 00 MOV   REG[0xD0],0x0
    1EBE: 50 07    MOV   A,0x7
    1EC0: 08       PUSH  A
    1EC1: 10       PUSH  X
    1EC2: 90 6E    CALL  _Persist_SaveConfig
    1EC4: 38 FE    ADD   SP,0xFE
    1EC6: 62 D0 00 MOV   REG[0xD0],0x0
    1EC9: 39 00    CMP   A,0x0
    1ECB: B0 05    JNZ   0x1ED1
    1ECD: 50 00    MOV   A,0x0
    1ECF: 80 06    JMP   0x1ED6
(0040) 
(0041) 	return TRUE;
    1ED1: 62 D0 00 MOV   REG[0xD0],0x0
    1ED4: 50 01    MOV   A,0x1
    1ED6: 38 F3    ADD   SP,0xF3
    1ED8: 20       POP   X
    1ED9: 7F       RET   
(0042) }
(0043) 
(0044) // Loads record n in record.
(0045) BOOL Persist_LoadRecord(Record *record, BYTE n)
(0046) {
_Persist_LoadRecord:
  index                --> X+0
  n                    --> X-6
  record               --> X-5
    1EDA: 10       PUSH  X
    1EDB: 4F       MOV   X,SP
    1EDC: 38 02    ADD   SP,0x2
(0047) 	unsigned short index = sizeof(Config) + (n * sizeof(Record));
    1EDE: 62 D0 00 MOV   REG[0xD0],0x0
    1EE1: 52 FA    MOV   A,[X-6]
    1EE3: 53 8F    MOV   [__r1],A
    1EE5: 50 00    MOV   A,0x0
    1EE7: 08       PUSH  A
    1EE8: 51 8F    MOV   A,[__r1]
    1EEA: 08       PUSH  A
    1EEB: 50 00    MOV   A,0x0
    1EED: 08       PUSH  A
    1EEE: 50 06    MOV   A,0x6
    1EF0: 08       PUSH  A
    1EF1: 7C 33 9A LCALL 0x339A
    1EF4: 38 FC    ADD   SP,0xFC
    1EF6: 51 84    MOV   A,[__rX]
    1EF8: 53 8F    MOV   [__r1],A
    1EFA: 51 83    MOV   A,[__rY]
    1EFC: 53 90    MOV   [__r0],A
    1EFE: 51 8F    MOV   A,[__r1]
    1F00: 01 0B    ADD   A,0xB
    1F02: 54 01    MOV   [X+1],A
    1F04: 51 90    MOV   A,[__r0]
    1F06: 09 00    ADC   A,0x0
    1F08: 54 00    MOV   [X+0],A
(0048) 
(0049) 	if(EEPROM_Read((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
    1F0A: 50 06    MOV   A,0x6
    1F0C: 08       PUSH  A
    1F0D: 52 00    MOV   A,[X+0]
    1F0F: 08       PUSH  A
    1F10: 52 01    MOV   A,[X+1]
    1F12: 08       PUSH  A
    1F13: 52 FB    MOV   A,[X-5]
    1F15: 08       PUSH  A
    1F16: 52 FC    MOV   A,[X-4]
    1F18: 08       PUSH  A
    1F19: 7C 14 E3 LCALL _EEPROM_Read
    1F1C: 38 FB    ADD   SP,0xFB
    1F1E: 62 D0 00 MOV   REG[0xD0],0x0
    1F21: 39 00    CMP   A,0x0
    1F23: A0 05    JZ    0x1F29
    1F25: 50 00    MOV   A,0x0
    1F27: 80 06    JMP   0x1F2E
(0050) 
(0051) 	return TRUE;
    1F29: 62 D0 00 MOV   REG[0xD0],0x0
    1F2C: 50 01    MOV   A,0x1
    1F2E: 38 FE    ADD   SP,0xFE
    1F30: 20       POP   X
    1F31: 7F       RET   
(0052) }
(0053) 
(0054) // Saves config
(0055) BOOL Persist_SaveConfig(Config *config)
(0056) {
_Persist_SaveConfig:
  config               --> X-5
    1F32: 10       PUSH  X
    1F33: 4F       MOV   X,SP
(0057) 	if(EEPROM_Write((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
    1F34: 50 0B    MOV   A,0xB
    1F36: 08       PUSH  A
    1F37: 50 00    MOV   A,0x0
    1F39: 08       PUSH  A
    1F3A: 08       PUSH  A
    1F3B: 52 FB    MOV   A,[X-5]
    1F3D: 08       PUSH  A
    1F3E: 52 FC    MOV   A,[X-4]
    1F40: 08       PUSH  A
    1F41: 7C 14 55 LCALL _EEPROM_Write
    1F44: 38 FB    ADD   SP,0xFB
    1F46: 62 D0 00 MOV   REG[0xD0],0x0
    1F49: 39 00    CMP   A,0x0
    1F4B: A0 05    JZ    0x1F51
    1F4D: 50 00    MOV   A,0x0
    1F4F: 80 06    JMP   0x1F56
(0058) 
(0059) 	return TRUE;
    1F51: 62 D0 00 MOV   REG[0xD0],0x0
    1F54: 50 01    MOV   A,0x1
    1F56: 20       POP   X
    1F57: 7F       RET   
(0060) }
(0061) 
(0062) // Loads config.
(0063) BOOL Persist_LoadConfig(Config *config)
(0064) {
_Persist_LoadConfig:
  config               --> X-5
    1F58: 10       PUSH  X
    1F59: 4F       MOV   X,SP
(0065) 	if(EEPROM_Read((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
    1F5A: 50 0B    MOV   A,0xB
    1F5C: 08       PUSH  A
    1F5D: 50 00    MOV   A,0x0
    1F5F: 08       PUSH  A
    1F60: 08       PUSH  A
    1F61: 52 FB    MOV   A,[X-5]
    1F63: 08       PUSH  A
    1F64: 52 FC    MOV   A,[X-4]
    1F66: 08       PUSH  A
    1F67: 7C 14 E3 LCALL _EEPROM_Read
    1F6A: 38 FB    ADD   SP,0xFB
    1F6C: 62 D0 00 MOV   REG[0xD0],0x0
    1F6F: 39 00    CMP   A,0x0
    1F71: A0 05    JZ    0x1F77
    1F73: 50 00    MOV   A,0x0
    1F75: 80 06    JMP   0x1F7C
(0066) 
(0067) 	return TRUE;
    1F77: 62 D0 00 MOV   REG[0xD0],0x0
    1F7A: 50 01    MOV   A,0x1
    1F7C: 20       POP   X
    1F7D: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\regtimeview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "regTimeView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) 
(0010) extern CurrentView currentView;
(0011) 
(0012) void RegTimeView_Start(void)
(0013) {
_RegTimeView_Start:
    1F7E: 7F       RET   
(0014) 
(0015) }
(0016) 
(0017) void RegTimeView_Callback(void)
(0018) {
(0019) 	currentView = REGTIME_CONFIG;
_RegTimeView_Callback:
    1F7F: 62 D0 00 MOV   REG[0xD0],0x0
    1F82: 55 A4 02 MOV   [currentView],0x2
(0020) 	Menu_Clear();
    1F85: 7C 1D EF LCALL _Menu_Clear
(0021) 	LCD_Position(0, 0);
    1F88: 10       PUSH  X
    1F89: 50 00    MOV   A,0x0
    1F8B: 57 00    MOV   X,0x0
    1F8D: 7C 09 79 LCALL _LCD_Position
(0022) 	LCD_PrCString("Inicio: 00:00");
    1F90: 50 02    MOV   A,0x2
    1F92: 08       PUSH  A
    1F93: 50 6A    MOV   A,0x6A
    1F95: 5C       MOV   X,A
    1F96: 18       POP   A
    1F97: 7C 07 F4 LCALL _LCD_PrCString
(0023) 	LCD_Position(1,0);
    1F9A: 57 00    MOV   X,0x0
    1F9C: 50 01    MOV   A,0x1
    1F9E: 7C 09 79 LCALL _LCD_Position
(0024) 	LCD_PrCString("Fin:    00:00");
    1FA1: 50 02    MOV   A,0x2
    1FA3: 08       PUSH  A
    1FA4: 50 5C    MOV   A,0x5C
    1FA6: 5C       MOV   X,A
    1FA7: 18       POP   A
    1FA8: 7C 07 F4 LCALL _LCD_PrCString
    1FAB: 20       POP   X
    1FAC: 7F       RET   
(0025) }
(0026) 
(0027) void RegTimeView_Update(void)
(0028) {
_RegTimeView_Update:
    1FAD: 10       PUSH  X
    1FAE: 4F       MOV   X,SP
    1FAF: 38 02    ADD   SP,0x2
(0029) 	if(Keypad_IsKeyStored())
    1FB1: 7C 16 BF LCALL _Keypad_IsKeyStored
    1FB4: 62 D0 00 MOV   REG[0xD0],0x0
    1FB7: 39 00    CMP   A,0x0
    1FB9: A0 1B    JZ    0x1FD5
(0030) 	{
(0031) 		switch(Keypad_GetKey())
    1FBB: 7C 16 D7 LCALL _Keypad_GetKey
    1FBE: 62 D0 00 MOV   REG[0xD0],0x0
    1FC1: 54 01    MOV   [X+1],A
    1FC3: 56 00 00 MOV   [X+0],0x0
    1FC6: 3D 00 00 CMP   [X+0],0x0
    1FC9: B0 06    JNZ   0x1FD0
    1FCB: 3D 01 11 CMP   [X+1],0x11
    1FCE: A0 03    JZ    0x1FD2
    1FD0: 80 04    JMP   0x1FD5
(0032) 		{
(0033) 			case 0x11:
(0034) 				// "D"
(0035) 				MainView_Callback();
    1FD2: 7C 1B 05 LCALL _MainView_Callback
(0036) 				return;
(0037) 				break;
(0038) 		}
(0039) 	}
    1FD5: 38 FE    ADD   SP,0xFE
    1FD7: 20       POP   X
    1FD8: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\rtc.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Rtc.h"
(0004) 
(0005) typedef union
(0006) {
(0007) 	struct
(0008) 	{
(0009) 		BYTE OUT : 1;
(0010) 		BYTE : 2;
(0011) 		BYTE SQWE : 1;
(0012) 		BYTE : 2;
(0013) 		BYTE RS1 : 1;
(0014) 		BYTE RS0 : 1;
(0015) 	} bits;
(0016) 	BYTE byte;
(0017) 
(0018) } ControlRegister;
(0019) 
(0020) DateTime datetime;
(0021) static ControlRegister cr;
(0022) 
(0023) void Rtc_Start(void)
(0024) {
(0025) 	I2Cm_Start();
_Rtc_Start:
    1FD9: 10       PUSH  X
    1FDA: 7C 0A 83 LCALL _I2Cm_Start
    1FDD: 20       POP   X
(0026) 
(0027) 	// Starts RTC clock
(0028) 	datetime._00h.bits.CH = 0;
    1FDE: 62 D0 00 MOV   REG[0xD0],0x0
    1FE1: 51 91    MOV   A,[datetime]
    1FE3: 21 7F    AND   A,0x7F
    1FE5: 53 91    MOV   [datetime],A
(0029) 	Rtc_WriteToRtc();
    1FE7: 90 37    CALL  _Rtc_WriteToRtc
    1FE9: 62 D0 00 MOV   REG[0xD0],0x0
    1FEC: 7F       RET   
(0030) }
(0031) 
(0032) void Rtc_Stop(void)
(0033) {
(0034) 	// Stops RTC clock
(0035) 	Rtc_ReadFromRtc();
_Rtc_Stop:
    1FED: 90 45    CALL  _Rtc_ReadFromRtc
(0036) 	datetime._00h.bits.CH = 1;
    1FEF: 62 D0 00 MOV   REG[0xD0],0x0
    1FF2: 51 91    MOV   A,[datetime]
    1FF4: 29 80    OR    A,0x80
    1FF6: 53 91    MOV   [datetime],A
(0037) 	Rtc_WriteToRtc();
    1FF8: 90 26    CALL  _Rtc_WriteToRtc
    1FFA: 62 D0 00 MOV   REG[0xD0],0x0
(0038) 
(0039) 	I2Cm_Stop();
    1FFD: 10       PUSH  X
    1FFE: 7C 0A A7 LCALL _I2Cm_Stop
    2001: 20       POP   X
    2002: 7F       RET   
(0040) }
(0041) 
(0042) void Rtc_EnableSqw1Hz(void)
(0043) {
(0044) 	Rtc_GetSqwOutConfig();
_Rtc_EnableSqw1Hz:
    2003: 90 57    CALL  _Rtc_GetSqwOutConfig
(0045) 	cr.bits.SQWE = 1;
    2005: 62 D0 00 MOV   REG[0xD0],0x0
    2008: 51 A2    MOV   A,[rtc.c:cr]
    200A: 29 10    OR    A,0x10
    200C: 53 A2    MOV   [rtc.c:cr],A
(0046) 	cr.bits.RS0 = 0;
    200E: 51 A2    MOV   A,[rtc.c:cr]
    2010: 21 FE    AND   A,0xFE
    2012: 53 A2    MOV   [rtc.c:cr],A
(0047) 	cr.bits.RS1 = 0;
    2014: 51 A2    MOV   A,[rtc.c:cr]
    2016: 21 FD    AND   A,0xFD
    2018: 53 A2    MOV   [rtc.c:cr],A
(0048) 	Rtc_SetSqwOutConfig();
    201A: 90 2C    CALL  _Rtc_SetSqwOutConfig
    201C: 62 D0 00 MOV   REG[0xD0],0x0
    201F: 7F       RET   
(0049) }
(0050) 
(0051) #define RTC_NOERROR 0x00
(0052) #define RTC_SLAVENOTACKADDRESS 0x01
(0053) #define RTC_SLAVENOTACKDATA 0x02
(0054) 
(0055) BYTE Rtc_WriteToRtc(void)
(0056) {
(0057) 	return Rtc_WriteToRam(&datetime, 0x00, 7);
_Rtc_WriteToRtc:
    2020: 50 07    MOV   A,0x7
    2022: 08       PUSH  A
    2023: 50 00    MOV   A,0x0
    2025: 08       PUSH  A
    2026: 50 00    MOV   A,0x0
    2028: 08       PUSH  A
    2029: 50 91    MOV   A,0x91
    202B: 08       PUSH  A
    202C: 90 47    CALL  _Rtc_WriteToRam
    202E: 38 FC    ADD   SP,0xFC
    2030: 62 D0 00 MOV   REG[0xD0],0x0
    2033: 7F       RET   
(0058) }
(0059) 
(0060) BYTE Rtc_ReadFromRtc(void)
(0061) {
(0062) 	return Rtc_ReadFromRam(&datetime, 0x00, 7);
_Rtc_ReadFromRtc:
    2034: 50 07    MOV   A,0x7
    2036: 08       PUSH  A
    2037: 50 00    MOV   A,0x0
    2039: 08       PUSH  A
    203A: 50 00    MOV   A,0x0
    203C: 08       PUSH  A
    203D: 50 91    MOV   A,0x91
    203F: 08       PUSH  A
    2040: 90 A9    CALL  _Rtc_ReadFromRam
    2042: 38 FC    ADD   SP,0xFC
    2044: 62 D0 00 MOV   REG[0xD0],0x0
    2047: 7F       RET   
(0063) }
(0064) 
(0065) BYTE Rtc_SetSqwOutConfig(void)
(0066) {
(0067) 	return Rtc_WriteToRam(&cr, 0x07, 1);
_Rtc_SetSqwOutConfig:
    2048: 50 01    MOV   A,0x1
    204A: 08       PUSH  A
    204B: 50 07    MOV   A,0x7
    204D: 08       PUSH  A
    204E: 50 00    MOV   A,0x0
    2050: 08       PUSH  A
    2051: 50 A2    MOV   A,0xA2
    2053: 08       PUSH  A
    2054: 90 1F    CALL  _Rtc_WriteToRam
    2056: 38 FC    ADD   SP,0xFC
    2058: 62 D0 00 MOV   REG[0xD0],0x0
    205B: 7F       RET   
(0068) }
(0069) 
(0070) BYTE Rtc_GetSqwOutConfig(void)
(0071) {
(0072) 	Rtc_ReadFromRam(&cr, 0x07, 1);
_Rtc_GetSqwOutConfig:
    205C: 50 01    MOV   A,0x1
    205E: 08       PUSH  A
    205F: 50 07    MOV   A,0x7
    2061: 08       PUSH  A
    2062: 50 00    MOV   A,0x0
    2064: 08       PUSH  A
    2065: 50 A2    MOV   A,0xA2
    2067: 08       PUSH  A
    2068: 90 81    CALL  _Rtc_ReadFromRam
    206A: 38 FC    ADD   SP,0xFC
(0073) 	return cr.byte;
    206C: 62 D0 00 MOV   REG[0xD0],0x0
    206F: 51 A2    MOV   A,[rtc.c:cr]
    2071: 62 D0 00 MOV   REG[0xD0],0x0
    2074: 7F       RET   
(0074) }
(0075) 
(0076) BYTE Rtc_WriteToRam(void* buffer, BYTE address, BYTE count)
(0077) {
_Rtc_WriteToRam:
  error                --> X+1
  i                    --> X+0
  count                --> X-7
  address              --> X-6
  buffer               --> X-5
    2075: 10       PUSH  X
    2076: 4F       MOV   X,SP
    2077: 38 02    ADD   SP,0x2
(0078) 	BYTE error = RTC_NOERROR;
    2079: 56 01 00 MOV   [X+1],0x0
(0079) 	BYTE i = 0;
    207C: 56 00 00 MOV   [X+0],0x0
(0080) 
(0081) 	if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
    207F: 10       PUSH  X
    2080: 57 00    MOV   X,0x0
    2082: 50 68    MOV   A,0x68
    2084: 7C 0B EF LCALL _I2Cm_fSendStart
    2087: 20       POP   X
    2088: 62 D0 00 MOV   REG[0xD0],0x0
    208B: 39 00    CMP   A,0x0
    208D: A0 4C    JZ    0x20DA
(0082) 	{
(0083) 		if(I2Cm_fWrite(address) != 0)
    208F: 10       PUSH  X
    2090: 52 FA    MOV   A,[X-6]
    2092: 7C 0C 29 LCALL _I2Cm_fWrite
    2095: 20       POP   X
    2096: 62 D0 00 MOV   REG[0xD0],0x0
    2099: 39 00    CMP   A,0x0
    209B: A0 39    JZ    0x20D5
(0084) 		{
(0085) 			for (i = 0; i < count; i++)
    209D: 56 00 00 MOV   [X+0],0x0
    20A0: 80 2C    JMP   0x20CD
(0086) 			{
(0087) 				if(I2Cm_fWrite( *( (BYTE*)buffer+i ) ) == 0)
    20A2: 62 D0 00 MOV   REG[0xD0],0x0
    20A5: 52 00    MOV   A,[X+0]
    20A7: 53 8F    MOV   [__r1],A
    20A9: 55 90 00 MOV   [__r0],0x0
    20AC: 52 FC    MOV   A,[X-4]
    20AE: 04 8F    ADD   [__r1],A
    20B0: 52 FB    MOV   A,[X-5]
    20B2: 0C 90    ADC   [__r0],A
    20B4: 51 90    MOV   A,[__r0]
    20B6: 60 D4    MOV   REG[0xD4],A
    20B8: 3E 8F    MVI   A,[__r1]
    20BA: 10       PUSH  X
    20BB: 7C 0C 29 LCALL _I2Cm_fWrite
    20BE: 20       POP   X
    20BF: 62 D0 00 MOV   REG[0xD0],0x0
    20C2: 39 00    CMP   A,0x0
    20C4: B0 06    JNZ   0x20CB
(0088) 				{
(0089) 					error = RTC_SLAVENOTACKDATA;
    20C6: 56 01 02 MOV   [X+1],0x2
(0090) 					break;
    20C9: 80 13    JMP   0x20DD
(0091) 				}
(0092) 			}
    20CB: 77 00    INC   [X+0]
    20CD: 52 00    MOV   A,[X+0]
    20CF: 3B F9    CMP   A,[X-7]
    20D1: CF D0    JC    0x20A2
(0093) 		}
    20D3: 80 09    JMP   0x20DD
(0094) 		else
(0095) 		{
(0096) 			error = RTC_SLAVENOTACKDATA;
    20D5: 56 01 02 MOV   [X+1],0x2
(0097) 		}
(0098) 	}
    20D8: 80 04    JMP   0x20DD
(0099) 	else
(0100) 	{
(0101) 		error = RTC_SLAVENOTACKADDRESS;
    20DA: 56 01 01 MOV   [X+1],0x1
(0102) 	}
(0103) 
(0104) 	I2Cm_SendStop();
    20DD: 10       PUSH  X
    20DE: 7C 0D 6B LCALL _I2Cm_SendStop
    20E1: 20       POP   X
(0105) 
(0106) 	return error;
    20E2: 52 01    MOV   A,[X+1]
    20E4: 62 D0 00 MOV   REG[0xD0],0x0
    20E7: 38 FE    ADD   SP,0xFE
    20E9: 20       POP   X
    20EA: 7F       RET   
(0107) }
(0108) 
(0109) BYTE Rtc_ReadFromRam(void* buffer, BYTE address, BYTE count)
(0110) {
_Rtc_ReadFromRam:
  error                --> X+1
  i                    --> X+0
  count                --> X-7
  address              --> X-6
  buffer               --> X-5
    20EB: 10       PUSH  X
    20EC: 4F       MOV   X,SP
    20ED: 38 02    ADD   SP,0x2
(0111) 	BYTE error = RTC_NOERROR;
    20EF: 56 01 00 MOV   [X+1],0x0
(0112) 	BYTE i = 0;
    20F2: 56 00 00 MOV   [X+0],0x0
(0113) 
(0114) 	if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
    20F5: 10       PUSH  X
    20F6: 57 00    MOV   X,0x0
    20F8: 50 68    MOV   A,0x68
    20FA: 7C 0B EF LCALL _I2Cm_fSendStart
    20FD: 20       POP   X
    20FE: 62 D0 00 MOV   REG[0xD0],0x0
    2101: 39 00    CMP   A,0x0
    2103: A0 80    JZ    0x2184
(0115) 	{
(0116) 		if(I2Cm_fWrite(address) != 0)
    2105: 10       PUSH  X
    2106: 52 FA    MOV   A,[X-6]
    2108: 7C 0C 29 LCALL _I2Cm_fWrite
    210B: 20       POP   X
    210C: 62 D0 00 MOV   REG[0xD0],0x0
    210F: 39 00    CMP   A,0x0
    2111: A0 6D    JZ    0x217F
(0117) 		{
(0118) 			if(I2Cm_fSendRepeatStart(RTC_I2C_ADDRESS, I2Cm_READ) != 0)
    2113: 10       PUSH  X
    2114: 57 01    MOV   X,0x1
    2116: 50 68    MOV   A,0x68
    2118: 7C 0B B9 LCALL _I2Cm_fSendRepeatStart
    211B: 20       POP   X
    211C: 62 D0 00 MOV   REG[0xD0],0x0
    211F: 39 00    CMP   A,0x0
    2121: A0 58    JZ    0x217A
(0119) 			{
(0120) 				count--;
    2123: 7B F9    DEC   [X-7]
(0121) 				for (i = 0; i < count; i++)
    2125: 56 00 00 MOV   [X+0],0x0
    2128: 80 26    JMP   0x214F
(0122) 				{
(0123) 					*( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_ACKslave);
    212A: 10       PUSH  X
    212B: 50 01    MOV   A,0x1
    212D: 7C 0C C0 LCALL _I2Cm_bRead
    2130: 20       POP   X
    2131: 62 D0 00 MOV   REG[0xD0],0x0
    2134: 53 90    MOV   [__r0],A
    2136: 52 00    MOV   A,[X+0]
    2138: 53 8D    MOV   [__r3],A
    213A: 55 8E 00 MOV   [__r2],0x0
    213D: 52 FC    MOV   A,[X-4]
    213F: 04 8D    ADD   [__r3],A
    2141: 52 FB    MOV   A,[X-5]
    2143: 0C 8E    ADC   [__r2],A
    2145: 51 8E    MOV   A,[__r2]
    2147: 60 D5    MOV   REG[0xD5],A
    2149: 51 90    MOV   A,[__r0]
    214B: 3F 8D    MVI   [__r3],A
(0124) 				}
    214D: 77 00    INC   [X+0]
    214F: 52 00    MOV   A,[X+0]
    2151: 3B F9    CMP   A,[X-7]
    2153: CF D6    JC    0x212A
(0125) 
(0126) 				*( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_NAKslave);
    2155: 10       PUSH  X
    2156: 50 00    MOV   A,0x0
    2158: 7C 0C C0 LCALL _I2Cm_bRead
    215B: 20       POP   X
    215C: 62 D0 00 MOV   REG[0xD0],0x0
    215F: 53 90    MOV   [__r0],A
    2161: 52 00    MOV   A,[X+0]
    2163: 53 8D    MOV   [__r3],A
    2165: 55 8E 00 MOV   [__r2],0x0
    2168: 52 FC    MOV   A,[X-4]
    216A: 04 8D    ADD   [__r3],A
    216C: 52 FB    MOV   A,[X-5]
    216E: 0C 8E    ADC   [__r2],A
    2170: 51 8E    MOV   A,[__r2]
    2172: 60 D5    MOV   REG[0xD5],A
    2174: 51 90    MOV   A,[__r0]
    2176: 3F 8D    MVI   [__r3],A
(0127) 			}
    2178: 80 0E    JMP   0x2187
(0128) 			else
(0129) 			{
(0130) 				error = RTC_SLAVENOTACKDATA;
    217A: 56 01 02 MOV   [X+1],0x2
(0131) 			}
(0132) 		}
    217D: 80 09    JMP   0x2187
(0133) 		else
(0134) 		{
(0135) 			error = RTC_SLAVENOTACKDATA;
    217F: 56 01 02 MOV   [X+1],0x2
(0136) 		}
(0137) 	}
    2182: 80 04    JMP   0x2187
(0138) 	else
(0139) 	{
(0140) 		error = RTC_SLAVENOTACKADDRESS;
    2184: 56 01 01 MOV   [X+1],0x1
(0141) 	}
(0142) 
(0143) 	I2Cm_SendStop();
    2187: 10       PUSH  X
    2188: 7C 0D 6B LCALL _I2Cm_SendStop
    218B: 20       POP   X
(0144) 
(0145) 	return error;
    218C: 52 01    MOV   A,[X+1]
    218E: 62 D0 00 MOV   REG[0xD0],0x0
    2191: 38 FE    ADD   SP,0xFE
    2193: 20       POP   X
    2194: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\tempsensor.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "TempSensor.h"
(0004) #include <stdio.h>
(0005) 
(0006) 
(0007) void TempSensor_Start(void)
(0008) {
(0009) 	PGA_Start(PGA_HIGHPOWER);
_TempSensor_Start:
    2195: 10       PUSH  X
    2196: 50 03    MOV   A,0x3
    2198: 7C 07 B4 LCALL _PGA_Start|PGA_SetPower|PGA_Start|_PGA_SetPower
(0010) 	ADCINC_Start(ADCINC_HIGHPOWER);
    219B: 50 03    MOV   A,0x3
    219D: 7C 0E 0F LCALL _ADCINC_Start
(0011) 	ADCINC_GetSamples(0);
    21A0: 50 00    MOV   A,0x0
    21A2: 7C 0E 3A LCALL _ADCINC_GetSamples
    21A5: 20       POP   X
    21A6: 7F       RET   
(0012) }
(0013) void TempSensor_Stop(void)
(0014) {
(0015) 	PGA_Stop();
_TempSensor_Stop:
    21A7: 10       PUSH  X
    21A8: 7C 07 F0 LCALL _PGA_Stop
(0016) 	ADCINC_Stop();
    21AB: 7C 0E 30 LCALL _ADCINC_Stop
    21AE: 20       POP   X
    21AF: 7F       RET   
(0017) }
(0018) 
(0019) int TempSensor_GetTemp(void)
(0020) {
_TempSensor_GetTemp:
  latemp               --> X+4
  temp                 --> X+0
    21B0: 10       PUSH  X
    21B1: 4F       MOV   X,SP
    21B2: 38 06    ADD   SP,0x6
(0021) 	float temp;
(0022) 	int latemp;
(0023) 	while (ADCINC_fIsDataAvailable() == 0);
    21B4: 10       PUSH  X
    21B5: 7C 0E 77 LCALL _ADCINC_fIsDataAvailable
    21B8: 20       POP   X
    21B9: 62 D0 00 MOV   REG[0xD0],0x0
    21BC: 39 00    CMP   A,0x0
    21BE: AF F5    JZ    0x21B4
(0024) 	temp = ADCINC_wClearFlagGetData();
    21C0: 10       PUSH  X
    21C1: 7C 0E 7D LCALL _ADCINC_wClearFlagGetData|ADCINC_iClearFlagGetData|_ADCINC_iClearFlagGetData
    21C4: 62 D0 00 MOV   REG[0xD0],0x0
    21C7: 5A 90    MOV   [__r0],X
    21C9: 53 8F    MOV   [__r1],A
    21CB: 20       POP   X
    21CC: 21 01    AND   A,0x1
    21CE: 53 8D    MOV   [__r3],A
    21D0: 51 90    MOV   A,[__r0]
    21D2: 21 00    AND   A,0x0
    21D4: 53 8E    MOV   [__r2],A
    21D6: 51 8D    MOV   A,[__r3]
    21D8: 53 89    MOV   [__r7],A
    21DA: 51 8E    MOV   A,[__r2]
    21DC: 53 8A    MOV   [__r6],A
    21DE: 47 8A 80 TST   [__r6],0x80
    21E1: A0 09    JZ    0x21EB
    21E3: 55 8B FF MOV   [__r5],0xFF
    21E6: 55 8C FF MOV   [__r4],0xFF
    21E9: 80 0A    JMP   0x21F4
    21EB: 62 D0 00 MOV   REG[0xD0],0x0
    21EE: 55 8B 00 MOV   [__r5],0x0
    21F1: 55 8C 00 MOV   [__r4],0x0
    21F4: 62 D0 00 MOV   REG[0xD0],0x0
    21F7: 51 8C    MOV   A,[__r4]
    21F9: 08       PUSH  A
    21FA: 51 8B    MOV   A,[__r5]
    21FC: 08       PUSH  A
    21FD: 51 8A    MOV   A,[__r6]
    21FF: 08       PUSH  A
    2200: 51 89    MOV   A,[__r7]
    2202: 08       PUSH  A
    2203: 7C 33 2F LCALL 0x332F
    2206: 18       POP   A
    2207: 53 89    MOV   [__r7],A
    2209: 18       POP   A
    220A: 53 8A    MOV   [__r6],A
    220C: 18       POP   A
    220D: 53 8B    MOV   [__r5],A
    220F: 18       POP   A
    2210: 53 8C    MOV   [__r4],A
    2212: 70 FB    AND   F,0xFB
    2214: 6E 90    RRC   [__r0]
    2216: 6E 8F    RRC   [__r1]
    2218: 51 8F    MOV   A,[__r1]
    221A: 53 8D    MOV   [__r3],A
    221C: 51 90    MOV   A,[__r0]
    221E: 53 8E    MOV   [__r2],A
    2220: 47 8E 80 TST   [__r2],0x80
    2223: A0 09    JZ    0x222D
    2225: 55 8F FF MOV   [__r1],0xFF
    2228: 55 90 FF MOV   [__r0],0xFF
    222B: 80 0A    JMP   0x2236
    222D: 62 D0 00 MOV   REG[0xD0],0x0
    2230: 55 8F 00 MOV   [__r1],0x0
    2233: 55 90 00 MOV   [__r0],0x0
    2236: 62 D0 00 MOV   REG[0xD0],0x0
    2239: 51 90    MOV   A,[__r0]
    223B: 08       PUSH  A
    223C: 51 8F    MOV   A,[__r1]
    223E: 08       PUSH  A
    223F: 51 8E    MOV   A,[__r2]
    2241: 08       PUSH  A
    2242: 51 8D    MOV   A,[__r3]
    2244: 08       PUSH  A
    2245: 7C 33 2F LCALL 0x332F
    2248: 18       POP   A
    2249: 53 8D    MOV   [__r3],A
    224B: 18       POP   A
    224C: 53 8E    MOV   [__r2],A
    224E: 18       POP   A
    224F: 53 8F    MOV   [__r1],A
    2251: 18       POP   A
    2252: 08       PUSH  A
    2253: 51 8F    MOV   A,[__r1]
    2255: 08       PUSH  A
    2256: 51 8E    MOV   A,[__r2]
    2258: 08       PUSH  A
    2259: 51 8D    MOV   A,[__r3]
    225B: 08       PUSH  A
    225C: 50 40    MOV   A,0x40
    225E: 08       PUSH  A
    225F: 50 00    MOV   A,0x0
    2261: 08       PUSH  A
    2262: 08       PUSH  A
    2263: 08       PUSH  A
    2264: 7C 31 75 LCALL 0x3175
    2267: 18       POP   A
    2268: 53 8D    MOV   [__r3],A
    226A: 18       POP   A
    226B: 53 8E    MOV   [__r2],A
    226D: 18       POP   A
    226E: 53 8F    MOV   [__r1],A
    2270: 18       POP   A
    2271: 53 90    MOV   [__r0],A
    2273: 38 FC    ADD   SP,0xFC
    2275: 51 8C    MOV   A,[__r4]
    2277: 08       PUSH  A
    2278: 51 8B    MOV   A,[__r5]
    227A: 08       PUSH  A
    227B: 51 8A    MOV   A,[__r6]
    227D: 08       PUSH  A
    227E: 51 89    MOV   A,[__r7]
    2280: 08       PUSH  A
    2281: 51 90    MOV   A,[__r0]
    2283: 08       PUSH  A
    2284: 51 8F    MOV   A,[__r1]
    2286: 08       PUSH  A
    2287: 51 8E    MOV   A,[__r2]
    2289: 08       PUSH  A
    228A: 51 8D    MOV   A,[__r3]
    228C: 08       PUSH  A
    228D: 7C 2F 92 LCALL 0x2F92
    2290: 18       POP   A
    2291: 54 03    MOV   [X+3],A
    2293: 18       POP   A
    2294: 54 02    MOV   [X+2],A
    2296: 18       POP   A
    2297: 54 01    MOV   [X+1],A
    2299: 18       POP   A
    229A: 54 00    MOV   [X+0],A
    229C: 38 FC    ADD   SP,0xFC
(0025) 	latemp = temp;
    229E: 52 00    MOV   A,[X+0]
    22A0: 08       PUSH  A
    22A1: 52 01    MOV   A,[X+1]
    22A3: 08       PUSH  A
    22A4: 52 02    MOV   A,[X+2]
    22A6: 08       PUSH  A
    22A7: 52 03    MOV   A,[X+3]
    22A9: 08       PUSH  A
    22AA: 7C 2E 81 LCALL 0x2E81
    22AD: 18       POP   A
    22AE: 54 05    MOV   [X+5],A
    22B0: 18       POP   A
    22B1: 54 04    MOV   [X+4],A
    22B3: 38 FE    ADD   SP,0xFE
(0026) 	cprintf("Raw: %d\n",latemp);
    22B5: 52 04    MOV   A,[X+4]
    22B7: 08       PUSH  A
    22B8: 52 05    MOV   A,[X+5]
    22BA: 08       PUSH  A
    22BB: 50 02    MOV   A,0x2
    22BD: 08       PUSH  A
    22BE: 50 88    MOV   A,0x88
    22C0: 08       PUSH  A
    22C1: 7C 37 CE LCALL _cprintf
    22C4: 38 FC    ADD   SP,0xFC
(0027) 	temp = (((temp)*500.0)/1023.0)-264;//270.5;
    22C6: 62 D0 00 MOV   REG[0xD0],0x0
    22C9: 52 00    MOV   A,[X+0]
    22CB: 08       PUSH  A
    22CC: 52 01    MOV   A,[X+1]
    22CE: 08       PUSH  A
    22CF: 52 02    MOV   A,[X+2]
    22D1: 08       PUSH  A
    22D2: 52 03    MOV   A,[X+3]
    22D4: 08       PUSH  A
    22D5: 50 43    MOV   A,0x43
    22D7: 08       PUSH  A
    22D8: 50 FA    MOV   A,0xFA
    22DA: 08       PUSH  A
    22DB: 50 00    MOV   A,0x0
    22DD: 08       PUSH  A
    22DE: 08       PUSH  A
    22DF: 7C 31 75 LCALL 0x3175
    22E2: 18       POP   A
    22E3: 53 8D    MOV   [__r3],A
    22E5: 18       POP   A
    22E6: 53 8E    MOV   [__r2],A
    22E8: 18       POP   A
    22E9: 53 8F    MOV   [__r1],A
    22EB: 18       POP   A
    22EC: 53 90    MOV   [__r0],A
    22EE: 38 FC    ADD   SP,0xFC
    22F0: 50 44    MOV   A,0x44
    22F2: 08       PUSH  A
    22F3: 50 7F    MOV   A,0x7F
    22F5: 08       PUSH  A
    22F6: 50 C0    MOV   A,0xC0
    22F8: 08       PUSH  A
    22F9: 50 00    MOV   A,0x0
    22FB: 08       PUSH  A
    22FC: 51 90    MOV   A,[__r0]
    22FE: 08       PUSH  A
    22FF: 51 8F    MOV   A,[__r1]
    2301: 08       PUSH  A
    2302: 51 8E    MOV   A,[__r2]
    2304: 08       PUSH  A
    2305: 51 8D    MOV   A,[__r3]
    2307: 08       PUSH  A
    2308: 7C 30 92 LCALL 0x3092
    230B: 18       POP   A
    230C: 53 8D    MOV   [__r3],A
    230E: 18       POP   A
    230F: 53 8E    MOV   [__r2],A
    2311: 18       POP   A
    2312: 53 8F    MOV   [__r1],A
    2314: 18       POP   A
    2315: 53 90    MOV   [__r0],A
    2317: 38 FC    ADD   SP,0xFC
    2319: 50 43    MOV   A,0x43
    231B: 08       PUSH  A
    231C: 50 84    MOV   A,0x84
    231E: 08       PUSH  A
    231F: 50 00    MOV   A,0x0
    2321: 08       PUSH  A
    2322: 08       PUSH  A
    2323: 51 90    MOV   A,[__r0]
    2325: 08       PUSH  A
    2326: 51 8F    MOV   A,[__r1]
    2328: 08       PUSH  A
    2329: 51 8E    MOV   A,[__r2]
    232B: 08       PUSH  A
    232C: 51 8D    MOV   A,[__r3]
    232E: 08       PUSH  A
    232F: 7C 32 9F LCALL 0x329F
    2332: 18       POP   A
    2333: 54 03    MOV   [X+3],A
    2335: 18       POP   A
    2336: 54 02    MOV   [X+2],A
    2338: 18       POP   A
    2339: 54 01    MOV   [X+1],A
    233B: 18       POP   A
    233C: 54 00    MOV   [X+0],A
    233E: 38 FC    ADD   SP,0xFC
(0028) 	latemp = temp;
    2340: 52 00    MOV   A,[X+0]
    2342: 08       PUSH  A
    2343: 52 01    MOV   A,[X+1]
    2345: 08       PUSH  A
    2346: 52 02    MOV   A,[X+2]
    2348: 08       PUSH  A
    2349: 52 03    MOV   A,[X+3]
    234B: 08       PUSH  A
    234C: 7C 2E 81 LCALL 0x2E81
    234F: 18       POP   A
    2350: 54 05    MOV   [X+5],A
    2352: 18       POP   A
    2353: 54 04    MOV   [X+4],A
    2355: 38 FE    ADD   SP,0xFE
(0029) 	cprintf("Conversion: %d\n",latemp);
    2357: 52 04    MOV   A,[X+4]
    2359: 08       PUSH  A
    235A: 52 05    MOV   A,[X+5]
    235C: 08       PUSH  A
    235D: 50 02    MOV   A,0x2
    235F: 08       PUSH  A
    2360: 50 78    MOV   A,0x78
    2362: 08       PUSH  A
    2363: 7C 37 CE LCALL _cprintf
    2366: 38 FC    ADD   SP,0xFC
(0030) 	
(0031) 	return latemp;
    2368: 62 D0 00 MOV   REG[0xD0],0x0
    236B: 52 05    MOV   A,[X+5]
    236D: 53 8F    MOV   [__r1],A
    236F: 52 04    MOV   A,[X+4]
    2371: 53 90    MOV   [__r0],A
    2373: 38 FA    ADD   SP,0xFA
    2375: 20       POP   X
    2376: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\tempview.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "TempView.h"
(0004) #include "mainView.h"
(0005) #include "menu.h"
(0006) #include "BcdUtil.h"
(0007) #include "viewManager.h"
(0008) #include "Keypad.h"
(0009) #include "TempSensor.h"
(0010) #include "BcdUtil.h"
(0011) #include <stdio.h>
(0012) 
(0013) extern CurrentView currentView;
(0014) 
(0015) void TempView_Start(void)
(0016) {
_TempView_Start:
    2377: 7F       RET   
(0017) 
(0018) }
(0019) 
(0020) void TempView_Callback(void)
(0021) {
_TempView_Callback:
  num                  --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  temp                 --> X+0
    2378: 10       PUSH  X
    2379: 4F       MOV   X,SP
    237A: 38 05    ADD   SP,0x5
(0022) 	int temp;
(0023) 	BYTE bcd10,bcd,num;
(0024) 	
(0025) 	currentView = TEMP;
    237C: 62 D0 00 MOV   REG[0xD0],0x0
    237F: 55 A4 05 MOV   [currentView],0x5
(0026) 	Menu_Clear();
    2382: 7C 1D EF LCALL _Menu_Clear
(0027) 	LCD_Position(0, 0);
    2385: 10       PUSH  X
    2386: 50 00    MOV   A,0x0
    2388: 57 00    MOV   X,0x0
    238A: 7C 09 79 LCALL _LCD_Position
(0028) 	LCD_PrCString("Temp Actual");
    238D: 50 02    MOV   A,0x2
    238F: 08       PUSH  A
    2390: 50 A2    MOV   A,0xA2
    2392: 5C       MOV   X,A
    2393: 18       POP   A
    2394: 7C 07 F4 LCALL _LCD_PrCString
    2397: 20       POP   X
(0029) 		
(0030) 	temp = TempSensor_GetTemp();
    2398: 7C 21 B0 LCALL _TempSensor_GetTemp
    239B: 62 D0 00 MOV   REG[0xD0],0x0
    239E: 51 8F    MOV   A,[__r1]
    23A0: 54 01    MOV   [X+1],A
    23A2: 51 90    MOV   A,[__r0]
    23A4: 54 00    MOV   [X+0],A
(0031) 	
(0032) 	cprintf("Temperatura: %d\n", temp);
    23A6: 52 00    MOV   A,[X+0]
    23A8: 08       PUSH  A
    23A9: 52 01    MOV   A,[X+1]
    23AB: 08       PUSH  A
    23AC: 50 02    MOV   A,0x2
    23AE: 08       PUSH  A
    23AF: 50 91    MOV   A,0x91
    23B1: 08       PUSH  A
    23B2: 7C 37 CE LCALL _cprintf
(0033) 		
(0034) 	decToBcd(&bcd10,&bcd,temp);
    23B5: 62 D0 00 MOV   REG[0xD0],0x0
    23B8: 52 01    MOV   A,[X+1]
    23BA: 08       PUSH  A
    23BB: 5A 8F    MOV   [__r1],X
    23BD: 06 8F 03 ADD   [__r1],0x3
    23C0: 50 07    MOV   A,0x7
    23C2: 08       PUSH  A
    23C3: 51 8F    MOV   A,[__r1]
    23C5: 08       PUSH  A
    23C6: 5A 8F    MOV   [__r1],X
    23C8: 06 8F 02 ADD   [__r1],0x2
    23CB: 50 07    MOV   A,0x7
    23CD: 08       PUSH  A
    23CE: 51 8F    MOV   A,[__r1]
    23D0: 08       PUSH  A
    23D1: 7C 0E D9 LCALL _decToBcd
    23D4: 38 F7    ADD   SP,0xF7
(0035) 	
(0036) 	//LCD_Position(0,14);
(0037) 	//LCD_PrHexByte(bcd);
(0038) 	LCD_Position(0,13);
    23D6: 10       PUSH  X
    23D7: 57 0D    MOV   X,0xD
    23D9: 50 00    MOV   A,0x0
    23DB: 7C 09 79 LCALL _LCD_Position
    23DE: 20       POP   X
(0039) 	LCD_PrHexByte((bcd10<<4)|bcd);
    23DF: 52 02    MOV   A,[X+2]
    23E1: 62 D0 00 MOV   REG[0xD0],0x0
    23E4: 64       ASL   A
    23E5: 64       ASL   A
    23E6: 64       ASL   A
    23E7: 64       ASL   A
    23E8: 53 90    MOV   [__r0],A
    23EA: 52 03    MOV   A,[X+3]
    23EC: 2C 90    OR    [__r0],A
    23EE: 10       PUSH  X
    23EF: 51 90    MOV   A,[__r0]
    23F1: 7C 08 16 LCALL _LCD_PrHexByte
    23F4: 20       POP   X
    23F5: 38 FB    ADD   SP,0xFB
    23F7: 20       POP   X
    23F8: 7F       RET   
(0040) 	//LCD_Position(0,13);
(0041) 	//LCD_PrCString(" ");
(0042) 	
(0043) 	
(0044) 
(0045) 	
(0046) }
(0047) 
(0048) void TempView_Update(void)
(0049) {
_TempView_Update:
  num                  --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  temp                 --> X+0
    23F9: 10       PUSH  X
    23FA: 4F       MOV   X,SP
    23FB: 38 07    ADD   SP,0x7
(0050) 	int temp;
(0051) 	BYTE bcd10,bcd,num;
(0052) 	
(0053) 	if(Keypad_IsKeyStored())
    23FD: 7C 16 BF LCALL _Keypad_IsKeyStored
    2400: 62 D0 00 MOV   REG[0xD0],0x0
    2403: 39 00    CMP   A,0x0
    2405: A0 1D    JZ    0x2423
(0054) 	{
(0055) 		switch(Keypad_GetKey())
    2407: 7C 16 D7 LCALL _Keypad_GetKey
    240A: 62 D0 00 MOV   REG[0xD0],0x0
    240D: 54 06    MOV   [X+6],A
    240F: 56 05 00 MOV   [X+5],0x0
    2412: 3D 05 00 CMP   [X+5],0x0
    2415: B0 06    JNZ   0x241C
    2417: 3D 06 11 CMP   [X+6],0x11
    241A: A0 03    JZ    0x241E
    241C: 80 06    JMP   0x2423
(0056) 		{
(0057) 			case 0x11:
(0058) 				// "B"
(0059) 				MainView_Callback();
    241E: 7C 1B 05 LCALL _MainView_Callback
(0060) 				return;
    2421: 80 4C    JMP   0x246E
(0061) 				break;
(0062) 		}
(0063) 	}
(0064) 	
(0065) 	temp = TempSensor_GetTemp();
    2423: 7C 21 B0 LCALL _TempSensor_GetTemp
    2426: 62 D0 00 MOV   REG[0xD0],0x0
    2429: 51 8F    MOV   A,[__r1]
    242B: 54 01    MOV   [X+1],A
    242D: 51 90    MOV   A,[__r0]
    242F: 54 00    MOV   [X+0],A
(0066) 	decToBcd(&bcd10,&bcd,temp);
    2431: 52 01    MOV   A,[X+1]
    2433: 08       PUSH  A
    2434: 5A 8F    MOV   [__r1],X
    2436: 06 8F 03 ADD   [__r1],0x3
    2439: 50 07    MOV   A,0x7
    243B: 08       PUSH  A
    243C: 51 8F    MOV   A,[__r1]
    243E: 08       PUSH  A
    243F: 5A 8F    MOV   [__r1],X
    2441: 06 8F 02 ADD   [__r1],0x2
    2444: 50 07    MOV   A,0x7
    2446: 08       PUSH  A
    2447: 51 8F    MOV   A,[__r1]
    2449: 08       PUSH  A
    244A: 7C 0E D9 LCALL _decToBcd
    244D: 38 FB    ADD   SP,0xFB
(0067) 	LCD_Position(0,13);
    244F: 10       PUSH  X
    2450: 57 0D    MOV   X,0xD
    2452: 50 00    MOV   A,0x0
    2454: 7C 09 79 LCALL _LCD_Position
    2457: 20       POP   X
(0068) 	LCD_PrHexByte((bcd10<<4)|bcd);
    2458: 52 02    MOV   A,[X+2]
    245A: 62 D0 00 MOV   REG[0xD0],0x0
    245D: 64       ASL   A
    245E: 64       ASL   A
    245F: 64       ASL   A
    2460: 64       ASL   A
    2461: 53 90    MOV   [__r0],A
    2463: 52 03    MOV   A,[X+3]
    2465: 2C 90    OR    [__r0],A
    2467: 10       PUSH  X
    2468: 51 90    MOV   A,[__r0]
    246A: 7C 08 16 LCALL _LCD_PrHexByte
    246D: 20       POP   X
    246E: 38 F9    ADD   SP,0xF9
    2470: 20       POP   X
    2471: 7F       RET   
FILE: C:\Users\Rod\Desktop\RTC\RTC\time.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "Rtc.h"
(0004) #include "Time.h"
(0005) #include "BcdUtil.h"
(0006) #include "dateUtil.h"
(0007) 
(0008) void Time_Start(void)
(0009) {
(0010) 	datetime._00h.byte = 0x00;	// Hora: 00:00:00
_Time_Start:
    2472: 62 D0 00 MOV   REG[0xD0],0x0
    2475: 55 91 00 MOV   [datetime],0x0
(0011) 	datetime._01h.byte = 0x00;	 
    2478: 55 92 00 MOV   [datetime+1],0x0
(0012) 	datetime._02h.byte = 0x00;
    247B: 55 93 00 MOV   [datetime+2],0x0
(0013) 	datetime._03h.byte = 0x04;	// Dia: Miércoles
    247E: 55 94 04 MOV   [datetime+3],0x4
(0014) 	datetime._04h.byte = 0x01;	// Fecha: 01/Enero/2014
    2481: 55 95 01 MOV   [datetime+4],0x1
(0015) 	datetime._05h.byte = 0x01;
    2484: 55 96 01 MOV   [datetime+5],0x1
(0016) 	datetime._06h.byte = 0x14;
    2487: 55 97 14 MOV   [datetime+6],0x14
(0017) 	Rtc_Start();
    248A: 7C 1F D9 LCALL _Rtc_Start
    248D: 7F       RET   
(0018) }
(0019) 
(0020) void Time_Stop(void)
(0021) {
(0022) 	Rtc_Stop();
_Time_Stop:
    248E: 7C 1F ED LCALL _Rtc_Stop
    2491: 7F       RET   
(0023) }
(0024) 
(0025) void Time_Pause(BOOL isPaused)
(0026) {
_Time_Pause:
  isPaused             --> X-4
    2492: 10       PUSH  X
    2493: 4F       MOV   X,SP
(0027) 	// Starts or Stops RTC clock
(0028) 	Rtc_ReadFromRtc();
    2494: 7C 20 34 LCALL _Rtc_ReadFromRtc
    2497: 62 D0 00 MOV   REG[0xD0],0x0
(0029) 	datetime._00h.bits.CH = isPaused;
    249A: 52 FC    MOV   A,[X-4]
    249C: 21 01    AND   A,0x1
    249E: 64       ASL   A
    249F: 64       ASL   A
    24A0: 64       ASL   A
    24A1: 64       ASL   A
    24A2: 64       ASL   A
    24A3: 64       ASL   A
    24A4: 64       ASL   A
    24A5: 53 90    MOV   [__r0],A
    24A7: 26 90 80 AND   [__r0],0x80
    24AA: 62 D0 00 MOV   REG[0xD0],0x0
    24AD: 51 91    MOV   A,[datetime]
    24AF: 21 7F    AND   A,0x7F
    24B1: 62 D0 00 MOV   REG[0xD0],0x0
    24B4: 2A 90    OR    A,[__r0]
    24B6: 62 D0 00 MOV   REG[0xD0],0x0
    24B9: 53 91    MOV   [datetime],A
(0030) 	Rtc_WriteToRtc();
    24BB: 7C 20 20 LCALL _Rtc_WriteToRtc
    24BE: 62 D0 00 MOV   REG[0xD0],0x0
    24C1: 20       POP   X
    24C2: 7F       RET   
(0031) }
(0032) 
(0033) void Time_Adj_1224hrs(BOOL h12)
(0034) {
_Time_Adj_1224hrs:
  bcd                  --> X+2
  bcd10                --> X+1
  hours                --> X+0
  h12                  --> X-4
    24C3: 10       PUSH  X
    24C4: 4F       MOV   X,SP
    24C5: 38 03    ADD   SP,0x3
(0035) 	BYTE hours, bcd10, bcd;
(0036) 
(0037) 	Time_Pause(TRUE);
    24C7: 50 01    MOV   A,0x1
    24C9: 08       PUSH  A
    24CA: 9F C6    CALL  _Time_Pause
    24CC: 38 FF    ADD   SP,0xFF
(0038) 	Rtc_ReadFromRtc();
    24CE: 7C 20 34 LCALL _Rtc_ReadFromRtc
(0039) 
(0040) 	if(datetime._02h.bits_24hrs._1224hr != h12)
    24D1: 62 D0 00 MOV   REG[0xD0],0x0
    24D4: 51 93    MOV   A,[datetime+2]
    24D6: 62 D0 00 MOV   REG[0xD0],0x0
    24D9: 67       ASR   A
    24DA: 67       ASR   A
    24DB: 67       ASR   A
    24DC: 67       ASR   A
    24DD: 67       ASR   A
    24DE: 67       ASR   A
    24DF: 21 03    AND   A,0x3
    24E1: 53 90    MOV   [__r0],A
    24E3: 26 90 01 AND   [__r0],0x1
    24E6: 51 90    MOV   A,[__r0]
    24E8: 3B FC    CMP   A,[X-4]
    24EA: A1 7F    JZ    0x266A
(0041) 	{
(0042) 		if(h12)
    24EC: 3D FC 00 CMP   [X-4],0x0
    24EF: A0 B6    JZ    0x25A6
(0043) 		{
(0044) 			// Convert from 24h to 12h
(0045) 			bcdToDec(datetime._02h.bits_24hrs.hours10, datetime._02h.bits_24hrs.hours, &hours);
    24F1: 50 07    MOV   A,0x7
    24F3: 08       PUSH  A
    24F4: 10       PUSH  X
    24F5: 62 D0 00 MOV   REG[0xD0],0x0
    24F8: 51 93    MOV   A,[datetime+2]
    24FA: 21 0F    AND   A,0xF
    24FC: 08       PUSH  A
    24FD: 51 93    MOV   A,[datetime+2]
    24FF: 62 D0 00 MOV   REG[0xD0],0x0
    2502: 67       ASR   A
    2503: 67       ASR   A
    2504: 67       ASR   A
    2505: 67       ASR   A
    2506: 21 0F    AND   A,0xF
    2508: 53 90    MOV   [__r0],A
    250A: 26 90 03 AND   [__r0],0x3
    250D: 51 90    MOV   A,[__r0]
    250F: 08       PUSH  A
    2510: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2513: 38 FC    ADD   SP,0xFC
(0046) 			if(hours >= 12)
    2515: 3D 00 0C CMP   [X+0],0xC
    2518: C0 1B    JC    0x2534
(0047) 			{
(0048) 				datetime._02h.bits_ampm.ampm = 1;
    251A: 62 D0 00 MOV   REG[0xD0],0x0
    251D: 51 93    MOV   A,[datetime+2]
    251F: 29 20    OR    A,0x20
    2521: 53 93    MOV   [datetime+2],A
(0049) 				if(hours > 12) hours -= 12;
    2523: 50 0C    MOV   A,0xC
    2525: 3B 00    CMP   A,[X+0]
    2527: D0 1D    JNC   0x2545
    2529: 62 D0 00 MOV   REG[0xD0],0x0
    252C: 52 00    MOV   A,[X+0]
    252E: 11 0C    SUB   A,0xC
    2530: 54 00    MOV   [X+0],A
(0050) 			}
    2532: 80 12    JMP   0x2545
(0051) 			else
(0052) 			{
(0053) 				datetime._02h.bits_ampm.ampm = 0;
    2534: 62 D0 00 MOV   REG[0xD0],0x0
    2537: 51 93    MOV   A,[datetime+2]
    2539: 21 DF    AND   A,0xDF
    253B: 53 93    MOV   [datetime+2],A
(0054) 				if(hours == 0) hours = 12;
    253D: 3D 00 00 CMP   [X+0],0x0
    2540: B0 04    JNZ   0x2545
    2542: 56 00 0C MOV   [X+0],0xC
(0055) 			}
(0056) 			decToBcd(&bcd10 , &bcd, hours);
    2545: 52 00    MOV   A,[X+0]
    2547: 08       PUSH  A
    2548: 62 D0 00 MOV   REG[0xD0],0x0
    254B: 5A 8F    MOV   [__r1],X
    254D: 06 8F 02 ADD   [__r1],0x2
    2550: 50 07    MOV   A,0x7
    2552: 08       PUSH  A
    2553: 51 8F    MOV   A,[__r1]
    2555: 08       PUSH  A
    2556: 5A 8F    MOV   [__r1],X
    2558: 06 8F 01 ADD   [__r1],0x1
    255B: 50 07    MOV   A,0x7
    255D: 08       PUSH  A
    255E: 51 8F    MOV   A,[__r1]
    2560: 08       PUSH  A
    2561: 7C 0E D9 LCALL _decToBcd
    2564: 38 FB    ADD   SP,0xFB
(0057) 			datetime._02h.bits_ampm.hours10 = bcd10;
    2566: 62 D0 00 MOV   REG[0xD0],0x0
    2569: 52 01    MOV   A,[X+1]
    256B: 21 01    AND   A,0x1
    256D: 64       ASL   A
    256E: 64       ASL   A
    256F: 64       ASL   A
    2570: 64       ASL   A
    2571: 53 90    MOV   [__r0],A
    2573: 26 90 10 AND   [__r0],0x10
    2576: 62 D0 00 MOV   REG[0xD0],0x0
    2579: 51 93    MOV   A,[datetime+2]
    257B: 21 EF    AND   A,0xEF
    257D: 62 D0 00 MOV   REG[0xD0],0x0
    2580: 2A 90    OR    A,[__r0]
    2582: 62 D0 00 MOV   REG[0xD0],0x0
    2585: 53 93    MOV   [datetime+2],A
(0058) 			datetime._02h.bits_ampm.hours = bcd;
    2587: 62 D0 00 MOV   REG[0xD0],0x0
    258A: 52 02    MOV   A,[X+2]
    258C: 21 0F    AND   A,0xF
    258E: 53 90    MOV   [__r0],A
    2590: 26 90 0F AND   [__r0],0xF
    2593: 62 D0 00 MOV   REG[0xD0],0x0
    2596: 51 93    MOV   A,[datetime+2]
    2598: 21 F0    AND   A,0xF0
    259A: 62 D0 00 MOV   REG[0xD0],0x0
    259D: 2A 90    OR    A,[__r0]
    259F: 62 D0 00 MOV   REG[0xD0],0x0
    25A2: 53 93    MOV   [datetime+2],A
(0059) 		}
    25A4: 80 C5    JMP   0x266A
(0060) 		else
(0061) 		{
(0062) 			// Convert from 12h to 24h
(0063) 			bcdToDec(datetime._02h.bits_ampm.hours10, datetime._02h.bits_ampm.hours, &hours);
    25A6: 50 07    MOV   A,0x7
    25A8: 08       PUSH  A
    25A9: 10       PUSH  X
    25AA: 62 D0 00 MOV   REG[0xD0],0x0
    25AD: 51 93    MOV   A,[datetime+2]
    25AF: 21 0F    AND   A,0xF
    25B1: 08       PUSH  A
    25B2: 51 93    MOV   A,[datetime+2]
    25B4: 62 D0 00 MOV   REG[0xD0],0x0
    25B7: 67       ASR   A
    25B8: 67       ASR   A
    25B9: 67       ASR   A
    25BA: 67       ASR   A
    25BB: 21 0F    AND   A,0xF
    25BD: 53 90    MOV   [__r0],A
    25BF: 26 90 01 AND   [__r0],0x1
    25C2: 51 90    MOV   A,[__r0]
    25C4: 08       PUSH  A
    25C5: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    25C8: 38 FC    ADD   SP,0xFC
(0064) 			if(datetime._02h.bits_ampm.ampm == 1 && hours != 12)
    25CA: 62 D0 00 MOV   REG[0xD0],0x0
    25CD: 51 93    MOV   A,[datetime+2]
    25CF: 62 D0 00 MOV   REG[0xD0],0x0
    25D2: 67       ASR   A
    25D3: 67       ASR   A
    25D4: 67       ASR   A
    25D5: 67       ASR   A
    25D6: 67       ASR   A
    25D7: 21 07    AND   A,0x7
    25D9: 53 90    MOV   [__r0],A
    25DB: 26 90 01 AND   [__r0],0x1
    25DE: 3C 90 01 CMP   [__r0],0x1
    25E1: B0 0B    JNZ   0x25ED
    25E3: 3D 00 0C CMP   [X+0],0xC
    25E6: A0 06    JZ    0x25ED
(0065) 			{
(0066) 				hours += 12;
    25E8: 07 00 0C ADD   [X+0],0xC
(0067) 			}
    25EB: 80 1F    JMP   0x260B
(0068) 			else if(datetime._02h.bits_ampm.ampm == 0 && hours == 12)
    25ED: 62 D0 00 MOV   REG[0xD0],0x0
    25F0: 51 93    MOV   A,[datetime+2]
    25F2: 62 D0 00 MOV   REG[0xD0],0x0
    25F5: 67       ASR   A
    25F6: 67       ASR   A
    25F7: 67       ASR   A
    25F8: 67       ASR   A
    25F9: 67       ASR   A
    25FA: 21 07    AND   A,0x7
    25FC: 53 90    MOV   [__r0],A
    25FE: 26 90 01 AND   [__r0],0x1
    2601: B0 09    JNZ   0x260B
    2603: 3D 00 0C CMP   [X+0],0xC
    2606: B0 04    JNZ   0x260B
(0069) 			{
(0070) 				hours = 0;
    2608: 56 00 00 MOV   [X+0],0x0
(0071) 			}
(0072) 			decToBcd(&bcd10 , &bcd, hours);
    260B: 52 00    MOV   A,[X+0]
    260D: 08       PUSH  A
    260E: 62 D0 00 MOV   REG[0xD0],0x0
    2611: 5A 8F    MOV   [__r1],X
    2613: 06 8F 02 ADD   [__r1],0x2
    2616: 50 07    MOV   A,0x7
    2618: 08       PUSH  A
    2619: 51 8F    MOV   A,[__r1]
    261B: 08       PUSH  A
    261C: 5A 8F    MOV   [__r1],X
    261E: 06 8F 01 ADD   [__r1],0x1
    2621: 50 07    MOV   A,0x7
    2623: 08       PUSH  A
    2624: 51 8F    MOV   A,[__r1]
    2626: 08       PUSH  A
    2627: 7C 0E D9 LCALL _decToBcd
    262A: 38 FB    ADD   SP,0xFB
(0073) 			datetime._02h.bits_24hrs.hours10 = bcd10;
    262C: 62 D0 00 MOV   REG[0xD0],0x0
    262F: 52 01    MOV   A,[X+1]
    2631: 21 03    AND   A,0x3
    2633: 64       ASL   A
    2634: 64       ASL   A
    2635: 64       ASL   A
    2636: 64       ASL   A
    2637: 53 90    MOV   [__r0],A
    2639: 26 90 30 AND   [__r0],0x30
    263C: 62 D0 00 MOV   REG[0xD0],0x0
    263F: 51 93    MOV   A,[datetime+2]
    2641: 21 CF    AND   A,0xCF
    2643: 62 D0 00 MOV   REG[0xD0],0x0
    2646: 2A 90    OR    A,[__r0]
    2648: 62 D0 00 MOV   REG[0xD0],0x0
    264B: 53 93    MOV   [datetime+2],A
(0074) 			datetime._02h.bits_24hrs.hours = bcd;
    264D: 62 D0 00 MOV   REG[0xD0],0x0
    2650: 52 02    MOV   A,[X+2]
    2652: 21 0F    AND   A,0xF
    2654: 53 90    MOV   [__r0],A
    2656: 26 90 0F AND   [__r0],0xF
    2659: 62 D0 00 MOV   REG[0xD0],0x0
    265C: 51 93    MOV   A,[datetime+2]
    265E: 21 F0    AND   A,0xF0
    2660: 62 D0 00 MOV   REG[0xD0],0x0
    2663: 2A 90    OR    A,[__r0]
    2665: 62 D0 00 MOV   REG[0xD0],0x0
    2668: 53 93    MOV   [datetime+2],A
(0075) 		}
(0076) 	}
(0077) 
(0078) 	datetime._02h.bits_24hrs._1224hr = h12;
    266A: 62 D0 00 MOV   REG[0xD0],0x0
    266D: 52 FC    MOV   A,[X-4]
    266F: 21 01    AND   A,0x1
    2671: 64       ASL   A
    2672: 64       ASL   A
    2673: 64       ASL   A
    2674: 64       ASL   A
    2675: 64       ASL   A
    2676: 64       ASL   A
    2677: 53 90    MOV   [__r0],A
    2679: 26 90 40 AND   [__r0],0x40
    267C: 62 D0 00 MOV   REG[0xD0],0x0
    267F: 51 93    MOV   A,[datetime+2]
    2681: 21 BF    AND   A,0xBF
    2683: 62 D0 00 MOV   REG[0xD0],0x0
    2686: 2A 90    OR    A,[__r0]
    2688: 62 D0 00 MOV   REG[0xD0],0x0
    268B: 53 93    MOV   [datetime+2],A
(0079) 
(0080) 	Rtc_WriteToRtc();
    268D: 7C 20 20 LCALL _Rtc_WriteToRtc
    2690: 62 D0 00 MOV   REG[0xD0],0x0
(0081) 	Time_Pause(FALSE);
    2693: 50 00    MOV   A,0x0
    2695: 08       PUSH  A
    2696: 9D FA    CALL  _Time_Pause
    2698: 38 FF    ADD   SP,0xFF
    269A: 38 FD    ADD   SP,0xFD
    269C: 20       POP   X
    269D: 7F       RET   
(0082) }
(0083) 
(0084) void Time_Adj_S(BOOL direction)
(0085) {
_Time_Adj_S:
  bcd                  --> X+2
  bcd10                --> X+1
  seconds              --> X+0
  direction            --> X-4
    269E: 10       PUSH  X
    269F: 4F       MOV   X,SP
    26A0: 38 03    ADD   SP,0x3
(0086) 	BYTE seconds, bcd10, bcd;
(0087) 	
(0088) 	Time_Pause(TRUE);
    26A2: 50 01    MOV   A,0x1
    26A4: 08       PUSH  A
    26A5: 9D EB    CALL  _Time_Pause
(0089) 	Rtc_ReadFromRtc();
    26A7: 7C 20 34 LCALL _Rtc_ReadFromRtc
(0090) 
(0091) 	bcdToDec(datetime._00h.bits.seconds10, datetime._00h.bits.seconds, &seconds);
    26AA: 50 07    MOV   A,0x7
    26AC: 08       PUSH  A
    26AD: 10       PUSH  X
    26AE: 62 D0 00 MOV   REG[0xD0],0x0
    26B1: 51 91    MOV   A,[datetime]
    26B3: 21 0F    AND   A,0xF
    26B5: 08       PUSH  A
    26B6: 51 91    MOV   A,[datetime]
    26B8: 62 D0 00 MOV   REG[0xD0],0x0
    26BB: 67       ASR   A
    26BC: 67       ASR   A
    26BD: 67       ASR   A
    26BE: 67       ASR   A
    26BF: 21 0F    AND   A,0xF
    26C1: 53 90    MOV   [__r0],A
    26C3: 26 90 07 AND   [__r0],0x7
    26C6: 51 90    MOV   A,[__r0]
    26C8: 08       PUSH  A
    26C9: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    26CC: 38 FB    ADD   SP,0xFB
(0092) 
(0093) 	if(direction == TIME_UP)
    26CE: 3D FC 01 CMP   [X-4],0x1
    26D1: B0 0F    JNZ   0x26E1
(0094) 	{
(0095) 		if(seconds < 59) seconds++;
    26D3: 3D 00 3B CMP   [X+0],0x3B
    26D6: D0 05    JNC   0x26DC
    26D8: 77 00    INC   [X+0]
    26DA: 80 13    JMP   0x26EE
(0096) 		else seconds = 0;
    26DC: 56 00 00 MOV   [X+0],0x0
(0097) 	}
    26DF: 80 0E    JMP   0x26EE
(0098) 	else
(0099) 	{
(0100) 		if(seconds > 0) seconds--;
    26E1: 50 00    MOV   A,0x0
    26E3: 3B 00    CMP   A,[X+0]
    26E5: D0 05    JNC   0x26EB
    26E7: 7B 00    DEC   [X+0]
    26E9: 80 04    JMP   0x26EE
(0101) 		else seconds = 59;
    26EB: 56 00 3B MOV   [X+0],0x3B
(0102) 	}
(0103) 
(0104) 	decToBcd(&bcd10, &bcd, seconds);
    26EE: 52 00    MOV   A,[X+0]
    26F0: 08       PUSH  A
    26F1: 62 D0 00 MOV   REG[0xD0],0x0
    26F4: 5A 8F    MOV   [__r1],X
    26F6: 06 8F 02 ADD   [__r1],0x2
    26F9: 50 07    MOV   A,0x7
    26FB: 08       PUSH  A
    26FC: 51 8F    MOV   A,[__r1]
    26FE: 08       PUSH  A
    26FF: 5A 8F    MOV   [__r1],X
    2701: 06 8F 01 ADD   [__r1],0x1
    2704: 50 07    MOV   A,0x7
    2706: 08       PUSH  A
    2707: 51 8F    MOV   A,[__r1]
    2709: 08       PUSH  A
    270A: 7C 0E D9 LCALL _decToBcd
(0105) 
(0106) 	datetime._00h.bits.seconds = bcd;
    270D: 62 D0 00 MOV   REG[0xD0],0x0
    2710: 52 02    MOV   A,[X+2]
    2712: 21 0F    AND   A,0xF
    2714: 53 90    MOV   [__r0],A
    2716: 26 90 0F AND   [__r0],0xF
    2719: 62 D0 00 MOV   REG[0xD0],0x0
    271C: 51 91    MOV   A,[datetime]
    271E: 21 F0    AND   A,0xF0
    2720: 62 D0 00 MOV   REG[0xD0],0x0
    2723: 2A 90    OR    A,[__r0]
    2725: 62 D0 00 MOV   REG[0xD0],0x0
    2728: 53 91    MOV   [datetime],A
(0107) 	datetime._00h.bits.seconds10 = bcd10;
    272A: 62 D0 00 MOV   REG[0xD0],0x0
    272D: 52 01    MOV   A,[X+1]
    272F: 21 07    AND   A,0x7
    2731: 64       ASL   A
    2732: 64       ASL   A
    2733: 64       ASL   A
    2734: 64       ASL   A
    2735: 53 90    MOV   [__r0],A
    2737: 26 90 70 AND   [__r0],0x70
    273A: 62 D0 00 MOV   REG[0xD0],0x0
    273D: 51 91    MOV   A,[datetime]
    273F: 21 8F    AND   A,0x8F
    2741: 62 D0 00 MOV   REG[0xD0],0x0
    2744: 2A 90    OR    A,[__r0]
    2746: 62 D0 00 MOV   REG[0xD0],0x0
    2749: 53 91    MOV   [datetime],A
(0108) 
(0109) 	Rtc_WriteToRtc();
    274B: 7C 20 20 LCALL _Rtc_WriteToRtc
    274E: 62 D0 00 MOV   REG[0xD0],0x0
(0110) 	Time_Pause(FALSE);
    2751: 50 00    MOV   A,0x0
    2753: 08       PUSH  A
    2754: 9D 3C    CALL  _Time_Pause
    2756: 38 FA    ADD   SP,0xFA
    2758: 38 FD    ADD   SP,0xFD
    275A: 20       POP   X
    275B: 7F       RET   
(0111) }
(0112) 
(0113) void Time_Adj_Mi(BOOL direction)
(0114) {
_Time_Adj_Mi:
  bcd                  --> X+2
  bcd10                --> X+1
  minutes              --> X+0
  direction            --> X-4
    275C: 10       PUSH  X
    275D: 4F       MOV   X,SP
    275E: 38 03    ADD   SP,0x3
(0115) 	BYTE minutes, bcd10, bcd;
(0116) 
(0117) 	Time_Pause(TRUE);
    2760: 50 01    MOV   A,0x1
    2762: 08       PUSH  A
    2763: 9D 2D    CALL  _Time_Pause
(0118) 	Rtc_ReadFromRtc();
    2765: 7C 20 34 LCALL _Rtc_ReadFromRtc
(0119) 
(0120) 	bcdToDec(datetime._01h.bits.minutes10, datetime._01h.bits.minutes, &minutes);
    2768: 50 07    MOV   A,0x7
    276A: 08       PUSH  A
    276B: 10       PUSH  X
    276C: 62 D0 00 MOV   REG[0xD0],0x0
    276F: 51 92    MOV   A,[datetime+1]
    2771: 21 0F    AND   A,0xF
    2773: 08       PUSH  A
    2774: 51 92    MOV   A,[datetime+1]
    2776: 62 D0 00 MOV   REG[0xD0],0x0
    2779: 67       ASR   A
    277A: 67       ASR   A
    277B: 67       ASR   A
    277C: 67       ASR   A
    277D: 21 0F    AND   A,0xF
    277F: 53 90    MOV   [__r0],A
    2781: 26 90 07 AND   [__r0],0x7
    2784: 51 90    MOV   A,[__r0]
    2786: 08       PUSH  A
    2787: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    278A: 38 FB    ADD   SP,0xFB
(0121) 
(0122) 	if(direction == TIME_UP)
    278C: 3D FC 01 CMP   [X-4],0x1
    278F: B0 0F    JNZ   0x279F
(0123) 	{
(0124) 		if(minutes < 59) minutes++;
    2791: 3D 00 3B CMP   [X+0],0x3B
    2794: D0 05    JNC   0x279A
    2796: 77 00    INC   [X+0]
    2798: 80 13    JMP   0x27AC
(0125) 		else minutes = 0;
    279A: 56 00 00 MOV   [X+0],0x0
(0126) 	}
    279D: 80 0E    JMP   0x27AC
(0127) 	else
(0128) 	{
(0129) 		if(minutes > 0) minutes--;
    279F: 50 00    MOV   A,0x0
    27A1: 3B 00    CMP   A,[X+0]
    27A3: D0 05    JNC   0x27A9
    27A5: 7B 00    DEC   [X+0]
    27A7: 80 04    JMP   0x27AC
(0130) 		else minutes = 59;
    27A9: 56 00 3B MOV   [X+0],0x3B
(0131) 	}
(0132) 
(0133) 	decToBcd(&bcd10, &bcd, minutes);
    27AC: 52 00    MOV   A,[X+0]
    27AE: 08       PUSH  A
    27AF: 62 D0 00 MOV   REG[0xD0],0x0
    27B2: 5A 8F    MOV   [__r1],X
    27B4: 06 8F 02 ADD   [__r1],0x2
    27B7: 50 07    MOV   A,0x7
    27B9: 08       PUSH  A
    27BA: 51 8F    MOV   A,[__r1]
    27BC: 08       PUSH  A
    27BD: 5A 8F    MOV   [__r1],X
    27BF: 06 8F 01 ADD   [__r1],0x1
    27C2: 50 07    MOV   A,0x7
    27C4: 08       PUSH  A
    27C5: 51 8F    MOV   A,[__r1]
    27C7: 08       PUSH  A
    27C8: 7C 0E D9 LCALL _decToBcd
(0134) 
(0135) 	datetime._01h.bits.minutes = bcd;
    27CB: 62 D0 00 MOV   REG[0xD0],0x0
    27CE: 52 02    MOV   A,[X+2]
    27D0: 21 0F    AND   A,0xF
    27D2: 53 90    MOV   [__r0],A
    27D4: 26 90 0F AND   [__r0],0xF
    27D7: 62 D0 00 MOV   REG[0xD0],0x0
    27DA: 51 92    MOV   A,[datetime+1]
    27DC: 21 F0    AND   A,0xF0
    27DE: 62 D0 00 MOV   REG[0xD0],0x0
    27E1: 2A 90    OR    A,[__r0]
    27E3: 62 D0 00 MOV   REG[0xD0],0x0
    27E6: 53 92    MOV   [datetime+1],A
(0136) 	datetime._01h.bits.minutes10 = bcd10;
    27E8: 62 D0 00 MOV   REG[0xD0],0x0
    27EB: 52 01    MOV   A,[X+1]
    27ED: 21 07    AND   A,0x7
    27EF: 64       ASL   A
    27F0: 64       ASL   A
    27F1: 64       ASL   A
    27F2: 64       ASL   A
    27F3: 53 90    MOV   [__r0],A
    27F5: 26 90 70 AND   [__r0],0x70
    27F8: 62 D0 00 MOV   REG[0xD0],0x0
    27FB: 51 92    MOV   A,[datetime+1]
    27FD: 21 8F    AND   A,0x8F
    27FF: 62 D0 00 MOV   REG[0xD0],0x0
    2802: 2A 90    OR    A,[__r0]
    2804: 62 D0 00 MOV   REG[0xD0],0x0
    2807: 53 92    MOV   [datetime+1],A
(0137) 
(0138) 	Rtc_WriteToRtc();
    2809: 7C 20 20 LCALL _Rtc_WriteToRtc
    280C: 62 D0 00 MOV   REG[0xD0],0x0
(0139) 	Time_Pause(FALSE);
    280F: 50 00    MOV   A,0x0
    2811: 08       PUSH  A
    2812: 9C 7E    CALL  _Time_Pause
    2814: 38 FA    ADD   SP,0xFA
    2816: 38 FD    ADD   SP,0xFD
    2818: 20       POP   X
    2819: 7F       RET   
(0140) }
(0141) 
(0142) void Time_Adj_H(BOOL direction)
(0143) {
_Time_Adj_H:
  maxVal               --> X+5
  minVal               --> X+4
  bcd                  --> X+3
  bcd10                --> X+2
  h12                  --> X+1
  hours                --> X+0
  direction            --> X-4
    281A: 10       PUSH  X
    281B: 4F       MOV   X,SP
    281C: 38 08    ADD   SP,0x8
(0144) 	BYTE hours, bcd10, bcd, minVal, maxVal;
(0145) 	BOOL h12;
(0146) 
(0147) 	Time_Pause(TRUE);
    281E: 50 01    MOV   A,0x1
    2820: 08       PUSH  A
    2821: 9C 6F    CALL  _Time_Pause
    2823: 38 FF    ADD   SP,0xFF
(0148) 	Rtc_ReadFromRtc();
    2825: 7C 20 34 LCALL _Rtc_ReadFromRtc
(0149) 
(0150) 	h12 = datetime._02h.bits_24hrs._1224hr;
    2828: 62 D0 00 MOV   REG[0xD0],0x0
    282B: 51 93    MOV   A,[datetime+2]
    282D: 62 D0 00 MOV   REG[0xD0],0x0
    2830: 67       ASR   A
    2831: 67       ASR   A
    2832: 67       ASR   A
    2833: 67       ASR   A
    2834: 67       ASR   A
    2835: 67       ASR   A
    2836: 21 03    AND   A,0x3
    2838: 53 90    MOV   [__r0],A
    283A: 26 90 01 AND   [__r0],0x1
    283D: 51 90    MOV   A,[__r0]
    283F: 54 01    MOV   [X+1],A
(0151) 
(0152) 	// Check if ampm or 24h
(0153) 	if(h12)
    2841: 3D 01 00 CMP   [X+1],0x0
    2844: A0 2D    JZ    0x2872
(0154) 	{
(0155) 		//12 hrs
(0156) 		bcdToDec(datetime._02h.bits_ampm.hours10, datetime._02h.bits_ampm.hours, &hours);
    2846: 50 07    MOV   A,0x7
    2848: 08       PUSH  A
    2849: 10       PUSH  X
    284A: 62 D0 00 MOV   REG[0xD0],0x0
    284D: 51 93    MOV   A,[datetime+2]
    284F: 21 0F    AND   A,0xF
    2851: 08       PUSH  A
    2852: 51 93    MOV   A,[datetime+2]
    2854: 62 D0 00 MOV   REG[0xD0],0x0
    2857: 67       ASR   A
    2858: 67       ASR   A
    2859: 67       ASR   A
    285A: 67       ASR   A
    285B: 21 0F    AND   A,0xF
    285D: 53 90    MOV   [__r0],A
    285F: 26 90 01 AND   [__r0],0x1
    2862: 51 90    MOV   A,[__r0]
    2864: 08       PUSH  A
    2865: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2868: 38 FC    ADD   SP,0xFC
(0157) 		maxVal = 12;
    286A: 56 05 0C MOV   [X+5],0xC
(0158) 		minVal = 1;
    286D: 56 04 01 MOV   [X+4],0x1
(0159) 	}
    2870: 80 2B    JMP   0x289C
(0160) 	else
(0161) 	{
(0162) 		//24 hrs
(0163) 		bcdToDec(datetime._02h.bits_24hrs.hours10, datetime._02h.bits_24hrs.hours, &hours);
    2872: 50 07    MOV   A,0x7
    2874: 08       PUSH  A
    2875: 10       PUSH  X
    2876: 62 D0 00 MOV   REG[0xD0],0x0
    2879: 51 93    MOV   A,[datetime+2]
    287B: 21 0F    AND   A,0xF
    287D: 08       PUSH  A
    287E: 51 93    MOV   A,[datetime+2]
    2880: 62 D0 00 MOV   REG[0xD0],0x0
    2883: 67       ASR   A
    2884: 67       ASR   A
    2885: 67       ASR   A
    2886: 67       ASR   A
    2887: 21 0F    AND   A,0xF
    2889: 53 90    MOV   [__r0],A
    288B: 26 90 03 AND   [__r0],0x3
    288E: 51 90    MOV   A,[__r0]
    2890: 08       PUSH  A
    2891: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2894: 38 FC    ADD   SP,0xFC
(0164) 		maxVal = 23;
    2896: 56 05 17 MOV   [X+5],0x17
(0165) 		minVal = 0;
    2899: 56 04 00 MOV   [X+4],0x0
(0166) 	}
(0167) 
(0168) 
(0169) 	if(direction == TIME_UP)
    289C: 3D FC 01 CMP   [X-4],0x1
    289F: B0 61    JNZ   0x2901
(0170) 	{
(0171) 		if(hours < maxVal) hours++;
    28A1: 52 00    MOV   A,[X+0]
    28A3: 3B 05    CMP   A,[X+5]
    28A5: D0 05    JNC   0x28AB
    28A7: 77 00    INC   [X+0]
    28A9: 80 B5    JMP   0x295F
(0172) 		else 
(0173) 		{
(0174) 			hours = minVal;
    28AB: 52 04    MOV   A,[X+4]
    28AD: 54 00    MOV   [X+0],A
(0175) 			if(h12) datetime._02h.bits_ampm.ampm = !datetime._02h.bits_ampm.ampm;
    28AF: 3D 01 00 CMP   [X+1],0x0
    28B2: A0 AC    JZ    0x295F
    28B4: 62 D0 00 MOV   REG[0xD0],0x0
    28B7: 51 93    MOV   A,[datetime+2]
    28B9: 62 D0 00 MOV   REG[0xD0],0x0
    28BC: 67       ASR   A
    28BD: 67       ASR   A
    28BE: 67       ASR   A
    28BF: 67       ASR   A
    28C0: 67       ASR   A
    28C1: 21 07    AND   A,0x7
    28C3: 53 90    MOV   [__r0],A
    28C5: 26 90 01 AND   [__r0],0x1
    28C8: B0 09    JNZ   0x28D2
    28CA: 56 07 01 MOV   [X+7],0x1
    28CD: 56 06 00 MOV   [X+6],0x0
    28D0: 80 07    JMP   0x28D8
    28D2: 56 07 00 MOV   [X+7],0x0
    28D5: 56 06 00 MOV   [X+6],0x0
    28D8: 62 D0 00 MOV   REG[0xD0],0x0
    28DB: 52 07    MOV   A,[X+7]
    28DD: 53 90    MOV   [__r0],A
    28DF: 26 90 01 AND   [__r0],0x1
    28E2: 51 90    MOV   A,[__r0]
    28E4: 64       ASL   A
    28E5: 64       ASL   A
    28E6: 64       ASL   A
    28E7: 64       ASL   A
    28E8: 64       ASL   A
    28E9: 53 90    MOV   [__r0],A
    28EB: 26 90 20 AND   [__r0],0x20
    28EE: 62 D0 00 MOV   REG[0xD0],0x0
    28F1: 51 93    MOV   A,[datetime+2]
    28F3: 21 DF    AND   A,0xDF
    28F5: 62 D0 00 MOV   REG[0xD0],0x0
    28F8: 2A 90    OR    A,[__r0]
    28FA: 62 D0 00 MOV   REG[0xD0],0x0
    28FD: 53 93    MOV   [datetime+2],A
(0176) 		}
(0177) 	}
    28FF: 80 5F    JMP   0x295F
(0178) 	else
(0179) 	{
(0180) 		if(hours > minVal) hours--;
    2901: 52 04    MOV   A,[X+4]
    2903: 3B 00    CMP   A,[X+0]
    2905: D0 05    JNC   0x290B
    2907: 7B 00    DEC   [X+0]
    2909: 80 55    JMP   0x295F
(0181) 		else 
(0182) 		{
(0183) 			hours = maxVal;
    290B: 52 05    MOV   A,[X+5]
    290D: 54 00    MOV   [X+0],A
(0184) 			if(h12) datetime._02h.bits_ampm.ampm = !datetime._02h.bits_ampm.ampm;
    290F: 3D 01 00 CMP   [X+1],0x0
    2912: A0 4C    JZ    0x295F
    2914: 62 D0 00 MOV   REG[0xD0],0x0
    2917: 51 93    MOV   A,[datetime+2]
    2919: 62 D0 00 MOV   REG[0xD0],0x0
    291C: 67       ASR   A
    291D: 67       ASR   A
    291E: 67       ASR   A
    291F: 67       ASR   A
    2920: 67       ASR   A
    2921: 21 07    AND   A,0x7
    2923: 53 90    MOV   [__r0],A
    2925: 26 90 01 AND   [__r0],0x1
    2928: B0 09    JNZ   0x2932
    292A: 56 07 01 MOV   [X+7],0x1
    292D: 56 06 00 MOV   [X+6],0x0
    2930: 80 07    JMP   0x2938
    2932: 56 07 00 MOV   [X+7],0x0
    2935: 56 06 00 MOV   [X+6],0x0
    2938: 62 D0 00 MOV   REG[0xD0],0x0
    293B: 52 07    MOV   A,[X+7]
    293D: 53 90    MOV   [__r0],A
    293F: 26 90 01 AND   [__r0],0x1
    2942: 51 90    MOV   A,[__r0]
    2944: 64       ASL   A
    2945: 64       ASL   A
    2946: 64       ASL   A
    2947: 64       ASL   A
    2948: 64       ASL   A
    2949: 53 90    MOV   [__r0],A
    294B: 26 90 20 AND   [__r0],0x20
    294E: 62 D0 00 MOV   REG[0xD0],0x0
    2951: 51 93    MOV   A,[datetime+2]
    2953: 21 DF    AND   A,0xDF
    2955: 62 D0 00 MOV   REG[0xD0],0x0
    2958: 2A 90    OR    A,[__r0]
    295A: 62 D0 00 MOV   REG[0xD0],0x0
    295D: 53 93    MOV   [datetime+2],A
(0185) 		}
(0186) 	}
(0187) 
(0188) 	decToBcd(&bcd10, &bcd, hours);
    295F: 52 00    MOV   A,[X+0]
    2961: 08       PUSH  A
    2962: 62 D0 00 MOV   REG[0xD0],0x0
    2965: 5A 8F    MOV   [__r1],X
    2967: 06 8F 03 ADD   [__r1],0x3
    296A: 50 07    MOV   A,0x7
    296C: 08       PUSH  A
    296D: 51 8F    MOV   A,[__r1]
    296F: 08       PUSH  A
    2970: 5A 8F    MOV   [__r1],X
    2972: 06 8F 02 ADD   [__r1],0x2
    2975: 50 07    MOV   A,0x7
    2977: 08       PUSH  A
    2978: 51 8F    MOV   A,[__r1]
    297A: 08       PUSH  A
    297B: 7C 0E D9 LCALL _decToBcd
    297E: 38 FB    ADD   SP,0xFB
(0189) 
(0190) 	if(h12)
    2980: 3D 01 00 CMP   [X+1],0x0
    2983: A0 41    JZ    0x29C5
(0191) 	{
(0192) 		datetime._02h.bits_ampm.hours = bcd;
    2985: 62 D0 00 MOV   REG[0xD0],0x0
    2988: 52 03    MOV   A,[X+3]
    298A: 21 0F    AND   A,0xF
    298C: 53 90    MOV   [__r0],A
    298E: 26 90 0F AND   [__r0],0xF
    2991: 62 D0 00 MOV   REG[0xD0],0x0
    2994: 51 93    MOV   A,[datetime+2]
    2996: 21 F0    AND   A,0xF0
    2998: 62 D0 00 MOV   REG[0xD0],0x0
    299B: 2A 90    OR    A,[__r0]
    299D: 62 D0 00 MOV   REG[0xD0],0x0
    29A0: 53 93    MOV   [datetime+2],A
(0193) 		datetime._02h.bits_ampm.hours10 = bcd10;
    29A2: 62 D0 00 MOV   REG[0xD0],0x0
    29A5: 52 02    MOV   A,[X+2]
    29A7: 21 01    AND   A,0x1
    29A9: 64       ASL   A
    29AA: 64       ASL   A
    29AB: 64       ASL   A
    29AC: 64       ASL   A
    29AD: 53 90    MOV   [__r0],A
    29AF: 26 90 10 AND   [__r0],0x10
    29B2: 62 D0 00 MOV   REG[0xD0],0x0
    29B5: 51 93    MOV   A,[datetime+2]
    29B7: 21 EF    AND   A,0xEF
    29B9: 62 D0 00 MOV   REG[0xD0],0x0
    29BC: 2A 90    OR    A,[__r0]
    29BE: 62 D0 00 MOV   REG[0xD0],0x0
    29C1: 53 93    MOV   [datetime+2],A
(0194) 	}
    29C3: 80 3F    JMP   0x2A03
(0195) 	else
(0196) 	{
(0197) 		datetime._02h.bits_24hrs.hours = bcd;
    29C5: 62 D0 00 MOV   REG[0xD0],0x0
    29C8: 52 03    MOV   A,[X+3]
    29CA: 21 0F    AND   A,0xF
    29CC: 53 90    MOV   [__r0],A
    29CE: 26 90 0F AND   [__r0],0xF
    29D1: 62 D0 00 MOV   REG[0xD0],0x0
    29D4: 51 93    MOV   A,[datetime+2]
    29D6: 21 F0    AND   A,0xF0
    29D8: 62 D0 00 MOV   REG[0xD0],0x0
    29DB: 2A 90    OR    A,[__r0]
    29DD: 62 D0 00 MOV   REG[0xD0],0x0
    29E0: 53 93    MOV   [datetime+2],A
(0198) 		datetime._02h.bits_24hrs.hours10 = bcd10;
    29E2: 62 D0 00 MOV   REG[0xD0],0x0
    29E5: 52 02    MOV   A,[X+2]
    29E7: 21 03    AND   A,0x3
    29E9: 64       ASL   A
    29EA: 64       ASL   A
    29EB: 64       ASL   A
    29EC: 64       ASL   A
    29ED: 53 90    MOV   [__r0],A
    29EF: 26 90 30 AND   [__r0],0x30
    29F2: 62 D0 00 MOV   REG[0xD0],0x0
    29F5: 51 93    MOV   A,[datetime+2]
    29F7: 21 CF    AND   A,0xCF
    29F9: 62 D0 00 MOV   REG[0xD0],0x0
    29FC: 2A 90    OR    A,[__r0]
    29FE: 62 D0 00 MOV   REG[0xD0],0x0
    2A01: 53 93    MOV   [datetime+2],A
(0199) 	}
(0200) 	
(0201) 	Rtc_WriteToRtc();
    2A03: 7C 20 20 LCALL _Rtc_WriteToRtc
    2A06: 62 D0 00 MOV   REG[0xD0],0x0
(0202) 	Time_Pause(FALSE);
    2A09: 50 00    MOV   A,0x0
    2A0B: 08       PUSH  A
    2A0C: 9A 84    CALL  _Time_Pause
    2A0E: 38 FF    ADD   SP,0xFF
    2A10: 38 F8    ADD   SP,0xF8
    2A12: 20       POP   X
    2A13: 7F       RET   
(0203) }
(0204) 
(0205) void Time_Adj_D(BOOL direction)
(0206) {
_Time_Adj_D:
  year                 --> X+4
  month                --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  date                 --> X+0
  direction            --> X-4
    2A14: 10       PUSH  X
    2A15: 4F       MOV   X,SP
    2A16: 38 05    ADD   SP,0x5
(0207) 	BYTE date, month, year, bcd10, bcd;
(0208) 
(0209) 	Time_Pause(TRUE);
    2A18: 50 01    MOV   A,0x1
    2A1A: 08       PUSH  A
    2A1B: 9A 75    CALL  _Time_Pause
(0210) 	Rtc_ReadFromRtc();
    2A1D: 7C 20 34 LCALL _Rtc_ReadFromRtc
(0211) 
(0212) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    2A20: 50 07    MOV   A,0x7
    2A22: 08       PUSH  A
    2A23: 10       PUSH  X
    2A24: 62 D0 00 MOV   REG[0xD0],0x0
    2A27: 51 95    MOV   A,[datetime+4]
    2A29: 21 0F    AND   A,0xF
    2A2B: 08       PUSH  A
    2A2C: 51 95    MOV   A,[datetime+4]
    2A2E: 62 D0 00 MOV   REG[0xD0],0x0
    2A31: 67       ASR   A
    2A32: 67       ASR   A
    2A33: 67       ASR   A
    2A34: 67       ASR   A
    2A35: 21 0F    AND   A,0xF
    2A37: 53 90    MOV   [__r0],A
    2A39: 26 90 03 AND   [__r0],0x3
    2A3C: 51 90    MOV   A,[__r0]
    2A3E: 08       PUSH  A
    2A3F: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2A42: 38 FB    ADD   SP,0xFB
(0213) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    2A44: 62 D0 00 MOV   REG[0xD0],0x0
    2A47: 5A 8F    MOV   [__r1],X
    2A49: 06 8F 03 ADD   [__r1],0x3
    2A4C: 50 07    MOV   A,0x7
    2A4E: 08       PUSH  A
    2A4F: 51 8F    MOV   A,[__r1]
    2A51: 08       PUSH  A
    2A52: 62 D0 00 MOV   REG[0xD0],0x0
    2A55: 51 96    MOV   A,[datetime+5]
    2A57: 21 0F    AND   A,0xF
    2A59: 08       PUSH  A
    2A5A: 51 96    MOV   A,[datetime+5]
    2A5C: 62 D0 00 MOV   REG[0xD0],0x0
    2A5F: 67       ASR   A
    2A60: 67       ASR   A
    2A61: 67       ASR   A
    2A62: 67       ASR   A
    2A63: 21 0F    AND   A,0xF
    2A65: 53 90    MOV   [__r0],A
    2A67: 26 90 01 AND   [__r0],0x1
    2A6A: 51 90    MOV   A,[__r0]
    2A6C: 08       PUSH  A
    2A6D: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
(0214) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    2A70: 62 D0 00 MOV   REG[0xD0],0x0
    2A73: 5A 8F    MOV   [__r1],X
    2A75: 06 8F 04 ADD   [__r1],0x4
    2A78: 50 07    MOV   A,0x7
    2A7A: 08       PUSH  A
    2A7B: 51 8F    MOV   A,[__r1]
    2A7D: 08       PUSH  A
    2A7E: 62 D0 00 MOV   REG[0xD0],0x0
    2A81: 51 97    MOV   A,[datetime+6]
    2A83: 21 0F    AND   A,0xF
    2A85: 08       PUSH  A
    2A86: 51 97    MOV   A,[datetime+6]
    2A88: 62 D0 00 MOV   REG[0xD0],0x0
    2A8B: 67       ASR   A
    2A8C: 67       ASR   A
    2A8D: 67       ASR   A
    2A8E: 67       ASR   A
    2A8F: 21 0F    AND   A,0xF
    2A91: 53 90    MOV   [__r0],A
    2A93: 26 90 0F AND   [__r0],0xF
    2A96: 51 90    MOV   A,[__r0]
    2A98: 08       PUSH  A
    2A99: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2A9C: 38 F8    ADD   SP,0xF8
(0215) 
(0216) 	bcd10 = datetime._04h.bits.date10;
    2A9E: 62 D0 00 MOV   REG[0xD0],0x0
    2AA1: 51 95    MOV   A,[datetime+4]
    2AA3: 62 D0 00 MOV   REG[0xD0],0x0
    2AA6: 67       ASR   A
    2AA7: 67       ASR   A
    2AA8: 67       ASR   A
    2AA9: 67       ASR   A
    2AAA: 21 0F    AND   A,0xF
    2AAC: 53 90    MOV   [__r0],A
    2AAE: 26 90 03 AND   [__r0],0x3
    2AB1: 51 90    MOV   A,[__r0]
    2AB3: 54 01    MOV   [X+1],A
(0217) 	bcd = datetime._04h.bits.date;
    2AB5: 62 D0 00 MOV   REG[0xD0],0x0
    2AB8: 51 95    MOV   A,[datetime+4]
    2ABA: 21 0F    AND   A,0xF
    2ABC: 62 D0 00 MOV   REG[0xD0],0x0
    2ABF: 54 02    MOV   [X+2],A
(0218) 
(0219) 	if(direction == TIME_UP)
    2AC1: 3D FC 01 CMP   [X-4],0x1
    2AC4: B0 38    JNZ   0x2AFD
(0220) 	{
(0221) 		date++;
    2AC6: 77 00    INC   [X+0]
(0222) 		if(isValidDate(date, month, year))
    2AC8: 52 04    MOV   A,[X+4]
    2ACA: 08       PUSH  A
    2ACB: 52 03    MOV   A,[X+3]
    2ACD: 08       PUSH  A
    2ACE: 52 00    MOV   A,[X+0]
    2AD0: 08       PUSH  A
    2AD1: 7C 13 62 LCALL _isValidDate
    2AD4: 38 FD    ADD   SP,0xFD
    2AD6: 62 D0 00 MOV   REG[0xD0],0x0
    2AD9: 39 00    CMP   A,0x0
    2ADB: A0 56    JZ    0x2B32
(0223) 		{
(0224) 			decToBcd(&bcd10, &bcd, date);
    2ADD: 52 00    MOV   A,[X+0]
    2ADF: 08       PUSH  A
    2AE0: 5A 8F    MOV   [__r1],X
    2AE2: 06 8F 02 ADD   [__r1],0x2
    2AE5: 50 07    MOV   A,0x7
    2AE7: 08       PUSH  A
    2AE8: 51 8F    MOV   A,[__r1]
    2AEA: 08       PUSH  A
    2AEB: 5A 8F    MOV   [__r1],X
    2AED: 06 8F 01 ADD   [__r1],0x1
    2AF0: 50 07    MOV   A,0x7
    2AF2: 08       PUSH  A
    2AF3: 51 8F    MOV   A,[__r1]
    2AF5: 08       PUSH  A
    2AF6: 7C 0E D9 LCALL _decToBcd
    2AF9: 38 FB    ADD   SP,0xFB
(0225) 		}
(0226) 	}
    2AFB: 80 36    JMP   0x2B32
(0227) 	else
(0228) 	{
(0229) 		date--;
    2AFD: 7B 00    DEC   [X+0]
(0230) 		if(isValidDate(date, month, year))
    2AFF: 52 04    MOV   A,[X+4]
    2B01: 08       PUSH  A
    2B02: 52 03    MOV   A,[X+3]
    2B04: 08       PUSH  A
    2B05: 52 00    MOV   A,[X+0]
    2B07: 08       PUSH  A
    2B08: 7C 13 62 LCALL _isValidDate
    2B0B: 38 FD    ADD   SP,0xFD
    2B0D: 62 D0 00 MOV   REG[0xD0],0x0
    2B10: 39 00    CMP   A,0x0
    2B12: A0 1F    JZ    0x2B32
(0231) 		{
(0232) 			decToBcd(&bcd10, &bcd, date);
    2B14: 52 00    MOV   A,[X+0]
    2B16: 08       PUSH  A
    2B17: 5A 8F    MOV   [__r1],X
    2B19: 06 8F 02 ADD   [__r1],0x2
    2B1C: 50 07    MOV   A,0x7
    2B1E: 08       PUSH  A
    2B1F: 51 8F    MOV   A,[__r1]
    2B21: 08       PUSH  A
    2B22: 5A 8F    MOV   [__r1],X
    2B24: 06 8F 01 ADD   [__r1],0x1
    2B27: 50 07    MOV   A,0x7
    2B29: 08       PUSH  A
    2B2A: 51 8F    MOV   A,[__r1]
    2B2C: 08       PUSH  A
    2B2D: 7C 0E D9 LCALL _decToBcd
    2B30: 38 FB    ADD   SP,0xFB
(0233) 		}
(0234) 	}
(0235) 
(0236) 	datetime._04h.bits.date10 = bcd10;
    2B32: 62 D0 00 MOV   REG[0xD0],0x0
    2B35: 52 01    MOV   A,[X+1]
    2B37: 21 03    AND   A,0x3
    2B39: 64       ASL   A
    2B3A: 64       ASL   A
    2B3B: 64       ASL   A
    2B3C: 64       ASL   A
    2B3D: 53 90    MOV   [__r0],A
    2B3F: 26 90 30 AND   [__r0],0x30
    2B42: 62 D0 00 MOV   REG[0xD0],0x0
    2B45: 51 95    MOV   A,[datetime+4]
    2B47: 21 CF    AND   A,0xCF
    2B49: 62 D0 00 MOV   REG[0xD0],0x0
    2B4C: 2A 90    OR    A,[__r0]
    2B4E: 62 D0 00 MOV   REG[0xD0],0x0
    2B51: 53 95    MOV   [datetime+4],A
(0237) 	datetime._04h.bits.date = bcd;
    2B53: 62 D0 00 MOV   REG[0xD0],0x0
    2B56: 52 02    MOV   A,[X+2]
    2B58: 21 0F    AND   A,0xF
    2B5A: 53 90    MOV   [__r0],A
    2B5C: 26 90 0F AND   [__r0],0xF
    2B5F: 62 D0 00 MOV   REG[0xD0],0x0
    2B62: 51 95    MOV   A,[datetime+4]
    2B64: 21 F0    AND   A,0xF0
    2B66: 62 D0 00 MOV   REG[0xD0],0x0
    2B69: 2A 90    OR    A,[__r0]
    2B6B: 62 D0 00 MOV   REG[0xD0],0x0
    2B6E: 53 95    MOV   [datetime+4],A
(0238) 
(0239) 	Rtc_WriteToRtc();
    2B70: 7C 20 20 LCALL _Rtc_WriteToRtc
    2B73: 62 D0 00 MOV   REG[0xD0],0x0
(0240) 	Time_Pause(FALSE);
    2B76: 50 00    MOV   A,0x0
    2B78: 08       PUSH  A
    2B79: 99 17    CALL  _Time_Pause
    2B7B: 38 FF    ADD   SP,0xFF
    2B7D: 38 FB    ADD   SP,0xFB
    2B7F: 20       POP   X
    2B80: 7F       RET   
(0241) }
(0242) 
(0243) void Time_Adj_Mo(BOOL direction)
(0244) {
_Time_Adj_Mo:
  year                 --> X+4
  date                 --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  month                --> X+0
  direction            --> X-4
    2B81: 10       PUSH  X
    2B82: 4F       MOV   X,SP
    2B83: 38 05    ADD   SP,0x5
(0245) 	BYTE date, month, year, bcd10, bcd;
(0246) 
(0247) 	Time_Pause(TRUE);
    2B85: 50 01    MOV   A,0x1
    2B87: 08       PUSH  A
    2B88: 99 08    CALL  _Time_Pause
(0248) 	Rtc_ReadFromRtc();
    2B8A: 7C 20 34 LCALL _Rtc_ReadFromRtc
    2B8D: 62 D0 00 MOV   REG[0xD0],0x0
(0249) 
(0250) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    2B90: 5A 8F    MOV   [__r1],X
    2B92: 06 8F 03 ADD   [__r1],0x3
    2B95: 50 07    MOV   A,0x7
    2B97: 08       PUSH  A
    2B98: 51 8F    MOV   A,[__r1]
    2B9A: 08       PUSH  A
    2B9B: 62 D0 00 MOV   REG[0xD0],0x0
    2B9E: 51 95    MOV   A,[datetime+4]
    2BA0: 21 0F    AND   A,0xF
    2BA2: 08       PUSH  A
    2BA3: 51 95    MOV   A,[datetime+4]
    2BA5: 62 D0 00 MOV   REG[0xD0],0x0
    2BA8: 67       ASR   A
    2BA9: 67       ASR   A
    2BAA: 67       ASR   A
    2BAB: 67       ASR   A
    2BAC: 21 0F    AND   A,0xF
    2BAE: 53 90    MOV   [__r0],A
    2BB0: 26 90 03 AND   [__r0],0x3
    2BB3: 51 90    MOV   A,[__r0]
    2BB5: 08       PUSH  A
    2BB6: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2BB9: 38 FB    ADD   SP,0xFB
(0251) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    2BBB: 50 07    MOV   A,0x7
    2BBD: 08       PUSH  A
    2BBE: 10       PUSH  X
    2BBF: 62 D0 00 MOV   REG[0xD0],0x0
    2BC2: 51 96    MOV   A,[datetime+5]
    2BC4: 21 0F    AND   A,0xF
    2BC6: 08       PUSH  A
    2BC7: 51 96    MOV   A,[datetime+5]
    2BC9: 62 D0 00 MOV   REG[0xD0],0x0
    2BCC: 67       ASR   A
    2BCD: 67       ASR   A
    2BCE: 67       ASR   A
    2BCF: 67       ASR   A
    2BD0: 21 0F    AND   A,0xF
    2BD2: 53 90    MOV   [__r0],A
    2BD4: 26 90 01 AND   [__r0],0x1
    2BD7: 51 90    MOV   A,[__r0]
    2BD9: 08       PUSH  A
    2BDA: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
(0252) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    2BDD: 62 D0 00 MOV   REG[0xD0],0x0
    2BE0: 5A 8F    MOV   [__r1],X
    2BE2: 06 8F 04 ADD   [__r1],0x4
    2BE5: 50 07    MOV   A,0x7
    2BE7: 08       PUSH  A
    2BE8: 51 8F    MOV   A,[__r1]
    2BEA: 08       PUSH  A
    2BEB: 62 D0 00 MOV   REG[0xD0],0x0
    2BEE: 51 97    MOV   A,[datetime+6]
    2BF0: 21 0F    AND   A,0xF
    2BF2: 08       PUSH  A
    2BF3: 51 97    MOV   A,[datetime+6]
    2BF5: 62 D0 00 MOV   REG[0xD0],0x0
    2BF8: 67       ASR   A
    2BF9: 67       ASR   A
    2BFA: 67       ASR   A
    2BFB: 67       ASR   A
    2BFC: 21 0F    AND   A,0xF
    2BFE: 53 90    MOV   [__r0],A
    2C00: 26 90 0F AND   [__r0],0xF
    2C03: 51 90    MOV   A,[__r0]
    2C05: 08       PUSH  A
    2C06: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2C09: 38 F8    ADD   SP,0xF8
(0253) 
(0254) 	bcd10 = datetime._05h.bits.month10;
    2C0B: 62 D0 00 MOV   REG[0xD0],0x0
    2C0E: 51 96    MOV   A,[datetime+5]
    2C10: 62 D0 00 MOV   REG[0xD0],0x0
    2C13: 67       ASR   A
    2C14: 67       ASR   A
    2C15: 67       ASR   A
    2C16: 67       ASR   A
    2C17: 21 0F    AND   A,0xF
    2C19: 53 90    MOV   [__r0],A
    2C1B: 26 90 01 AND   [__r0],0x1
    2C1E: 51 90    MOV   A,[__r0]
    2C20: 54 01    MOV   [X+1],A
(0255) 	bcd = datetime._05h.bits.month;
    2C22: 62 D0 00 MOV   REG[0xD0],0x0
    2C25: 51 96    MOV   A,[datetime+5]
    2C27: 21 0F    AND   A,0xF
    2C29: 62 D0 00 MOV   REG[0xD0],0x0
    2C2C: 54 02    MOV   [X+2],A
(0256) 
(0257) 	if(direction == TIME_UP)
    2C2E: 3D FC 01 CMP   [X-4],0x1
    2C31: B0 38    JNZ   0x2C6A
(0258) 	{
(0259) 		month++;
    2C33: 77 00    INC   [X+0]
(0260) 		if(isValidDate(date, month, year))
    2C35: 52 04    MOV   A,[X+4]
    2C37: 08       PUSH  A
    2C38: 52 00    MOV   A,[X+0]
    2C3A: 08       PUSH  A
    2C3B: 52 03    MOV   A,[X+3]
    2C3D: 08       PUSH  A
    2C3E: 7C 13 62 LCALL _isValidDate
    2C41: 38 FD    ADD   SP,0xFD
    2C43: 62 D0 00 MOV   REG[0xD0],0x0
    2C46: 39 00    CMP   A,0x0
    2C48: A0 56    JZ    0x2C9F
(0261) 		{
(0262) 			decToBcd(&bcd10, &bcd, month);
    2C4A: 52 00    MOV   A,[X+0]
    2C4C: 08       PUSH  A
    2C4D: 5A 8F    MOV   [__r1],X
    2C4F: 06 8F 02 ADD   [__r1],0x2
    2C52: 50 07    MOV   A,0x7
    2C54: 08       PUSH  A
    2C55: 51 8F    MOV   A,[__r1]
    2C57: 08       PUSH  A
    2C58: 5A 8F    MOV   [__r1],X
    2C5A: 06 8F 01 ADD   [__r1],0x1
    2C5D: 50 07    MOV   A,0x7
    2C5F: 08       PUSH  A
    2C60: 51 8F    MOV   A,[__r1]
    2C62: 08       PUSH  A
    2C63: 7C 0E D9 LCALL _decToBcd
    2C66: 38 FB    ADD   SP,0xFB
(0263) 		}
(0264) 	}
    2C68: 80 36    JMP   0x2C9F
(0265) 	else
(0266) 	{
(0267) 		month--;
    2C6A: 7B 00    DEC   [X+0]
(0268) 		if(isValidDate(date, month, year))
    2C6C: 52 04    MOV   A,[X+4]
    2C6E: 08       PUSH  A
    2C6F: 52 00    MOV   A,[X+0]
    2C71: 08       PUSH  A
    2C72: 52 03    MOV   A,[X+3]
    2C74: 08       PUSH  A
    2C75: 7C 13 62 LCALL _isValidDate
    2C78: 38 FD    ADD   SP,0xFD
    2C7A: 62 D0 00 MOV   REG[0xD0],0x0
    2C7D: 39 00    CMP   A,0x0
    2C7F: A0 1F    JZ    0x2C9F
(0269) 		{
(0270) 			decToBcd(&bcd10, &bcd, month);
    2C81: 52 00    MOV   A,[X+0]
    2C83: 08       PUSH  A
    2C84: 5A 8F    MOV   [__r1],X
    2C86: 06 8F 02 ADD   [__r1],0x2
    2C89: 50 07    MOV   A,0x7
    2C8B: 08       PUSH  A
    2C8C: 51 8F    MOV   A,[__r1]
    2C8E: 08       PUSH  A
    2C8F: 5A 8F    MOV   [__r1],X
    2C91: 06 8F 01 ADD   [__r1],0x1
    2C94: 50 07    MOV   A,0x7
    2C96: 08       PUSH  A
    2C97: 51 8F    MOV   A,[__r1]
    2C99: 08       PUSH  A
    2C9A: 7C 0E D9 LCALL _decToBcd
    2C9D: 38 FB    ADD   SP,0xFB
(0271) 		}
(0272) 	}
(0273) 
(0274) 	datetime._05h.bits.month10 = bcd10;
    2C9F: 62 D0 00 MOV   REG[0xD0],0x0
    2CA2: 52 01    MOV   A,[X+1]
    2CA4: 21 01    AND   A,0x1
    2CA6: 64       ASL   A
    2CA7: 64       ASL   A
    2CA8: 64       ASL   A
    2CA9: 64       ASL   A
    2CAA: 53 90    MOV   [__r0],A
    2CAC: 26 90 10 AND   [__r0],0x10
    2CAF: 62 D0 00 MOV   REG[0xD0],0x0
    2CB2: 51 96    MOV   A,[datetime+5]
    2CB4: 21 EF    AND   A,0xEF
    2CB6: 62 D0 00 MOV   REG[0xD0],0x0
    2CB9: 2A 90    OR    A,[__r0]
    2CBB: 62 D0 00 MOV   REG[0xD0],0x0
    2CBE: 53 96    MOV   [datetime+5],A
(0275) 	datetime._05h.bits.month = bcd;
    2CC0: 62 D0 00 MOV   REG[0xD0],0x0
    2CC3: 52 02    MOV   A,[X+2]
    2CC5: 21 0F    AND   A,0xF
    2CC7: 53 90    MOV   [__r0],A
    2CC9: 26 90 0F AND   [__r0],0xF
    2CCC: 62 D0 00 MOV   REG[0xD0],0x0
    2CCF: 51 96    MOV   A,[datetime+5]
    2CD1: 21 F0    AND   A,0xF0
    2CD3: 62 D0 00 MOV   REG[0xD0],0x0
    2CD6: 2A 90    OR    A,[__r0]
    2CD8: 62 D0 00 MOV   REG[0xD0],0x0
    2CDB: 53 96    MOV   [datetime+5],A
(0276) 
(0277) 	Rtc_WriteToRtc();
    2CDD: 7C 20 20 LCALL _Rtc_WriteToRtc
    2CE0: 62 D0 00 MOV   REG[0xD0],0x0
(0278) 	Time_Pause(FALSE);
    2CE3: 50 00    MOV   A,0x0
    2CE5: 08       PUSH  A
    2CE6: 7C 24 92 LCALL _Time_Pause
    2CE9: 38 FF    ADD   SP,0xFF
    2CEB: 38 FB    ADD   SP,0xFB
    2CED: 20       POP   X
    2CEE: 7F       RET   
(0279) }
(0280) 
(0281) void Time_Adj_Y(BOOL direction)
(0282) {
_Time_Adj_Y:
  month                --> X+4
  date                 --> X+3
  bcd                  --> X+2
  bcd10                --> X+1
  year                 --> X+0
  direction            --> X-4
    2CEF: 10       PUSH  X
    2CF0: 4F       MOV   X,SP
    2CF1: 38 05    ADD   SP,0x5
(0283) 	BYTE date, month, year, bcd10, bcd;
(0284) 
(0285) 	Time_Pause(TRUE);
    2CF3: 50 01    MOV   A,0x1
    2CF5: 08       PUSH  A
    2CF6: 7C 24 92 LCALL _Time_Pause
(0286) 	Rtc_ReadFromRtc();
    2CF9: 7C 20 34 LCALL _Rtc_ReadFromRtc
    2CFC: 62 D0 00 MOV   REG[0xD0],0x0
(0287) 
(0288) 	bcdToDec(datetime._04h.bits.date10, datetime._04h.bits.date, &date);
    2CFF: 5A 8F    MOV   [__r1],X
    2D01: 06 8F 03 ADD   [__r1],0x3
    2D04: 50 07    MOV   A,0x7
    2D06: 08       PUSH  A
    2D07: 51 8F    MOV   A,[__r1]
    2D09: 08       PUSH  A
    2D0A: 62 D0 00 MOV   REG[0xD0],0x0
    2D0D: 51 95    MOV   A,[datetime+4]
    2D0F: 21 0F    AND   A,0xF
    2D11: 08       PUSH  A
    2D12: 51 95    MOV   A,[datetime+4]
    2D14: 62 D0 00 MOV   REG[0xD0],0x0
    2D17: 67       ASR   A
    2D18: 67       ASR   A
    2D19: 67       ASR   A
    2D1A: 67       ASR   A
    2D1B: 21 0F    AND   A,0xF
    2D1D: 53 90    MOV   [__r0],A
    2D1F: 26 90 03 AND   [__r0],0x3
    2D22: 51 90    MOV   A,[__r0]
    2D24: 08       PUSH  A
    2D25: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2D28: 38 FB    ADD   SP,0xFB
(0289) 	bcdToDec(datetime._05h.bits.month10, datetime._05h.bits.month, &month);
    2D2A: 62 D0 00 MOV   REG[0xD0],0x0
    2D2D: 5A 8F    MOV   [__r1],X
    2D2F: 06 8F 04 ADD   [__r1],0x4
    2D32: 50 07    MOV   A,0x7
    2D34: 08       PUSH  A
    2D35: 51 8F    MOV   A,[__r1]
    2D37: 08       PUSH  A
    2D38: 62 D0 00 MOV   REG[0xD0],0x0
    2D3B: 51 96    MOV   A,[datetime+5]
    2D3D: 21 0F    AND   A,0xF
    2D3F: 08       PUSH  A
    2D40: 51 96    MOV   A,[datetime+5]
    2D42: 62 D0 00 MOV   REG[0xD0],0x0
    2D45: 67       ASR   A
    2D46: 67       ASR   A
    2D47: 67       ASR   A
    2D48: 67       ASR   A
    2D49: 21 0F    AND   A,0xF
    2D4B: 53 90    MOV   [__r0],A
    2D4D: 26 90 01 AND   [__r0],0x1
    2D50: 51 90    MOV   A,[__r0]
    2D52: 08       PUSH  A
    2D53: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
(0290) 	bcdToDec(datetime._06h.bits.year10, datetime._06h.bits.year, &year);
    2D56: 50 07    MOV   A,0x7
    2D58: 08       PUSH  A
    2D59: 10       PUSH  X
    2D5A: 62 D0 00 MOV   REG[0xD0],0x0
    2D5D: 51 97    MOV   A,[datetime+6]
    2D5F: 21 0F    AND   A,0xF
    2D61: 08       PUSH  A
    2D62: 51 97    MOV   A,[datetime+6]
    2D64: 62 D0 00 MOV   REG[0xD0],0x0
    2D67: 67       ASR   A
    2D68: 67       ASR   A
    2D69: 67       ASR   A
    2D6A: 67       ASR   A
    2D6B: 21 0F    AND   A,0xF
    2D6D: 53 90    MOV   [__r0],A
    2D6F: 26 90 0F AND   [__r0],0xF
    2D72: 51 90    MOV   A,[__r0]
    2D74: 08       PUSH  A
    2D75: 7C 0E B0 LCALL __UserModules_end|__text_start|_bcdToDec|_bcdToDec
    2D78: 38 F8    ADD   SP,0xF8
(0291) 
(0292) 	bcd10 = datetime._06h.bits.year10;
    2D7A: 62 D0 00 MOV   REG[0xD0],0x0
    2D7D: 51 97    MOV   A,[datetime+6]
    2D7F: 62 D0 00 MOV   REG[0xD0],0x0
    2D82: 67       ASR   A
    2D83: 67       ASR   A
    2D84: 67       ASR   A
    2D85: 67       ASR   A
    2D86: 21 0F    AND   A,0xF
    2D88: 53 90    MOV   [__r0],A
    2D8A: 26 90 0F AND   [__r0],0xF
    2D8D: 51 90    MOV   A,[__r0]
    2D8F: 54 01    MOV   [X+1],A
(0293) 	bcd = datetime._06h.bits.year;
    2D91: 62 D0 00 MOV   REG[0xD0],0x0
    2D94: 51 97    MOV   A,[datetime+6]
    2D96: 21 0F    AND   A,0xF
    2D98: 62 D0 00 MOV   REG[0xD0],0x0
    2D9B: 54 02    MOV   [X+2],A
(0294) 
(0295) 	if(direction == TIME_UP)
    2D9D: 3D FC 01 CMP   [X-4],0x1
    2DA0: B0 38    JNZ   0x2DD9
(0296) 	{
(0297) 		year++;
    2DA2: 77 00    INC   [X+0]
(0298) 		if(isValidDate(date, month, year))
    2DA4: 52 00    MOV   A,[X+0]
    2DA6: 08       PUSH  A
    2DA7: 52 04    MOV   A,[X+4]
    2DA9: 08       PUSH  A
    2DAA: 52 03    MOV   A,[X+3]
    2DAC: 08       PUSH  A
    2DAD: 7C 13 62 LCALL _isValidDate
    2DB0: 38 FD    ADD   SP,0xFD
    2DB2: 62 D0 00 MOV   REG[0xD0],0x0
    2DB5: 39 00    CMP   A,0x0
    2DB7: A0 56    JZ    0x2E0E
(0299) 		{
(0300) 			decToBcd(&bcd10, &bcd, year);
    2DB9: 52 00    MOV   A,[X+0]
    2DBB: 08       PUSH  A
    2DBC: 5A 8F    MOV   [__r1],X
    2DBE: 06 8F 02 ADD   [__r1],0x2
    2DC1: 50 07    MOV   A,0x7
    2DC3: 08       PUSH  A
    2DC4: 51 8F    MOV   A,[__r1]
    2DC6: 08       PUSH  A
    2DC7: 5A 8F    MOV   [__r1],X
    2DC9: 06 8F 01 ADD   [__r1],0x1
    2DCC: 50 07    MOV   A,0x7
    2DCE: 08       PUSH  A
    2DCF: 51 8F    MOV   A,[__r1]
    2DD1: 08       PUSH  A
    2DD2: 7C 0E D9 LCALL _decToBcd
    2DD5: 38 FB    ADD   SP,0xFB
(0301) 		}
(0302) 	}
    2DD7: 80 36    JMP   0x2E0E
(0303) 	else
(0304) 	{
(0305) 		year--;
    2DD9: 7B 00    DEC   [X+0]
(0306) 		if(isValidDate(date, month, year))
    2DDB: 52 00    MOV   A,[X+0]
    2DDD: 08       PUSH  A
    2DDE: 52 04    MOV   A,[X+4]
    2DE0: 08       PUSH  A
    2DE1: 52 03    MOV   A,[X+3]
    2DE3: 08       PUSH  A
    2DE4: 7C 13 62 LCALL _isValidDate
    2DE7: 38 FD    ADD   SP,0xFD
    2DE9: 62 D0 00 MOV   REG[0xD0],0x0
    2DEC: 39 00    CMP   A,0x0
    2DEE: A0 1F    JZ    0x2E0E
(0307) 		{
(0308) 			decToBcd(&bcd10, &bcd, year);
    2DF0: 52 00    MOV   A,[X+0]
    2DF2: 08       PUSH  A
    2DF3: 5A 8F    MOV   [__r1],X
    2DF5: 06 8F 02 ADD   [__r1],0x2
    2DF8: 50 07    MOV   A,0x7
    2DFA: 08       PUSH  A
    2DFB: 51 8F    MOV   A,[__r1]
    2DFD: 08       PUSH  A
    2DFE: 5A 8F    MOV   [__r1],X
    2E00: 06 8F 01 ADD   [__r1],0x1
    2E03: 50 07    MOV   A,0x7
    2E05: 08       PUSH  A
    2E06: 51 8F    MOV   A,[__r1]
    2E08: 08       PUSH  A
    2E09: 7C 0E D9 LCALL _decToBcd
    2E0C: 38 FB    ADD   SP,0xFB
(0309) 		}
(0310) 	}
(0311) 
(0312) 	datetime._06h.bits.year10 = bcd10;
    2E0E: 62 D0 00 MOV   REG[0xD0],0x0
    2E11: 52 01    MOV   A,[X+1]
    2E13: 21 0F    AND   A,0xF
    2E15: 64       ASL   A
    2E16: 64       ASL   A
    2E17: 64       ASL   A
    2E18: 64       ASL   A
    2E19: 53 90    MOV   [__r0],A
    2E1B: 26 90 F0 AND   [__r0],0xF0
    2E1E: 62 D0 00 MOV   REG[0xD0],0x0
    2E21: 51 97    MOV   A,[datetime+6]
    2E23: 21 0F    AND   A,0xF
    2E25: 62 D0 00 MOV   REG[0xD0],0x0
    2E28: 2A 90    OR    A,[__r0]
    2E2A: 62 D0 00 MOV   REG[0xD0],0x0
    2E2D: 53 97    MOV   [datetime+6],A
(0313) 	datetime._06h.bits.year = bcd;
    2E2F: 62 D0 00 MOV   REG[0xD0],0x0
    2E32: 52 02    MOV   A,[X+2]
    2E34: 21 0F    AND   A,0xF
    2E36: 53 90    MOV   [__r0],A
    2E38: 26 90 0F AND   [__r0],0xF
    2E3B: 62 D0 00 MOV   REG[0xD0],0x0
    2E3E: 51 97    MOV   A,[datetime+6]
    2E40: 21 F0    AND   A,0xF0
    2E42: 62 D0 00 MOV   REG[0xD0],0x0
    2E45: 2A 90    OR    A,[__r0]
    2E47: 62 D0 00 MOV   REG[0xD0],0x0
    2E4A: 53 97    MOV   [datetime+6],A
(0314) 
(0315) 	Rtc_WriteToRtc();
    2E4C: 7C 20 20 LCALL _Rtc_WriteToRtc
    2E4F: 62 D0 00 MOV   REG[0xD0],0x0
(0316) 	Time_Pause(FALSE);
    2E52: 50 00    MOV   A,0x0
    2E54: 08       PUSH  A
    2E55: 7C 24 92 LCALL _Time_Pause
    2E58: 38 FF    ADD   SP,0xFF
    2E5A: 38 FB    ADD   SP,0xFB
    2E5C: 20       POP   X
    2E5D: 7F       RET   
