 0000                   cpu LMM
                        .module ledarray.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./ledarray.c
 0000                   .dbfile C:\Users\Rod\Desktop\RTC\RTC\ledarray.c
 0000                   .dbfunc e Leds_Start _Leds_Start fV
 0000           _Leds_Start::
 0000                   .dbline -1
 0000                   .dbline 44
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "LedArray.h"
 0000           ; 
 0000           ; #if LEDS_PORT == 0
 0000           ;       #define PRTxDM2 PRT0DM2
 0000           ;       #define PRTxDM1 PRT0DM1
 0000           ;       #define PRTxDM0 PRT0DM0
 0000           ;       #define PRTxDR PRT0DR
 0000           ;       
 0000           ;       #if LEDS_SHADOWREG == 1
 0000           ;               extern BYTE Port_0_Data_SHADE;
 0000           ;               #define Port_Data_SHADE Port_0_Data_SHADE
 0000           ;       #endif 
 0000           ;               
 0000           ; #elif LEDS_PORT == 1
 0000           ;       #define PRTxDM2 PRT1DM2
 0000           ;       #define PRTxDM1 PRT1DM1
 0000           ;       #define PRTxDM0 PRT1DM0
 0000           ;       #define PRTxDR PRT1DR
 0000           ;               
 0000           ;       #if LEDS_SHADOWREG == 1
 0000           ;               extern BYTE Port_1_Data_SHADE;
 0000           ;               #define Port_Data_SHADE Port_1_Data_SHADE
 0000           ;       #endif 
 0000           ;               
 0000           ; #elif LEDS_PORT == 2
 0000           ;       #define PRTxDM2 PRT2DM2
 0000           ;       #define PRTxDM1 PRT2DM1
 0000           ;       #define PRTxDM0 PRT2DM0
 0000           ;       #define PRTxDR PRT2DR
 0000           ;               
 0000           ;       #if LEDS_SHADOWREG == 1
 0000           ;               extern BYTE Port_2_Data_SHADE;
 0000           ;               #define Port_Data_SHADE Port_2_Data_SHADE
 0000           ;       #endif 
 0000           ;               
 0000           ; #else 
 0000           ;       #error "Led port is invalid!"
 0000           ; #endif
 0000           ; 
 0000           ; //inicialize LED driver
 0000           ; void Leds_Start(void)
 0000           ; {
 0000                   .dbline 45
 0000           ;       PRTxDM2 &= ~LEDS_MASK;  //initialize led
 0000 4103E7            and REG[0x3],-25
 0003                   .dbline 46
 0003           ;       PRTxDM1 &= ~LEDS_MASK;
 0003 7110              or F,0x10  ; iopage = 1
 0005 4101E7            and REG[0x1],-25
 0008                   .dbline 47
 0008           ;       PRTxDM0 |= LEDS_MASK;
 0008 430018            or REG[0],24
 000B                   .dbline 50
 000B           ;       
 000B           ;       #if LEDS_SHADOWREG == 1
 000B           ;               Port_Data_SHADE &= ~LEDS_MASK;
 000B 70CF              and F,0xCF      ; iopage = 0
 000D 62D000            mov REG[0xd0],>_Port_0_Data_SHADE
 0010 2600E7            and [_Port_0_Data_SHADE],-25
 0013                   .dbline 51
 0013           ;               PRTxDR = Port_Data_SHADE;       //turn off led
 0013 5100              mov A,[_Port_0_Data_SHADE]
 0015 6000              mov REG[0],A
 0017                   .dbline -2
 0017           L1:
 0017                   .dbline 0 ; func end
 0017 7F                ret
 0018                   .dbend
 0018                   .dbfunc e Leds_TurnOn _Leds_TurnOn fV
 0018           ;           leds -> X-4
 0018           _Leds_TurnOn::
 0018                   .dbline -1
 0018 10                push X
 0019 4F                mov X,SP
 001A                   .dbline 59
 001A           ;       #else 
 001A           ;               PRTxDR &= ~LEDS_MASK;
 001A           ;       #endif
 001A           ; }
 001A           ; 
 001A           ; //Turn on led
 001A           ; void Leds_TurnOn(BYTE leds)
 001A           ; {
 001A                   .dbline 60
 001A           ;       leds &= LEDS_MASK;
 001A 27FC18            and [X-4],24
 001D                   .dbline 62
 001D           ;       #if LEDS_SHADOWREG == 1
 001D           ;               Port_Data_SHADE |= leds;
 001D 62D000            mov REG[0xd0],>_Port_0_Data_SHADE
 0020 52FC              mov A,[X-4]
 0022 2C00              or [_Port_0_Data_SHADE],A
 0024                   .dbline 63
 0024           ;               PRTxDR = Port_Data_SHADE;       //turn on led
 0024 5100              mov A,[_Port_0_Data_SHADE]
 0026 6000              mov REG[0],A
 0028                   .dbline -2
 0028           L2:
 0028 20                pop X
 0029                   .dbline 0 ; func end
 0029 7F                ret
 002A                   .dbsym l leds -4 c
 002A                   .dbend
 002A                   .dbfunc e Leds_TurnOff _Leds_TurnOff fV
 002A           ;           leds -> X-4
 002A           _Leds_TurnOff::
 002A                   .dbline -1
 002A 10                push X
 002B 4F                mov X,SP
 002C                   .dbline 71
 002C           ;       #else 
 002C           ;               PRTxDR |= leds;
 002C           ;       #endif
 002C           ; }
 002C           ; 
 002C           ; //Turn off led
 002C           ; void Leds_TurnOff(BYTE leds)
 002C           ; {
 002C                   .dbline 72
 002C           ;       leds &= LEDS_MASK;
 002C 27FC18            and [X-4],24
 002F                   .dbline 74
 002F           ;       #if LEDS_SHADOWREG == 1
 002F           ;               Port_Data_SHADE &= ~leds;
 002F 52FC              mov A,[X-4]
 0031 73                cpl A
 0032 62D000            mov REG[0xd0],>_Port_0_Data_SHADE
 0035 2400              and [_Port_0_Data_SHADE],A
 0037                   .dbline 75
 0037           ;               PRTxDR = Port_Data_SHADE;       //turn off led
 0037 5100              mov A,[_Port_0_Data_SHADE]
 0039 6000              mov REG[0],A
 003B                   .dbline -2
 003B           L3:
 003B 20                pop X
 003C                   .dbline 0 ; func end
 003C 7F                ret
 003D                   .dbsym l leds -4 c
 003D                   .dbend
 003D                   .dbfunc e Leds_Toggle _Leds_Toggle fV
 003D           ;           leds -> X-4
 003D           _Leds_Toggle::
 003D                   .dbline -1
 003D 10                push X
 003E 4F                mov X,SP
 003F                   .dbline 83
 003F           ;       #else 
 003F           ;               PRTxDR &= ~leds;
 003F           ;       #endif
 003F           ; }
 003F           ; 
 003F           ; //Toggle led
 003F           ; void Leds_Toggle(BYTE leds)
 003F           ; {
 003F                   .dbline 84
 003F           ;       leds &= LEDS_MASK;
 003F 27FC18            and [X-4],24
 0042                   .dbline 86
 0042           ;       #if LEDS_SHADOWREG == 1
 0042           ;               Port_Data_SHADE ^= leds;
 0042 62D000            mov REG[0xd0],>_Port_0_Data_SHADE
 0045 5100              mov A,[_Port_0_Data_SHADE]
 0047 33FC              xor A,[X-4]
 0049 5300              mov [_Port_0_Data_SHADE],A
 004B                   .dbline 87
 004B           ;               PRTxDR = Port_Data_SHADE;       //turn off led
 004B 5100              mov A,[_Port_0_Data_SHADE]
 004D 6000              mov REG[0],A
 004F                   .dbline -2
 004F           L4:
 004F 20                pop X
 0050                   .dbline 0 ; func end
 0050 7F                ret
 0051                   .dbsym l leds -4 c
 0051                   .dbend
