 0000                   cpu LMM
                        .module tempsensor.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./tempsensor.c
 0000                   .dbfile Z:\Desktop\RTC\RTC\tempsensor.c
 0000                   .dbfunc e TempSensor_Start _TempSensor_Start fV
 0000           _TempSensor_Start::
 0000                   .dbline -1
 0000                   .dbline 8
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "TempSensor.h"
 0000           ; #include <stdio.h>
 0000           ; 
 0000           ; 
 0000           ; void TempSensor_Start(void)
 0000           ; {
 0000                   .dbline 9
 0000           ;       PGA_Start(PGA_HIGHPOWER);
 0000 10                push X
 0001 5003              mov A,3
 0003 7C0000            xcall _PGA_Start
 0006                   .dbline 10
 0006           ;       ADCINC_Start(ADCINC_HIGHPOWER);
 0006 5003              mov A,3
 0008 7C0000            xcall _ADCINC_Start
 000B                   .dbline 11
 000B           ;       ADCINC_GetSamples(0);
 000B 5000              mov A,0
 000D 7C0000            xcall _ADCINC_GetSamples
 0010 20                pop X
 0011                   .dbline -2
 0011           L1:
 0011                   .dbline 0 ; func end
 0011 7F                ret
 0012                   .dbend
 0012                   .dbfunc e TempSensor_Stop _TempSensor_Stop fV
 0012           _TempSensor_Stop::
 0012                   .dbline -1
 0012                   .dbline 14
 0012           ; }
 0012           ; void TempSensor_Stop(void)
 0012           ; {
 0012                   .dbline 15
 0012           ;       PGA_Stop();
 0012 10                push X
 0013 7C0000            xcall _PGA_Stop
 0016                   .dbline 16
 0016           ;       ADCINC_Stop();
 0016 7C0000            xcall _ADCINC_Stop
 0019 20                pop X
 001A                   .dbline -2
 001A           L2:
 001A                   .dbline 0 ; func end
 001A 7F                ret
 001B                   .dbend
 001B                   .dbfunc e TempSensor_GetTemp _TempSensor_GetTemp fI
 001B           ;         latemp -> X+4
 001B           ;           temp -> X+0
 001B           _TempSensor_GetTemp::
 001B                   .dbline -1
 001B 10                push X
 001C 4F                mov X,SP
 001D 3806              add SP,6
 001F                   .dbline 20
 001F           ; }
 001F           ; 
 001F           ; int TempSensor_GetTemp(void)
 001F           ; {
 001F           L4:
 001F                   .dbline 23
 001F           ;       float temp;
 001F           ;       int latemp;
 001F           ;       while (ADCINC_fIsDataAvailable() == 0);
 001F           L5:
 001F                   .dbline 23
 001F 10                push X
 0020 7C0000            xcall _ADCINC_fIsDataAvailable
 0023 20                pop X
 0024 62D000            mov REG[0xd0],>__r0
 0027 3900              cmp A,0
 0029 AFF5              jz L4
 002B                   .dbline 24
 002B           ;       temp = ADCINC_wClearFlagGetData();
 002B 10                push X
 002C 7C0000            xcall _ADCINC_wClearFlagGetData
 002F 62D000            mov REG[0xd0],>__r0
 0032 5A00              mov [__r0],X
 0034 5300              mov [__r1],A
 0036 20                pop X
 0037 2101              and A,1
 0039 5300              mov [__r3],A
 003B 5100              mov A,[__r0]
 003D 2100              and A,0
 003F 5300              mov [__r2],A
 0041 5100              mov A,[__r3]
 0043 5300              mov [__r7],A
 0045 5100              mov A,[__r2]
 0047 5300              mov [__r6],A
 0049 470080            tst [__r6],-128
 004C A009              jz X0
 004E 5500FF            mov [__r5],-1
 0051 5500FF            mov [__r4],-1
 0054 800A              jmp X1
 0056           X0:
 0056 62D000            mov REG[0xd0],>__r0
 0059 550000            mov [__r5],0
 005C 550000            mov [__r4],0
 005F           X1:
 005F 62D000            mov REG[0xd0],>__r0
 0062 5100              mov A,[__r4]
 0064 08                push A
 0065 5100              mov A,[__r5]
 0067 08                push A
 0068 5100              mov A,[__r6]
 006A 08                push A
 006B 5100              mov A,[__r7]
 006D 08                push A
 006E 7C0000            xcall __long2fp
 0071 18                pop A
 0072 5300              mov [__r7],A
 0074 18                pop A
 0075 5300              mov [__r6],A
 0077 18                pop A
 0078 5300              mov [__r5],A
 007A 18                pop A
 007B 5300              mov [__r4],A
 007D 70FB              and F,-5
 007F 6E00              rrc [__r0]
 0081 6E00              rrc [__r1]
 0083 5100              mov A,[__r1]
 0085 5300              mov [__r3],A
 0087 5100              mov A,[__r0]
 0089 5300              mov [__r2],A
 008B 470080            tst [__r2],-128
 008E A009              jz X2
 0090 5500FF            mov [__r1],-1
 0093 5500FF            mov [__r0],-1
 0096 800A              jmp X3
 0098           X2:
 0098 62D000            mov REG[0xd0],>__r0
 009B 550000            mov [__r1],0
 009E 550000            mov [__r0],0
 00A1           X3:
 00A1 62D000            mov REG[0xd0],>__r0
 00A4 5100              mov A,[__r0]
 00A6 08                push A
 00A7 5100              mov A,[__r1]
 00A9 08                push A
 00AA 5100              mov A,[__r2]
 00AC 08                push A
 00AD 5100              mov A,[__r3]
 00AF 08                push A
 00B0 7C0000            xcall __long2fp
 00B3 18                pop A
 00B4 5300              mov [__r3],A
 00B6 18                pop A
 00B7 5300              mov [__r2],A
 00B9 18                pop A
 00BA 5300              mov [__r1],A
 00BC 18                pop A
 00BD 08                push A
 00BE 5100              mov A,[__r1]
 00C0 08                push A
 00C1 5100              mov A,[__r2]
 00C3 08                push A
 00C4 5100              mov A,[__r3]
 00C6 08                push A
 00C7 5040              mov A,64
 00C9 08                push A
 00CA 5000              mov A,0
 00CC 08                push A
 00CD 08                push A
 00CE 08                push A
 00CF 7C0000            xcall __fpmul
 00D2 18                pop A
 00D3 5300              mov [__r3],A
 00D5 18                pop A
 00D6 5300              mov [__r2],A
 00D8 18                pop A
 00D9 5300              mov [__r1],A
 00DB 18                pop A
 00DC 5300              mov [__r0],A
 00DE 38FC              add SP,-4
 00E0 5100              mov A,[__r4]
 00E2 08                push A
 00E3 5100              mov A,[__r5]
 00E5 08                push A
 00E6 5100              mov A,[__r6]
 00E8 08                push A
 00E9 5100              mov A,[__r7]
 00EB 08                push A
 00EC 5100              mov A,[__r0]
 00EE 08                push A
 00EF 5100              mov A,[__r1]
 00F1 08                push A
 00F2 5100              mov A,[__r2]
 00F4 08                push A
 00F5 5100              mov A,[__r3]
 00F7 08                push A
 00F8 7C0000            xcall __fpadd
 00FB 18                pop A
 00FC 5403              mov [X+3],A
 00FE 18                pop A
 00FF 5402              mov [X+2],A
 0101 18                pop A
 0102 5401              mov [X+1],A
 0104 18                pop A
 0105 5400              mov [X+0],A
 0107 38FC              add SP,-4
 0109                   .dbline 25
 0109           ;       latemp = temp;
 0109 5200              mov A,[X+0]
 010B 08                push A
 010C 5201              mov A,[X+1]
 010E 08                push A
 010F 5202              mov A,[X+2]
 0111 08                push A
 0112 5203              mov A,[X+3]
 0114 08                push A
 0115 7C0000            xcall __fp2long
 0118 18                pop A
 0119 5405              mov [X+5],A
 011B 18                pop A
 011C 5404              mov [X+4],A
 011E 38FE              add SP,-2
 0120                   .dbline 27
 0120           ;       //cprintf("Raw: %d\n",latemp);
 0120           ;       temp = (((temp)*500.0)/1023.0)-281.5;
 0120 5200              mov A,[X+0]
 0122 08                push A
 0123 5201              mov A,[X+1]
 0125 08                push A
 0126 5202              mov A,[X+2]
 0128 08                push A
 0129 5203              mov A,[X+3]
 012B 08                push A
 012C 5043              mov A,67
 012E 08                push A
 012F 50FA              mov A,-6
 0131 08                push A
 0132 5000              mov A,0
 0134 08                push A
 0135 08                push A
 0136 7C0000            xcall __fpmul
 0139 18                pop A
 013A 5300              mov [__r3],A
 013C 18                pop A
 013D 5300              mov [__r2],A
 013F 18                pop A
 0140 5300              mov [__r1],A
 0142 18                pop A
 0143 5300              mov [__r0],A
 0145 38FC              add SP,-4
 0147 5044              mov A,68
 0149 08                push A
 014A 507F              mov A,127
 014C 08                push A
 014D 50C0              mov A,-64
 014F 08                push A
 0150 5000              mov A,0
 0152 08                push A
 0153 5100              mov A,[__r0]
 0155 08                push A
 0156 5100              mov A,[__r1]
 0158 08                push A
 0159 5100              mov A,[__r2]
 015B 08                push A
 015C 5100              mov A,[__r3]
 015E 08                push A
 015F 7C0000            xcall __fpdiv
 0162 18                pop A
 0163 5300              mov [__r3],A
 0165 18                pop A
 0166 5300              mov [__r2],A
 0168 18                pop A
 0169 5300              mov [__r1],A
 016B 18                pop A
 016C 5300              mov [__r0],A
 016E 38FC              add SP,-4
 0170 5043              mov A,67
 0172 08                push A
 0173 508C              mov A,-116
 0175 08                push A
 0176 50C0              mov A,-64
 0178 08                push A
 0179 5000              mov A,0
 017B 08                push A
 017C 5100              mov A,[__r0]
 017E 08                push A
 017F 5100              mov A,[__r1]
 0181 08                push A
 0182 5100              mov A,[__r2]
 0184 08                push A
 0185 5100              mov A,[__r3]
 0187 08                push A
 0188 7C0000            xcall __fpsub
 018B 18                pop A
 018C 5403              mov [X+3],A
 018E 18                pop A
 018F 5402              mov [X+2],A
 0191 18                pop A
 0192 5401              mov [X+1],A
 0194 18                pop A
 0195 5400              mov [X+0],A
 0197 38FC              add SP,-4
 0199                   .dbline 28
 0199           ;       latemp = temp;
 0199 5200              mov A,[X+0]
 019B 08                push A
 019C 5201              mov A,[X+1]
 019E 08                push A
 019F 5202              mov A,[X+2]
 01A1 08                push A
 01A2 5203              mov A,[X+3]
 01A4 08                push A
 01A5 7C0000            xcall __fp2long
 01A8 18                pop A
 01A9 5405              mov [X+5],A
 01AB 18                pop A
 01AC 5404              mov [X+4],A
 01AE 38FE              add SP,-2
 01B0                   .dbline 31
 01B0           ;       //cprintf("Conversion: %d\n",latemp);
 01B0           ;       
 01B0           ;       return latemp;
 01B0 5205              mov A,[X+5]
 01B2 5300              mov [__r1],A
 01B4 5204              mov A,[X+4]
 01B6 5300              mov [__r0],A
 01B8                   .dbline -2
 01B8           L3:
 01B8 38FA              add SP,-6
 01BA 20                pop X
 01BB                   .dbline 0 ; func end
 01BB 7F                ret
 01BC                   .dbsym l latemp 4 I
 01BC                   .dbsym l temp 0 D
 01BC                   .dbend
