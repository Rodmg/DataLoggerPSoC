 0000                   cpu LMM
                        .module logger.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./logger.c
 0000                   .dbfile Z:\Desktop\RTC\RTC\logger.c
 0000                   .dbfunc e Logger_Start _Logger_Start fV
 0000           _Logger_Start::
 0000                   .dbline -1
 0000                   .dbline 11
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "Logger.h"
 0000           ; #include "TempSensor.h"
 0000           ; #include "Persist.h"
 0000           ; #include "Rtc.h"
 0000           ; #include "BcdUtil.h"
 0000           ; #include "LedArray.h"
 0000           ; 
 0000           ; void Logger_Start(void)
 0000           ; {
 0000                   .dbline -2
 0000           L33:
 0000                   .dbline 0 ; func end
 0000 7F                ret
 0001                   .dbend
 0001                   .dbfunc e Logger_End _Logger_End fV
 0001           _Logger_End::
 0001                   .dbline -1
 0001                   .dbline 16
 0001           ;       
 0001           ; }
 0001           ; 
 0001           ; void Logger_End(void)
 0001           ; {
 0001                   .dbline -2
 0001           L34:
 0001                   .dbline 0 ; func end
 0001 7F                ret
 0002                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile Z:\Desktop\RTC\RTC\logger.c
 0000           L36:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile Z:\Desktop\RTC\RTC\logger.c
 0000           L37:
 0000 00                .byte 0
                        .area text(rom, con, rel)
 0002                   .dbfile Z:\Desktop\RTC\RTC\logger.c
 0002                   .dbfunc e Logger_Loop _Logger_Loop fV
 0002                   .dbstruct 0 1 .4
 0002                   .dbfield 0 registerEnabled F[0:1]
 0002                   .dbfield 0 alarmEnabled F[9:1]
 0002                   .dbend
 0002                   .dbstruct 0 2 .1
 0002                   .dbfield 0 hour c
 0002                   .dbfield 1 min c
 0002                   .dbend
 0002                   .dbstruct 0 11 .3
 0002                   .dbfield 0 flags S[.4]
 0002                   .dbfield 1 registerStart S[.1]
 0002                   .dbfield 3 registerEnd S[.1]
 0002                   .dbfield 5 maxTemp c
 0002                   .dbfield 6 minTemp c
 0002                   .dbfield 7 maxRegisteredTemp c
 0002                   .dbfield 8 minRegisteredTemp c
 0002                   .dbfield 9 nRecords s
 0002                   .dbend
 0002                   .dbstruct 0 3 .2
 0002                   .dbfield 0 date c
 0002                   .dbfield 1 month c
 0002                   .dbfield 2 year c
 0002                   .dbend
 0002                   .dbstruct 0 6 .6
 0002                   .dbfield 0 date S[.2]
 0002                   .dbfield 3 time S[.1]
 0002                   .dbfield 5 temp c
 0002                   .dbend
 0002                   .dbsym s previousSecond L37 c
 0002                   .dbsym s elapsedSeconds L36 c
 0002           ;         record -> X+26
 0002           ;            now -> X+24
 0002           ;   timestampEnd -> X+22
 0002           ; timestampStart -> X+20
 0002           ;   timestampNow -> X+18
 0002           ;    currentYear -> X+17
 0002           ;   currentMonth -> X+16
 0002           ;    currentDate -> X+15
 0002           ;     currentMin -> X+14
 0002           ;    currentHour -> X+13
 0002           ;    currentTemp -> X+12
 0002           ;           conf -> X+1
 0002           ;  currentSecond -> X+0
 0002           _Logger_Loop::
 0002                   .dbline -1
 0002 10                push X
 0003 4F                mov X,SP
 0004 3820              add SP,32
 0006                   .dbline 21
 0006           ;       
 0006           ; }
 0006           ; 
 0006           ; void Logger_Loop(void)
 0006           ; {
 0006                   .dbline 30
 0006           ;       static BYTE elapsedSeconds, previousSecond;
 0006           ;       BYTE currentTemp, currentSecond;
 0006           ;       BYTE currentHour, currentMin, currentDate, currentMonth, currentYear;
 0006           ;       int timestampNow, timestampStart, timestampEnd;
 0006           ;       Time now;
 0006           ;       Config conf;
 0006           ;       Record record;
 0006           ;       
 0006           ;       Rtc_ReadFromRtc();
 0006 7C0000            xcall _Rtc_ReadFromRtc
 0009                   .dbline 33
 0009           ;       
 0009           ;       // Only proceed once in a second
 0009           ;       currentSecond = datetime._00h.bits.seconds;
 0009 62D000            mov REG[0xd0],>_datetime
 000C 5100              mov A,[_datetime]
 000E 210F              and A,15
 0010 5400              mov [X+0],A
 0012                   .dbline 34
 0012           ;       if (currentSecond != previousSecond)
 0012 62D000            mov REG[0xd0],>L37
 0015 5200              mov A,[X+0]
 0017 3A00              cmp A,[L37]
 0019 A062              jz L38
 001B                   .dbline 36
 001B           ;       {
 001B           ;               previousSecond = currentSecond;
 001B                   .dbline 36
 001B 5200              mov A,[X+0]
 001D 5300              mov [L37],A
 001F                   .dbline 37
 001F           ;               elapsedSeconds++;
 001F 62D000            mov REG[0xd0],>L36
 0022 7600              inc [L36]
 0024                   .dbline 39
 0024           ;               
 0024           ;               Persist_LoadConfig(&conf);
 0024 62D000            mov REG[0xd0],>__r0
 0027 5A00              mov [__r1],X
 0029 060001            add [__r1],1
 002C 5007              mov A,7
 002E 08                push A
 002F 5100              mov A,[__r1]
 0031 08                push A
 0032 7C0000            xcall _Persist_LoadConfig
 0035 38FE              add SP,-2
 0037 62D000            mov REG[0xd0],>__r0
 003A                   .dbline 40
 003A           ;               currentTemp = TempSensor_GetTemp();
 003A 7C0000            xcall _TempSensor_GetTemp
 003D 62D000            mov REG[0xd0],>__r0
 0040 5100              mov A,[__r1]
 0042 540C              mov [X+12],A
 0044                   .dbline 83
 0044           ;               
 0044           ;               // Get max and min temperatures
 0044           ; //            if (currentTemp > conf.maxRegisteredTemp)
 0044           ; //            {
 0044           ; //                    conf.maxRegisteredTemp = currentTemp;
 0044           ; //                    Persist_SaveConfig(&conf);
 0044           ; //            }
 0044           ; //            if (currentTemp < conf.minRegisteredTemp)
 0044           ; //            {
 0044           ; //                    conf.minRegisteredTemp = currentTemp;
 0044           ; //                    Persist_SaveConfig(&conf);
 0044           ; //            }
 0044           ;       
 0044           ;               // Once in a minute
 0044           ; //            if(conf.flags.registerEnabled && elapsedSeconds > 59)
 0044           ; //            {
 0044           ; //                    elapsedSeconds = 0;
 0044           ; //                    
 0044           ; //                    bcdToDec((datetime._02h.bits_24hrs.hours10), (datetime._02h.bits_24hrs.hours), &currentHour);
 0044           ; //                    bcdToDec((datetime._01h.bits.minutes10), (datetime._01h.bits.minutes), &currentMin);
 0044           ; //                    bcdToDec((datetime._04h.bits.date10), (datetime._04h.bits.date), &currentDate);
 0044           ; //                    bcdToDec((datetime._05h.bits.month10), (datetime._05h.bits.month), &currentMonth);
 0044           ; //                    bcdToDec((datetime._06h.bits.year10), (datetime._06h.bits.year), &currentYear);
 0044           ; //                    
 0044           ; //                    timestampNow = currentHour*60 + currentMin;
 0044           ; //                    timestampStart = conf.registerStart.hour*60 + conf.registerStart.min;
 0044           ; //                    timestampEnd = conf.registerEnd.hour*60 + conf.registerEnd.min;
 0044           ; //                    
 0044           ; //                    if(timestampNow >= timestampStart && timestampNow < timestampEnd)
 0044           ; //                    {
 0044           ; //                            // Log
 0044           ; //                            record.temp = currentTemp;
 0044           ; //                            record.time.hour = currentHour;
 0044           ; //                            record.time.min = currentMin;
 0044           ; //                            record.date.date = currentDate;
 0044           ; //                            record.date.month = currentMonth;
 0044           ; //                            record.date.year = currentYear;
 0044           ; //                            Persist_SaveRecord(&record);
 0044           ; //                    }
 0044           ; //                    
 0044           ; //            }
 0044           ;       
 0044           ;               if(conf.flags.alarmEnabled)
 0044 5201              mov A,[X+1]
 0046 67                asr A
 0047 67                asr A
 0048 67                asr A
 0049 67                asr A
 004A 67                asr A
 004B 67                asr A
 004C 2103              and A,3
 004E 5300              mov [__r0],A
 0050 260001            and [__r0],1
 0053 A023              jz L40
 0055                   .dbline 85
 0055           ;               {
 0055           ;                       if(currentTemp > conf.maxTemp || currentTemp < conf.minTemp)
 0055                   .dbline 85
 0055 5206              mov A,[X+6]
 0057 3B0C              cmp A,[X+12]
 0059 C007              jc L46
 005B           X0:
 005B 520C              mov A,[X+12]
 005D 3B07              cmp A,[X+7]
 005F D010              jnc L42
 0061           X1:
 0061           L46:
 0061                   .dbline 87
 0061           ;                       {
 0061           ;                               PWM8_Start();
 0061                   .dbline 87
 0061 10                push X
 0062 7C0000            xcall _PWM8_Start
 0065 20                pop X
 0066                   .dbline 88
 0066           ;                               Leds_TurnOn(LEDS_MASK);
 0066 5018              mov A,24
 0068 08                push A
 0069 7C0000            xcall _Leds_TurnOn
 006C 38FF              add SP,-1
 006E                   .dbline 89
 006E           ;                       }
 006E 800D              xjmp L41
 0070           L42:
 0070                   .dbline 91
 0070           ;                       else
 0070           ;                       {
 0070                   .dbline 92
 0070           ;                               PWM8_Stop();
 0070 10                push X
 0071 7C0000            xcall _PWM8_Stop
 0074 20                pop X
 0075                   .dbline 93
 0075           ;                       }
 0075                   .dbline 94
 0075           ;               }
 0075 8006              xjmp L41
 0077           L40:
 0077                   .dbline 96
 0077           ;               else 
 0077           ;               {
 0077                   .dbline 97
 0077           ;                       PWM8_Stop();
 0077 10                push X
 0078 7C0000            xcall _PWM8_Stop
 007B 20                pop X
 007C                   .dbline 98
 007C           ;               }
 007C           L41:
 007C                   .dbline 100
 007C           ;               
 007C           ;       }
 007C           L38:
 007C                   .dbline -2
 007C           L35:
 007C 38E0              add SP,-32
 007E 20                pop X
 007F                   .dbline 0 ; func end
 007F 7F                ret
 0080                   .dbsym l record 26 S[.6]
 0080                   .dbsym l now 24 S[.1]
 0080                   .dbsym l timestampEnd 22 I
 0080                   .dbsym l timestampStart 20 I
 0080                   .dbsym l timestampNow 18 I
 0080                   .dbsym l currentYear 17 c
 0080                   .dbsym l currentMonth 16 c
 0080                   .dbsym l currentDate 15 c
 0080                   .dbsym l currentMin 14 c
 0080                   .dbsym l currentHour 13 c
 0080                   .dbsym l currentTemp 12 c
 0080                   .dbsym l conf 1 S[.3]
 0080                   .dbsym l currentSecond 0 c
 0080                   .dbend
