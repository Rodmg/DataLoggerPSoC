 0000                   cpu LMM
                        .module logger.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./logger.c
 0000                   .dbfile C:\Users\Rod\Desktop\RTC\RTC\logger.c
 0000                   .dbfunc e Logger_Start _Logger_Start fV
 0000           _Logger_Start::
 0000                   .dbline -1
 0000                   .dbline 12
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "Logger.h"
 0000           ; #include "TempSensor.h"
 0000           ; #include "Persist.h"
 0000           ; #include "Rtc.h"
 0000           ; #include "BcdUtil.h"
 0000           ; #include "LedArray.h"
 0000           ; #include <stdio.h>
 0000           ; 
 0000           ; void Logger_Start(void)
 0000           ; {
 0000                   .dbline -2
 0000           L33:
 0000                   .dbline 0 ; func end
 0000 7F                ret
 0001                   .dbend
 0001                   .dbfunc e Logger_End _Logger_End fV
 0001           _Logger_End::
 0001                   .dbline -1
 0001                   .dbline 17
 0001           ;       
 0001           ; }
 0001           ; 
 0001           ; void Logger_End(void)
 0001           ; {
 0001                   .dbline -2
 0001           L34:
 0001                   .dbline 0 ; func end
 0001 7F                ret
 0002                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Rod\Desktop\RTC\RTC\logger.c
 0000           L36:
 0000 00                .byte 0
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Rod\Desktop\RTC\RTC\logger.c
 0000           L37:
 0000 00                .byte 0
                        .area text(rom, con, rel)
 0002                   .dbfile C:\Users\Rod\Desktop\RTC\RTC\logger.c
 0002                   .dbfunc e Logger_Loop _Logger_Loop fV
 0002                   .dbstruct 0 1 .4
 0002                   .dbfield 0 registerEnabled F[8:1]
 0002                   .dbfield 0 alarmEnabled F[9:1]
 0002                   .dbend
 0002                   .dbstruct 0 2 .1
 0002                   .dbfield 0 hour c
 0002                   .dbfield 1 min c
 0002                   .dbend
 0002                   .dbstruct 0 11 .3
 0002                   .dbfield 0 flags S[.4]
 0002                   .dbfield 1 registerStart S[.1]
 0002                   .dbfield 3 registerEnd S[.1]
 0002                   .dbfield 5 maxTemp c
 0002                   .dbfield 6 minTemp c
 0002                   .dbfield 7 maxRegisteredTemp c
 0002                   .dbfield 8 minRegisteredTemp c
 0002                   .dbfield 9 nRecords s
 0002                   .dbend
 0002                   .dbstruct 0 3 .2
 0002                   .dbfield 0 date c
 0002                   .dbfield 1 month c
 0002                   .dbfield 2 year c
 0002                   .dbend
 0002                   .dbstruct 0 6 .6
 0002                   .dbfield 0 date S[.2]
 0002                   .dbfield 3 time S[.1]
 0002                   .dbfield 5 temp c
 0002                   .dbend
 0002                   .dbsym s previousSecond L37 c
 0002                   .dbsym s elapsedSeconds L36 c
 0002           ;            now -> X+30
 0002           ;    currentYear -> X+29
 0002           ;   currentMonth -> X+28
 0002           ;    currentDate -> X+27
 0002           ;     currentMin -> X+26
 0002           ;    currentHour -> X+25
 0002           ;   timestampEnd -> X+23
 0002           ; timestampStart -> X+21
 0002           ;         record -> X+15
 0002           ;   timestampNow -> X+13
 0002           ;    currentTemp -> X+12
 0002           ;  currentSecond -> X+11
 0002           ;           conf -> X+0
 0002           _Logger_Loop::
 0002                   .dbline -1
 0002 10                push X
 0003 4F                mov X,SP
 0004 3820              add SP,32
 0006                   .dbline 22
 0006           ;       
 0006           ; }
 0006           ; 
 0006           ; void Logger_Loop(void)
 0006           ; {
 0006                   .dbline 31
 0006           ;       static BYTE elapsedSeconds, previousSecond;
 0006           ;       BYTE currentTemp, currentSecond;
 0006           ;       BYTE currentHour, currentMin, currentDate, currentMonth, currentYear;
 0006           ;       int timestampNow, timestampStart, timestampEnd;
 0006           ;       Time now;
 0006           ;       Config conf;
 0006           ;       Record record;
 0006           ;       
 0006           ;       Rtc_ReadFromRtc();
 0006 7C0000            xcall _Rtc_ReadFromRtc
 0009                   .dbline 34
 0009           ;       
 0009           ;       // Only proceed once in a second
 0009           ;       currentSecond = datetime._00h.bits.seconds;
 0009 62D000            mov REG[0xd0],>_datetime
 000C 5100              mov A,[_datetime]
 000E 210F              and A,15
 0010 540B              mov [X+11],A
 0012                   .dbline 35
 0012           ;       if (currentSecond != previousSecond)
 0012 62D000            mov REG[0xd0],>L37
 0015 520B              mov A,[X+11]
 0017 3A00              cmp A,[L37]
 0019 A2A9              jz L38
 001B                   .dbline 37
 001B           ;       {
 001B           ;               cprintf("Tick\n");
 001B                   .dbline 37
 001B 502E              mov A,>L40
 001D 08                push A
 001E 502E              mov A,<L40
 0020 08                push A
 0021 7C0000            xcall _cprintf
 0024                   .dbline 39
 0024           ;               
 0024           ;               previousSecond = currentSecond;
 0024 520B              mov A,[X+11]
 0026 62D000            mov REG[0xd0],>L37
 0029 5300              mov [L37],A
 002B                   .dbline 40
 002B           ;               elapsedSeconds++;
 002B 62D000            mov REG[0xd0],>L36
 002E 7600              inc [L36]
 0030                   .dbline 42
 0030           ;               
 0030           ;               Persist_LoadConfig(&conf);
 0030 62D000            mov REG[0xd0],>__r0
 0033 5007              mov A,7
 0035 08                push A
 0036 10                push X
 0037 7C0000            xcall _Persist_LoadConfig
 003A 38FC              add SP,-4
 003C 62D000            mov REG[0xd0],>__r0
 003F                   .dbline 43
 003F           ;               currentTemp = TempSensor_GetTemp();
 003F 7C0000            xcall _TempSensor_GetTemp
 0042 62D000            mov REG[0xd0],>__r0
 0045 5100              mov A,[__r1]
 0047 540C              mov [X+12],A
 0049                   .dbline 58
 0049           ;               
 0049           ;               // Get max and min temperatures
 0049           ; //            if (currentTemp > conf.maxRegisteredTemp)
 0049           ; //            {
 0049           ; //                    conf.maxRegisteredTemp = currentTemp;
 0049           ; //                    Persist_SaveConfig(&conf);
 0049           ; //            }
 0049           ; //            if (currentTemp < conf.minRegisteredTemp)
 0049           ; //            {
 0049           ; //                    conf.minRegisteredTemp = currentTemp;
 0049           ; //                    Persist_SaveConfig(&conf);
 0049           ; //            }
 0049           ;       
 0049           ;               // Once in a minute
 0049           ;               if(conf.flags.registerEnabled && elapsedSeconds > 59)
 0049 5200              mov A,[X+0]
 004B 67                asr A
 004C 67                asr A
 004D 67                asr A
 004E 67                asr A
 004F 67                asr A
 0050 67                asr A
 0051 67                asr A
 0052 2101              and A,1
 0054 5300              mov [__r0],A
 0056 260001            and [__r0],1
 0059 A22E              jz L41
 005B 62D000            mov REG[0xd0],>L36
 005E 503B              mov A,59
 0060 3A00              cmp A,[L36]
 0062 D225              jnc L41
 0064           X0:
 0064                   .dbline 60
 0064           ;               {
 0064           ;                       cprintf("Tock\n");
 0064                   .dbline 60
 0064 5028              mov A,>L43
 0066 08                push A
 0067 5028              mov A,<L43
 0069 08                push A
 006A 7C0000            xcall _cprintf
 006D                   .dbline 62
 006D           ;                       
 006D           ;                       elapsedSeconds = 0;
 006D 62D000            mov REG[0xd0],>L36
 0070 550000            mov [L36],0
 0073                   .dbline 64
 0073           ;                       
 0073           ;                       bcdToDec((datetime._02h.bits_24hrs.hours10), (datetime._02h.bits_24hrs.hours), &currentHour);
 0073 62D000            mov REG[0xd0],>__r0
 0076 5A00              mov [__r1],X
 0078 060019            add [__r1],25
 007B 5007              mov A,7
 007D 08                push A
 007E 5100              mov A,[__r1]
 0080 08                push A
 0081 62D000            mov REG[0xd0],>_datetime
 0084 5102              mov A,[_datetime+2]
 0086 210F              and A,15
 0088 08                push A
 0089 5102              mov A,[_datetime+2]
 008B 62D000            mov REG[0xd0],>__r0
 008E 67                asr A
 008F 67                asr A
 0090 67                asr A
 0091 67                asr A
 0092 210F              and A,15
 0094 5300              mov [__r0],A
 0096 260003            and [__r0],3
 0099 5100              mov A,[__r0]
 009B 08                push A
 009C 7C0000            xcall _bcdToDec
 009F 38FA              add SP,-6
 00A1                   .dbline 65
 00A1           ;                       bcdToDec((datetime._01h.bits.minutes10), (datetime._01h.bits.minutes), &currentMin);
 00A1 62D000            mov REG[0xd0],>__r0
 00A4 5A00              mov [__r1],X
 00A6 06001A            add [__r1],26
 00A9 5007              mov A,7
 00AB 08                push A
 00AC 5100              mov A,[__r1]
 00AE 08                push A
 00AF 62D000            mov REG[0xd0],>_datetime
 00B2 5101              mov A,[_datetime+1]
 00B4 210F              and A,15
 00B6 08                push A
 00B7 5101              mov A,[_datetime+1]
 00B9 62D000            mov REG[0xd0],>__r0
 00BC 67                asr A
 00BD 67                asr A
 00BE 67                asr A
 00BF 67                asr A
 00C0 210F              and A,15
 00C2 5300              mov [__r0],A
 00C4 260007            and [__r0],7
 00C7 5100              mov A,[__r0]
 00C9 08                push A
 00CA 7C0000            xcall _bcdToDec
 00CD                   .dbline 66
 00CD           ;                       bcdToDec((datetime._04h.bits.date10), (datetime._04h.bits.date), &currentDate);
 00CD 62D000            mov REG[0xd0],>__r0
 00D0 5A00              mov [__r1],X
 00D2 06001B            add [__r1],27
 00D5 5007              mov A,7
 00D7 08                push A
 00D8 5100              mov A,[__r1]
 00DA 08                push A
 00DB 62D000            mov REG[0xd0],>_datetime
 00DE 5104              mov A,[_datetime+4]
 00E0 210F              and A,15
 00E2 08                push A
 00E3 5104              mov A,[_datetime+4]
 00E5 62D000            mov REG[0xd0],>__r0
 00E8 67                asr A
 00E9 67                asr A
 00EA 67                asr A
 00EB 67                asr A
 00EC 210F              and A,15
 00EE 5300              mov [__r0],A
 00F0 260003            and [__r0],3
 00F3 5100              mov A,[__r0]
 00F5 08                push A
 00F6 7C0000            xcall _bcdToDec
 00F9 38F8              add SP,-8
 00FB                   .dbline 67
 00FB           ;                       bcdToDec((datetime._05h.bits.month10), (datetime._05h.bits.month), &currentMonth);
 00FB 62D000            mov REG[0xd0],>__r0
 00FE 5A00              mov [__r1],X
 0100 06001C            add [__r1],28
 0103 5007              mov A,7
 0105 08                push A
 0106 5100              mov A,[__r1]
 0108 08                push A
 0109 62D000            mov REG[0xd0],>_datetime
 010C 5105              mov A,[_datetime+5]
 010E 210F              and A,15
 0110 08                push A
 0111 5105              mov A,[_datetime+5]
 0113 62D000            mov REG[0xd0],>__r0
 0116 67                asr A
 0117 67                asr A
 0118 67                asr A
 0119 67                asr A
 011A 210F              and A,15
 011C 5300              mov [__r0],A
 011E 260001            and [__r0],1
 0121 5100              mov A,[__r0]
 0123 08                push A
 0124 7C0000            xcall _bcdToDec
 0127                   .dbline 68
 0127           ;                       bcdToDec((datetime._06h.bits.year10), (datetime._06h.bits.year), &currentYear);
 0127 62D000            mov REG[0xd0],>__r0
 012A 5A00              mov [__r1],X
 012C 06001D            add [__r1],29
 012F 5007              mov A,7
 0131 08                push A
 0132 5100              mov A,[__r1]
 0134 08                push A
 0135 62D000            mov REG[0xd0],>_datetime
 0138 5106              mov A,[_datetime+6]
 013A 210F              and A,15
 013C 08                push A
 013D 5106              mov A,[_datetime+6]
 013F 62D000            mov REG[0xd0],>__r0
 0142 67                asr A
 0143 67                asr A
 0144 67                asr A
 0145 67                asr A
 0146 210F              and A,15
 0148 5300              mov [__r0],A
 014A 26000F            and [__r0],15
 014D 5100              mov A,[__r0]
 014F 08                push A
 0150 7C0000            xcall _bcdToDec
 0153 38F8              add SP,-8
 0155                   .dbline 70
 0155           ;                       
 0155           ;                       timestampNow = (int)(currentHour)*60 + currentMin;
 0155 62D000            mov REG[0xd0],>__r0
 0158 521A              mov A,[X+26]
 015A 5300              mov [__r1],A
 015C 550000            mov [__r0],0
 015F 5219              mov A,[X+25]
 0161 5300              mov [__r3],A
 0163 5000              mov A,0
 0165 08                push A
 0166 5100              mov A,[__r3]
 0168 08                push A
 0169 5000              mov A,0
 016B 08                push A
 016C 503C              mov A,60
 016E 08                push A
 016F 7C0000            xcall __mul16
 0172 38FC              add SP,-4
 0174 5100              mov A,[__rX]
 0176 5300              mov [__r3],A
 0178 5100              mov A,[__rY]
 017A 5300              mov [__r2],A
 017C 5100              mov A,[__r3]
 017E 0200              add A,[__r1]
 0180 540E              mov [X+14],A
 0182 5100              mov A,[__r2]
 0184 0A00              adc A,[__r0]
 0186 540D              mov [X+13],A
 0188                   .dbline 71
 0188           ;                       timestampStart = (int)(conf.registerStart.hour)*60 + conf.registerStart.min;
 0188 5202              mov A,[X+2]
 018A 5300              mov [__r1],A
 018C 5201              mov A,[X+1]
 018E 5300              mov [__r3],A
 0190 5000              mov A,0
 0192 08                push A
 0193 5100              mov A,[__r3]
 0195 08                push A
 0196 5000              mov A,0
 0198 08                push A
 0199 503C              mov A,60
 019B 08                push A
 019C 7C0000            xcall __mul16
 019F 38FC              add SP,-4
 01A1 5100              mov A,[__rX]
 01A3 5300              mov [__r3],A
 01A5 5100              mov A,[__rY]
 01A7 5300              mov [__r2],A
 01A9 5100              mov A,[__r3]
 01AB 0200              add A,[__r1]
 01AD 5416              mov [X+22],A
 01AF 5100              mov A,[__r2]
 01B1 0A00              adc A,[__r0]
 01B3 5415              mov [X+21],A
 01B5                   .dbline 72
 01B5           ;                       timestampEnd = (int)(conf.registerEnd.hour)*60 + conf.registerEnd.min;
 01B5 5204              mov A,[X+4]
 01B7 5300              mov [__r1],A
 01B9 5203              mov A,[X+3]
 01BB 5300              mov [__r3],A
 01BD 5000              mov A,0
 01BF 08                push A
 01C0 5100              mov A,[__r3]
 01C2 08                push A
 01C3 5000              mov A,0
 01C5 08                push A
 01C6 503C              mov A,60
 01C8 08                push A
 01C9 7C0000            xcall __mul16
 01CC 38FC              add SP,-4
 01CE 5100              mov A,[__rX]
 01D0 5300              mov [__r3],A
 01D2 5100              mov A,[__rY]
 01D4 5300              mov [__r2],A
 01D6 5100              mov A,[__r3]
 01D8 0200              add A,[__r1]
 01DA 5418              mov [X+24],A
 01DC 5100              mov A,[__r2]
 01DE 0A00              adc A,[__r0]
 01E0 5417              mov [X+23],A
 01E2                   .dbline 74
 01E2           ;                       
 01E2           ;                       cprintf("Horas: %d:%d - %d:%d", conf.registerStart.hour, conf.registerStart.min, conf.registerEnd.hour, conf.registerEnd.min);
 01E2 5204              mov A,[X+4]
 01E4 5300              mov [__r1],A
 01E6 5000              mov A,0
 01E8 08                push A
 01E9 5100              mov A,[__r1]
 01EB 08                push A
 01EC 5203              mov A,[X+3]
 01EE 5300              mov [__r1],A
 01F0 5000              mov A,0
 01F2 08                push A
 01F3 5100              mov A,[__r1]
 01F5 08                push A
 01F6 5202              mov A,[X+2]
 01F8 5300              mov [__r1],A
 01FA 5000              mov A,0
 01FC 08                push A
 01FD 5100              mov A,[__r1]
 01FF 08                push A
 0200 5201              mov A,[X+1]
 0202 5300              mov [__r1],A
 0204 5000              mov A,0
 0206 08                push A
 0207 5100              mov A,[__r1]
 0209 08                push A
 020A 5013              mov A,>L60
 020C 08                push A
 020D 5013              mov A,<L60
 020F 08                push A
 0210 7C0000            xcall _cprintf
 0213                   .dbline 76
 0213           ;                       
 0213           ;                       cprintf("Tiempos: %d %d %d\n", timestampNow, timestampStart, timestampEnd);
 0213 5217              mov A,[X+23]
 0215 08                push A
 0216 5218              mov A,[X+24]
 0218 08                push A
 0219 5215              mov A,[X+21]
 021B 08                push A
 021C 5216              mov A,[X+22]
 021E 08                push A
 021F 520D              mov A,[X+13]
 0221 08                push A
 0222 520E              mov A,[X+14]
 0224 08                push A
 0225 5000              mov A,>L67
 0227 08                push A
 0228 5000              mov A,<L67
 022A 08                push A
 022B 7C0000            xcall _cprintf
 022E 38EE              add SP,-18
 0230                   .dbline 78
 0230           ;                       
 0230           ;                       if(timestampNow >= timestampStart && timestampNow < timestampEnd)
 0230 520E              mov A,[X+14]
 0232 1316              sub A,[X+22]
 0234 5215              mov A,[X+21]
 0236 3180              xor A,-128
 0238 62D000            mov REG[0xd0],>__r0
 023B 5300              mov [__rX],A
 023D 520D              mov A,[X+13]
 023F 3180              xor A,-128
 0241 1A00              sbb A,[__rX]
 0243 C044              jc L68
 0245           X1:
 0245 520E              mov A,[X+14]
 0247 1318              sub A,[X+24]
 0249 5217              mov A,[X+23]
 024B 3180              xor A,-128
 024D 62D000            mov REG[0xd0],>__r0
 0250 5300              mov [__rX],A
 0252 520D              mov A,[X+13]
 0254 3180              xor A,-128
 0256 1A00              sbb A,[__rX]
 0258 D02F              jnc L68
 025A           X2:
 025A                   .dbline 81
 025A           ;                       {
 025A           ;                               // Log
 025A           ;                               record.temp = currentTemp;
 025A                   .dbline 81
 025A 520C              mov A,[X+12]
 025C 5414              mov [X+20],A
 025E                   .dbline 82
 025E           ;                               record.time.hour = currentHour;
 025E 5219              mov A,[X+25]
 0260 5412              mov [X+18],A
 0262                   .dbline 83
 0262           ;                               record.time.min = currentMin;
 0262 521A              mov A,[X+26]
 0264 5413              mov [X+19],A
 0266                   .dbline 84
 0266           ;                               record.date.date = currentDate;
 0266 521B              mov A,[X+27]
 0268 540F              mov [X+15],A
 026A                   .dbline 85
 026A           ;                               record.date.month = currentMonth;
 026A 521C              mov A,[X+28]
 026C 5410              mov [X+16],A
 026E                   .dbline 86
 026E           ;                               record.date.year = currentYear;
 026E 521D              mov A,[X+29]
 0270 5411              mov [X+17],A
 0272                   .dbline 87
 0272           ;                               Persist_SaveRecord(&record);
 0272 62D000            mov REG[0xd0],>__r0
 0275 5A00              mov [__r1],X
 0277 06000F            add [__r1],15
 027A 5007              mov A,7
 027C 08                push A
 027D 5100              mov A,[__r1]
 027F 08                push A
 0280 7C0000            xcall _Persist_SaveRecord
 0283 38FE              add SP,-2
 0285 62D000            mov REG[0xd0],>__r0
 0288                   .dbline 88
 0288           ;                       }
 0288           L68:
 0288                   .dbline 90
 0288           ;                       
 0288           ;               }
 0288           L41:
 0288                   .dbline 92
 0288           ;       
 0288           ;               if(conf.flags.alarmEnabled)
 0288 5200              mov A,[X+0]
 028A 62D000            mov REG[0xd0],>__r0
 028D 67                asr A
 028E 67                asr A
 028F 67                asr A
 0290 67                asr A
 0291 67                asr A
 0292 67                asr A
 0293 2103              and A,3
 0295 5300              mov [__r0],A
 0297 260001            and [__r0],1
 029A A023              jz L76
 029C                   .dbline 94
 029C           ;               {
 029C           ;                       if(currentTemp > conf.maxTemp || currentTemp < conf.minTemp)
 029C                   .dbline 94
 029C 5205              mov A,[X+5]
 029E 3B0C              cmp A,[X+12]
 02A0 C007              jc L82
 02A2           X3:
 02A2 520C              mov A,[X+12]
 02A4 3B06              cmp A,[X+6]
 02A6 D010              jnc L78
 02A8           X4:
 02A8           L82:
 02A8                   .dbline 96
 02A8           ;                       {
 02A8           ;                               PWM8_Start();
 02A8                   .dbline 96
 02A8 10                push X
 02A9 7C0000            xcall _PWM8_Start
 02AC 20                pop X
 02AD                   .dbline 97
 02AD           ;                               Leds_TurnOn(LEDS_MASK);
 02AD 5018              mov A,24
 02AF 08                push A
 02B0 7C0000            xcall _Leds_TurnOn
 02B3 38FF              add SP,-1
 02B5                   .dbline 98
 02B5           ;                       }
 02B5 800D              xjmp L77
 02B7           L78:
 02B7                   .dbline 100
 02B7           ;                       else
 02B7           ;                       {
 02B7                   .dbline 101
 02B7           ;                               PWM8_Stop();
 02B7 10                push X
 02B8 7C0000            xcall _PWM8_Stop
 02BB 20                pop X
 02BC                   .dbline 102
 02BC           ;                       }
 02BC                   .dbline 103
 02BC           ;               }
 02BC 8006              xjmp L77
 02BE           L76:
 02BE                   .dbline 105
 02BE           ;               else 
 02BE           ;               {
 02BE                   .dbline 106
 02BE           ;                       PWM8_Stop();
 02BE 10                push X
 02BF 7C0000            xcall _PWM8_Stop
 02C2 20                pop X
 02C3                   .dbline 107
 02C3           ;               }
 02C3           L77:
 02C3                   .dbline 109
 02C3           ;               
 02C3           ;       }
 02C3           L38:
 02C3                   .dbline -2
 02C3           L35:
 02C3 38E0              add SP,-32
 02C5 20                pop X
 02C6                   .dbline 0 ; func end
 02C6 7F                ret
 02C7                   .dbsym l now 30 S[.1]
 02C7                   .dbsym l currentYear 29 c
 02C7                   .dbsym l currentMonth 28 c
 02C7                   .dbsym l currentDate 27 c
 02C7                   .dbsym l currentMin 26 c
 02C7                   .dbsym l currentHour 25 c
 02C7                   .dbsym l timestampEnd 23 I
 02C7                   .dbsym l timestampStart 21 I
 02C7                   .dbsym l record 15 S[.6]
 02C7                   .dbsym l timestampNow 13 I
 02C7                   .dbsym l currentTemp 12 c
 02C7                   .dbsym l currentSecond 11 c
 02C7                   .dbsym l conf 0 S[.3]
 02C7                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L67:
 0000 5469656D706F733A2025642025642025  .byte 'T,'i,'e,'m,'p,'o,'s,58,32,37,'d,32,37,'d,32,37
 0010 640A00            .byte 'd,10,0
 0013           L60:
 0013 486F7261733A2025643A2564202D2025  .byte 'H,'o,'r,'a,'s,58,32,37,'d,58,37,'d,32,45,32,37
 0023 643A256400        .byte 'd,58,37,'d,0
 0028           L43:
 0028 546F636B0A00      .byte 'T,'o,'c,'k,10,0
 002E           L40:
 002E 5469636B0A00      .byte 'T,'i,'c,'k,10,0
