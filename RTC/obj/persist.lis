 0000                   cpu LMM
                        .module persist.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./persist.c
 0000                   .dbfile Z:\Desktop\RTC\RTC\persist.c
 0000                   .dbfunc e Persist_Start _Persist_Start fV
 0000           _Persist_Start::
 0000                   .dbline -1
 0000                   .dbline 8
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "EEPROM.h"
 0000           ; #include "Persist.h"
 0000           ; #include <stdio.h>
 0000           ; 
 0000           ; void Persist_Start(void)
 0000           ; {
 0000                   .dbline 9
 0000           ;       EEPROM_Start();
 0000 7C0000            xcall _EEPROM_Start
 0003                   .dbline -2
 0003           L7:
 0003                   .dbline 0 ; func end
 0003 7F                ret
 0004                   .dbend
 0004                   .dbfunc e Persist_Stop _Persist_Stop fV
 0004           _Persist_Stop::
 0004                   .dbline -1
 0004                   .dbline 13
 0004           ; }
 0004           ; 
 0004           ; void Persist_Stop(void)
 0004           ; {
 0004                   .dbline 14
 0004           ;       EEPROM_Stop();
 0004 7C0000            xcall _EEPROM_Stop
 0007                   .dbline -2
 0007           L8:
 0007                   .dbline 0 ; func end
 0007 7F                ret
 0008                   .dbend
 0008                   .dbfunc e Persist_Clear _Persist_Clear fV
 0008                   .dbstruct 0 1 .4
 0008                   .dbfield 0 registerEnabled F[8:1]
 0008                   .dbfield 0 alarmEnabled F[9:1]
 0008                   .dbend
 0008                   .dbstruct 0 2 .1
 0008                   .dbfield 0 hour c
 0008                   .dbfield 1 min c
 0008                   .dbend
 0008                   .dbstruct 0 11 .3
 0008                   .dbfield 0 flags S[.4]
 0008                   .dbfield 1 registerStart S[.1]
 0008                   .dbfield 3 registerEnd S[.1]
 0008                   .dbfield 5 maxTemp c
 0008                   .dbfield 6 minTemp c
 0008                   .dbfield 7 maxRegisteredTemp c
 0008                   .dbfield 8 minRegisteredTemp c
 0008                   .dbfield 9 nRecords s
 0008                   .dbend
 0008           ;    blankConfig -> X+0
 0008           _Persist_Clear::
 0008                   .dbline -1
 0008 10                push X
 0009 4F                mov X,SP
 000A 380B              add SP,11
 000C                   .dbline 18
 000C           ; }
 000C           ; 
 000C           ; void Persist_Clear(void)
 000C           ; {
 000C                   .dbline 20
 000C           ;       Config blankConfig;
 000C           ;       blankConfig.flags.alarmEnabled = FALSE;
 000C 62D000            mov REG[0xd0],>__r0
 000F 5200              mov A,[X+0]
 0011 21BF              and A,-65
 0013 5400              mov [X+0],A
 0015                   .dbline 21
 0015           ;       blankConfig.flags.registerEnabled = FALSE;
 0015 5200              mov A,[X+0]
 0017 217F              and A,127
 0019 5400              mov [X+0],A
 001B                   .dbline 22
 001B           ;       blankConfig.registerStart.hour = 0;
 001B 560100            mov [X+1],0
 001E                   .dbline 23
 001E           ;       blankConfig.registerStart.min = 0;
 001E 560200            mov [X+2],0
 0021                   .dbline 24
 0021           ;       blankConfig.registerEnd.hour = 0;
 0021 560300            mov [X+3],0
 0024                   .dbline 25
 0024           ;       blankConfig.registerEnd.min = 0;
 0024 560400            mov [X+4],0
 0027                   .dbline 26
 0027           ;       blankConfig.maxTemp = 0;
 0027 560500            mov [X+5],0
 002A                   .dbline 27
 002A           ;       blankConfig.minTemp = 0;
 002A 560600            mov [X+6],0
 002D                   .dbline 28
 002D           ;       blankConfig.maxRegisteredTemp = 0;
 002D 560700            mov [X+7],0
 0030                   .dbline 29
 0030           ;       blankConfig.minRegisteredTemp = 0;
 0030 560800            mov [X+8],0
 0033                   .dbline 30
 0033           ;       blankConfig.nRecords = 0;
 0033 560A00            mov [X+10],0
 0036 560900            mov [X+9],0
 0039                   .dbline 32
 0039           ; 
 0039           ;       Persist_SaveConfig(&blankConfig);
 0039 5007              mov A,7
 003B 08                push A
 003C 10                push X
 003D 910C              xcall _Persist_SaveConfig
 003F 38FE              add SP,-2
 0041 62D000            mov REG[0xd0],>__r0
 0044                   .dbline -2
 0044           L9:
 0044 38F5              add SP,-11
 0046 20                pop X
 0047                   .dbline 0 ; func end
 0047 7F                ret
 0048                   .dbsym l blankConfig 0 S[.3]
 0048                   .dbend
 0048                   .dbfunc e Persist_SaveRecord _Persist_SaveRecord fc
 0048                   .dbstruct 0 3 .2
 0048                   .dbfield 0 date c
 0048                   .dbfield 1 month c
 0048                   .dbfield 2 year c
 0048                   .dbend
 0048                   .dbstruct 0 6 .6
 0048                   .dbfield 0 date S[.2]
 0048                   .dbfield 3 time S[.1]
 0048                   .dbfield 5 temp c
 0048                   .dbend
 0048           ;          index -> X+11
 0048           ;           conf -> X+0
 0048           ;         record -> X-5
 0048           _Persist_SaveRecord::
 0048                   .dbline -1
 0048 10                push X
 0049 4F                mov X,SP
 004A 380D              add SP,13
 004C                   .dbline 37
 004C           ; }
 004C           ; 
 004C           ; // saves new record and increments config.nRecords. returns success or error.
 004C           ; BOOL Persist_SaveRecord(Record *record)
 004C           ; {
 004C                   .dbline 40
 004C           ;       unsigned short index;
 004C           ;       Config conf;
 004C           ;       Persist_LoadConfig(&conf);
 004C 62D000            mov REG[0xd0],>__r0
 004F 5007              mov A,7
 0051 08                push A
 0052 10                push X
 0053 911C              xcall _Persist_LoadConfig
 0055 38FE              add SP,-2
 0057 62D000            mov REG[0xd0],>__r0
 005A                   .dbline 41
 005A           ;       conf.nRecords++;
 005A 770A              inc [X+10]
 005C 0F0900            adc [X+9],0
 005F                   .dbline 43
 005F           ; 
 005F           ;       if(conf.nRecords > MAX_RECORDS) return FALSE;
 005F 5088              mov A,-120
 0061 130A              sub A,[X+10]
 0063 5013              mov A,19
 0065 1B09              sbb A,[X+9]
 0067 D008              jnc L23
 0069           X0:
 0069                   .dbline 43
 0069 62D000            mov REG[0xd0],>__r0
 006C 5000              mov A,0
 006E 8080              xjmp L21
 0070           L23:
 0070                   .dbline 45
 0070           ; 
 0070           ;       index = sizeof(Config) + ((conf.nRecords - 1) * sizeof(Record));
 0070 62D000            mov REG[0xd0],>__r0
 0073 520A              mov A,[X+10]
 0075 1101              sub A,1
 0077 5300              mov [__r1],A
 0079 5209              mov A,[X+9]
 007B 1900              sbb A,0
 007D 08                push A
 007E 5100              mov A,[__r1]
 0080 08                push A
 0081 5000              mov A,0
 0083 08                push A
 0084 5006              mov A,6
 0086 08                push A
 0087 7C0000            xcall __mul16
 008A 38FC              add SP,-4
 008C 5100              mov A,[__rX]
 008E 5300              mov [__r1],A
 0090 5100              mov A,[__rY]
 0092 5300              mov [__r0],A
 0094 5100              mov A,[__r1]
 0096 010B              add A,11
 0098 540C              mov [X+12],A
 009A 5100              mov A,[__r0]
 009C 0900              adc A,0
 009E 540B              mov [X+11],A
 00A0                   .dbline 47
 00A0           ;       
 00A0           ;       cprintf("Record Index: %d\nNrecords: %d\n", index, conf.nRecords);
 00A0 5209              mov A,[X+9]
 00A2 08                push A
 00A3 520A              mov A,[X+10]
 00A5 08                push A
 00A6 520B              mov A,[X+11]
 00A8 08                push A
 00A9 520C              mov A,[X+12]
 00AB 08                push A
 00AC 5000              mov A,>L27
 00AE 08                push A
 00AF 5000              mov A,<L27
 00B1 08                push A
 00B2 7C0000            xcall _cprintf
 00B5                   .dbline 49
 00B5           ; 
 00B5           ;       if(EEPROM_Write((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
 00B5 5006              mov A,6
 00B7 08                push A
 00B8 520B              mov A,[X+11]
 00BA 08                push A
 00BB 520C              mov A,[X+12]
 00BD 08                push A
 00BE 52FB              mov A,[X-5]
 00C0 08                push A
 00C1 52FC              mov A,[X-4]
 00C3 08                push A
 00C4 7C0000            xcall _EEPROM_Write
 00C7 38F5              add SP,-11
 00C9 62D000            mov REG[0xd0],>__r0
 00CC 3900              cmp A,0
 00CE A005              jz L29
 00D0                   .dbline 49
 00D0 5000              mov A,0
 00D2 801C              xjmp L21
 00D4           L29:
 00D4                   .dbline 50
 00D4           ;       if(!Persist_SaveConfig(&conf)) return FALSE;
 00D4 62D000            mov REG[0xd0],>__r0
 00D7 5007              mov A,7
 00D9 08                push A
 00DA 10                push X
 00DB 906E              xcall _Persist_SaveConfig
 00DD 38FE              add SP,-2
 00DF 62D000            mov REG[0xd0],>__r0
 00E2 3900              cmp A,0
 00E4 B005              jnz L31
 00E6                   .dbline 50
 00E6 5000              mov A,0
 00E8 8006              xjmp L21
 00EA           L31:
 00EA                   .dbline 52
 00EA           ; 
 00EA           ;       return TRUE;
 00EA 62D000            mov REG[0xd0],>__r0
 00ED 5001              mov A,1
 00EF                   .dbline -2
 00EF           L21:
 00EF 38F3              add SP,-13
 00F1 20                pop X
 00F2                   .dbline 0 ; func end
 00F2 7F                ret
 00F3                   .dbsym l index 11 s
 00F3                   .dbsym l conf 0 S[.3]
 00F3                   .dbsym l record -5 pS[.6]
 00F3                   .dbend
 00F3                   .dbfunc e Persist_LoadRecord _Persist_LoadRecord fc
 00F3           ;          index -> X+0
 00F3           ;              n -> X-6
 00F3           ;         record -> X-5
 00F3           _Persist_LoadRecord::
 00F3                   .dbline -1
 00F3 10                push X
 00F4 4F                mov X,SP
 00F5 3802              add SP,2
 00F7                   .dbline 57
 00F7           ; }
 00F7           ; 
 00F7           ; // Loads record n in record.
 00F7           ; BOOL Persist_LoadRecord(Record *record, BYTE n)
 00F7           ; {
 00F7                   .dbline 58
 00F7           ;       unsigned short index = sizeof(Config) + (n * sizeof(Record));
 00F7 62D000            mov REG[0xd0],>__r0
 00FA 52FA              mov A,[X-6]
 00FC 5300              mov [__r1],A
 00FE 5000              mov A,0
 0100 08                push A
 0101 5100              mov A,[__r1]
 0103 08                push A
 0104 5000              mov A,0
 0106 08                push A
 0107 5006              mov A,6
 0109 08                push A
 010A 7C0000            xcall __mul16
 010D 38FC              add SP,-4
 010F 5100              mov A,[__rX]
 0111 5300              mov [__r1],A
 0113 5100              mov A,[__rY]
 0115 5300              mov [__r0],A
 0117 5100              mov A,[__r1]
 0119 010B              add A,11
 011B 5401              mov [X+1],A
 011D 5100              mov A,[__r0]
 011F 0900              adc A,0
 0121 5400              mov [X+0],A
 0123                   .dbline 60
 0123           ; 
 0123           ;       if(EEPROM_Read((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
 0123 5006              mov A,6
 0125 08                push A
 0126 5200              mov A,[X+0]
 0128 08                push A
 0129 5201              mov A,[X+1]
 012B 08                push A
 012C 52FB              mov A,[X-5]
 012E 08                push A
 012F 52FC              mov A,[X-4]
 0131 08                push A
 0132 7C0000            xcall _EEPROM_Read
 0135 38FB              add SP,-5
 0137 62D000            mov REG[0xd0],>__r0
 013A 3900              cmp A,0
 013C A005              jz L34
 013E                   .dbline 60
 013E 5000              mov A,0
 0140 8006              xjmp L33
 0142           L34:
 0142                   .dbline 62
 0142           ; 
 0142           ;       return TRUE;
 0142 62D000            mov REG[0xd0],>__r0
 0145 5001              mov A,1
 0147                   .dbline -2
 0147           L33:
 0147 38FE              add SP,-2
 0149 20                pop X
 014A                   .dbline 0 ; func end
 014A 7F                ret
 014B                   .dbsym l index 0 s
 014B                   .dbsym l n -6 c
 014B                   .dbsym l record -5 pS[.6]
 014B                   .dbend
 014B                   .dbfunc e Persist_SaveConfig _Persist_SaveConfig fc
 014B           ;         config -> X-5
 014B           _Persist_SaveConfig::
 014B                   .dbline -1
 014B 10                push X
 014C 4F                mov X,SP
 014D                   .dbline 67
 014D           ; }
 014D           ; 
 014D           ; // Saves config
 014D           ; BOOL Persist_SaveConfig(Config *config)
 014D           ; {
 014D                   .dbline 68
 014D           ;       if(EEPROM_Write((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
 014D 500B              mov A,11
 014F 08                push A
 0150 5000              mov A,0
 0152 08                push A
 0153 08                push A
 0154 52FB              mov A,[X-5]
 0156 08                push A
 0157 52FC              mov A,[X-4]
 0159 08                push A
 015A 7C0000            xcall _EEPROM_Write
 015D 38FB              add SP,-5
 015F 62D000            mov REG[0xd0],>__r0
 0162 3900              cmp A,0
 0164 A005              jz L37
 0166                   .dbline 68
 0166 5000              mov A,0
 0168 8006              xjmp L36
 016A           L37:
 016A                   .dbline 70
 016A           ; 
 016A           ;       return TRUE;
 016A 62D000            mov REG[0xd0],>__r0
 016D 5001              mov A,1
 016F                   .dbline -2
 016F           L36:
 016F 20                pop X
 0170                   .dbline 0 ; func end
 0170 7F                ret
 0171                   .dbsym l config -5 pS[.3]
 0171                   .dbend
 0171                   .dbfunc e Persist_LoadConfig _Persist_LoadConfig fc
 0171           ;         config -> X-5
 0171           _Persist_LoadConfig::
 0171                   .dbline -1
 0171 10                push X
 0172 4F                mov X,SP
 0173                   .dbline 75
 0173           ; }
 0173           ; 
 0173           ; // Loads config.
 0173           ; BOOL Persist_LoadConfig(Config *config)
 0173           ; {
 0173                   .dbline 76
 0173           ;       if(EEPROM_Read((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
 0173 500B              mov A,11
 0175 08                push A
 0176 5000              mov A,0
 0178 08                push A
 0179 08                push A
 017A 52FB              mov A,[X-5]
 017C 08                push A
 017D 52FC              mov A,[X-4]
 017F 08                push A
 0180 7C0000            xcall _EEPROM_Read
 0183 38FB              add SP,-5
 0185 62D000            mov REG[0xd0],>__r0
 0188 3900              cmp A,0
 018A A005              jz L40
 018C                   .dbline 76
 018C 5000              mov A,0
 018E 8006              xjmp L39
 0190           L40:
 0190                   .dbline 78
 0190           ; 
 0190           ;       return TRUE;
 0190 62D000            mov REG[0xd0],>__r0
 0193 5001              mov A,1
 0195                   .dbline -2
 0195           L39:
 0195 20                pop X
 0196                   .dbline 0 ; func end
 0196 7F                ret
 0197                   .dbsym l config -5 pS[.3]
 0197                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L27:
 0000 5265636F726420496E6465783A202564  .byte 'R,'e,'c,'o,'r,'d,32,'I,'n,'d,'e,'x,58,32,37,'d
 0010 0A4E7265636F7264733A2025640A00    .byte 10,'N,'r,'e,'c,'o,'r,'d,'s,58,32,37,'d,10,0
