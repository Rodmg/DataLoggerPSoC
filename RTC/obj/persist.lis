 0000                   cpu LMM
                        .module persist.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./persist.c
 0000                   .dbfile Z:\Desktop\RTC\RTC\persist.c
 0000                   .dbfunc e Persist_Start _Persist_Start fV
 0000           _Persist_Start::
 0000                   .dbline -1
 0000                   .dbline 8
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "EEPROM.h"
 0000           ; #include "Persist.h"
 0000           ; //#include <stdio.h>
 0000           ; 
 0000           ; void Persist_Start(void)
 0000           ; {
 0000                   .dbline 9
 0000           ;       EEPROM_Start();
 0000 7C0000            xcall _EEPROM_Start
 0003                   .dbline -2
 0003           L7:
 0003                   .dbline 0 ; func end
 0003 7F                ret
 0004                   .dbend
 0004                   .dbfunc e Persist_Stop _Persist_Stop fV
 0004           _Persist_Stop::
 0004                   .dbline -1
 0004                   .dbline 13
 0004           ; }
 0004           ; 
 0004           ; void Persist_Stop(void)
 0004           ; {
 0004                   .dbline 14
 0004           ;       EEPROM_Stop();
 0004 7C0000            xcall _EEPROM_Stop
 0007                   .dbline -2
 0007           L8:
 0007                   .dbline 0 ; func end
 0007 7F                ret
 0008                   .dbend
 0008                   .dbfunc e Persist_Clear _Persist_Clear fV
 0008                   .dbstruct 0 1 .4
 0008                   .dbfield 0 registerEnabled F[8:1]
 0008                   .dbfield 0 alarmEnabled F[9:1]
 0008                   .dbend
 0008                   .dbstruct 0 2 .1
 0008                   .dbfield 0 hour c
 0008                   .dbfield 1 min c
 0008                   .dbend
 0008                   .dbstruct 0 11 .3
 0008                   .dbfield 0 flags S[.4]
 0008                   .dbfield 1 registerStart S[.1]
 0008                   .dbfield 3 registerEnd S[.1]
 0008                   .dbfield 5 maxTemp c
 0008                   .dbfield 6 minTemp c
 0008                   .dbfield 7 maxRegisteredTemp c
 0008                   .dbfield 8 minRegisteredTemp c
 0008                   .dbfield 9 nRecords s
 0008                   .dbend
 0008           ;    blankConfig -> X+0
 0008           _Persist_Clear::
 0008                   .dbline -1
 0008 10                push X
 0009 4F                mov X,SP
 000A 380B              add SP,11
 000C                   .dbline 18
 000C           ; }
 000C           ; 
 000C           ; void Persist_Clear(void)
 000C           ; {
 000C                   .dbline 20
 000C           ;       Config blankConfig;
 000C           ;       blankConfig.flags.alarmEnabled = FALSE;
 000C 62D000            mov REG[0xd0],>__r0
 000F 5200              mov A,[X+0]
 0011 21BF              and A,-65
 0013 5400              mov [X+0],A
 0015                   .dbline 21
 0015           ;       blankConfig.flags.registerEnabled = FALSE;
 0015 5200              mov A,[X+0]
 0017 217F              and A,127
 0019 5400              mov [X+0],A
 001B                   .dbline 22
 001B           ;       blankConfig.registerStart.hour = 0;
 001B 560100            mov [X+1],0
 001E                   .dbline 23
 001E           ;       blankConfig.registerStart.min = 0;
 001E 560200            mov [X+2],0
 0021                   .dbline 24
 0021           ;       blankConfig.registerEnd.hour = 0;
 0021 560300            mov [X+3],0
 0024                   .dbline 25
 0024           ;       blankConfig.registerEnd.min = 0;
 0024 560400            mov [X+4],0
 0027                   .dbline 26
 0027           ;       blankConfig.maxTemp = 0;
 0027 560500            mov [X+5],0
 002A                   .dbline 27
 002A           ;       blankConfig.minTemp = 0;
 002A 560600            mov [X+6],0
 002D                   .dbline 28
 002D           ;       blankConfig.maxRegisteredTemp = 0;
 002D 560700            mov [X+7],0
 0030                   .dbline 29
 0030           ;       blankConfig.minRegisteredTemp = 0;
 0030 560800            mov [X+8],0
 0033                   .dbline 30
 0033           ;       blankConfig.nRecords = 0;
 0033 560A00            mov [X+10],0
 0036 560900            mov [X+9],0
 0039                   .dbline 32
 0039           ; 
 0039           ;       Persist_SaveConfig(&blankConfig);
 0039 5007              mov A,7
 003B 08                push A
 003C 10                push X
 003D 90F7              xcall _Persist_SaveConfig
 003F 38FE              add SP,-2
 0041 62D000            mov REG[0xd0],>__r0
 0044                   .dbline -2
 0044           L9:
 0044 38F5              add SP,-11
 0046 20                pop X
 0047                   .dbline 0 ; func end
 0047 7F                ret
 0048                   .dbsym l blankConfig 0 S[.3]
 0048                   .dbend
 0048                   .dbfunc e Persist_SaveRecord _Persist_SaveRecord fc
 0048                   .dbstruct 0 3 .2
 0048                   .dbfield 0 date c
 0048                   .dbfield 1 month c
 0048                   .dbfield 2 year c
 0048                   .dbend
 0048                   .dbstruct 0 6 .6
 0048                   .dbfield 0 date S[.2]
 0048                   .dbfield 3 time S[.1]
 0048                   .dbfield 5 temp c
 0048                   .dbend
 0048           ;          index -> X+11
 0048           ;           conf -> X+0
 0048           ;         record -> X-5
 0048           _Persist_SaveRecord::
 0048                   .dbline -1
 0048 10                push X
 0049 4F                mov X,SP
 004A 380D              add SP,13
 004C                   .dbline 37
 004C           ; }
 004C           ; 
 004C           ; // saves new record and increments config.nRecords. returns success or error.
 004C           ; BOOL Persist_SaveRecord(Record *record)
 004C           ; {
 004C                   .dbline 40
 004C           ;       unsigned short index;
 004C           ;       Config conf;
 004C           ;       Persist_LoadConfig(&conf);
 004C 62D000            mov REG[0xd0],>__r0
 004F 5007              mov A,7
 0051 08                push A
 0052 10                push X
 0053 9107              xcall _Persist_LoadConfig
 0055 38FE              add SP,-2
 0057 62D000            mov REG[0xd0],>__r0
 005A                   .dbline 41
 005A           ;       conf.nRecords++;
 005A 770A              inc [X+10]
 005C 0F0900            adc [X+9],0
 005F                   .dbline 43
 005F           ; 
 005F           ;       if(conf.nRecords > MAX_RECORDS) return FALSE;
 005F 5088              mov A,-120
 0061 130A              sub A,[X+10]
 0063 5013              mov A,19
 0065 1B09              sbb A,[X+9]
 0067 D008              jnc L23
 0069           X0:
 0069                   .dbline 43
 0069 62D000            mov REG[0xd0],>__r0
 006C 5000              mov A,0
 006E 806B              xjmp L21
 0070           L23:
 0070                   .dbline 45
 0070           ; 
 0070           ;       index = sizeof(Config) + ((conf.nRecords - 1) * sizeof(Record));
 0070 62D000            mov REG[0xd0],>__r0
 0073 520A              mov A,[X+10]
 0075 1101              sub A,1
 0077 5300              mov [__r1],A
 0079 5209              mov A,[X+9]
 007B 1900              sbb A,0
 007D 08                push A
 007E 5100              mov A,[__r1]
 0080 08                push A
 0081 5000              mov A,0
 0083 08                push A
 0084 5006              mov A,6
 0086 08                push A
 0087 7C0000            xcall __mul16
 008A 38FC              add SP,-4
 008C 5100              mov A,[__rX]
 008E 5300              mov [__r1],A
 0090 5100              mov A,[__rY]
 0092 5300              mov [__r0],A
 0094 5100              mov A,[__r1]
 0096 010B              add A,11
 0098 540C              mov [X+12],A
 009A 5100              mov A,[__r0]
 009C 0900              adc A,0
 009E 540B              mov [X+11],A
 00A0                   .dbline 49
 00A0           ;       
 00A0           ;       //cprintf("Record Index: %d\nNrecords: %d\n", index, conf.nRecords);
 00A0           ; 
 00A0           ;       if(EEPROM_Write((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
 00A0 5006              mov A,6
 00A2 08                push A
 00A3 520B              mov A,[X+11]
 00A5 08                push A
 00A6 520C              mov A,[X+12]
 00A8 08                push A
 00A9 52FB              mov A,[X-5]
 00AB 08                push A
 00AC 52FC              mov A,[X-4]
 00AE 08                push A
 00AF 7C0000            xcall _EEPROM_Write
 00B2 38FB              add SP,-5
 00B4 62D000            mov REG[0xd0],>__r0
 00B7 3900              cmp A,0
 00B9 A005              jz L27
 00BB                   .dbline 49
 00BB 5000              mov A,0
 00BD 801C              xjmp L21
 00BF           L27:
 00BF                   .dbline 50
 00BF           ;       if(!Persist_SaveConfig(&conf)) return FALSE;
 00BF 62D000            mov REG[0xd0],>__r0
 00C2 5007              mov A,7
 00C4 08                push A
 00C5 10                push X
 00C6 906E              xcall _Persist_SaveConfig
 00C8 38FE              add SP,-2
 00CA 62D000            mov REG[0xd0],>__r0
 00CD 3900              cmp A,0
 00CF B005              jnz L29
 00D1                   .dbline 50
 00D1 5000              mov A,0
 00D3 8006              xjmp L21
 00D5           L29:
 00D5                   .dbline 52
 00D5           ; 
 00D5           ;       return TRUE;
 00D5 62D000            mov REG[0xd0],>__r0
 00D8 5001              mov A,1
 00DA                   .dbline -2
 00DA           L21:
 00DA 38F3              add SP,-13
 00DC 20                pop X
 00DD                   .dbline 0 ; func end
 00DD 7F                ret
 00DE                   .dbsym l index 11 s
 00DE                   .dbsym l conf 0 S[.3]
 00DE                   .dbsym l record -5 pS[.6]
 00DE                   .dbend
 00DE                   .dbfunc e Persist_LoadRecord _Persist_LoadRecord fc
 00DE           ;          index -> X+0
 00DE           ;              n -> X-6
 00DE           ;         record -> X-5
 00DE           _Persist_LoadRecord::
 00DE                   .dbline -1
 00DE 10                push X
 00DF 4F                mov X,SP
 00E0 3802              add SP,2
 00E2                   .dbline 57
 00E2           ; }
 00E2           ; 
 00E2           ; // Loads record n in record.
 00E2           ; BOOL Persist_LoadRecord(Record *record, BYTE n)
 00E2           ; {
 00E2                   .dbline 58
 00E2           ;       unsigned short index = sizeof(Config) + (n * sizeof(Record));
 00E2 62D000            mov REG[0xd0],>__r0
 00E5 52FA              mov A,[X-6]
 00E7 5300              mov [__r1],A
 00E9 5000              mov A,0
 00EB 08                push A
 00EC 5100              mov A,[__r1]
 00EE 08                push A
 00EF 5000              mov A,0
 00F1 08                push A
 00F2 5006              mov A,6
 00F4 08                push A
 00F5 7C0000            xcall __mul16
 00F8 38FC              add SP,-4
 00FA 5100              mov A,[__rX]
 00FC 5300              mov [__r1],A
 00FE 5100              mov A,[__rY]
 0100 5300              mov [__r0],A
 0102 5100              mov A,[__r1]
 0104 010B              add A,11
 0106 5401              mov [X+1],A
 0108 5100              mov A,[__r0]
 010A 0900              adc A,0
 010C 5400              mov [X+0],A
 010E                   .dbline 60
 010E           ; 
 010E           ;       if(EEPROM_Read((void*) record, index, sizeof(Record)) != EEPROM_NOERROR) return FALSE;
 010E 5006              mov A,6
 0110 08                push A
 0111 5200              mov A,[X+0]
 0113 08                push A
 0114 5201              mov A,[X+1]
 0116 08                push A
 0117 52FB              mov A,[X-5]
 0119 08                push A
 011A 52FC              mov A,[X-4]
 011C 08                push A
 011D 7C0000            xcall _EEPROM_Read
 0120 38FB              add SP,-5
 0122 62D000            mov REG[0xd0],>__r0
 0125 3900              cmp A,0
 0127 A005              jz L32
 0129                   .dbline 60
 0129 5000              mov A,0
 012B 8006              xjmp L31
 012D           L32:
 012D                   .dbline 62
 012D           ; 
 012D           ;       return TRUE;
 012D 62D000            mov REG[0xd0],>__r0
 0130 5001              mov A,1
 0132                   .dbline -2
 0132           L31:
 0132 38FE              add SP,-2
 0134 20                pop X
 0135                   .dbline 0 ; func end
 0135 7F                ret
 0136                   .dbsym l index 0 s
 0136                   .dbsym l n -6 c
 0136                   .dbsym l record -5 pS[.6]
 0136                   .dbend
 0136                   .dbfunc e Persist_SaveConfig _Persist_SaveConfig fc
 0136           ;         config -> X-5
 0136           _Persist_SaveConfig::
 0136                   .dbline -1
 0136 10                push X
 0137 4F                mov X,SP
 0138                   .dbline 67
 0138           ; }
 0138           ; 
 0138           ; // Saves config
 0138           ; BOOL Persist_SaveConfig(Config *config)
 0138           ; {
 0138                   .dbline 68
 0138           ;       if(EEPROM_Write((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
 0138 500B              mov A,11
 013A 08                push A
 013B 5000              mov A,0
 013D 08                push A
 013E 08                push A
 013F 52FB              mov A,[X-5]
 0141 08                push A
 0142 52FC              mov A,[X-4]
 0144 08                push A
 0145 7C0000            xcall _EEPROM_Write
 0148 38FB              add SP,-5
 014A 62D000            mov REG[0xd0],>__r0
 014D 3900              cmp A,0
 014F A005              jz L35
 0151                   .dbline 68
 0151 5000              mov A,0
 0153 8006              xjmp L34
 0155           L35:
 0155                   .dbline 70
 0155           ; 
 0155           ;       return TRUE;
 0155 62D000            mov REG[0xd0],>__r0
 0158 5001              mov A,1
 015A                   .dbline -2
 015A           L34:
 015A 20                pop X
 015B                   .dbline 0 ; func end
 015B 7F                ret
 015C                   .dbsym l config -5 pS[.3]
 015C                   .dbend
 015C                   .dbfunc e Persist_LoadConfig _Persist_LoadConfig fc
 015C           ;         config -> X-5
 015C           _Persist_LoadConfig::
 015C                   .dbline -1
 015C 10                push X
 015D 4F                mov X,SP
 015E                   .dbline 75
 015E           ; }
 015E           ; 
 015E           ; // Loads config.
 015E           ; BOOL Persist_LoadConfig(Config *config)
 015E           ; {
 015E                   .dbline 76
 015E           ;       if(EEPROM_Read((void*) config, 0, sizeof(Config)) != EEPROM_NOERROR) return FALSE;
 015E 500B              mov A,11
 0160 08                push A
 0161 5000              mov A,0
 0163 08                push A
 0164 08                push A
 0165 52FB              mov A,[X-5]
 0167 08                push A
 0168 52FC              mov A,[X-4]
 016A 08                push A
 016B 7C0000            xcall _EEPROM_Read
 016E 38FB              add SP,-5
 0170 62D000            mov REG[0xd0],>__r0
 0173 3900              cmp A,0
 0175 A005              jz L38
 0177                   .dbline 76
 0177 5000              mov A,0
 0179 8006              xjmp L37
 017B           L38:
 017B                   .dbline 78
 017B           ; 
 017B           ;       return TRUE;
 017B 62D000            mov REG[0xd0],>__r0
 017E 5001              mov A,1
 0180                   .dbline -2
 0180           L37:
 0180 20                pop X
 0181                   .dbline 0 ; func end
 0181 7F                ret
 0182                   .dbsym l config -5 pS[.3]
 0182                   .dbend
