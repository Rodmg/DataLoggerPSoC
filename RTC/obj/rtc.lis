 0000                   cpu LMM
                        .module rtc.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./rtc.c
 0000                   .dbfile C:\Users\Rod\Desktop\RTC\RTC\rtc.c
 0000                   .dbfunc e Rtc_Start _Rtc_Start fV
 0000           _Rtc_Start::
 0000                   .dbline -1
 0000                   .dbline 24
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "Rtc.h"
 0000           ; 
 0000           ; typedef union
 0000           ; {
 0000           ;       struct
 0000           ;       {
 0000           ;               BYTE OUT : 1;
 0000           ;               BYTE : 2;
 0000           ;               BYTE SQWE : 1;
 0000           ;               BYTE : 2;
 0000           ;               BYTE RS1 : 1;
 0000           ;               BYTE RS0 : 1;
 0000           ;       } bits;
 0000           ;       BYTE byte;
 0000           ; 
 0000           ; } ControlRegister;
 0000           ; 
 0000           ; DateTime datetime;
 0000           ; static ControlRegister cr;
 0000           ; 
 0000           ; void Rtc_Start(void)
 0000           ; {
 0000                   .dbline 25
 0000           ;       I2Cm_Start();
 0000 10                push X
 0001 7C0000            xcall _I2Cm_Start
 0004 20                pop X
 0005                   .dbline 28
 0005           ; 
 0005           ;       // Starts RTC clock
 0005           ;       datetime._00h.bits.CH = 0;
 0005 62D000            mov REG[0xd0],>_datetime
 0008 5100              mov A,[_datetime]
 000A 217F              and A,127
 000C 5300              mov [_datetime],A
 000E                   .dbline 29
 000E           ;       Rtc_WriteToRtc();
 000E 9037              xcall _Rtc_WriteToRtc
 0010 62D000            mov REG[0xd0],>__r0
 0013                   .dbline -2
 0013           L31:
 0013                   .dbline 0 ; func end
 0013 7F                ret
 0014                   .dbend
 0014                   .dbfunc e Rtc_Stop _Rtc_Stop fV
 0014           _Rtc_Stop::
 0014                   .dbline -1
 0014                   .dbline 33
 0014           ; }
 0014           ; 
 0014           ; void Rtc_Stop(void)
 0014           ; {
 0014                   .dbline 35
 0014           ;       // Stops RTC clock
 0014           ;       Rtc_ReadFromRtc();
 0014 9045              xcall _Rtc_ReadFromRtc
 0016                   .dbline 36
 0016           ;       datetime._00h.bits.CH = 1;
 0016 62D000            mov REG[0xd0],>_datetime
 0019 5100              mov A,[_datetime]
 001B 2980              or A,-128
 001D 5300              mov [_datetime],A
 001F                   .dbline 37
 001F           ;       Rtc_WriteToRtc();
 001F 9026              xcall _Rtc_WriteToRtc
 0021 62D000            mov REG[0xd0],>__r0
 0024                   .dbline 39
 0024           ; 
 0024           ;       I2Cm_Stop();
 0024 10                push X
 0025 7C0000            xcall _I2Cm_Stop
 0028 20                pop X
 0029                   .dbline -2
 0029           L32:
 0029                   .dbline 0 ; func end
 0029 7F                ret
 002A                   .dbend
 002A                   .dbfunc e Rtc_EnableSqw1Hz _Rtc_EnableSqw1Hz fV
 002A           _Rtc_EnableSqw1Hz::
 002A                   .dbline -1
 002A                   .dbline 43
 002A           ; }
 002A           ; 
 002A           ; void Rtc_EnableSqw1Hz(void)
 002A           ; {
 002A                   .dbline 44
 002A           ;       Rtc_GetSqwOutConfig();
 002A 9057              xcall _Rtc_GetSqwOutConfig
 002C                   .dbline 45
 002C           ;       cr.bits.SQWE = 1;
 002C 62D000            mov REG[0xd0],>_cr
 002F 5100              mov A,[_cr]
 0031 2910              or A,16
 0033 5300              mov [_cr],A
 0035                   .dbline 46
 0035           ;       cr.bits.RS0 = 0;
 0035 5100              mov A,[_cr]
 0037 21FE              and A,-2
 0039 5300              mov [_cr],A
 003B                   .dbline 47
 003B           ;       cr.bits.RS1 = 0;
 003B 5100              mov A,[_cr]
 003D 21FD              and A,-3
 003F 5300              mov [_cr],A
 0041                   .dbline 48
 0041           ;       Rtc_SetSqwOutConfig();
 0041 902C              xcall _Rtc_SetSqwOutConfig
 0043 62D000            mov REG[0xd0],>__r0
 0046                   .dbline -2
 0046           L33:
 0046                   .dbline 0 ; func end
 0046 7F                ret
 0047                   .dbend
 0047                   .dbfunc e Rtc_WriteToRtc _Rtc_WriteToRtc fc
 0047           _Rtc_WriteToRtc::
 0047                   .dbline -1
 0047                   .dbline 56
 0047           ; }
 0047           ; 
 0047           ; #define RTC_NOERROR 0x00
 0047           ; #define RTC_SLAVENOTACKADDRESS 0x01
 0047           ; #define RTC_SLAVENOTACKDATA 0x02
 0047           ; 
 0047           ; BYTE Rtc_WriteToRtc(void)
 0047           ; {
 0047                   .dbline 57
 0047           ;       return Rtc_WriteToRam(&datetime, 0x00, 7);
 0047 5007              mov A,7
 0049 08                push A
 004A 5000              mov A,0
 004C 08                push A
 004D 5000              mov A,>_datetime
 004F 08                push A
 0050 5000              mov A,<_datetime
 0052 08                push A
 0053 9047              xcall _Rtc_WriteToRam
 0055 38FC              add SP,-4
 0057 62D000            mov REG[0xd0],>__r0
 005A                   .dbline -2
 005A           L34:
 005A                   .dbline 0 ; func end
 005A 7F                ret
 005B                   .dbend
 005B                   .dbfunc e Rtc_ReadFromRtc _Rtc_ReadFromRtc fc
 005B           _Rtc_ReadFromRtc::
 005B                   .dbline -1
 005B                   .dbline 61
 005B           ; }
 005B           ; 
 005B           ; BYTE Rtc_ReadFromRtc(void)
 005B           ; {
 005B                   .dbline 62
 005B           ;       return Rtc_ReadFromRam(&datetime, 0x00, 7);
 005B 5007              mov A,7
 005D 08                push A
 005E 5000              mov A,0
 0060 08                push A
 0061 5000              mov A,>_datetime
 0063 08                push A
 0064 5000              mov A,<_datetime
 0066 08                push A
 0067 90A9              xcall _Rtc_ReadFromRam
 0069 38FC              add SP,-4
 006B 62D000            mov REG[0xd0],>__r0
 006E                   .dbline -2
 006E           L35:
 006E                   .dbline 0 ; func end
 006E 7F                ret
 006F                   .dbend
 006F                   .dbfunc e Rtc_SetSqwOutConfig _Rtc_SetSqwOutConfig fc
 006F           _Rtc_SetSqwOutConfig::
 006F                   .dbline -1
 006F                   .dbline 66
 006F           ; }
 006F           ; 
 006F           ; BYTE Rtc_SetSqwOutConfig(void)
 006F           ; {
 006F                   .dbline 67
 006F           ;       return Rtc_WriteToRam(&cr, 0x07, 1);
 006F 5001              mov A,1
 0071 08                push A
 0072 5007              mov A,7
 0074 08                push A
 0075 5000              mov A,>_cr
 0077 08                push A
 0078 5000              mov A,<_cr
 007A 08                push A
 007B 901F              xcall _Rtc_WriteToRam
 007D 38FC              add SP,-4
 007F 62D000            mov REG[0xd0],>__r0
 0082                   .dbline -2
 0082           L36:
 0082                   .dbline 0 ; func end
 0082 7F                ret
 0083                   .dbend
 0083                   .dbfunc e Rtc_GetSqwOutConfig _Rtc_GetSqwOutConfig fc
 0083           _Rtc_GetSqwOutConfig::
 0083                   .dbline -1
 0083                   .dbline 71
 0083           ; }
 0083           ; 
 0083           ; BYTE Rtc_GetSqwOutConfig(void)
 0083           ; {
 0083                   .dbline 72
 0083           ;       Rtc_ReadFromRam(&cr, 0x07, 1);
 0083 5001              mov A,1
 0085 08                push A
 0086 5007              mov A,7
 0088 08                push A
 0089 5000              mov A,>_cr
 008B 08                push A
 008C 5000              mov A,<_cr
 008E 08                push A
 008F 9081              xcall _Rtc_ReadFromRam
 0091 38FC              add SP,-4
 0093                   .dbline 73
 0093           ;       return cr.byte;
 0093 62D000            mov REG[0xd0],>_cr
 0096 5100              mov A,[_cr]
 0098 62D000            mov REG[0xd0],>__r0
 009B                   .dbline -2
 009B           L37:
 009B                   .dbline 0 ; func end
 009B 7F                ret
 009C                   .dbend
 009C                   .dbfunc e Rtc_WriteToRam _Rtc_WriteToRam fc
 009C           ;          error -> X+1
 009C           ;              i -> X+0
 009C           ;          count -> X-7
 009C           ;        address -> X-6
 009C           ;         buffer -> X-5
 009C           _Rtc_WriteToRam::
 009C                   .dbline -1
 009C 10                push X
 009D 4F                mov X,SP
 009E 3802              add SP,2
 00A0                   .dbline 77
 00A0           ; }
 00A0           ; 
 00A0           ; BYTE Rtc_WriteToRam(void* buffer, BYTE address, BYTE count)
 00A0           ; {
 00A0                   .dbline 78
 00A0           ;       BYTE error = RTC_NOERROR;
 00A0 560100            mov [X+1],0
 00A3                   .dbline 79
 00A3           ;       BYTE i = 0;
 00A3 560000            mov [X+0],0
 00A6                   .dbline 81
 00A6           ; 
 00A6           ;       if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
 00A6 10                push X
 00A7 5700              mov X,0
 00A9 5068              mov A,104
 00AB 7C0000            xcall _I2Cm_fSendStart
 00AE 20                pop X
 00AF 62D000            mov REG[0xd0],>__r0
 00B2 3900              cmp A,0
 00B4 A04C              jz L39
 00B6                   .dbline 83
 00B6           ;       {
 00B6           ;               if(I2Cm_fWrite(address) != 0)
 00B6                   .dbline 83
 00B6 10                push X
 00B7 52FA              mov A,[X-6]
 00B9 7C0000            xcall _I2Cm_fWrite
 00BC 20                pop X
 00BD 62D000            mov REG[0xd0],>__r0
 00C0 3900              cmp A,0
 00C2 A039              jz L41
 00C4                   .dbline 85
 00C4           ;               {
 00C4           ;                       for (i = 0; i < count; i++)
 00C4                   .dbline 85
 00C4 560000            mov [X+0],0
 00C7 802C              xjmp L46
 00C9           L43:
 00C9                   .dbline 86
 00C9           ;                       {
 00C9                   .dbline 87
 00C9           ;                               if(I2Cm_fWrite( *( (BYTE*)buffer+i ) ) == 0)
 00C9 62D000            mov REG[0xd0],>__r0
 00CC 5200              mov A,[X+0]
 00CE 5300              mov [__r1],A
 00D0 550000            mov [__r0],0
 00D3 52FC              mov A,[X-4]
 00D5 0400              add [__r1],A
 00D7 52FB              mov A,[X-5]
 00D9 0C00              adc [__r0],A
 00DB 5100              mov A,[__r0]
 00DD 60D4              mov REG[0xd4],A
 00DF 3E00              mvi A,[__r1]
 00E1 10                push X
 00E2 7C0000            xcall _I2Cm_fWrite
 00E5 20                pop X
 00E6 62D000            mov REG[0xd0],>__r0
 00E9 3900              cmp A,0
 00EB B006              jnz L47
 00ED                   .dbline 89
 00ED           ;                               {
 00ED           ;                                       error = RTC_SLAVENOTACKDATA;
 00ED                   .dbline 89
 00ED 560102            mov [X+1],2
 00F0                   .dbline 90
 00F0           ;                                       break;
 00F0 8013              xjmp L40
 00F2           L47:
 00F2                   .dbline 92
 00F2           ;                               }
 00F2           ;                       }
 00F2           L44:
 00F2                   .dbline 85
 00F2 7700              inc [X+0]
 00F4           L46:
 00F4                   .dbline 85
 00F4 5200              mov A,[X+0]
 00F6 3BF9              cmp A,[X-7]
 00F8 CFD0              jc L43
 00FA           X0:
 00FA                   .dbline 93
 00FA           ;               }
 00FA 8009              xjmp L40
 00FC           L41:
 00FC                   .dbline 95
 00FC           ;               else
 00FC           ;               {
 00FC                   .dbline 96
 00FC           ;                       error = RTC_SLAVENOTACKDATA;
 00FC 560102            mov [X+1],2
 00FF                   .dbline 97
 00FF           ;               }
 00FF                   .dbline 98
 00FF           ;       }
 00FF 8004              xjmp L40
 0101           L39:
 0101                   .dbline 100
 0101           ;       else
 0101           ;       {
 0101                   .dbline 101
 0101           ;               error = RTC_SLAVENOTACKADDRESS;
 0101 560101            mov [X+1],1
 0104                   .dbline 102
 0104           ;       }
 0104           L40:
 0104                   .dbline 104
 0104           ; 
 0104           ;       I2Cm_SendStop();
 0104 10                push X
 0105 7C0000            xcall _I2Cm_SendStop
 0108 20                pop X
 0109                   .dbline 106
 0109           ; 
 0109           ;       return error;
 0109 5201              mov A,[X+1]
 010B 62D000            mov REG[0xd0],>__r0
 010E                   .dbline -2
 010E           L38:
 010E 38FE              add SP,-2
 0110 20                pop X
 0111                   .dbline 0 ; func end
 0111 7F                ret
 0112                   .dbsym l error 1 c
 0112                   .dbsym l i 0 c
 0112                   .dbsym l count -7 c
 0112                   .dbsym l address -6 c
 0112                   .dbsym l buffer -5 pV
 0112                   .dbend
 0112                   .dbfunc e Rtc_ReadFromRam _Rtc_ReadFromRam fc
 0112           ;          error -> X+1
 0112           ;              i -> X+0
 0112           ;          count -> X-7
 0112           ;        address -> X-6
 0112           ;         buffer -> X-5
 0112           _Rtc_ReadFromRam::
 0112                   .dbline -1
 0112 10                push X
 0113 4F                mov X,SP
 0114 3802              add SP,2
 0116                   .dbline 110
 0116           ; }
 0116           ; 
 0116           ; BYTE Rtc_ReadFromRam(void* buffer, BYTE address, BYTE count)
 0116           ; {
 0116                   .dbline 111
 0116           ;       BYTE error = RTC_NOERROR;
 0116 560100            mov [X+1],0
 0119                   .dbline 112
 0119           ;       BYTE i = 0;
 0119 560000            mov [X+0],0
 011C                   .dbline 114
 011C           ; 
 011C           ;       if(I2Cm_fSendStart(RTC_I2C_ADDRESS, I2Cm_WRITE) != 0)
 011C 10                push X
 011D 5700              mov X,0
 011F 5068              mov A,104
 0121 7C0000            xcall _I2Cm_fSendStart
 0124 20                pop X
 0125 62D000            mov REG[0xd0],>__r0
 0128 3900              cmp A,0
 012A A080              jz L50
 012C                   .dbline 116
 012C           ;       {
 012C           ;               if(I2Cm_fWrite(address) != 0)
 012C                   .dbline 116
 012C 10                push X
 012D 52FA              mov A,[X-6]
 012F 7C0000            xcall _I2Cm_fWrite
 0132 20                pop X
 0133 62D000            mov REG[0xd0],>__r0
 0136 3900              cmp A,0
 0138 A06D              jz L52
 013A                   .dbline 118
 013A           ;               {
 013A           ;                       if(I2Cm_fSendRepeatStart(RTC_I2C_ADDRESS, I2Cm_READ) != 0)
 013A                   .dbline 118
 013A 10                push X
 013B 5701              mov X,1
 013D 5068              mov A,104
 013F 7C0000            xcall _I2Cm_fSendRepeatStart
 0142 20                pop X
 0143 62D000            mov REG[0xd0],>__r0
 0146 3900              cmp A,0
 0148 A058              jz L54
 014A                   .dbline 120
 014A           ;                       {
 014A           ;                               count--;
 014A                   .dbline 120
 014A 7BF9              dec [X-7]
 014C                   .dbline 121
 014C           ;                               for (i = 0; i < count; i++)
 014C 560000            mov [X+0],0
 014F 8026              xjmp L59
 0151           L56:
 0151                   .dbline 122
 0151           ;                               {
 0151                   .dbline 123
 0151           ;                                       *( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_ACKslave);
 0151 10                push X
 0152 5001              mov A,1
 0154 7C0000            xcall _I2Cm_bRead
 0157 20                pop X
 0158 62D000            mov REG[0xd0],>__r0
 015B 5300              mov [__r0],A
 015D 5200              mov A,[X+0]
 015F 5300              mov [__r3],A
 0161 550000            mov [__r2],0
 0164 52FC              mov A,[X-4]
 0166 0400              add [__r3],A
 0168 52FB              mov A,[X-5]
 016A 0C00              adc [__r2],A
 016C 5100              mov A,[__r2]
 016E 60D5              mov REG[0xd5],A
 0170 5100              mov A,[__r0]
 0172 3F00              mvi [__r3],A
 0174                   .dbline 124
 0174           ;                               }
 0174           L57:
 0174                   .dbline 121
 0174 7700              inc [X+0]
 0176           L59:
 0176                   .dbline 121
 0176 5200              mov A,[X+0]
 0178 3BF9              cmp A,[X-7]
 017A CFD6              jc L56
 017C           X1:
 017C                   .dbline 126
 017C           ; 
 017C           ;                               *( (BYTE*)buffer+i ) = I2Cm_bRead(I2Cm_NAKslave);
 017C 10                push X
 017D 5000              mov A,0
 017F 7C0000            xcall _I2Cm_bRead
 0182 20                pop X
 0183 62D000            mov REG[0xd0],>__r0
 0186 5300              mov [__r0],A
 0188 5200              mov A,[X+0]
 018A 5300              mov [__r3],A
 018C 550000            mov [__r2],0
 018F 52FC              mov A,[X-4]
 0191 0400              add [__r3],A
 0193 52FB              mov A,[X-5]
 0195 0C00              adc [__r2],A
 0197 5100              mov A,[__r2]
 0199 60D5              mov REG[0xd5],A
 019B 5100              mov A,[__r0]
 019D 3F00              mvi [__r3],A
 019F                   .dbline 127
 019F           ;                       }
 019F 800E              xjmp L51
 01A1           L54:
 01A1                   .dbline 129
 01A1           ;                       else
 01A1           ;                       {
 01A1                   .dbline 130
 01A1           ;                               error = RTC_SLAVENOTACKDATA;
 01A1 560102            mov [X+1],2
 01A4                   .dbline 131
 01A4           ;                       }
 01A4                   .dbline 132
 01A4           ;               }
 01A4 8009              xjmp L51
 01A6           L52:
 01A6                   .dbline 134
 01A6           ;               else
 01A6           ;               {
 01A6                   .dbline 135
 01A6           ;                       error = RTC_SLAVENOTACKDATA;
 01A6 560102            mov [X+1],2
 01A9                   .dbline 136
 01A9           ;               }
 01A9                   .dbline 137
 01A9           ;       }
 01A9 8004              xjmp L51
 01AB           L50:
 01AB                   .dbline 139
 01AB           ;       else
 01AB           ;       {
 01AB                   .dbline 140
 01AB           ;               error = RTC_SLAVENOTACKADDRESS;
 01AB 560101            mov [X+1],1
 01AE                   .dbline 141
 01AE           ;       }
 01AE           L51:
 01AE                   .dbline 143
 01AE           ; 
 01AE           ;       I2Cm_SendStop();
 01AE 10                push X
 01AF 7C0000            xcall _I2Cm_SendStop
 01B2 20                pop X
 01B3                   .dbline 145
 01B3           ; 
 01B3           ;       return error;
 01B3 5201              mov A,[X+1]
 01B5 62D000            mov REG[0xd0],>__r0
 01B8                   .dbline -2
 01B8           L49:
 01B8 38FE              add SP,-2
 01BA 20                pop X
 01BB                   .dbline 0 ; func end
 01BB 7F                ret
 01BC                   .dbsym l error 1 c
 01BC                   .dbsym l i 0 c
 01BC                   .dbsym l count -7 c
 01BC                   .dbsym l address -6 c
 01BC                   .dbsym l buffer -5 pV
 01BC                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Rod\Desktop\RTC\RTC\rtc.c
 0000           _cr:
 0000 00                .byte 0
 0001                   .dbstruct 0 1 .28
 0001                   .dbfield 0 OUT F[0:1]
 0001                   .dbfield 0 SQWE F[11:1]
 0001                   .dbfield 0 RS1 F[14:1]
 0001                   .dbfield 0 RS0 F[15:1]
 0001                   .dbend
 0001                   .dbunion 0 1 .27
 0001                   .dbfield 0 bits S[.28]
 0001                   .dbfield 0 byte c
 0001                   .dbend
 0001                   .dbsym s cr _cr S[.27]
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Rod\Desktop\RTC\RTC\rtc.c
 0000           _datetime::
 0000 0000000000000000  .byte 0,0,0,0,0,0,0,0
 0008                   .dbstruct 0 1 .3
 0008                   .dbfield 0 CH F[8:1]
 0008                   .dbfield 0 seconds10 F[1:3]
 0008                   .dbfield 0 seconds F[4:4]
 0008                   .dbend
 0008                   .dbunion 0 1 .2
 0008                   .dbfield 0 bits S[.3]
 0008                   .dbfield 0 byte c
 0008                   .dbend
 0008                   .dbstruct 0 1 .5
 0008                   .dbfield 0 minutes10 F[1:3]
 0008                   .dbfield 0 minutes F[4:4]
 0008                   .dbend
 0008                   .dbunion 0 1 .4
 0008                   .dbfield 0 bits S[.5]
 0008                   .dbfield 0 byte c
 0008                   .dbend
 0008                   .dbstruct 0 1 .8
 0008                   .dbfield 0 _1224hr F[1:1]
 0008                   .dbfield 0 hours10 F[2:2]
 0008                   .dbfield 0 hours F[4:4]
 0008                   .dbend
 0008                   .dbstruct 0 1 .10
 0008                   .dbfield 0 _1224hr F[1:1]
 0008                   .dbfield 0 ampm F[2:1]
 0008                   .dbfield 0 hours10 F[3:1]
 0008                   .dbfield 0 hours F[4:4]
 0008                   .dbend
 0008                   .dbunion 0 1 .7
 0008                   .dbfield 0 bits_24hrs S[.8]
 0008                   .dbfield 0 bits_ampm S[.10]
 0008                   .dbfield 0 byte c
 0008                   .dbend
 0008                   .dbstruct 0 1 .13
 0008                   .dbfield 0 day F[5:3]
 0008                   .dbend
 0008                   .dbunion 0 1 .12
 0008                   .dbfield 0 bits S[.13]
 0008                   .dbfield 0 byte c
 0008                   .dbend
 0008                   .dbstruct 0 1 .16
 0008                   .dbfield 0 date10 F[2:2]
 0008                   .dbfield 0 date F[4:4]
 0008                   .dbend
 0008                   .dbunion 0 1 .15
 0008                   .dbfield 0 bits S[.16]
 0008                   .dbfield 0 byte c
 0008                   .dbend
 0008                   .dbstruct 0 1 .19
 0008                   .dbfield 0 month10 F[3:1]
 0008                   .dbfield 0 month F[4:4]
 0008                   .dbend
 0008                   .dbunion 0 1 .18
 0008                   .dbfield 0 bits S[.19]
 0008                   .dbfield 0 byte c
 0008                   .dbend
 0008                   .dbstruct 0 1 .22
 0008                   .dbfield 0 year10 F[0:4]
 0008                   .dbfield 0 year F[4:4]
 0008                   .dbend
 0008                   .dbunion 0 1 .21
 0008                   .dbfield 0 bits S[.22]
 0008                   .dbfield 0 byte c
 0008                   .dbend
 0008                   .dbstruct 0 1 .24
 0008                   .dbfield 0 out F[0:1]
 0008                   .dbfield 0 sqwe F[3:1]
 0008                   .dbfield 0 rs F[6:2]
 0008                   .dbend
 0008                   .dbunion 0 1 .23
 0008                   .dbfield 0 bits S[.24]
 0008                   .dbfield 0 byte c
 0008                   .dbend
 0008                   .dbstruct 0 8 .1
 0008                   .dbfield 0 _00h S[.2]
 0008                   .dbfield 1 _01h S[.4]
 0008                   .dbfield 2 _02h S[.7]
 0008                   .dbfield 3 _03h S[.12]
 0008                   .dbfield 4 _04h S[.15]
 0008                   .dbfield 5 _05h S[.18]
 0008                   .dbfield 6 _06h S[.21]
 0008                   .dbfield 7 _07h S[.23]
 0008                   .dbend
 0008                   .dbsym e datetime _datetime S[.1]
